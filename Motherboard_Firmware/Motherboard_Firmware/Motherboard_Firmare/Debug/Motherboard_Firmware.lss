
Motherboard_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  0000d060  0000d0f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000d060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  00800310  00800310  0000d204  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ff8  00000000  00000000  0000d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ea0c  00000000  00000000  0000e298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004408  00000000  00000000  0002cca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ad59  00000000  00000000  000310ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003ed0  00000000  00000000  0003be08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d40  00000000  00000000  0003fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008789  00000000  00000000  00046a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ed0  00000000  00000000  0004f1a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__dtors_end>
       4:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
       8:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
       c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      10:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      14:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      18:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      1c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      20:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      24:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      28:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      2c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      30:	0c 94 44 5c 	jmp	0xb888	; 0xb888 <__vector_12>
      34:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      38:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      3c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      40:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      44:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      48:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      4c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      50:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      54:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      58:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      5c:	0c 94 f0 42 	jmp	0x85e0	; 0x85e0 <__vector_23>
      60:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      64:	0c 94 78 3e 	jmp	0x7cf0	; 0x7cf0 <__vector_25>
      68:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <__vector_26>
      6c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      70:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      74:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      78:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      7c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      80:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      84:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      88:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      8c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      90:	0c 94 36 3f 	jmp	0x7e6c	; 0x7e6c <__vector_36>
      94:	0c 94 6a 3f 	jmp	0x7ed4	; 0x7ed4 <__vector_37>
      98:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      9c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      a0:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      a4:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      a8:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      ac:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      b0:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      b4:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      b8:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      bc:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      c0:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      c4:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      c8:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      cc:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      d0:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      d4:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      d8:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      dc:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      e0:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__bad_interrupt>
      e4:	de 2b       	or	r29, r30
      e6:	f1 2b       	or	r31, r17
      e8:	04 2c       	mov	r0, r4
      ea:	17 2c       	mov	r1, r7
      ec:	2a 2c       	mov	r2, r10
      ee:	3d 2c       	mov	r3, r13
      f0:	50 2c       	mov	r5, r0
      f2:	63 2c       	mov	r6, r3
      f4:	3a 46       	sbci	r19, 0x6A	; 106
      f6:	44 46       	sbci	r20, 0x64	; 100
      f8:	1c 46       	sbci	r17, 0x6C	; 108
      fa:	26 46       	sbci	r18, 0x66	; 102
      fc:	30 46       	sbci	r19, 0x60	; 96
      fe:	bc 46       	sbci	r27, 0x6C	; 108
     100:	4e 46       	sbci	r20, 0x6E	; 110
     102:	58 46       	sbci	r21, 0x68	; 104
     104:	62 46       	sbci	r22, 0x62	; 98
     106:	6c 46       	sbci	r22, 0x6C	; 108
     108:	76 46       	sbci	r23, 0x66	; 102
     10a:	80 46       	sbci	r24, 0x60	; 96
     10c:	8a 46       	sbci	r24, 0x6A	; 106
     10e:	94 46       	sbci	r25, 0x64	; 100
     110:	bc 46       	sbci	r27, 0x6C	; 108
     112:	9e 46       	sbci	r25, 0x6E	; 110
     114:	a8 46       	sbci	r26, 0x68	; 104
     116:	b2 46       	sbci	r27, 0x62	; 98
     118:	69 54       	subi	r22, 0x49	; 73
     11a:	69 54       	subi	r22, 0x49	; 73
     11c:	69 54       	subi	r22, 0x49	; 73
     11e:	b4 54       	subi	r27, 0x44	; 68
     120:	c0 54       	subi	r28, 0x40	; 64
     122:	e6 54       	subi	r30, 0x46	; 70
     124:	69 54       	subi	r22, 0x49	; 73
     126:	69 54       	subi	r22, 0x49	; 73
     128:	b4 54       	subi	r27, 0x44	; 68
     12a:	c0 54       	subi	r28, 0x40	; 64

0000012c <__trampolines_end>:
     12c:	44 69       	ori	r20, 0x94	; 148
     12e:	61 6d       	ori	r22, 0xD1	; 209
     130:	65 74       	andi	r22, 0x45	; 69
     132:	65 72       	andi	r22, 0x25	; 37
     134:	3a 20       	and	r3, r10
     136:	31 2e       	mov	r3, r17
     138:	37 00       	.word	0x0037	; ????

0000013a <_ZL4font>:
     13a:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     14a:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     15a:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     16a:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     17a:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     18a:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     19a:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1aa:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1ba:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1ca:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1da:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1ea:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1fa:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     20a:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     21a:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     22a:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     23a:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     24a:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     25a:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     26a:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     27a:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     28a:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     29a:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2aa:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2ba:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2ca:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2da:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2ea:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2fa:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     30a:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     31a:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     32a:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     33a:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     34a:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     35a:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     36a:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     37a:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     38a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     39a:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3aa:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3ba:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3ca:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     3da:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3ea:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3fa:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     40a:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     41a:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     42a:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     43a:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     44a:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     45a:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     46a:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     47a:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     48a:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     49a:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4aa:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     4ba:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     4ca:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     4da:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     4ea:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     4fa:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     50a:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     51a:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     52a:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     53a:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     54a:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     55a:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     56a:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     57a:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     58a:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     59a:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     5aa:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     5ba:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     5ca:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     5da:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     5ea:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     5fa:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     60a:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     61a:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     62a:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000635 <widtbl_f16>:
     635:	06 03 04 09 08 09 09 03 07 07 08 06 03 06 05 07     ................
     645:	08 08 08 08 08 08 08 08 08 08 03 03 06 06 06 08     ................
     655:	09 08 08 08 08 08 08 08 08 04 08 08 07 0a 08 08     ................
     665:	08 08 08 08 08 08 08 0a 08 08 08 04 07 04 07 09     ................
     675:	04 07 07 07 07 07 06 07 07 04 05 06 04 08 07 08     ................
     685:	07 08 06 06 05 07 08 08 06 07 07 05 03 05 08 06     ................

00000695 <_ZL10chr_f16_20>:
	...

000006a5 <_ZL10chr_f16_21>:
     6a5:	00 00 00 40 40 40 40 40 40 40 40 00 40 00 00 00     ...@@@@@@@@.@...

000006b5 <_ZL10chr_f16_22>:
     6b5:	00 00 a0 a0 a0 00 00 00 00 00 00 00 00 00 00 00     ................

000006c5 <_ZL10chr_f16_23>:
     6c5:	00 00 00 24 24 24 ff 24 24 ff 24 24 24 00 00 00     ...$$$.$$.$$$...

000006d5 <_ZL10chr_f16_24>:
     6d5:	00 00 00 3c 42 40 40 70 40 70 40 40 fe 00 00 00     ...<B@@p@p@@....

000006e5 <_ZL10chr_f16_25>:
     6e5:	00 00 00 61 91 92 64 08 10 26 49 89 86 00 00 00     ...a..d..&I.....

000006f5 <_ZL10chr_f16_26>:
     6f5:	00 00 00 20 50 88 88 50 20 52 8c 8c 73 00 00 00     ... P..P R..s...

00000705 <_ZL10chr_f16_27>:
     705:	00 00 40 40 40 80 00 00 00 00 00 00 00 00 00 00     ..@@@...........

00000715 <_ZL10chr_f16_28>:
     715:	00 0c 10 20 40 40 80 80 80 80 80 40 40 20 10 0c     ... @@.....@@ ..

00000725 <_ZL10chr_f16_29>:
     725:	00 c0 20 10 08 08 04 04 04 04 04 08 08 10 20 c0     .. ........... .

00000735 <_ZL10chr_f16_2A>:
     735:	00 00 00 00 10 92 54 38 54 92 10 00 00 00 00 00     ......T8T.......

00000745 <_ZL10chr_f16_2B>:
     745:	00 00 00 00 00 00 20 20 f8 20 20 00 00 00 00 00     ......  .  .....

00000755 <_ZL10chr_f16_2C>:
	...
     75d:	00 00 00 c0 c0 40 80 00                             .....@..

00000765 <_ZL10chr_f16_2D>:
	...
     76d:	f8 00 00 00 00 00 00 00                             ........

00000775 <_ZL10chr_f16_2E>:
	...
     77d:	00 00 00 c0 c0 00 00 00                             ........

00000785 <_ZL10chr_f16_2F>:
     785:	00 00 04 04 08 08 10 10 20 20 40 40 80 80 00 00     ........  @@....

00000795 <_ZL10chr_f16_30>:
     795:	00 00 00 38 44 44 82 82 82 82 44 44 38 00 00 00     ...8DD....DD8...

000007a5 <_ZL10chr_f16_31>:
     7a5:	00 00 00 10 30 50 10 10 10 10 10 10 7c 00 00 00     ....0P......|...

000007b5 <_ZL10chr_f16_32>:
     7b5:	00 00 00 38 44 82 02 04 18 20 40 80 fe 00 00 00     ...8D.... @.....

000007c5 <_ZL10chr_f16_33>:
     7c5:	00 00 00 78 84 02 04 38 04 02 02 84 78 00 00 00     ...x...8....x...

000007d5 <_ZL10chr_f16_34>:
     7d5:	00 00 00 04 0c 14 24 44 84 fe 04 04 04 00 00 00     ......$D........

000007e5 <_ZL10chr_f16_35>:
     7e5:	00 00 00 fc 80 80 80 f8 04 02 02 84 78 00 00 00     ............x...

000007f5 <_ZL10chr_f16_36>:
     7f5:	00 00 00 3c 40 80 80 b8 c4 82 82 44 38 00 00 00     ...<@......D8...

00000805 <_ZL10chr_f16_37>:
     805:	00 00 00 7e 02 02 04 04 08 08 10 10 10 00 00 00     ...~............

00000815 <_ZL10chr_f16_38>:
     815:	00 00 00 38 44 82 44 38 44 82 82 44 38 00 00 00     ...8D.D8D..D8...

00000825 <_ZL10chr_f16_39>:
     825:	00 00 00 38 44 82 82 46 3a 02 02 04 78 00 00 00     ...8D..F:...x...

00000835 <_ZL10chr_f16_3A>:
     835:	00 00 00 00 00 00 c0 c0 00 c0 c0 00 00 00 00 00     ................

00000845 <_ZL10chr_f16_3B>:
     845:	00 00 00 00 00 00 c0 c0 00 c0 c0 40 80 00 00 00     ...........@....

00000855 <_ZL10chr_f16_3C>:
     855:	00 00 00 00 08 10 20 40 80 40 20 10 08 00 00 00     ...... @.@ .....

00000865 <_ZL10chr_f16_3D>:
     865:	00 00 00 00 00 00 00 f8 00 f8 00 00 00 00 00 00     ................

00000875 <_ZL10chr_f16_3E>:
     875:	00 00 00 00 80 40 20 10 08 10 20 40 80 00 00 00     .....@ ... @....

00000885 <_ZL10chr_f16_3F>:
     885:	00 00 00 38 44 82 02 04 08 10 10 00 10 00 00 00     ...8D...........

00000895 <_ZL10chr_f16_40>:
     895:	00 00 00 3c 42 99 a5 a5 a5 a5 9e 40 3e 00 00 00     ...<B......@>...

000008a5 <_ZL10chr_f16_41>:
     8a5:	00 00 00 10 10 28 28 44 44 7c 82 82 82 00 00 00     .....((DD|......

000008b5 <_ZL10chr_f16_42>:
     8b5:	00 00 00 f8 84 82 84 f8 84 82 82 84 f8 00 00 00     ................

000008c5 <_ZL10chr_f16_43>:
     8c5:	00 00 00 3c 42 80 80 80 80 80 80 42 3c 00 00 00     ...<B......B<...

000008d5 <_ZL10chr_f16_44>:
     8d5:	00 00 00 f8 84 82 82 82 82 82 82 84 f8 00 00 00     ................

000008e5 <_ZL10chr_f16_45>:
     8e5:	00 00 00 fe 80 80 80 fc 80 80 80 80 fe 00 00 00     ................

000008f5 <_ZL10chr_f16_46>:
     8f5:	00 00 00 fe 80 80 80 f8 80 80 80 80 80 00 00 00     ................

00000905 <_ZL10chr_f16_47>:
     905:	00 00 00 3c 42 80 80 80 9c 82 82 42 3c 00 00 00     ...<B......B<...

00000915 <_ZL10chr_f16_48>:
     915:	00 00 00 84 84 84 84 fc 84 84 84 84 84 00 00 00     ................

00000925 <_ZL10chr_f16_49>:
     925:	00 00 00 e0 40 40 40 40 40 40 40 40 e0 00 00 00     ....@@@@@@@@....

00000935 <_ZL10chr_f16_4A>:
     935:	00 00 00 02 02 02 02 02 02 02 82 44 38 00 00 00     ...........D8...

00000945 <_ZL10chr_f16_4B>:
     945:	00 00 00 84 88 90 a0 c0 a0 90 88 84 82 00 00 00     ................

00000955 <_ZL10chr_f16_4C>:
     955:	00 00 00 80 80 80 80 80 80 80 80 80 fc 00 00 00     ................

00000965 <_ZL10chr_f16_4D>:
     965:	00 00 00 00 00 00 c1 80 c1 80 a2 80 a2 80 94 80     ................
     975:	94 80 88 80 88 80 80 80 80 80 00 00 00 00 00 00     ................

00000985 <_ZL10chr_f16_4E>:
     985:	00 00 00 c2 c2 a2 a2 92 92 8a 8a 86 86 00 00 00     ................

00000995 <_ZL10chr_f16_4F>:
     995:	00 00 00 38 44 82 82 82 82 82 82 44 38 00 00 00     ...8D......D8...

000009a5 <_ZL10chr_f16_50>:
     9a5:	00 00 00 f8 84 82 82 82 84 f8 80 80 80 00 00 00     ................

000009b5 <_ZL10chr_f16_51>:
     9b5:	00 00 00 38 44 82 82 82 82 82 82 44 38 08 06 00     ...8D......D8...

000009c5 <_ZL10chr_f16_52>:
     9c5:	00 00 00 f8 84 82 82 84 f8 90 88 84 82 00 00 00     ................

000009d5 <_ZL10chr_f16_53>:
     9d5:	00 00 00 38 44 82 80 60 1c 02 82 44 38 00 00 00     ...8D..`...D8...

000009e5 <_ZL10chr_f16_54>:
     9e5:	00 00 00 fe 10 10 10 10 10 10 10 10 10 00 00 00     ................

000009f5 <_ZL10chr_f16_55>:
     9f5:	00 00 00 82 82 82 82 82 82 82 82 44 38 00 00 00     ...........D8...

00000a05 <_ZL10chr_f16_56>:
     a05:	00 00 00 82 82 82 82 44 44 28 28 10 10 00 00 00     .......DD((.....

00000a15 <_ZL10chr_f16_57>:
     a15:	00 00 00 00 00 00 80 80 80 80 80 80 88 80 88 80     ................
     a25:	49 00 55 00 55 00 22 00 22 00 00 00 00 00 00 00     I.U.U.".".......

00000a35 <_ZL10chr_f16_58>:
     a35:	00 00 00 82 82 44 28 10 10 28 44 82 82 00 00 00     .....D(..(D.....

00000a45 <_ZL10chr_f16_59>:
     a45:	00 00 00 82 82 82 44 28 10 10 10 10 10 00 00 00     ......D(........

00000a55 <_ZL10chr_f16_5A>:
     a55:	00 00 00 fe 02 04 08 10 10 20 40 80 fe 00 00 00     ......... @.....

00000a65 <_ZL10chr_f16_5B>:
     a65:	00 00 e0 80 80 80 80 80 80 80 80 80 80 e0 00 00     ................

00000a75 <_ZL10chr_f16_5C>:
     a75:	00 00 04 04 08 08 10 10 20 20 40 40 80 80 00 00     ........  @@....

00000a85 <_ZL10chr_f16_5D>:
     a85:	00 00 e0 20 20 20 20 20 20 20 20 20 20 e0 00 00     ...          ...

00000a95 <_ZL10chr_f16_5E>:
     a95:	00 10 28 44 00 00 00 00 00 00 00 00 00 00 00 00     ..(D............
	...

00000ab5 <_ZL10chr_f16_5F>:
	...
     ac1:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ad1:	00 00 00 00                                         ....

00000ad5 <_ZL10chr_f16_60>:
     ad5:	00 00 00 40 40 40 20 00 00 00 00 00 00 00 00 00     ...@@@ .........

00000ae5 <_ZL10chr_f16_61>:
     ae5:	00 00 00 00 00 00 70 08 04 74 8c 8c 74 00 00 00     ......p..t..t...

00000af5 <_ZL10chr_f16_62>:
     af5:	00 00 00 00 80 80 b0 c8 84 84 84 c8 b0 00 00 00     ................

00000b05 <_ZL10chr_f16_63>:
     b05:	00 00 00 00 00 00 38 44 80 80 80 44 38 00 00 00     ......8D...D8...

00000b15 <_ZL10chr_f16_64>:
     b15:	00 00 00 00 04 04 34 4c 84 84 84 4c 34 00 00 00     ......4L...L4...

00000b25 <_ZL10chr_f16_65>:
     b25:	00 00 00 00 00 00 38 44 84 f8 80 44 38 00 00 00     ......8D...D8...

00000b35 <_ZL10chr_f16_66>:
     b35:	00 00 00 30 48 40 40 40 e0 40 40 40 40 00 00 00     ...0H@@@.@@@@...

00000b45 <_ZL10chr_f16_67>:
     b45:	00 00 00 00 00 00 30 4c 84 84 84 4c 34 04 08 70     ......0L...L4..p

00000b55 <_ZL10chr_f16_68>:
     b55:	00 00 00 80 80 80 b0 c8 84 84 84 84 84 00 00 00     ................

00000b65 <_ZL10chr_f16_69>:
     b65:	00 00 00 00 40 00 40 40 40 40 40 40 40 00 00 00     ....@.@@@@@@@...

00000b75 <_ZL10chr_f16_6A>:
     b75:	00 00 00 00 10 00 30 10 10 10 10 10 10 10 90 60     ......0........`

00000b85 <_ZL10chr_f16_6B>:
     b85:	00 00 00 80 80 80 88 90 a0 c0 a0 90 88 00 00 00     ................

00000b95 <_ZL10chr_f16_6C>:
     b95:	00 00 00 c0 40 40 40 40 40 40 40 40 40 00 00 00     ....@@@@@@@@@...

00000ba5 <_ZL10chr_f16_6D>:
     ba5:	00 00 00 00 00 00 ac d2 92 92 92 92 92 00 00 00     ................

00000bb5 <_ZL10chr_f16_6E>:
     bb5:	00 00 00 00 00 00 b0 c8 84 84 84 84 84 00 00 00     ................

00000bc5 <_ZL10chr_f16_6F>:
     bc5:	00 00 00 00 00 00 38 44 82 82 82 44 38 00 00 00     ......8D...D8...

00000bd5 <_ZL10chr_f16_70>:
     bd5:	00 00 00 00 00 00 b0 c8 84 84 84 c8 b0 80 80 80     ................

00000be5 <_ZL10chr_f16_71>:
     be5:	00 00 00 00 00 00 34 4c 84 84 84 4c 34 04 04 06     ......4L...L4...

00000bf5 <_ZL10chr_f16_72>:
     bf5:	00 00 00 00 00 00 b0 c8 80 80 80 80 80 00 00 00     ................

00000c05 <_ZL10chr_f16_73>:
     c05:	00 00 00 00 00 00 70 88 80 70 08 88 70 00 00 00     ......p..p..p...

00000c15 <_ZL10chr_f16_74>:
     c15:	00 00 00 00 40 40 e0 40 40 40 40 40 30 00 00 00     ....@@.@@@@@0...

00000c25 <_ZL10chr_f16_75>:
     c25:	00 00 00 00 00 00 84 84 84 84 84 4c 34 00 00 00     ...........L4...

00000c35 <_ZL10chr_f16_76>:
     c35:	00 00 00 00 00 00 82 82 82 82 44 28 10 00 00 00     ..........D(....

00000c45 <_ZL10chr_f16_77>:
     c45:	00 00 00 00 00 00 82 82 82 92 92 aa 44 00 00 00     ............D...

00000c55 <_ZL10chr_f16_78>:
     c55:	00 00 00 00 00 00 88 88 50 20 50 88 88 00 00 00     ........P P.....

00000c65 <_ZL10chr_f16_79>:
     c65:	00 00 00 00 00 00 84 84 84 84 84 4c 34 04 08 70     ...........L4..p

00000c75 <_ZL10chr_f16_7A>:
     c75:	00 00 00 00 00 00 fc 04 08 30 40 80 fc 00 00 00     .........0@.....

00000c85 <_ZL10chr_f16_7B>:
     c85:	00 10 20 20 20 20 20 20 40 20 20 20 20 20 20 10     ..      @      .

00000c95 <_ZL10chr_f16_7C>:
     c95:	00 00 40 40 40 40 40 40 40 40 40 40 40 40 40 00     ..@@@@@@@@@@@@@.

00000ca5 <_ZL10chr_f16_7D>:
     ca5:	00 40 20 20 20 20 20 20 10 20 20 20 20 20 20 40     .@      .      @

00000cb5 <_ZL10chr_f16_7E>:
     cb5:	00 00 00 32 4c 00 00 00 00 00 00 00 00 00 00 00     ...2L...........

00000cc5 <_ZL10chr_f16_7F>:
     cc5:	00 00 30 48 48 30 00 00 00 00 00 00 00 00 00 00     ..0HH0..........

00000cd5 <chrtbl_f16>:
     cd5:	95 06 a5 06 b5 06 c5 06 d5 06 e5 06 f5 06 05 07     ................
     ce5:	15 07 25 07 35 07 45 07 55 07 65 07 75 07 85 07     ..%.5.E.U.e.u...
     cf5:	95 07 a5 07 b5 07 c5 07 d5 07 e5 07 f5 07 05 08     ................
     d05:	15 08 25 08 35 08 45 08 55 08 65 08 75 08 85 08     ..%.5.E.U.e.u...
     d15:	95 08 a5 08 b5 08 c5 08 d5 08 e5 08 f5 08 05 09     ................
     d25:	15 09 25 09 35 09 45 09 55 09 65 09 85 09 95 09     ..%.5.E.U.e.....
     d35:	a5 09 b5 09 c5 09 d5 09 e5 09 f5 09 05 0a 15 0a     ................
     d45:	35 0a 45 0a 55 0a 65 0a 75 0a 85 0a 95 0a b5 0a     5.E.U.e.u.......
     d55:	d5 0a e5 0a f5 0a 05 0b 15 0b 25 0b 35 0b 45 0b     ..........%.5.E.
     d65:	55 0b 65 0b 75 0b 85 0b 95 0b a5 0b b5 0b c5 0b     U.e.u...........
     d75:	d5 0b e5 0b f5 0b 05 0c 15 0c 25 0c 35 0c 45 0c     ..........%.5.E.
     d85:	55 0c 65 0c 75 0c 85 0c 95 0c a5 0c b5 0c c5 0c     U.e.u...........

00000d95 <widtbl_f32>:
     d95:	05 08 08 13 0e 15 11 06 08 08 0c 0a 07 08 07 08     ................
     da5:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 07 0e 09 0e 0d     ................
     db5:	19 10 11 12 12 10 0f 13 12 06 0d 11 0d 15 12 13     ................
     dc5:	10 13 11 10 0e 12 0f 17 0f 10 10 09 0d 09 0c 0d     ................
     dd5:	09 0e 0f 0d 0f 0e 08 0f 0f 06 06 0c 06 16 0f 0f     ................
     de5:	0f 0f 08 0c 07 0e 0c 12 0d 0d 0c 0d 0d 0d 0f 01     ................

00000df5 <_ZL10chr_f32_20>:
     df5:	7f 01                                               ..

00000df7 <_ZL10chr_f32_21>:
     df7:	0a 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
     e07:	05 81 05 81 05 81 05 81 05 81 15 81 05 81 05 81     ................
     e17:	3a                                                  :

00000e18 <_ZL10chr_f32_22>:
     e18:	09 80 01 80 03 80 01 80 03 80 01 80 03 80 01 80     ................
     e28:	03 80 01 80 03 80 01 80 03 80 01 80 7f 11           ..............

00000e36 <_ZL10chr_f32_23>:
     e36:	2e 81 01 81 0c 80 02 80 0d 80 02 80 0c 81 01 81     ................
     e46:	0c 80 02 80 0d 80 02 80 08 8d 08 80 02 80 0d 80     ................
     e56:	02 80 0d 80 02 80 08 8d 08 80 02 80 0d 80 02 80     ................
     e66:	0c 81 01 81 0c 80 02 80 0d 80 02 80 0c 81 01 81     ................
     e76:	7f 0d                                               ..

00000e78 <_ZL10chr_f32_24>:
     e78:	1f 85 05 89 03 82 03 82 02 81 07 81 01 81 07 81     ................
     e88:	01 81 0b 82 0b 81 0a 87 07 81 0b 81 0b 81 0b 81     ................
     e98:	0a 81 0b 86 02 80 01 8b 01 81 04 83 63              ............c

00000ea5 <_ZL10chr_f32_25>:
     ea5:	2d 82 07 81 05 86 05 80 06 81 02 81 04 81 05 81     -...............
     eb5:	04 81 02 81 06 81 04 81 02 80 07 81 04 81 01 81     ................
     ec5:	08 81 02 81 02 80 09 86 01 80 0c 82 02 81 02 82     ................
     ed5:	0c 80 01 86 09 80 02 81 02 81 08 81 01 81 04 81     ................
     ee5:	07 80 02 81 04 81 06 81 02 81 04 81 05 81 04 81     ................
     ef5:	02 81 06 80 05 86 05 81 07 82 07 80 7f 0c           ..............

00000f03 <_ZL10chr_f32_26>:
     f03:	15 84 0a 86 08 82 02 82 07 81 04 81 07 81 04 81     ................
     f13:	07 81 03 82 08 81 01 82 0a 84 0a 83 0b 85 03 81     ................
     f23:	03 82 01 82 02 81 02 82 03 82 01 81 02 81 05 84     ................
     f33:	03 81 06 83 03 81 07 81 04 82 04 85 03 88 01 82     ................
     f43:	03 85 04 82 76                                      ....v

00000f48 <_ZL10chr_f32_27>:
     f48:	06 82 02 82 02 82 04 80 03 81 02 81 74              ............t

00000f55 <_ZL10chr_f32_28>:
     f55:	0d 81 05 80 05 81 05 80 05 81 05 81 05 81 04 81     ................
     f65:	05 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
     f75:	05 81 06 81 05 81 05 81 06 80 06 81 06 80 06 81     ................
     f85:	07                                                  .

00000f86 <_ZL10chr_f32_29>:
     f86:	07 81 06 80 06 81 06 80 06 81 05 81 05 81 06 81     ................
     f96:	05 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
     fa6:	05 81 04 81 05 81 05 81 05 80 05 81 05 80 05 81     ................
     fb6:	0d                                                  .

00000fb7 <_ZL10chr_f32_2A>:
     fb7:	10 81 09 81 09 81 06 80 01 81 01 80 02 89 03 85     ................
     fc7:	06 83 06 81 01 81 04 82 01 82 04 80 03 80 7f 36     ...............6

00000fd7 <_ZL10chr_f32_2B>:
     fd7:	53 81 07 81 07 81 04 87 01 87 04 81 07 81 07 81     S...............
     fe7:	67                                                  g

00000fe8 <_ZL10chr_f32_2C>:
     fe8:	71 82 03 82 03 82 05 80 04 81 04 80 04 81 17        q..............

00000ff7 <_ZL10chr_f32_2D>:
     ff7:	58 85 01 85 68                                      X...h

00000ffc <_ZL10chr_f32_2E>:
     ffc:	71 82 03 82 03 82 32                                q.....2

00001003 <_ZL10chr_f32_2F>:
    1003:	0d 81 05 81 05 80 05 81 05 81 05 80 05 81 05 81     ................
    1013:	05 80 05 81 05 81 05 80 05 81 05 81 05 80 05 81     ................
    1023:	05 81 05 80 05 81 05 81 2d                          ........-

0000102c <_ZL10chr_f32_30>:
    102c:	20 83 07 87 04 83 01 83 03 81 05 81 02 82 05 82      ...............
    103c:	01 81 07 81 01 81 07 81 01 81 07 81 01 81 07 81     ................
    104c:	01 81 07 81 01 81 07 81 01 81 07 81 01 82 05 82     ................
    105c:	02 81 05 81 03 83 01 83 04 87 07 83 66              ............f

00001069 <_ZL10chr_f32_31>:
    1069:	22 81 0b 81 0a 82 07 85 07 85 0b 81 0b 81 0b 81     "...............
    1079:	0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81     ................
    1089:	0b 81 66                                            ..f

0000108c <_ZL10chr_f32_32>:
    108c:	1f 85 05 89 03 82 03 82 02 82 06 81 01 81 07 81     ................
    109c:	01 81 07 81 0b 81 0a 82 08 83 07 84 06 84 07 83     ................
    10ac:	08 82 09 82 0a 81 0b 8b 01 8b 62                    ..........b

000010b7 <_ZL10chr_f32_33>:
    10b7:	1f 85 06 87 04 82 03 82 03 81 05 81 02 82 05 81     ................
    10c7:	0b 81 0a 82 07 84 08 85 0b 82 0b 81 01 81 07 81     ................
    10d7:	01 81 07 81 01 82 05 82 02 82 03 82 03 89 05 85     ................
    10e7:	65                                                  e

000010e8 <_ZL10chr_f32_34>:
    10e8:	24 81 0a 82 09 83 09 83 08 81 00 81 07 81 01 81     $...............
    10f8:	06 81 02 81 06 81 02 81 05 81 03 81 04 81 04 81     ................
    1108:	03 81 05 81 03 8b 01 8b 09 81 0b 81 0b 81 0b 81     ................
    1118:	64                                                  d

00001119 <_ZL10chr_f32_35>:
    1119:	1d 89 03 89 03 81 0b 81 0b 81 0b 81 00 84 05 89     ................
    1129:	02 83 03 82 02 81 06 82 0b 81 0b 81 0b 81 01 81     ................
    1139:	07 81 01 82 05 82 02 82 03 82 03 89 05 85 65        ..............e

00001148 <_ZL10chr_f32_36>:
    1148:	20 84 06 88 03 82 04 81 03 81 06 81 02 81 06 81      ...............
    1158:	01 81 0b 81 01 84 04 8a 02 83 03 82 02 82 05 82     ................
    1168:	01 81 07 81 01 81 07 81 01 81 07 81 02 81 05 82     ................
    1178:	02 82 03 82 04 88 05 85 65                          ........e

00001181 <_ZL10chr_f32_37>:
    1181:	1c 8b 01 8b 0a 81 0a 82 09 82 0a 81 0a 82 0a 81     ................
    1191:	0a 81 0b 81 0a 82 0a 81 0b 81 0b 81 0a 81 0b 81     ................
    11a1:	0b 81 69                                            ..i

000011a4 <_ZL10chr_f32_38>:
    11a4:	20 83 07 87 05 81 03 81 04 81 05 81 03 81 05 81      ...............
    11b4:	03 81 05 81 04 81 03 81 06 85 06 87 04 82 03 82     ................
    11c4:	02 81 07 81 01 81 07 81 01 81 07 81 01 81 07 81     ................
    11d4:	02 82 03 82 03 89 05 85 65                          ........e

000011dd <_ZL10chr_f32_39>:
    11dd:	1f 85 05 88 04 82 03 82 02 82 05 81 02 81 07 81     ................
    11ed:	01 81 07 81 01 81 07 81 01 82 05 82 02 82 03 83     ................
    11fd:	02 8a 04 84 01 81 0b 81 01 81 06 81 02 81 06 81     ................
    120d:	03 81 04 82 03 88 05 86 65                          ........e

00001216 <_ZL10chr_f32_3A>:
    1216:	2b 82 03 82 03 82 34 82 03 82 03 82 32              +.....4.....2

00001223 <_ZL10chr_f32_3B>:
    1223:	2b 82 03 82 03 82 34 82 03 82 03 82 05 80 04 81     +.....4.........
    1233:	04 80 04 81 17                                      .....

00001238 <_ZL10chr_f32_3C>:
    1238:	6b 82 08 82 07 83 07 82 08 81 0d 82 0d 82 0c 82     k...............
    1248:	0c 82 7f 0c                                         ....

0000124c <_ZL10chr_f32_3D>:
    124c:	51 86 01 86 13 86 01 86 63                          Q.......c

00001255 <_ZL10chr_f32_3E>:
    1255:	62 82 0c 82 0c 83 0c 82 0d 81 08 82 07 83 07 82     b...............
    1265:	08 82 7f 15                                         ....

00001269 <_ZL10chr_f32_3F>:
    1269:	10 85 04 88 03 82 03 82 01 82 05 81 01 81 06 81     ................
    1279:	01 81 06 81 09 82 08 82 08 82 08 82 09 81 09 82     ................
    1289:	09 82 23 82 09 82 09 82 5f                          ..#....._

00001292 <_ZL10chr_f32_40>:
    1292:	21 88 0d 82 06 82 09 82 0a 81 07 81 0d 81 05 81     !...............
    12a2:	0f 81 04 80 06 83 01 80 03 81 02 81 04 81 02 83     ................
    12b2:	03 81 02 81 03 81 04 81 04 81 01 81 04 81 04 81     ................
    12c2:	04 81 01 81 03 81 05 81 04 81 01 81 03 81 05 81     ................
    12d2:	04 81 01 81 03 81 04 81 04 81 02 81 03 81 04 81     ................
    12e2:	04 81 02 81 03 81 04 81 03 81 04 81 03 81 02 82     ................
    12f2:	02 81 05 81 04 83 01 84 07 81 17 81 17 81 0b 81     ................
    1302:	09 82 05 83 0d 87 6c                                ......l

00001309 <_ZL10chr_f32_41>:
    1309:	15 83 0b 83 0b 83 0a 81 01 81 09 81 01 81 09 81     ................
    1319:	01 81 08 81 03 81 07 81 03 81 07 81 03 81 06 81     ................
    1329:	05 81 05 81 05 81 05 89 04 8b 03 81 07 81 03 81     ................
    1339:	07 81 02 81 09 81 01 81 09 81 00 82 09 82 6f        ..............o

00001348 <_ZL10chr_f32_42>:
    1348:	12 8a 05 8c 03 81 07 82 03 81 08 81 03 81 08 81     ................
    1358:	03 81 08 81 03 81 08 81 03 81 07 82 03 8a 05 8c     ................
    1368:	03 81 07 82 03 81 09 81 02 81 09 81 02 81 09 81     ................
    1378:	02 81 09 81 02 81 07 82 03 8c 03 8a 7a              ............z

00001385 <_ZL10chr_f32_43>:
    1385:	17 86 08 8a 05 83 04 83 03 82 08 81 03 81 0a 81     ................
    1395:	01 82 0a 81 01 81 0f 81 0f 81 0f 81 0f 81 0f 81     ................
    13a5:	0b 81 01 82 0a 81 02 81 09 82 02 82 08 81 04 83     ................
    13b5:	04 83 05 8a 08 86 7f 02                             ........

000013bd <_ZL10chr_f32_44>:
    13bd:	13 89 07 8b 05 81 06 83 04 81 08 82 03 81 09 81     ................
    13cd:	03 81 09 82 02 81 0a 81 02 81 0a 81 02 81 0a 81     ................
    13dd:	02 81 0a 81 02 81 0a 81 02 81 0a 81 02 81 09 82     ................
    13ed:	02 81 09 81 03 81 08 82 03 81 06 83 04 8b 05 89     ................
    13fd:	7f 03                                               ..

000013ff <_ZL10chr_f32_45>:
    13ff:	11 8c 02 8c 02 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    140f:	0d 8b 03 8b 03 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    141f:	0d 8c 02 8c 70                                      ....p

00001424 <_ZL10chr_f32_46>:
    1424:	10 8b 02 8b 02 81 0c 81 0c 81 0c 81 0c 81 0c 81     ................
    1434:	0c 8a 03 8a 03 81 0c 81 0c 81 0c 81 0c 81 0c 81     ................
    1444:	0c 81 0c 81 73                                      ....s

00001449 <_ZL10chr_f32_47>:
    1449:	18 86 09 8a 06 82 05 83 04 82 08 81 04 81 09 82     ................
    1459:	02 82 0f 81 10 81 10 81 05 87 02 81 05 87 02 81     ................
    1469:	0b 81 02 81 0b 81 02 82 0a 81 03 81 09 82 03 82     ................
    1479:	07 83 04 83 04 84 05 89 00 81 07 85 03 80 7f 06     ................

00001489 <_ZL10chr_f32_48>:
    1489:	13 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    1499:	03 81 09 81 03 81 09 81 03 81 09 81 03 8d 03 8d     ................
    14a9:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    14b9:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    14c9:	03 81 09 81 7f                                      .....

000014ce <_ZL10chr_f32_49>:
    14ce:	07 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    14de:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    14ee:	03 81 03 81 2b                                      ....+

000014f3 <_ZL10chr_f32_4A>:
    14f3:	15 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1503:	0a 81 0a 81 0a 81 0a 81 01 81 06 81 01 81 06 81     ................
    1513:	01 81 06 81 01 82 04 82 02 88 04 86 5e              ............^

00001520 <_ZL10chr_f32_4B>:
    1520:	12 81 08 82 02 81 07 82 03 81 06 82 04 81 05 82     ................
    1530:	05 81 04 82 06 81 03 82 07 81 02 82 08 81 01 82     ................
    1540:	09 81 00 83 09 87 08 83 01 82 07 82 03 82 06 81     ................
    1550:	05 81 06 81 05 82 05 81 06 82 04 81 07 82 03 81     ................
    1560:	08 82 02 81 09 82 76                                ......v

00001567 <_ZL10chr_f32_4C>:
    1567:	0e 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1577:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1587:	0a 8a 01 8a 5a                                      ....Z

0000158c <_ZL10chr_f32_4D>:
    158c:	16 82 0a 82 03 83 08 83 03 83 08 83 03 83 08 83     ................
    159c:	03 81 00 81 06 81 00 81 03 81 00 81 06 81 00 81     ................
    15ac:	03 81 00 81 06 81 00 81 03 81 01 81 04 81 01 81     ................
    15bc:	03 81 01 81 04 81 01 81 03 81 01 81 04 81 01 81     ................
    15cc:	03 81 02 81 02 81 02 81 03 81 02 81 02 81 02 81     ................
    15dc:	03 81 02 81 02 81 02 81 03 81 03 81 00 81 03 81     ................
    15ec:	03 81 03 81 00 81 03 81 03 81 03 84 03 81 03 81     ................
    15fc:	04 82 04 81 03 81 04 82 04 81 7f 14                 ............

00001608 <_ZL10chr_f32_4E>:
    1608:	13 82 08 81 03 82 08 81 03 83 07 81 03 84 06 81     ................
    1618:	03 81 00 81 06 81 03 81 00 82 05 81 03 81 01 82     ................
    1628:	04 81 03 81 02 81 04 81 03 81 02 82 03 81 03 81     ................
    1638:	03 82 02 81 03 81 04 81 02 81 03 81 04 82 01 81     ................
    1648:	03 81 05 82 00 81 03 81 06 81 00 81 03 81 06 84     ................
    1658:	03 81 07 83 03 81 08 82 03 81 08 82 7f              .............

00001665 <_ZL10chr_f32_4F>:
    1665:	18 86 09 8a 06 83 04 83 04 82 08 82 03 81 0a 81     ................
    1675:	02 82 0a 82 01 81 0c 81 01 81 0c 81 01 81 0c 81     ................
    1685:	01 81 0c 81 01 81 0c 81 01 81 0c 81 01 82 0a 82     ................
    1695:	02 81 0a 81 03 82 08 82 04 83 04 83 06 8a 09 86     ................
    16a5:	7f 0a                                               ..

000016a7 <_ZL10chr_f32_50>:
    16a7:	11 8a 04 8b 03 81 07 82 02 81 08 81 02 81 08 81     ................
    16b7:	02 81 08 81 02 81 08 81 02 81 07 82 02 8b 03 8a     ................
    16c7:	04 81 0d 81 0d 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    16d7:	7b                                                  {

000016d8 <_ZL10chr_f32_51>:
    16d8:	18 86 09 8a 06 83 04 83 04 82 08 82 03 81 0a 81     ................
    16e8:	02 82 0a 82 01 81 0c 81 01 81 0c 81 01 81 0c 81     ................
    16f8:	01 81 0c 81 01 81 0c 81 01 81 0c 81 01 82 06 80     ................
    1708:	02 82 02 81 05 82 01 81 03 82 05 85 04 83 04 83     ................
    1718:	06 8c 07 86 01 82 10 80 73                          ........s

00001721 <_ZL10chr_f32_52>:
    1721:	12 8b 04 8c 03 81 08 82 02 81 09 81 02 81 09 81     ................
    1731:	02 81 09 81 02 81 09 81 02 81 08 81 03 8c 03 8b     ................
    1741:	04 81 07 82 03 81 08 81 03 81 08 82 02 81 09 81     ................
    1751:	02 81 09 81 02 81 09 81 02 81 09 81 02 81 09 81     ................
    1761:	77                                                  w

00001762 <_ZL10chr_f32_53>:
    1762:	14 85 07 89 04 82 05 82 03 81 07 81 03 81 07 81     ................
    1772:	03 81 07 82 02 82 0d 84 0b 86 0b 85 0c 83 0d 82     ................
    1782:	01 82 08 81 02 81 08 81 02 81 08 81 02 83 05 82     ................
    1792:	03 8a 06 86 73                                      ....s

00001797 <_ZL10chr_f32_54>:
    1797:	0d 9b 05 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81     ................
    17a7:	0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81     ................
    17b7:	0b 81 67                                            ..g

000017ba <_ZL10chr_f32_55>:
    17ba:	13 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    17ca:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    17da:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    17ea:	03 81 09 81 03 81 09 81 03 82 07 82 04 82 05 82     ................
    17fa:	06 89 08 87 7f 02                                   ......

00001800 <_ZL10chr_f32_56>:
    1800:	0e 82 08 82 00 81 08 81 01 81 08 81 01 81 08 81     ................
    1810:	02 81 06 81 03 81 06 81 03 81 06 81 04 81 04 81     ................
    1820:	05 81 04 81 05 81 04 81 06 81 02 81 07 81 02 81     ................
    1830:	07 81 02 81 08 81 00 81 09 81 00 81 09 84 0a 82     ................
    1840:	0b 82 6e                                            ..n

00001843 <_ZL10chr_f32_57>:
    1843:	16 82 06 82 06 82 00 81 06 82 06 81 01 81 06 82     ................
    1853:	06 81 01 82 04 81 00 81 04 82 02 81 04 81 00 81     ................
    1863:	04 81 03 81 04 81 00 81 04 81 03 81 04 81 00 81     ................
    1873:	04 81 03 82 02 81 02 81 02 82 04 81 02 81 02 81     ................
    1883:	02 81 05 81 02 81 02 81 02 81 05 81 02 81 02 81     ................
    1893:	02 81 05 82 00 81 04 81 00 82 06 81 00 81 04 81     ................
    18a3:	00 81 07 81 00 81 04 81 00 81 07 81 00 81 04 81     ................
    18b3:	00 81 07 83 06 83 08 82 06 82 09 82 06 82 7f 25     ...............%

000018c3 <_ZL10chr_f32_58>:
    18c3:	0f 81 08 81 01 82 06 82 02 81 06 81 04 81 04 81     ................
    18d3:	05 82 02 82 06 81 02 81 08 81 00 81 09 84 0a 82     ................
    18e3:	0b 82 0a 81 00 81 08 82 00 82 07 81 02 81 06 81     ................
    18f3:	04 81 04 82 04 82 03 81 06 81 02 82 06 82 00 82     ................
    1903:	08 82 68                                            ..h

00001906 <_ZL10chr_f32_59>:
    1906:	0f 82 09 82 00 82 07 82 02 81 07 81 03 82 05 82     ................
    1916:	04 81 05 81 06 81 03 81 07 82 01 82 08 81 01 81     ................
    1926:	0a 83 0b 83 0c 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    1936:	0d 81 0d 81 76                                      ....v

0000193b <_ZL10chr_f32_5A>:
    193b:	11 8c 02 8c 0c 82 0b 82 0b 82 0c 81 0c 81 0c 82     ................
    194b:	0b 82 0b 82 0c 81 0c 81 0c 82 0b 82 0b 82 0b 82     ................
    195b:	0c 8d 01 8d 70                                      ....p

00001960 <_ZL10chr_f32_5B>:
    1960:	0b 84 03 84 03 81 06 81 06 81 06 81 06 81 06 81     ................
    1970:	06 81 06 81 06 81 06 81 06 81 06 81 06 81 06 81     ................
    1980:	06 81 06 81 06 81 06 81 06 81 06 84 03 84 12        ...............

0000198f <_ZL10chr_f32_5C>:
    198f:	01 80 0b 80 0b 81 0b 80 0b 80 0b 81 0b 80 0b 80     ................
    199f:	0b 81 0b 80 0b 80 0b 81 0b 80 0b 80 0b 81 0b 80     ................
    19af:	0b 80 0b 81 0b 80 0b 80 0b 81 0b 80 0b 80 0b 81     ................
    19bf:	0b 80 0e                                            ...

000019c2 <_ZL10chr_f32_5D>:
    19c2:	09 84 03 84 06 81 06 81 06 81 06 81 06 81 06 81     ................
    19d2:	06 81 06 81 06 81 06 81 06 81 06 81 06 81 06 81     ................
    19e2:	06 81 06 81 06 81 06 81 06 81 03 84 03 84 14        ...............

000019f1 <_ZL10chr_f32_5E>:
    19f1:	10 82 07 81 00 81 05 81 02 81 03 81 04 81 01 81     ................
    1a01:	06 81 7f 6f                                         ...o

00001a05 <_ZL10chr_f32_5F>:
    1a05:	7f 7f 1d 8c 26                                      ....&

00001a0a <_ZL10chr_f32_60>:
    1a0a:	0b 83 03 85 01 82 01 82 00 81 03 81 00 81 03 81     ................
    1a1a:	00 82 01 82 01 85 03 83 7f 1a                       ..........

00001a24 <_ZL10chr_f32_61>:
    1a24:	57 85 05 88 04 81 04 82 03 81 05 81 0b 81 05 87     W...............
    1a34:	03 89 02 82 05 81 02 81 06 81 02 81 06 81 02 82     ................
    1a44:	03 83 03 86 00 83 02 84 02 82 61                    ..........a

00001a4f <_ZL10chr_f32_62>:
    1a4f:	10 81 0c 81 0c 81 0c 81 0c 81 0c 81 01 83 06 81     ................
    1a5f:	00 86 04 84 01 83 03 82 05 81 03 81 06 82 02 81     ................
    1a6f:	07 81 02 81 07 81 02 81 07 81 02 81 06 82 02 82     ................
    1a7f:	05 81 03 84 01 83 03 81 00 86 04 81 01 83 6d        ..............m

00001a8e <_ZL10chr_f32_63>:
    1a8e:	52 83 06 87 03 83 01 82 03 81 05 81 01 82 09 81     R...............
    1a9e:	0a 81 0a 81 0a 82 05 81 02 81 05 81 02 83 01 82     ................
    1aae:	04 87 06 83 5e                                      ....^

00001ab3 <_ZL10chr_f32_64>:
    1ab3:	19 81 0c 81 0c 81 0c 81 0c 81 06 83 01 81 04 86     ................
    1ac3:	00 81 03 83 01 84 03 81 05 82 02 82 06 81 02 81     ................
    1ad3:	07 81 02 81 07 81 02 81 07 81 02 82 06 81 03 81     ................
    1ae3:	05 82 03 83 01 84 04 86 00 81 06 83 01 81 6a        ..............j

00001af2 <_ZL10chr_f32_65>:
    1af2:	58 83 07 87 04 83 01 83 03 81 05 81 02 82 06 81     X...............
    1b02:	01 8b 01 8b 01 81 0b 82 0b 81 05 82 02 83 01 83     ................
    1b12:	04 87 07 83 66                                      ....f

00001b17 <_ZL10chr_f32_66>:
    1b17:	0a 83 02 84 02 81 05 81 05 81 03 86 00 86 02 81     ................
    1b27:	05 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
    1b37:	05 81 05 81 3b                                      ....;

00001b3c <_ZL10chr_f32_67>:
    1b3c:	5e 83 01 81 04 86 00 81 03 83 01 84 03 81 05 82     ^...............
    1b4c:	02 81 07 81 02 81 07 81 02 81 07 81 02 81 07 81     ................
    1b5c:	02 82 06 81 03 81 05 82 03 83 01 84 04 86 00 81     ................
    1b6c:	06 83 01 81 0c 81 02 81 07 81 02 81 06 82 03 82     ................
    1b7c:	03 82 04 89 06 85 13                                .......

00001b83 <_ZL10chr_f32_68>:
    1b83:	10 81 0c 81 0c 81 0c 81 0c 81 0c 81 01 84 05 81     ................
    1b93:	00 86 04 83 03 82 03 82 05 81 03 81 06 81 03 81     ................
    1ba3:	06 81 03 81 06 81 03 81 06 81 03 81 06 81 03 81     ................
    1bb3:	06 81 03 81 06 81 03 81 06 81 03 81 06 81 6a        ..............j

00001bc2 <_ZL10chr_f32_69>:
    1bc2:	07 81 03 81 03 81 0f 81 03 81 03 81 03 81 03 81     ................
    1bd2:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1be2:	2b                                                  +

00001be3 <_ZL10chr_f32_6A>:
    1be3:	07 81 03 81 03 81 0f 81 03 81 03 81 03 81 03 81     ................
    1bf3:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1c03:	03 81 03 81 03 81 03 81 01 83 01 82 08              .............

00001c10 <_ZL10chr_f32_6B>:
    1c10:	19 81 09 81 09 81 09 81 09 81 04 82 01 81 03 82     ................
    1c20:	02 81 02 82 03 81 01 82 04 81 00 82 05 85 05 86     ................
    1c30:	04 82 01 81 04 81 02 82 03 81 03 81 03 81 03 82     ................
    1c40:	02 81 04 81 02 81 04 82 53                          ........S

00001c49 <_ZL10chr_f32_6C>:
    1c49:	07 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1c59:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1c69:	03 81 03 81 2b                                      ....+

00001c6e <_ZL10chr_f32_6D>:
    1c6e:	7f 05 81 01 83 03 83 05 81 00 85 00 86 04 83 02     ................
    1c7e:	84 02 82 03 82 04 82 04 81 03 81 05 81 05 81 03     ................
    1c8e:	81 05 81 05 81 03 81 05 81 05 81 03 81 05 81 05     ................
    1c9e:	81 03 81 05 81 05 81 03 81 05 81 05 81 03 81 05     ................
    1cae:	81 05 81 03 81 05 81 05 81 03 81 05 81 05 81 7f     ................
    1cbe:	1b                                                  .

00001cbf <_ZL10chr_f32_6E>:
    1cbf:	5b 81 01 84 05 81 00 86 04 83 03 82 03 82 05 81     [...............
    1ccf:	03 81 06 81 03 81 06 81 03 81 06 81 03 81 06 81     ................
    1cdf:	03 81 06 81 03 81 06 81 03 81 06 81 03 81 06 81     ................
    1cef:	03 81 06 81 6a                                      ....j

00001cf4 <_ZL10chr_f32_6F>:
    1cf4:	5e 84 07 88 04 83 02 83 03 81 06 81 02 82 06 82     ^...............
    1d04:	01 81 08 81 01 81 08 81 01 81 08 81 01 82 06 82     ................
    1d14:	02 81 06 81 03 83 02 83 04 88 07 84 6d              ............m

00001d21 <_ZL10chr_f32_70>:
    1d21:	5b 81 01 83 06 81 00 86 04 84 01 83 03 82 05 81     [...............
    1d31:	03 81 06 82 02 81 07 81 02 81 07 81 02 81 07 81     ................
    1d41:	02 81 06 82 02 82 05 81 03 84 01 83 03 81 00 86     ................
    1d51:	04 81 01 83 06 81 0c 81 0c 81 0c 81 0c 81 28        ..............(

00001d60 <_ZL10chr_f32_71>:
    1d60:	5e 83 01 81 04 86 00 81 03 83 01 84 03 81 05 82     ^...............
    1d70:	02 82 06 81 02 81 07 81 02 81 07 81 02 81 07 81     ................
    1d80:	02 82 06 81 03 81 05 82 03 83 01 84 04 86 00 81     ................
    1d90:	06 83 01 81 0c 81 0c 81 0c 81 0c 81 0c 81 1f        ...............

00001d9f <_ZL10chr_f32_72>:
    1d9f:	31 81 00 82 01 85 01 82 04 81 05 81 05 81 05 81     1...............
    1daf:	05 81 05 81 05 81 05 81 05 81 05 81 3b              ............;

00001dbc <_ZL10chr_f32_73>:
    1dbc:	4a 84 05 87 02 82 03 81 02 81 05 81 01 81 0a 84     J...............
    1dcc:	07 86 07 84 09 81 01 81 05 81 01 82 03 82 02 87     ................
    1ddc:	04 85 56                                            ..V

00001ddf <_ZL10chr_f32_74>:
    1ddf:	0f 81 04 81 04 81 04 81 02 85 00 85 02 81 04 81     ................
    1def:	04 81 04 81 04 81 04 81 04 81 04 81 04 81 04 83     ................
    1dff:	03 82 31                                            ..1

00001e02 <_ZL10chr_f32_75>:
    1e02:	55 81 06 81 02 81 06 81 02 81 06 81 02 81 06 81     U...............
    1e12:	02 81 06 81 02 81 06 81 02 81 06 81 02 81 06 81     ................
    1e22:	02 81 06 81 02 81 05 82 02 82 03 83 03 86 00 81     ................
    1e32:	04 84 01 81 62                                      ....b

00001e37 <_ZL10chr_f32_76>:
    1e37:	47 81 06 81 00 81 06 81 01 81 04 81 02 81 04 81     G...............
    1e47:	02 81 04 81 03 81 02 81 04 81 02 81 04 81 02 81     ................
    1e57:	05 81 00 81 06 81 00 81 06 84 07 82 08 82 58        ..............X

00001e66 <_ZL10chr_f32_77>:
    1e66:	6b 81 04 82 04 81 00 81 04 82 04 81 00 81 04 80     k...............
    1e76:	00 80 04 81 01 81 02 81 00 81 02 81 02 81 02 81     ................
    1e86:	00 81 02 81 02 81 02 81 00 81 02 81 02 81 02 80     ................
    1e96:	02 80 02 81 03 81 00 81 02 81 00 81 04 81 00 81     ................
    1ea6:	02 81 00 81 04 81 00 81 02 81 00 81 05 82 04 82     ................
    1eb6:	06 82 04 82 06 82 04 82 7f 01                       ..........

00001ec0 <_ZL10chr_f32_78>:
    1ec0:	4e 81 06 81 01 82 04 82 02 81 04 81 04 81 02 81     N...............
    1ed0:	05 82 00 82 06 84 08 82 08 84 06 82 00 82 05 81     ................
    1ee0:	02 81 04 81 04 81 02 82 04 82 01 81 06 81 5b        ..............[

00001eef <_ZL10chr_f32_79>:
    1eef:	4d 82 06 82 00 81 06 81 01 81 06 81 02 81 04 81     M...............
    1eff:	03 81 04 81 03 81 04 81 04 81 02 81 05 81 02 81     ................
    1f0f:	05 81 02 81 06 81 00 81 07 81 00 81 07 81 00 81     ................
    1f1f:	08 82 09 82 09 82 09 81 09 82 06 84 07 83 14        ...............

00001f2e <_ZL10chr_f32_7A>:
    1f2e:	48 89 01 89 08 82 07 82 07 82 07 82 08 81 08 82     H...............
    1f3e:	07 82 07 82 07 82 08 89 01 89 54                    ..........T

00001f49 <_ZL10chr_f32_7B>:
    1f49:	06 83 07 82 09 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1f59:	0a 81 0a 81 0a 81 09 81 08 82 0b 81 0b 81 0a 81     ................
    1f69:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 82     ................
    1f79:	0a 83 0e                                            ...

00001f7c <_ZL10chr_f32_7C>:
    1f7c:	04 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1f8c:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1f9c:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1fac:	0a 81 12                                            ...

00001faf <_ZL10chr_f32_7D>:
    1faf:	01 83 0a 82 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1fbf:	0a 81 0a 81 0a 81 0b 81 0b 82 08 81 09 81 0a 81     ................
    1fcf:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 09 82     ................
    1fdf:	07 83 13                                            ...

00001fe2 <_ZL10chr_f32_7E>:
    1fe2:	11 83 09 81 01 81 07 81 03 82 03 80 00 80 06 81     ................
    1ff2:	01 81 00 80 07 83 7f 7f 2c                          ........,

00001ffb <_ZL10chr_f32_7F>:
    1ffb:	19                                                  .

00001ffc <chrtbl_f32>:
    1ffc:	f5 0d f7 0d 18 0e 36 0e 78 0e a5 0e 03 0f 48 0f     ......6.x.....H.
    200c:	55 0f 86 0f b7 0f d7 0f e8 0f f7 0f fc 0f 03 10     U...............
    201c:	2c 10 69 10 8c 10 b7 10 e8 10 19 11 48 11 81 11     ,.i.........H...
    202c:	a4 11 dd 11 16 12 23 12 38 12 4c 12 55 12 69 12     ......#.8.L.U.i.
    203c:	92 12 09 13 48 13 85 13 bd 13 ff 13 24 14 49 14     ....H.......$.I.
    204c:	89 14 ce 14 f3 14 20 15 67 15 8c 15 08 16 65 16     ...... .g.....e.
    205c:	a7 16 d8 16 21 17 62 17 97 17 ba 17 00 18 43 18     ....!.b.......C.
    206c:	c3 18 06 19 3b 19 60 19 8f 19 c2 19 f1 19 05 1a     ....;.`.........
    207c:	0a 1a 24 1a 4f 1a 8e 1a b3 1a f2 1a 17 1b 3c 1b     ..$.O.........<.
    208c:	83 1b c2 1b e3 1b 10 1c 49 1c 6e 1c bf 1c f4 1c     ........I.n.....
    209c:	21 1d 60 1d 9f 1d bc 1d df 1d 02 1e 37 1e 66 1e     !.`.........7.f.
    20ac:	c0 1e ef 1e 2e 1f 49 1f 7c 1f af 1f e2 1f fb 1f     ......I.|.......

000020bc <widtbl_f64>:
    20bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 11 0f 0c     ................
    20cc:	1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 0f 0c 0c 0c 0c 0c     ................
    20dc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    20ec:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    20fc:	0c 1b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 2a 0c 0c     .............*..
    210c:	1d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 0c 0c 0c     ................

0000211c <_ZL10chr_f64_20>:
    211c:	7f 7f 7f 7f 3f                                      ....?

00002121 <_ZL10chr_f64_2D>:
    2121:	7f 7f 45 8a 05 8a 05 8a 05 8a 7f 7f 7f 2b           ..E..........+

0000212f <_ZL10chr_f64_2E>:
    212f:	7f 7f 7f 55 84 09 84 09 84 09 84 09 84 7f 38        ...U..........8

0000213e <_ZL10chr_f64_30>:
    213e:	23 87 0f 8d 0b 8f 09 91 07 86 05 86 06 84 09 84     #...............
    214e:	06 83 0b 83 05 84 0b 84 04 83 0d 83 04 83 0d 83     ................
    215e:	04 83 0d 83 03 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    216e:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    217e:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    218e:	02 83 0f 83 02 83 0f 83 02 83 0f 83 03 83 0d 83     ................
    219e:	04 83 0d 83 04 83 0d 83 04 84 0b 84 05 83 0b 83     ................
    21ae:	06 84 09 84 06 86 05 86 07 91 09 8f 0b 8d 0f 87     ................
    21be:	7f 7f 32                                            ..2

000021c1 <_ZL10chr_f64_31>:
    21c1:	29 82 17 82 16 83 16 83 15 84 14 85 12 87 0d 8c     )...............
    21d1:	0d 8c 0d 87 00 83 0d 84 03 83 16 83 16 83 16 83     ................
    21e1:	16 83 16 83 16 83 16 83 16 83 16 83 16 83 16 83     ................
    21f1:	16 83 16 83 16 83 16 83 16 83 16 83 16 83 16 83     ................
    2201:	16 83 16 83 16 83 16 83 16 83 7f 7f 4c              ............L

0000220e <_ZL10chr_f64_32>:
    220e:	24 87 10 8c 0b 8f 09 91 08 85 05 86 06 84 09 84     $...............
    221e:	06 84 0a 83 06 83 0b 84 04 84 0c 83 04 83 0d 83     ................
    222e:	04 83 0d 83 04 83 0d 83 16 83 15 84 15 84 14 84     ................
    223e:	14 85 13 85 12 86 11 87 10 88 10 88 0f 88 10 87     ................
    224e:	11 86 12 85 13 85 14 84 14 84 15 83 16 83 15 96     ................
    225e:	03 96 03 96 03 96 7f 7f 45                          ........E

00002267 <_ZL10chr_f64_33>:
    2267:	23 87 0f 8d 0b 90 08 91 07 86 05 86 06 84 09 84     #...............
    2277:	05 84 0b 84 04 84 0b 84 04 83 0d 83 04 83 0d 83     ................
    2287:	04 83 0d 83 15 84 15 84 14 84 14 85 0d 8b 0e 89     ................
    2297:	10 8b 0e 8c 14 86 15 84 16 84 15 84 02 83 0f 83     ................
    22a7:	02 83 0f 83 02 83 0f 83 02 84 0d 84 02 84 0c 85     ................
    22b7:	03 84 0b 84 04 85 09 85 05 86 05 86 07 91 09 8f     ................
    22c7:	0b 8d 0f 87 7f 7f 4d                                ......M

000022ce <_ZL10chr_f64_34>:
    22ce:	45 83 15 84 14 85 13 86 13 86 12 87 11 83 00 83     E...............
    22de:	11 83 00 83 10 83 01 83 0f 83 02 83 0e 84 02 83     ................
    22ee:	0e 83 03 83 0d 83 04 83 0c 83 05 83 0b 84 05 83     ................
    22fe:	0b 83 06 83 0a 83 07 83 09 84 07 83 09 83 08 83     ................
    230e:	08 83 09 83 07 83 0a 83 07 97 02 97 02 97 02 97     ................
    231e:	11 83 16 83 16 83 16 83 16 83 16 83 16 83 16 83     ................
    232e:	16 83 7f 7f 4a                                      ....J

00002333 <_ZL10chr_f64_35>:
    2333:	3a 91 08 91 08 91 08 91 08 82 16 83 16 83 16 83     :...............
    2343:	16 82 17 82 17 82 16 83 02 87 0b 83 00 8b 09 91     ................
    2353:	08 92 07 86 05 86 06 84 09 85 05 83 0b 84 16 83     ................
    2363:	16 84 16 83 16 83 16 83 16 83 16 83 03 83 0e 83     ................
    2373:	03 83 0d 84 03 83 0d 83 04 84 0b 84 05 84 09 85     ................
    2383:	05 86 05 86 07 91 09 8f 0b 8d 0f 87 7f 7f 32        ..............2

00002392 <_ZL10chr_f64_36>:
    2392:	24 86 11 8b 0c 8e 0a 90 08 86 05 85 06 85 09 84     $...............
    23a2:	05 84 0b 83 05 83 0c 84 03 84 0d 83 03 83 0e 83     ................
    23b2:	03 83 16 83 15 83 16 83 04 86 0a 83 02 8b 07 83     ................
    23c2:	00 8e 06 94 05 88 05 86 04 86 09 84 04 85 0b 84     ................
    23d2:	03 84 0d 83 03 84 0d 84 02 83 0f 83 02 83 0f 83     ................
    23e2:	02 83 0f 83 02 83 0f 83 02 83 0f 83 03 83 0d 84     ................
    23f2:	03 83 0d 83 04 84 0b 84 05 84 09 85 05 86 05 86     ................
    2402:	07 91 09 8f 0c 8c 0f 88 7f 7f 31                    ..........1

0000240d <_ZL10chr_f64_37>:
    240d:	37 96 03 96 03 96 03 96 16 83 15 83 15 83 15 83     7...............
    241d:	15 84 14 84 14 84 15 83 15 84 14 84 15 84 14 84     ................
    242d:	15 83 15 84 15 83 15 84 15 84 15 83 15 84 15 83     ................
    243d:	16 83 15 84 15 83 16 83 16 83 16 83 15 84 15 83     ................
    244d:	16 83 16 83 7f 7f 53                                ......S

00002454 <_ZL10chr_f64_38>:
    2454:	24 85 11 8b 0c 8f 09 91 07 86 05 86 06 84 09 84     $...............
    2464:	05 84 0b 84 04 84 0b 84 04 83 0d 83 04 83 0d 83     ................
    2474:	04 83 0d 83 04 84 0b 84 05 83 0b 83 06 84 09 84     ................
    2484:	07 85 05 85 09 8f 0b 8d 0b 8f 09 91 07 85 07 85     ................
    2494:	05 84 0b 84 04 83 0d 83 03 84 0d 84 02 83 0f 83     ................
    24a4:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    24b4:	02 84 0d 84 02 84 0d 84 03 84 0b 84 04 86 07 86     ................
    24c4:	05 93 07 91 09 8f 0d 89 7f 7f 31                    ..........1

000024cf <_ZL10chr_f64_39>:
    24cf:	22 88 0f 8c 0c 8f 09 91 07 86 05 86 05 85 09 84     "...............
    24df:	05 84 0b 84 04 83 0d 83 03 84 0d 83 03 83 0f 83     ................
    24ef:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    24ff:	02 84 0d 84 03 83 0d 84 03 84 0b 85 04 84 09 86     ................
    250f:	04 86 05 88 05 94 06 8e 00 83 07 8b 02 83 0a 86     ................
    251f:	04 83 16 83 15 83 16 83 03 83 0e 83 03 83 0d 84     ................
    252f:	03 84 0c 83 05 83 0b 84 05 84 09 85 06 85 05 86     ................
    253f:	08 90 0a 8e 0c 8b 11 86 7f 7f 33                    ..........3

0000254a <_ZL10chr_f64_3A>:
    254a:	7f 1a 84 09 84 09 84 09 84 09 84 7f 3d 84 09 84     ............=...
    255a:	09 84 09 84 09 84 7f 74                             .......t

00002562 <_ZL10chr_f64_61>:
    2562:	7f 7b 88 0f 8d 0a 90 09 91 07 85 06 85 06 84 0a     .{..............
    2572:	84 05 83 0c 83 05 83 0c 83 05 83 0c 83 16 83 15     ................
    2582:	84 0e 8b 09 90 07 92 06 8d 01 83 05 88 07 83 05     ................
    2592:	84 0b 83 04 84 0c 83 04 83 0d 83 04 83 0d 83 04     ................
    25a2:	83 0c 84 04 83 0b 85 04 84 09 86 05 84 06 8a 03     ................
    25b2:	8f 01 84 04 8d 02 84 05 8a 05 83 07 86 7f 7f 35     ...............5

000025c2 <_ZL10chr_f64_6D>:
    25c2:	7f 7f 7f 05 86 07 86 0a 83 02 89 04 8a 08 83 00     ................
    25d2:	8c 02 8c 07 83 00 8d 00 8e 06 87 05 89 05 84 06     ................
    25e2:	85 08 86 08 84 05 84 0a 84 0a 83 05 84 0a 84 0a     ................
    25f2:	83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b     ................
    2602:	83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05     ................
    2612:	83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b     ................
    2622:	83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b     ................
    2632:	83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05     ................
    2642:	83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b     ................
    2652:	83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b     ................
    2662:	83 0b 83 7f 7f 7f 7a                                ......z

00002669 <_ZL10chr_f64_70>:
    2669:	7f 7f 10 86 0c 83 02 8b 09 83 01 8d 08 83 00 8f     ................
    2679:	07 88 05 86 06 86 09 84 06 85 0b 84 05 84 0d 83     ................
    2689:	05 84 0d 83 05 84 0d 84 04 83 0f 83 04 83 0f 83     ................
    2699:	04 83 0f 83 04 83 0f 83 04 83 0f 83 04 83 0f 83     ................
    26a9:	04 83 0f 83 04 83 0f 83 04 83 0e 84 04 84 0d 83     ................
    26b9:	05 84 0c 84 05 85 0b 84 05 86 09 84 06 88 05 86     ................
    26c9:	06 83 00 8f 07 83 01 8d 08 83 02 8b 09 83 04 86     ................
    26d9:	0c 83 18 83 18 83 18 83 18 83 18 83 18 83 18 83     ................
    26e9:	18 83 18 83 32                                      ....2

000026ee <chrtbl_f64>:
    26ee:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    26fe:	1c 21 1c 21 1c 21 1c 21 1c 21 21 21 2f 21 1c 21     .!.!.!.!.!!!/!.!
    270e:	3e 21 c1 21 0e 22 67 22 ce 22 33 23 92 23 0d 24     >!.!."g"."3#.#.$
    271e:	54 24 cf 24 4a 25 1c 21 1c 21 1c 21 1c 21 1c 21     T$.$J%.!.!.!.!.!
    272e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    273e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    274e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    275e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    276e:	1c 21 62 25 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!b%.!.!.!.!.!.!
    277e:	1c 21 1c 21 1c 21 1c 21 1c 21 c2 25 1c 21 1c 21     .!.!.!.!.!.%.!.!
    278e:	69 26 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     i&.!.!.!.!.!.!.!
    279e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!

000027ae <widtbl_f7s>:
    27ae:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27be:	20 20 20 20 20 20 20 20 20 20 0c 0c 0c 0c 0c 0c               ......
    27ce:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27de:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27ee:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27fe:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................

0000280e <_ZL10chr_f7s_20>:
    280e:	7f 7f 7f 7f 3f                                      ....?

00002813 <_ZL10chr_f7s_2E>:
    2813:	7f 7f 7f 7b 82 07 84 06 84 06 84 07 82 10           ...{..........

00002821 <_ZL10chr_f7s_30>:
    2821:	27 8e 0f 90 0d 92 0d 90 01 80 08 81 01 8e 01 82     '...............
    2831:	06 83 10 84 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2841:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2851:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2861:	04 85 0e 85 04 85 0e 85 04 84 10 84 04 82 14 82     ................
    2871:	04 80 18 80 24 80 1e 82 15 81 04 84 11 83 04 85     ....$...........
    2881:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2891:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    28a1:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    28b1:	0e 85 04 85 0e 85 05 83 10 83 07 81 01 8e 01 81     ................
    28c1:	0b 90 0d 92 0d 90 0f 8e 28                          ........(

000028ca <_ZL10chr_f7s_31>:
    28ca:	7f 19 80 1d 82 1b 84 19 85 19 85 19 85 19 85 19     ................
    28da:	85 19 85 19 85 19 85 19 85 19 85 19 85 19 85 19     ................
    28ea:	85 1b 83 1d 81 1e 80 5d 81 1b 83 19 85 19 85 19     .......]........
    28fa:	85 19 85 19 85 19 85 19 85 19 85 19 85 19 85 19     ................
    290a:	85 19 85 19 85 19 85 1a 83 1c 81 7f 24              ............$

00002917 <_ZL10chr_f7s_32>:
    2917:	27 8e 0f 90 0d 92 0d 90 01 80 0c 8e 01 82 1b 84     '...............
    2927:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2937:	19 85 19 85 19 85 19 85 19 85 1a 84 0a 8e 02 82     ................
    2947:	08 92 02 80 06 96 06 80 01 94 07 82 01 90 09 84     ................
    2957:	1a 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2967:	19 85 19 85 19 85 19 85 19 85 19 85 1a 83 1c 81     ................
    2977:	01 8e 0f 90 0d 92 0d 90 0f 8e 28                    ..........(

00002982 <_ZL10chr_f7s_33>:
    2982:	27 8e 0f 90 0d 92 0d 90 01 80 0c 8e 01 82 1b 84     '...............
    2992:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    29a2:	19 85 19 85 19 85 19 85 19 85 1a 84 0a 8e 02 82     ................
    29b2:	08 92 02 80 06 96 09 94 0c 90 02 81 1b 83 19 85     ................
    29c2:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    29d2:	19 85 19 85 19 85 19 85 19 85 1a 83 0b 8e 01 81     ................
    29e2:	0b 90 0d 92 0d 90 0f 8e 28                          ........(

000029eb <_ZL10chr_f7s_34>:
    29eb:	7f 19 80 08 81 12 82 06 83 10 84 04 85 0e 85 04     ................
    29fb:	85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04     ................
    2a0b:	85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04     ................
    2a1b:	85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04     ................
    2a2b:	84 10 84 04 82 02 8e 02 82 04 80 02 92 02 80 06     ................
    2a3b:	96 09 94 0c 90 02 81 1b 83 19 85 19 85 19 85 19     ................
    2a4b:	85 19 85 19 85 19 85 19 85 19 85 19 85 19 85 19     ................
    2a5b:	85 19 85 19 85 1a 83 1c 81 7f 24                    ..........$

00002a66 <_ZL10chr_f7s_35>:
    2a66:	27 8e 0f 90 0d 92 0d 90 0b 81 01 8e 0b 83 1a 85     '...............
    2a76:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2a86:	19 85 19 85 19 85 19 85 19 84 1a 82 02 8e 0a 80     ................
    2a96:	02 92 0a 96 09 94 0c 90 02 81 1b 83 19 85 19 85     ................
    2aa6:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2ab6:	19 85 19 85 19 85 19 85 1a 83 0b 8e 01 81 0b 90     ................
    2ac6:	0d 92 0d 90 0f 8e 28                                ......(

00002acd <_ZL10chr_f7s_36>:
    2acd:	27 8e 0f 90 0d 92 0d 90 0b 81 01 8e 0b 83 1a 85     '...............
    2add:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2aed:	19 85 19 85 19 85 19 85 19 84 1a 82 02 8e 0a 80     ................
    2afd:	02 92 0a 96 06 80 01 94 07 82 01 90 02 81 04 84     ................
    2b0d:	11 83 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2b1d:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2b2d:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2b3d:	0e 85 04 85 0e 85 04 85 0e 85 05 83 10 83 07 81     ................
    2b4d:	01 8e 01 81 0b 90 0d 92 0d 90 0f 8e 28              ............(

00002b5a <_ZL10chr_f7s_37>:
    2b5a:	27 8e 0f 90 0d 92 0d 90 01 80 0c 8e 01 82 1b 84     '...............
    2b6a:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2b7a:	19 85 19 85 19 85 19 85 19 85 1a 84 1c 82 1e 80     ................
    2b8a:	5d 81 1b 83 19 85 19 85 19 85 19 85 19 85 19 85     ]...............
    2b9a:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2baa:	1a 83 1c 81 7f 24                                   .....$

00002bb0 <_ZL10chr_f7s_38>:
    2bb0:	27 8e 0f 90 0d 92 0d 90 01 80 08 81 01 8e 01 82     '...............
    2bc0:	06 83 10 84 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2bd0:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2be0:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2bf0:	04 85 0e 85 04 85 0e 85 04 84 10 84 04 82 02 8e     ................
    2c00:	02 82 04 80 02 92 02 80 06 96 06 80 01 94 07 82     ................
    2c10:	01 90 02 81 04 84 11 83 04 85 0e 85 04 85 0e 85     ................
    2c20:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c30:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c40:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c50:	05 83 10 83 07 81 01 8e 01 81 0b 90 0d 92 0d 90     ................
    2c60:	0f 8e 28                                            ..(

00002c63 <_ZL10chr_f7s_39>:
    2c63:	27 8e 0f 90 0d 92 0d 90 01 80 08 81 01 8e 01 82     '...............
    2c73:	06 83 10 84 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c83:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c93:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2ca3:	04 85 0e 85 04 85 0e 85 04 84 10 84 04 82 02 8e     ................
    2cb3:	02 82 04 80 02 92 02 80 06 96 09 94 0c 90 02 81     ................
    2cc3:	1b 83 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2cd3:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 1a 83     ................
    2ce3:	0b 8e 01 81 0b 90 0d 92 0d 90 0f 8e 28              ............(

00002cf0 <_ZL10chr_f7s_3A>:
    2cf0:	7f 1f 82 07 84 06 84 06 84 07 82 7f 18 82 07 84     ................
    2d00:	06 84 06 84 07 82 7f 20                             ....... 

00002d08 <chrtbl_f7s>:
    2d08:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d18:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 13 28 0e 28     .(.(.(.(.(.(.(.(
    2d28:	21 28 ca 28 17 29 82 29 eb 29 66 2a cd 2a 5a 2b     !(.(.).).)f*.*Z+
    2d38:	b0 2b 63 2c f0 2c 0e 28 0e 28 0e 28 0e 28 0e 28     .+c,.,.(.(.(.(.(
    2d48:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d58:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d68:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d78:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d88:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d98:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2da8:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2db8:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(

00002dc8 <_ZL8fontdata>:
	...
    2dd0:	00 08 d5 0c 35 06 10 00 00 00 00 00 fc 1f 95 0d     ....5...........
    2de0:	1a 00 00 00 00 00 ee 26 bc 20 30 08 2d ae 27 30     .......&. 0.-.'0
    2df0:	00 00 00 00 00                                      .....

00002df5 <_ZZN11TFT_ILI93414initEvE12ILI9341_cmds>:
    2df5:	15 ef 03 03 80 02 cf 03 00 c1 30 ed 04 64 03 12     ..........0..d..
    2e05:	81 e8 03 85 00 78 cb 05 39 2c 00 34 02 f7 01 20     .....x..9,.4... 
    2e15:	ea 02 00 00 c0 01 23 c1 01 10 c5 02 3e 28 c7 01     ......#.....>(..
    2e25:	86 36 01 48 3a 01 55 b1 02 00 18 b6 03 08 82 27     .6.H:.U........'
    2e35:	f2 01 00 26 01 01 e0 0f 0f 31 2b 0c 0e 08 4e f1     ...&.....1+...N.
    2e45:	37 07 10 03 0e 09 00 e1 0f 00 0e 14 03 11 07 31     7..............1
    2e55:	c1 48 08 0f 0c 31 36 0f 11 80 78 29 00              .H...16...x).

00002e62 <port_to_mode_PGM>:
    2e62:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    2e72:	01 01 00 00 04 01 07 01 0a 01                       ..........

00002e7c <port_to_output_PGM>:
    2e7c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    2e8c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00002e96 <port_to_input_PGM>:
    2e96:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    2ea6:	00 01 00 00 03 01 06 01 09 01                       ..........

00002eb0 <digital_pin_to_port_PGM>:
    2eb0:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    2ec0:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    2ed0:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    2ee0:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    2ef0:	0b 0b 0b 0b 0b 0b                                   ......

00002ef6 <digital_pin_to_bit_mask_PGM>:
    2ef6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    2f06:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    2f16:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    2f26:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    2f36:	04 08 10 20 40 80                                   ... @.

00002f3c <digital_pin_to_timer_PGM>:
    2f3c:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
    2f68:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00002f82 <prvIdleTask>:
            }
        }
        taskEXIT_CRITICAL();

        return xReturn;
    }
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	1f 92       	push	r1
    2f88:	1f 92       	push	r1
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	0e 94 38 50 	call	0xa070	; 0xa070 <prvCheckTasksWaitingTermination>
    2f96:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <pxReadyTasksLists>
    2f9a:	82 30       	cpi	r24, 0x02	; 2
    2f9c:	10 f0       	brcs	.+4      	; 0x2fa2 <prvIdleTask+0x20>
    2f9e:	0e 94 59 5b 	call	0xb6b2	; 0xb6b2 <vPortYield>
    2fa2:	0e 94 ee 55 	call	0xabdc	; 0xabdc <vApplicationIdleHook>
    2fa6:	f5 cf       	rjmp	.-22     	; 0x2f92 <prvIdleTask+0x10>

00002fa8 <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <prvTimerTask+0x6>
    2fae:	1f 92       	push	r1
    2fb0:	1f 92       	push	r1
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9d 83       	std	Y+5, r25	; 0x05
    2fb8:	8c 83       	std	Y+4, r24	; 0x04
    2fba:	ce 01       	movw	r24, r28
    2fbc:	03 96       	adiw	r24, 0x03	; 3
    2fbe:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <prvGetNextExpireTime>
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	62 2f       	mov	r22, r18
    2fce:	0e 94 0a 53 	call	0xa614	; 0xa614 <prvProcessTimerOrBlockTask>
    2fd2:	0e 94 29 54 	call	0xa852	; 0xa852 <prvProcessReceivedCommands>
    2fd6:	f1 cf       	rjmp	.-30     	; 0x2fba <prvTimerTask+0x12>

00002fd8 <__ctors_start>:
    2fd8:	ef 18       	sub	r14, r15
    2fda:	ed 1f       	adc	r30, r29
    2fdc:	2a 3f       	cpi	r18, 0xFA	; 250
    2fde:	e8 3f       	cpi	r30, 0xF8	; 248

00002fe0 <__ctors_end>:
    2fe0:	f9 1f       	adc	r31, r25

00002fe2 <__dtors_end>:
    2fe2:	11 24       	eor	r1, r1
    2fe4:	1f be       	out	0x3f, r1	; 63
    2fe6:	cf ef       	ldi	r28, 0xFF	; 255
    2fe8:	d1 e2       	ldi	r29, 0x21	; 33
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	00 e0       	ldi	r16, 0x00	; 0
    2ff0:	0c bf       	out	0x3c, r16	; 60

00002ff2 <__do_copy_data>:
    2ff2:	13 e0       	ldi	r17, 0x03	; 3
    2ff4:	a0 e0       	ldi	r26, 0x00	; 0
    2ff6:	b2 e0       	ldi	r27, 0x02	; 2
    2ff8:	e0 e6       	ldi	r30, 0x60	; 96
    2ffa:	f0 ed       	ldi	r31, 0xD0	; 208
    2ffc:	00 e0       	ldi	r16, 0x00	; 0
    2ffe:	0b bf       	out	0x3b, r16	; 59
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <__do_copy_data+0x14>
    3002:	07 90       	elpm	r0, Z+
    3004:	0d 92       	st	X+, r0
    3006:	a0 31       	cpi	r26, 0x10	; 16
    3008:	b1 07       	cpc	r27, r17
    300a:	d9 f7       	brne	.-10     	; 0x3002 <__do_copy_data+0x10>

0000300c <__do_clear_bss>:
    300c:	25 e0       	ldi	r18, 0x05	; 5
    300e:	a0 e1       	ldi	r26, 0x10	; 16
    3010:	b3 e0       	ldi	r27, 0x03	; 3
    3012:	01 c0       	rjmp	.+2      	; 0x3016 <.do_clear_bss_start>

00003014 <.do_clear_bss_loop>:
    3014:	1d 92       	st	X+, r1

00003016 <.do_clear_bss_start>:
    3016:	aa 39       	cpi	r26, 0x9A	; 154
    3018:	b2 07       	cpc	r27, r18
    301a:	e1 f7       	brne	.-8      	; 0x3014 <.do_clear_bss_loop>

0000301c <__do_global_ctors>:
    301c:	17 e1       	ldi	r17, 0x17	; 23
    301e:	c0 ef       	ldi	r28, 0xF0	; 240
    3020:	d7 e1       	ldi	r29, 0x17	; 23
    3022:	00 e0       	ldi	r16, 0x00	; 0
    3024:	06 c0       	rjmp	.+12     	; 0x3032 <__do_global_ctors+0x16>
    3026:	21 97       	sbiw	r28, 0x01	; 1
    3028:	01 09       	sbc	r16, r1
    302a:	80 2f       	mov	r24, r16
    302c:	fe 01       	movw	r30, r28
    302e:	0e 94 6c 61 	call	0xc2d8	; 0xc2d8 <__tablejump2__>
    3032:	cc 3e       	cpi	r28, 0xEC	; 236
    3034:	d1 07       	cpc	r29, r17
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	08 07       	cpc	r16, r24
    303a:	a9 f7       	brne	.-22     	; 0x3026 <__do_global_ctors+0xa>
    303c:	0e 94 f4 3f 	call	0x7fe8	; 0x7fe8 <main>
    3040:	0c 94 1f 68 	jmp	0xd03e	; 0xd03e <__do_global_dtors>

00003044 <__bad_interrupt>:
    3044:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003048 <_ZN6ScreenC1Ev>:
TFT_ILI9341 tft = TFT_ILI9341();



// default constructor
Screen::Screen()
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	1f 92       	push	r1
    304e:	1f 92       	push	r1
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	9a 83       	std	Y+2, r25	; 0x02
    3056:	89 83       	std	Y+1, r24	; 0x01
{
	if (!firstInstance)
    3058:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZN6Screen13firstInstanceE>
    305c:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <_ZN6Screen13firstInstanceE+0x1>
    3060:	89 2b       	or	r24, r25
    3062:	31 f4       	brne	.+12     	; 0x3070 <_ZN6ScreenC1Ev+0x28>
	{
		firstInstance = this;
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZN6Screen13firstInstanceE+0x1>
    306c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZN6Screen13firstInstanceE>
	}
} //Screen
    3070:	00 00       	nop
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	08 95       	ret

0000307c <_ZN6Screen4initEv>:

void Screen::init(){
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	1f 92       	push	r1
    3082:	1f 92       	push	r1
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
	tft.init();
    308c:	86 e1       	ldi	r24, 0x16	; 22
    308e:	93 e0       	ldi	r25, 0x03	; 3
    3090:	0e 94 7d 24 	call	0x48fa	; 0x48fa <_ZN11TFT_ILI93414initEv>
	tft.fillScreen(TFT_BLACK);
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	86 e1       	ldi	r24, 0x16	; 22
    309a:	93 e0       	ldi	r25, 0x03	; 3
    309c:	0e 94 66 25 	call	0x4acc	; 0x4acc <_ZN11TFT_ILI934110fillScreenEj>
	tft.setRotation(3);
    30a0:	63 e0       	ldi	r22, 0x03	; 3
    30a2:	86 e1       	ldi	r24, 0x16	; 22
    30a4:	93 e0       	ldi	r25, 0x03	; 3
    30a6:	0e 94 b0 2b 	call	0x5760	; 0x5760 <_ZN11TFT_ILI934111setRotationEh>
}
    30aa:	00 00       	nop
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <_ZN6Screen12UpdateScreenEv>:

void Screen::UpdateScreen(){
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	1f 92       	push	r1
    30bc:	1f 92       	push	r1
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	9a 83       	std	Y+2, r25	; 0x02
    30c4:	89 83       	std	Y+1, r24	; 0x01

	if (IsInSimulationMode){
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ca:	fc 01       	movw	r30, r24
    30cc:	80 81       	ld	r24, Z
    30ce:	88 23       	and	r24, r24
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <_ZN6Screen12UpdateScreenEv+0x22>
		RunScreenSimulation();
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	06 d0       	rcall	.+12     	; 0x30e4 <_ZN6Screen19RunScreenSimulationEv>
	}

}
    30d8:	00 00       	nop
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <_ZN6Screen19RunScreenSimulationEv>:

void Screen::RunScreenSimulation(){
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	1f 92       	push	r1
    30ea:	1f 92       	push	r1
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01

	
	
	tft.setTextColor(TFT_GREEN, TFT_BLACK);
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	60 ee       	ldi	r22, 0xE0	; 224
    30fa:	77 e0       	ldi	r23, 0x07	; 7
    30fc:	86 e1       	ldi	r24, 0x16	; 22
    30fe:	93 e0       	ldi	r25, 0x03	; 3
    3100:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <_ZN11TFT_ILI934112setTextColorEjj>
	//tft.setTextColor(TFT_GREEN);
	tft.setTextSize(3);
    3104:	63 e0       	ldi	r22, 0x03	; 3
    3106:	86 e1       	ldi	r24, 0x16	; 22
    3108:	93 e0       	ldi	r25, 0x03	; 3
    310a:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN11TFT_ILI934111setTextSizeEh>
	tft.setCursor(0, 0);
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	86 e1       	ldi	r24, 0x16	; 22
    3118:	93 e0       	ldi	r25, 0x03	; 3
    311a:	0e 94 98 25 	call	0x4b30	; 0x4b30 <_ZN11TFT_ILI93419setCursorEii>
	tft.print(F("Diameter: 1.7"));
    311e:	8c e2       	ldi	r24, 0x2C	; 44
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	bc 01       	movw	r22, r24
    3124:	86 e1       	ldi	r24, 0x16	; 22
    3126:	93 e0       	ldi	r25, 0x03	; 3
    3128:	0e 94 83 40 	call	0x8106	; 0x8106 <_ZN5Print5printEPK19__FlashStringHelper>
	i = i>9 ? 0 : i;
    312c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i>
    3130:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <i+0x1>
    3134:	0a 97       	sbiw	r24, 0x0a	; 10
    3136:	2c f4       	brge	.+10     	; 0x3142 <_ZN6Screen19RunScreenSimulationEv+0x5e>
    3138:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i>
    313c:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <i+0x1>
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <_ZN6Screen19RunScreenSimulationEv+0x62>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <i+0x1>
    314a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <i>
	tft.println(i++);
    314e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i>
    3152:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <i+0x1>
    3156:	9c 01       	movw	r18, r24
    3158:	2f 5f       	subi	r18, 0xFF	; 255
    315a:	3f 4f       	sbci	r19, 0xFF	; 255
    315c:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <i+0x1>
    3160:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <i>
    3164:	4a e0       	ldi	r20, 0x0A	; 10
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	bc 01       	movw	r22, r24
    316a:	86 e1       	ldi	r24, 0x16	; 22
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	0e 94 2f 42 	call	0x845e	; 0x845e <_ZN5Print7printlnEii>
	
	
	
	
}
    3172:	00 00       	nop
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <_ZN6ScreenD1Ev>:
// default destructor
Screen::~Screen()
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	1f 92       	push	r1
    3184:	1f 92       	push	r1
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	9a 83       	std	Y+2, r25	; 0x02
    318c:	89 83       	std	Y+1, r24	; 0x01
{
} //~Screen
    318e:	00 00       	nop
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	08 95       	ret

0000319a <_Z41__static_initialization_and_destruction_0ii>:
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <_Z41__static_initialization_and_destruction_0ii+0x6>
    31a0:	1f 92       	push	r1
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	7c 83       	std	Y+4, r23	; 0x04
    31ac:	6b 83       	std	Y+3, r22	; 0x03
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	61 f4       	brne	.+24     	; 0x31ce <_Z41__static_initialization_and_destruction_0ii+0x34>
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ba:	01 96       	adiw	r24, 0x01	; 1
    31bc:	41 f4       	brne	.+16     	; 0x31ce <_Z41__static_initialization_and_destruction_0ii+0x34>

Screen *Screen::firstInstance;
int i = 0;

// Use hardware SPI
TFT_ILI9341 tft = TFT_ILI9341();
    31be:	40 e4       	ldi	r20, 0x40	; 64
    31c0:	51 e0       	ldi	r21, 0x01	; 1
    31c2:	60 ef       	ldi	r22, 0xF0	; 240
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	86 e1       	ldi	r24, 0x16	; 22
    31c8:	93 e0       	ldi	r25, 0x03	; 3
    31ca:	0e 94 1e 23 	call	0x463c	; 0x463c <_ZN11TFT_ILI9341C1Eii>
	
}
// default destructor
Screen::~Screen()
{
} //~Screen
    31ce:	00 00       	nop
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	08 95       	ret

000031de <_GLOBAL__sub_I__ZN6Screen13firstInstanceE>:
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	6f ef       	ldi	r22, 0xFF	; 255
    31e8:	7f ef       	ldi	r23, 0xFF	; 255
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	d5 df       	rcall	.-86     	; 0x319a <_Z41__static_initialization_and_destruction_0ii>
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	08 95       	ret

000031f6 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <_ZN14HardwareSerial5beginEm+0x6>
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <_ZN14HardwareSerial5beginEm+0x8>
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	9a 83       	std	Y+2, r25	; 0x02
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	4b 83       	std	Y+3, r20	; 0x03
    3208:	5c 83       	std	Y+4, r21	; 0x04
    320a:	6d 83       	std	Y+5, r22	; 0x05
    320c:	7e 83       	std	Y+6, r23	; 0x06
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	ad 81       	ldd	r26, Y+5	; 0x05
    3214:	be 81       	ldd	r27, Y+6	; 0x06
    3216:	e9 81       	ldd	r30, Y+1	; 0x01
    3218:	fa 81       	ldd	r31, Y+2	; 0x02
    321a:	26 e0       	ldi	r18, 0x06	; 6
    321c:	ac 01       	movw	r20, r24
    321e:	bd 01       	movw	r22, r26
    3220:	cf 01       	movw	r24, r30
    3222:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <_ZN14HardwareSerial5beginEmh>
    3226:	00 00       	nop
    3228:	26 96       	adiw	r28, 0x06	; 6
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	08 95       	ret

0000323a <_ZN18SerialPortExpanderC1Ev>:
#include "SerialProcessing.h"

SerialPortExpander *SerialPortExpander::firstInstance;

// default constructor
SerialPortExpander::SerialPortExpander()
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	1f 92       	push	r1
    3240:	1f 92       	push	r1
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	fc 01       	movw	r30, r24
    3250:	10 82       	st	Z, r1
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	9a 81       	ldd	r25, Y+2	; 0x02
    3256:	fc 01       	movw	r30, r24
    3258:	11 82       	std	Z+1, r1	; 0x01
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	2b e2       	ldi	r18, 0x2B	; 43
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	fc 01       	movw	r30, r24
    3264:	33 83       	std	Z+3, r19	; 0x03
    3266:	22 83       	std	Z+2, r18	; 0x02
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	2a e2       	ldi	r18, 0x2A	; 42
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	fc 01       	movw	r30, r24
    3272:	35 83       	std	Z+5, r19	; 0x05
    3274:	24 83       	std	Z+4, r18	; 0x04
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	29 e2       	ldi	r18, 0x29	; 41
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	fc 01       	movw	r30, r24
    3280:	37 83       	std	Z+7, r19	; 0x07
    3282:	26 83       	std	Z+6, r18	; 0x06
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	fc 01       	movw	r30, r24
    328a:	11 86       	std	Z+9, r1	; 0x09
    328c:	10 86       	std	Z+8, r1	; 0x08
{
	if(!firstInstance)
    328e:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN18SerialPortExpander13firstInstanceE>
    3292:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <_ZN18SerialPortExpander13firstInstanceE+0x1>
    3296:	89 2b       	or	r24, r25
    3298:	31 f4       	brne	.+12     	; 0x32a6 <_ZN18SerialPortExpanderC1Ev+0x6c>
	{
		firstInstance = this;
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <_ZN18SerialPortExpander13firstInstanceE+0x1>
    32a2:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <_ZN18SerialPortExpander13firstInstanceE>
	}

} //SerialPortExpander
    32a6:	00 00       	nop
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	08 95       	ret

000032b2 <_ZN18SerialPortExpander4initEv>:


void SerialPortExpander::init(void)
{
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	1f 92       	push	r1
    32b8:	1f 92       	push	r1
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	9a 83       	std	Y+2, r25	; 0x02
    32c0:	89 83       	std	Y+1, r24	; 0x01
	pinMode(s1, OUTPUT);              //Set the digital pin as output
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	9a 81       	ldd	r25, Y+2	; 0x02
    32c6:	fc 01       	movw	r30, r24
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
	pinMode(s2, OUTPUT);              //Set the digital pin as output
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	9a 81       	ldd	r25, Y+2	; 0x02
    32d6:	fc 01       	movw	r30, r24
    32d8:	84 81       	ldd	r24, Z+4	; 0x04
    32da:	95 81       	ldd	r25, Z+5	; 0x05
    32dc:	61 e0       	ldi	r22, 0x01	; 1
    32de:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
	pinMode(s3, OUTPUT);              //Set the digital pin as output
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	9a 81       	ldd	r25, Y+2	; 0x02
    32e6:	fc 01       	movw	r30, r24
    32e8:	86 81       	ldd	r24, Z+6	; 0x06
    32ea:	97 81       	ldd	r25, Z+7	; 0x07
    32ec:	61 e0       	ldi	r22, 0x01	; 1
    32ee:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
	
	
	Serial1.begin(SERIAL_BAUD);
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	52 ec       	ldi	r21, 0xC2	; 194
    32f6:	61 e0       	ldi	r22, 0x01	; 1
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	8c e6       	ldi	r24, 0x6C	; 108
    32fc:	94 e0       	ldi	r25, 0x04	; 4
    32fe:	7b df       	rcall	.-266    	; 0x31f6 <_ZN14HardwareSerial5beginEm>
	Serial1.setTimeout(50);
    3300:	42 e3       	ldi	r20, 0x32	; 50
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	60 e0       	ldi	r22, 0x00	; 0
    3306:	70 e0       	ldi	r23, 0x00	; 0
    3308:	8c e6       	ldi	r24, 0x6C	; 108
    330a:	94 e0       	ldi	r25, 0x04	; 4
    330c:	0e 94 cf 42 	call	0x859e	; 0x859e <_ZN6Stream10setTimeoutEm>
	
}
    3310:	00 00       	nop
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	08 95       	ret

0000331c <_ZN18SerialPortExpander21ProcessSerialExpanderEP13SerialCommand>:

void SerialPortExpander::ProcessSerialExpander(SerialCommand *sCommand)
{
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	c8 56       	subi	r28, 0x68	; 104
    3326:	d1 09       	sbc	r29, r1
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	f8 94       	cli
    332c:	de bf       	out	0x3e, r29	; 62
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	cd bf       	out	0x3d, r28	; 61
    3332:	9e 01       	movw	r18, r28
    3334:	2b 59       	subi	r18, 0x9B	; 155
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	f9 01       	movw	r30, r18
    333a:	91 83       	std	Z+1, r25	; 0x01
    333c:	80 83       	st	Z, r24
    333e:	ce 01       	movw	r24, r28
    3340:	89 59       	subi	r24, 0x99	; 153
    3342:	9f 4f       	sbci	r25, 0xFF	; 255
    3344:	fc 01       	movw	r30, r24
    3346:	71 83       	std	Z+1, r23	; 0x01
    3348:	60 83       	st	Z, r22

	Open_channel(sCommand);
    334a:	ce 01       	movw	r24, r28
    334c:	89 59       	subi	r24, 0x99	; 153
    334e:	9f 4f       	sbci	r25, 0xFF	; 255
    3350:	fc 01       	movw	r30, r24
    3352:	20 81       	ld	r18, Z
    3354:	31 81       	ldd	r19, Z+1	; 0x01
    3356:	ce 01       	movw	r24, r28
    3358:	8b 59       	subi	r24, 0x9B	; 155
    335a:	9f 4f       	sbci	r25, 0xFF	; 255
    335c:	fc 01       	movw	r30, r24
    335e:	80 81       	ld	r24, Z
    3360:	91 81       	ldd	r25, Z+1	; 0x01
    3362:	b9 01       	movw	r22, r18
    3364:	1d d0       	rcall	.+58     	; 0x33a0 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand>
	//Serial.print(sCommand->hardwareType ";");

	char charBuilder[100];
	
	//BUILD_SERIAL_OUTPUT(sCommand->hardwareType, sCommand->command, charBuilder);
	BuildSerialOutput(sCommand, charBuilder);
    3366:	ce 01       	movw	r24, r28
    3368:	89 59       	subi	r24, 0x99	; 153
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	fc 01       	movw	r30, r24
    336e:	80 81       	ld	r24, Z
    3370:	91 81       	ldd	r25, Z+1	; 0x01
    3372:	9e 01       	movw	r18, r28
    3374:	2f 5f       	subi	r18, 0xFF	; 255
    3376:	3f 4f       	sbci	r19, 0xFF	; 255
    3378:	b9 01       	movw	r22, r18
    337a:	74 d3       	rcall	.+1768   	; 0x3a64 <_Z17BuildSerialOutputP13SerialCommandPc>
	//BUILD_SERIAL_OUTPUT(sCommand, charBuilder);
	Serial1.println(charBuilder);
    337c:	ce 01       	movw	r24, r28
    337e:	01 96       	adiw	r24, 0x01	; 1
    3380:	bc 01       	movw	r22, r24
    3382:	8c e6       	ldi	r24, 0x6C	; 108
    3384:	94 e0       	ldi	r25, 0x04	; 4
    3386:	0e 94 08 42 	call	0x8410	; 0x8410 <_ZN5Print7printlnEPKc>
	//
	//Serial.println(charBuilder);            //let’s transmit the data received from the Atlas Scientific device to the serial monitor
	//}


}
    338a:	00 00       	nop
    338c:	c8 59       	subi	r28, 0x98	; 152
    338e:	df 4f       	sbci	r29, 0xFF	; 255
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	08 95       	ret

000033a0 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand>:

void SerialPortExpander::Open_channel(SerialCommand *sCommand)
{                             //This function controls what UART port is opened.
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand+0x6>
    33a6:	1f 92       	push	r1
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	89 83       	std	Y+1, r24	; 0x01
    33b0:	7c 83       	std	Y+4, r23	; 0x04
    33b2:	6b 83       	std	Y+3, r22	; 0x03

	//port = atoi(sCommand->hardwareType);                           //Convert the ASCII char value of the port to be opened into an int
	port = sCommand->hardwareType;
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	fc 01       	movw	r30, r24
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	9c 01       	movw	r18, r24
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	9a 81       	ldd	r25, Y+2	; 0x02
    33c4:	fc 01       	movw	r30, r24
    33c6:	31 87       	std	Z+9, r19	; 0x09
    33c8:	20 87       	std	Z+8, r18	; 0x08
	if (port < 1 || port > 8)port = 1;              //If the value of the port is within range (1-8) then open that port. If it’s not in range set it port 1
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	fc 01       	movw	r30, r24
    33d0:	80 85       	ldd	r24, Z+8	; 0x08
    33d2:	91 85       	ldd	r25, Z+9	; 0x09
    33d4:	18 16       	cp	r1, r24
    33d6:	19 06       	cpc	r1, r25
    33d8:	3c f4       	brge	.+14     	; 0x33e8 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand+0x48>
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	fc 01       	movw	r30, r24
    33e0:	80 85       	ldd	r24, Z+8	; 0x08
    33e2:	91 85       	ldd	r25, Z+9	; 0x09
    33e4:	09 97       	sbiw	r24, 0x09	; 9
    33e6:	3c f0       	brlt	.+14     	; 0x33f6 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand+0x56>
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	21 e0       	ldi	r18, 0x01	; 1
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	fc 01       	movw	r30, r24
    33f2:	31 87       	std	Z+9, r19	; 0x09
    33f4:	20 87       	std	Z+8, r18	; 0x08
	port -= 1;                                      //So, this device knows its ports as 0-1 but we have them labeled 1-8 by subtracting one from the port to be opened we correct for this.
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	fc 01       	movw	r30, r24
    33fc:	80 85       	ldd	r24, Z+8	; 0x08
    33fe:	91 85       	ldd	r25, Z+9	; 0x09
    3400:	9c 01       	movw	r18, r24
    3402:	21 50       	subi	r18, 0x01	; 1
    3404:	31 09       	sbc	r19, r1
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	fc 01       	movw	r30, r24
    340c:	31 87       	std	Z+9, r19	; 0x09
    340e:	20 87       	std	Z+8, r18	; 0x08

	digitalWrite(s1, bitRead(port, 0));             //Here we have two commands combined into one.
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	9a 81       	ldd	r25, Y+2	; 0x02
    3414:	fc 01       	movw	r30, r24
    3416:	80 85       	ldd	r24, Z+8	; 0x08
    3418:	91 85       	ldd	r25, Z+9	; 0x09
    341a:	28 2f       	mov	r18, r24
    341c:	21 70       	andi	r18, 0x01	; 1
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	fc 01       	movw	r30, r24
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	93 81       	ldd	r25, Z+3	; 0x03
    3428:	62 2f       	mov	r22, r18
    342a:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
	digitalWrite(s2, bitRead(port, 1));             //The digitalWrite command sets a pin to 1/0 (high or low)
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	fc 01       	movw	r30, r24
    3434:	80 85       	ldd	r24, Z+8	; 0x08
    3436:	91 85       	ldd	r25, Z+9	; 0x09
    3438:	95 95       	asr	r25
    343a:	87 95       	ror	r24
    343c:	28 2f       	mov	r18, r24
    343e:	21 70       	andi	r18, 0x01	; 1
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	fc 01       	movw	r30, r24
    3446:	84 81       	ldd	r24, Z+4	; 0x04
    3448:	95 81       	ldd	r25, Z+5	; 0x05
    344a:	62 2f       	mov	r22, r18
    344c:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
	digitalWrite(s3, bitRead(port, 2));             //The bitRead command tells us what the bit value is for a specific bit location of a number
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	9a 81       	ldd	r25, Y+2	; 0x02
    3454:	fc 01       	movw	r30, r24
    3456:	80 85       	ldd	r24, Z+8	; 0x08
    3458:	91 85       	ldd	r25, Z+9	; 0x09
    345a:	95 95       	asr	r25
    345c:	87 95       	ror	r24
    345e:	95 95       	asr	r25
    3460:	87 95       	ror	r24
    3462:	28 2f       	mov	r18, r24
    3464:	21 70       	andi	r18, 0x01	; 1
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
    346a:	fc 01       	movw	r30, r24
    346c:	86 81       	ldd	r24, Z+6	; 0x06
    346e:	97 81       	ldd	r25, Z+7	; 0x07
    3470:	62 2f       	mov	r22, r18
    3472:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
	delay(2);                                       //this is needed to make sure the channel switching event has completed
    3476:	62 e0       	ldi	r22, 0x02	; 2
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	0e 94 ed 43 	call	0x87da	; 0x87da <delay>
	return;                                         //go back
    3482:	00 00       	nop
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	08 95       	ret

00003492 <_ZN18SerialPortExpanderD1Ev>:

// default destructor
SerialPortExpander::~SerialPortExpander()
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	1f 92       	push	r1
    3498:	1f 92       	push	r1
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
{
} //~SerialPortExpander
    34a2:	00 00       	nop
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	08 95       	ret

000034ae <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	1f 92       	push	r1
    34b4:	1f 92       	push	r1
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	1f 92       	push	r1
    34d2:	1f 92       	push	r1
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	9a 83       	std	Y+2, r25	; 0x02
    34da:	89 83       	std	Y+1, r24	; 0x01
    34dc:	00 00       	nop
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <_ZN5PrintC1ERKS_>:
      return chars2;
    }
  }
  
  return chars2;
}
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <_ZN5PrintC1ERKS_+0x6>
    34ee:	1f 92       	push	r1
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	9a 83       	std	Y+2, r25	; 0x02
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	7c 83       	std	Y+4, r23	; 0x04
    34fa:	6b 83       	std	Y+3, r22	; 0x03
    34fc:	28 e0       	ldi	r18, 0x08	; 8
    34fe:	33 e0       	ldi	r19, 0x03	; 3
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	fc 01       	movw	r30, r24
    3506:	31 83       	std	Z+1, r19	; 0x01
    3508:	20 83       	st	Z, r18
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	fc 01       	movw	r30, r24
    3510:	22 81       	ldd	r18, Z+2	; 0x02
    3512:	33 81       	ldd	r19, Z+3	; 0x03
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	9a 81       	ldd	r25, Y+2	; 0x02
    3518:	fc 01       	movw	r30, r24
    351a:	33 83       	std	Z+3, r19	; 0x03
    351c:	22 83       	std	Z+2, r18	; 0x02
    351e:	00 00       	nop
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	08 95       	ret

0000352e <_ZN6StreamC1ERKS_>:
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	00 d0       	rcall	.+0      	; 0x3534 <_ZN6StreamC1ERKS_+0x6>
    3534:	1f 92       	push	r1
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	9a 83       	std	Y+2, r25	; 0x02
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	7c 83       	std	Y+4, r23	; 0x04
    3540:	6b 83       	std	Y+3, r22	; 0x03
    3542:	2b 81       	ldd	r18, Y+3	; 0x03
    3544:	3c 81       	ldd	r19, Y+4	; 0x04
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	b9 01       	movw	r22, r18
    354c:	cd df       	rcall	.-102    	; 0x34e8 <_ZN5PrintC1ERKS_>
    354e:	28 ed       	ldi	r18, 0xD8	; 216
    3550:	32 e0       	ldi	r19, 0x02	; 2
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	fc 01       	movw	r30, r24
    3558:	31 83       	std	Z+1, r19	; 0x01
    355a:	20 83       	st	Z, r18
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	9c 81       	ldd	r25, Y+4	; 0x04
    3560:	fc 01       	movw	r30, r24
    3562:	84 81       	ldd	r24, Z+4	; 0x04
    3564:	95 81       	ldd	r25, Z+5	; 0x05
    3566:	a6 81       	ldd	r26, Z+6	; 0x06
    3568:	b7 81       	ldd	r27, Z+7	; 0x07
    356a:	29 81       	ldd	r18, Y+1	; 0x01
    356c:	3a 81       	ldd	r19, Y+2	; 0x02
    356e:	f9 01       	movw	r30, r18
    3570:	84 83       	std	Z+4, r24	; 0x04
    3572:	95 83       	std	Z+5, r25	; 0x05
    3574:	a6 83       	std	Z+6, r26	; 0x06
    3576:	b7 83       	std	Z+7, r27	; 0x07
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	fc 01       	movw	r30, r24
    357e:	80 85       	ldd	r24, Z+8	; 0x08
    3580:	91 85       	ldd	r25, Z+9	; 0x09
    3582:	a2 85       	ldd	r26, Z+10	; 0x0a
    3584:	b3 85       	ldd	r27, Z+11	; 0x0b
    3586:	29 81       	ldd	r18, Y+1	; 0x01
    3588:	3a 81       	ldd	r19, Y+2	; 0x02
    358a:	f9 01       	movw	r30, r18
    358c:	80 87       	std	Z+8, r24	; 0x08
    358e:	91 87       	std	Z+9, r25	; 0x09
    3590:	a2 87       	std	Z+10, r26	; 0x0a
    3592:	b3 87       	std	Z+11, r27	; 0x0b
    3594:	00 00       	nop
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	08 95       	ret

000035a4 <_ZN14HardwareSerialC1ERKS_>:
    35a4:	cf 93       	push	r28
    35a6:	df 93       	push	r29
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <_ZN14HardwareSerialC1ERKS_+0x6>
    35aa:	1f 92       	push	r1
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	9a 83       	std	Y+2, r25	; 0x02
    35b2:	89 83       	std	Y+1, r24	; 0x01
    35b4:	7c 83       	std	Y+4, r23	; 0x04
    35b6:	6b 83       	std	Y+3, r22	; 0x03
    35b8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ba:	3c 81       	ldd	r19, Y+4	; 0x04
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	b9 01       	movw	r22, r18
    35c2:	b5 df       	rcall	.-150    	; 0x352e <_ZN6StreamC1ERKS_>
    35c4:	26 ef       	ldi	r18, 0xF6	; 246
    35c6:	32 e0       	ldi	r19, 0x02	; 2
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	fc 01       	movw	r30, r24
    35ce:	31 83       	std	Z+1, r19	; 0x01
    35d0:	20 83       	st	Z, r18
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	fc 01       	movw	r30, r24
    35d8:	24 85       	ldd	r18, Z+12	; 0x0c
    35da:	35 85       	ldd	r19, Z+13	; 0x0d
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	9a 81       	ldd	r25, Y+2	; 0x02
    35e0:	fc 01       	movw	r30, r24
    35e2:	35 87       	std	Z+13, r19	; 0x0d
    35e4:	24 87       	std	Z+12, r18	; 0x0c
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	fc 01       	movw	r30, r24
    35ec:	26 85       	ldd	r18, Z+14	; 0x0e
    35ee:	37 85       	ldd	r19, Z+15	; 0x0f
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	9a 81       	ldd	r25, Y+2	; 0x02
    35f4:	fc 01       	movw	r30, r24
    35f6:	37 87       	std	Z+15, r19	; 0x0f
    35f8:	26 87       	std	Z+14, r18	; 0x0e
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	fc 01       	movw	r30, r24
    3600:	20 89       	ldd	r18, Z+16	; 0x10
    3602:	31 89       	ldd	r19, Z+17	; 0x11
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	fc 01       	movw	r30, r24
    360a:	31 8b       	std	Z+17, r19	; 0x11
    360c:	20 8b       	std	Z+16, r18	; 0x10
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	fc 01       	movw	r30, r24
    3614:	22 89       	ldd	r18, Z+18	; 0x12
    3616:	33 89       	ldd	r19, Z+19	; 0x13
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	fc 01       	movw	r30, r24
    361e:	33 8b       	std	Z+19, r19	; 0x13
    3620:	22 8b       	std	Z+18, r18	; 0x12
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	fc 01       	movw	r30, r24
    3628:	24 89       	ldd	r18, Z+20	; 0x14
    362a:	35 89       	ldd	r19, Z+21	; 0x15
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	9a 81       	ldd	r25, Y+2	; 0x02
    3630:	fc 01       	movw	r30, r24
    3632:	35 8b       	std	Z+21, r19	; 0x15
    3634:	24 8b       	std	Z+20, r18	; 0x14
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	fc 01       	movw	r30, r24
    363c:	26 89       	ldd	r18, Z+22	; 0x16
    363e:	37 89       	ldd	r19, Z+23	; 0x17
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	9a 81       	ldd	r25, Y+2	; 0x02
    3644:	fc 01       	movw	r30, r24
    3646:	37 8b       	std	Z+23, r19	; 0x17
    3648:	26 8b       	std	Z+22, r18	; 0x16
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	fc 01       	movw	r30, r24
    3650:	20 8d       	ldd	r18, Z+24	; 0x18
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	9a 81       	ldd	r25, Y+2	; 0x02
    3656:	fc 01       	movw	r30, r24
    3658:	20 8f       	std	Z+24, r18	; 0x18
    365a:	8b 81       	ldd	r24, Y+3	; 0x03
    365c:	9c 81       	ldd	r25, Y+4	; 0x04
    365e:	fc 01       	movw	r30, r24
    3660:	21 8d       	ldd	r18, Z+25	; 0x19
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	9a 81       	ldd	r25, Y+2	; 0x02
    3666:	fc 01       	movw	r30, r24
    3668:	21 8f       	std	Z+25, r18	; 0x19
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	9c 81       	ldd	r25, Y+4	; 0x04
    366e:	fc 01       	movw	r30, r24
    3670:	22 8d       	ldd	r18, Z+26	; 0x1a
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	fc 01       	movw	r30, r24
    3678:	22 8f       	std	Z+26, r18	; 0x1a
    367a:	8b 81       	ldd	r24, Y+3	; 0x03
    367c:	9c 81       	ldd	r25, Y+4	; 0x04
    367e:	fc 01       	movw	r30, r24
    3680:	23 8d       	ldd	r18, Z+27	; 0x1b
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	fc 01       	movw	r30, r24
    3688:	23 8f       	std	Z+27, r18	; 0x1b
    368a:	8b 81       	ldd	r24, Y+3	; 0x03
    368c:	9c 81       	ldd	r25, Y+4	; 0x04
    368e:	fc 01       	movw	r30, r24
    3690:	24 8d       	ldd	r18, Z+28	; 0x1c
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	fc 01       	movw	r30, r24
    3698:	24 8f       	std	Z+28, r18	; 0x1c
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	2b 81       	ldd	r18, Y+3	; 0x03
    36a0:	3c 81       	ldd	r19, Y+4	; 0x04
    36a2:	40 e4       	ldi	r20, 0x40	; 64
    36a4:	f9 01       	movw	r30, r18
    36a6:	7d 96       	adiw	r30, 0x1d	; 29
    36a8:	dc 01       	movw	r26, r24
    36aa:	5d 96       	adiw	r26, 0x1d	; 29
    36ac:	01 90       	ld	r0, Z+
    36ae:	0d 92       	st	X+, r0
    36b0:	4a 95       	dec	r20
    36b2:	e1 f7       	brne	.-8      	; 0x36ac <_ZN14HardwareSerialC1ERKS_+0x108>
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	9a 81       	ldd	r25, Y+2	; 0x02
    36b8:	9c 01       	movw	r18, r24
    36ba:	23 5a       	subi	r18, 0xA3	; 163
    36bc:	3f 4f       	sbci	r19, 0xFF	; 255
    36be:	8b 81       	ldd	r24, Y+3	; 0x03
    36c0:	9c 81       	ldd	r25, Y+4	; 0x04
    36c2:	83 5a       	subi	r24, 0xA3	; 163
    36c4:	9f 4f       	sbci	r25, 0xFF	; 255
    36c6:	40 e4       	ldi	r20, 0x40	; 64
    36c8:	fc 01       	movw	r30, r24
    36ca:	d9 01       	movw	r26, r18
    36cc:	01 90       	ld	r0, Z+
    36ce:	0d 92       	st	X+, r0
    36d0:	4a 95       	dec	r20
    36d2:	e1 f7       	brne	.-8      	; 0x36cc <_ZN14HardwareSerialC1ERKS_+0x128>
    36d4:	00 00       	nop
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	08 95       	ret

000036e4 <_Z11CheckSerialP14HardwareSerial>:
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	c2 5a       	subi	r28, 0xA2	; 162
    36ee:	d1 09       	sbc	r29, r1
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	9e 01       	movw	r18, r28
    36fc:	2f 55       	subi	r18, 0x5F	; 95
    36fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3700:	f9 01       	movw	r30, r18
    3702:	91 83       	std	Z+1, r25	; 0x01
    3704:	80 83       	st	Z, r24
    3706:	ce 01       	movw	r24, r28
    3708:	8f 55       	subi	r24, 0x5F	; 95
    370a:	9f 4f       	sbci	r25, 0xFF	; 255
    370c:	fc 01       	movw	r30, r24
    370e:	20 81       	ld	r18, Z
    3710:	31 81       	ldd	r19, Z+1	; 0x01
    3712:	ce 01       	movw	r24, r28
    3714:	04 96       	adiw	r24, 0x04	; 4
    3716:	b9 01       	movw	r22, r18
    3718:	45 df       	rcall	.-374    	; 0x35a4 <_ZN14HardwareSerialC1ERKS_>
    371a:	8d e0       	ldi	r24, 0x0D	; 13
    371c:	8a 83       	std	Y+2, r24	; 0x02
    371e:	19 82       	std	Y+1, r1	; 0x01
    3720:	ce 01       	movw	r24, r28
    3722:	8f 55       	subi	r24, 0x5F	; 95
    3724:	9f 4f       	sbci	r25, 0xFF	; 255
    3726:	fc 01       	movw	r30, r24
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	fc 01       	movw	r30, r24
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	08 96       	adiw	r24, 0x08	; 8
    3734:	fc 01       	movw	r30, r24
    3736:	20 81       	ld	r18, Z
    3738:	31 81       	ldd	r19, Z+1	; 0x01
    373a:	ce 01       	movw	r24, r28
    373c:	8f 55       	subi	r24, 0x5F	; 95
    373e:	9f 4f       	sbci	r25, 0xFF	; 255
    3740:	fc 01       	movw	r30, r24
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	f9 01       	movw	r30, r18
    3748:	19 95       	eicall
    374a:	18 16       	cp	r1, r24
    374c:	19 06       	cpc	r1, r25
    374e:	3c f4       	brge	.+14     	; 0x375e <_Z11CheckSerialP14HardwareSerial+0x7a>
    3750:	99 81       	ldd	r25, Y+1	; 0x01
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	89 27       	eor	r24, r25
    3756:	88 23       	and	r24, r24
    3758:	11 f0       	breq	.+4      	; 0x375e <_Z11CheckSerialP14HardwareSerial+0x7a>
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	01 c0       	rjmp	.+2      	; 0x3760 <_Z11CheckSerialP14HardwareSerial+0x7c>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	88 23       	and	r24, r24
    3762:	09 f4       	brne	.+2      	; 0x3766 <_Z11CheckSerialP14HardwareSerial+0x82>
    3764:	3e c0       	rjmp	.+124    	; 0x37e2 <_Z11CheckSerialP14HardwareSerial+0xfe>
    3766:	ce 01       	movw	r24, r28
    3768:	8f 55       	subi	r24, 0x5F	; 95
    376a:	9f 4f       	sbci	r25, 0xFF	; 255
    376c:	fc 01       	movw	r30, r24
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	fc 01       	movw	r30, r24
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	0a 96       	adiw	r24, 0x0a	; 10
    377a:	fc 01       	movw	r30, r24
    377c:	20 81       	ld	r18, Z
    377e:	31 81       	ldd	r19, Z+1	; 0x01
    3780:	ce 01       	movw	r24, r28
    3782:	8f 55       	subi	r24, 0x5F	; 95
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	fc 01       	movw	r30, r24
    3788:	80 81       	ld	r24, Z
    378a:	91 81       	ldd	r25, Z+1	; 0x01
    378c:	f9 01       	movw	r30, r18
    378e:	19 95       	eicall
    3790:	8b 83       	std	Y+3, r24	; 0x03
    3792:	9b 81       	ldd	r25, Y+3	; 0x03
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	98 17       	cp	r25, r24
    3798:	b9 f0       	breq	.+46     	; 0x37c8 <_Z11CheckSerialP14HardwareSerial+0xe4>
    379a:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    379e:	88 2f       	mov	r24, r24
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	83 5c       	subi	r24, 0xC3	; 195
    37a4:	9c 4f       	sbci	r25, 0xFC	; 252
    37a6:	2b 81       	ldd	r18, Y+3	; 0x03
    37a8:	fc 01       	movw	r30, r24
    37aa:	20 83       	st	Z, r18
    37ac:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    37b6:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    37ba:	80 32       	cpi	r24, 0x20	; 32
    37bc:	08 f4       	brcc	.+2      	; 0x37c0 <_Z11CheckSerialP14HardwareSerial+0xdc>
    37be:	b0 cf       	rjmp	.-160    	; 0x3720 <_Z11CheckSerialP14HardwareSerial+0x3c>
    37c0:	8f e1       	ldi	r24, 0x1F	; 31
    37c2:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    37c6:	ac cf       	rjmp	.-168    	; 0x3720 <_Z11CheckSerialP14HardwareSerial+0x3c>
    37c8:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    37cc:	88 2f       	mov	r24, r24
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	83 5c       	subi	r24, 0xC3	; 195
    37d2:	9c 4f       	sbci	r25, 0xFC	; 252
    37d4:	fc 01       	movw	r30, r24
    37d6:	10 82       	st	Z, r1
    37d8:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	89 83       	std	Y+1, r24	; 0x01
    37e0:	9f cf       	rjmp	.-194    	; 0x3720 <_Z11CheckSerialP14HardwareSerial+0x3c>
    37e2:	ce 01       	movw	r24, r28
    37e4:	8f 55       	subi	r24, 0x5F	; 95
    37e6:	9f 4f       	sbci	r25, 0xFF	; 255
    37e8:	fc 01       	movw	r30, r24
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	fc 01       	movw	r30, r24
    37f0:	80 81       	ld	r24, Z
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	08 96       	adiw	r24, 0x08	; 8
    37f6:	fc 01       	movw	r30, r24
    37f8:	20 81       	ld	r18, Z
    37fa:	31 81       	ldd	r19, Z+1	; 0x01
    37fc:	ce 01       	movw	r24, r28
    37fe:	8f 55       	subi	r24, 0x5F	; 95
    3800:	9f 4f       	sbci	r25, 0xFF	; 255
    3802:	fc 01       	movw	r30, r24
    3804:	80 81       	ld	r24, Z
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	f9 01       	movw	r30, r18
    380a:	19 95       	eicall
    380c:	21 e0       	ldi	r18, 0x01	; 1
    380e:	18 16       	cp	r1, r24
    3810:	19 06       	cpc	r1, r25
    3812:	0c f0       	brlt	.+2      	; 0x3816 <_Z11CheckSerialP14HardwareSerial+0x132>
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	22 23       	and	r18, r18
    3818:	b1 f0       	breq	.+44     	; 0x3846 <_Z11CheckSerialP14HardwareSerial+0x162>
    381a:	ce 01       	movw	r24, r28
    381c:	8f 55       	subi	r24, 0x5F	; 95
    381e:	9f 4f       	sbci	r25, 0xFF	; 255
    3820:	fc 01       	movw	r30, r24
    3822:	80 81       	ld	r24, Z
    3824:	91 81       	ldd	r25, Z+1	; 0x01
    3826:	fc 01       	movw	r30, r24
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	0a 96       	adiw	r24, 0x0a	; 10
    382e:	fc 01       	movw	r30, r24
    3830:	20 81       	ld	r18, Z
    3832:	31 81       	ldd	r19, Z+1	; 0x01
    3834:	ce 01       	movw	r24, r28
    3836:	8f 55       	subi	r24, 0x5F	; 95
    3838:	9f 4f       	sbci	r25, 0xFF	; 255
    383a:	fc 01       	movw	r30, r24
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	f9 01       	movw	r30, r18
    3842:	19 95       	eicall
    3844:	ce cf       	rjmp	.-100    	; 0x37e2 <_Z11CheckSerialP14HardwareSerial+0xfe>
    3846:	8d e3       	ldi	r24, 0x3D	; 61
    3848:	93 e0       	ldi	r25, 0x03	; 3
    384a:	ce 55       	subi	r28, 0x5E	; 94
    384c:	df 4f       	sbci	r29, 0xFF	; 255
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	cd bf       	out	0x3d, r28	; 61
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	08 95       	ret

0000385e <_Z13GetSerialArgsPc>:




SerialCommand GetSerialArgs(char *serialData)
{
    385e:	2f 92       	push	r2
    3860:	3f 92       	push	r3
    3862:	4f 92       	push	r4
    3864:	5f 92       	push	r5
    3866:	6f 92       	push	r6
    3868:	7f 92       	push	r7
    386a:	8f 92       	push	r8
    386c:	9f 92       	push	r9
    386e:	af 92       	push	r10
    3870:	bf 92       	push	r11
    3872:	cf 92       	push	r12
    3874:	df 92       	push	r13
    3876:	ef 92       	push	r14
    3878:	ff 92       	push	r15
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	a8 97       	sbiw	r28, 0x28	; 40
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	98 a7       	std	Y+40, r25	; 0x28
    3894:	8f a3       	std	Y+39, r24	; 0x27
  SerialCommand c;
  char delim[] = ";";
    3896:	8b e3       	ldi	r24, 0x3B	; 59
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	9a 8b       	std	Y+18, r25	; 0x12
    389c:	89 8b       	std	Y+17, r24	; 0x11
  char *ptr = strtok(serialData, delim);
    389e:	9e 01       	movw	r18, r28
    38a0:	2f 5e       	subi	r18, 0xEF	; 239
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	8f a1       	ldd	r24, Y+39	; 0x27
    38a6:	98 a5       	ldd	r25, Y+40	; 0x28
    38a8:	b9 01       	movw	r22, r18
    38aa:	0e 94 5f 64 	call	0xc8be	; 0xc8be <strtok>
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
  uint16_t loopCounter = 0;
    38b2:	1c 82       	std	Y+4, r1	; 0x04
    38b4:	1b 82       	std	Y+3, r1	; 0x03
  char *splitStrings[10] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
    38b6:	24 e1       	ldi	r18, 0x14	; 20
    38b8:	ce 01       	movw	r24, r28
    38ba:	43 96       	adiw	r24, 0x13	; 19
    38bc:	fc 01       	movw	r30, r24
    38be:	32 2f       	mov	r19, r18
    38c0:	11 92       	st	Z+, r1
    38c2:	3a 95       	dec	r19
    38c4:	e9 f7       	brne	.-6      	; 0x38c0 <_Z13GetSerialArgsPc+0x62>
  
  while(ptr != NULL)
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ca:	89 2b       	or	r24, r25
    38cc:	11 f1       	breq	.+68     	; 0x3912 <_Z13GetSerialArgsPc+0xb4>
  {
    if (loopCounter <= 10){ splitStrings[loopCounter] = ptr;}
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
    38d0:	9c 81       	ldd	r25, Y+4	; 0x04
    38d2:	0b 97       	sbiw	r24, 0x0b	; 11
    38d4:	78 f4       	brcc	.+30     	; 0x38f4 <_Z13GetSerialArgsPc+0x96>
    38d6:	8b 81       	ldd	r24, Y+3	; 0x03
    38d8:	9c 81       	ldd	r25, Y+4	; 0x04
    38da:	88 0f       	add	r24, r24
    38dc:	99 1f       	adc	r25, r25
    38de:	9e 01       	movw	r18, r28
    38e0:	2f 5f       	subi	r18, 0xFF	; 255
    38e2:	3f 4f       	sbci	r19, 0xFF	; 255
    38e4:	82 0f       	add	r24, r18
    38e6:	93 1f       	adc	r25, r19
    38e8:	42 96       	adiw	r24, 0x12	; 18
    38ea:	29 81       	ldd	r18, Y+1	; 0x01
    38ec:	3a 81       	ldd	r19, Y+2	; 0x02
    38ee:	fc 01       	movw	r30, r24
    38f0:	31 83       	std	Z+1, r19	; 0x01
    38f2:	20 83       	st	Z, r18
    ptr = strtok(NULL, delim);
    38f4:	ce 01       	movw	r24, r28
    38f6:	41 96       	adiw	r24, 0x11	; 17
    38f8:	bc 01       	movw	r22, r24
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	0e 94 5f 64 	call	0xc8be	; 0xc8be <strtok>
    3902:	9a 83       	std	Y+2, r25	; 0x02
    3904:	89 83       	std	Y+1, r24	; 0x01
    loopCounter++;
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	01 96       	adiw	r24, 0x01	; 1
    390c:	9c 83       	std	Y+4, r25	; 0x04
    390e:	8b 83       	std	Y+3, r24	; 0x03
  char delim[] = ";";
  char *ptr = strtok(serialData, delim);
  uint16_t loopCounter = 0;
  char *splitStrings[10] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
  
  while(ptr != NULL)
    3910:	da cf       	rjmp	.-76     	; 0x38c6 <_Z13GetSerialArgsPc+0x68>
  //for (int i = loopCounter; i < 10; i++)
  //{
	//splitStrings[i] = NULL; //null out rest of point array
  //}

  if (!ExistsInIntArray(int_hardwareTypes, array_size(int_hardwareTypes), atoi(splitStrings[0]))){return c;}
    3912:	8b 89       	ldd	r24, Y+19	; 0x13
    3914:	9c 89       	ldd	r25, Y+20	; 0x14
    3916:	0e 94 42 64 	call	0xc884	; 0xc884 <atoi>
    391a:	8c 01       	movw	r16, r24
    391c:	8a e0       	ldi	r24, 0x0A	; 10
    391e:	92 e0       	ldi	r25, 0x02	; 2
    3920:	e0 d0       	rcall	.+448    	; 0x3ae2 <_Z10array_sizeILj5EjEjRAT__T0_>
    3922:	a8 01       	movw	r20, r16
    3924:	bc 01       	movw	r22, r24
    3926:	8a e0       	ldi	r24, 0x0A	; 10
    3928:	92 e0       	ldi	r25, 0x02	; 2
    392a:	61 d0       	rcall	.+194    	; 0x39ee <_Z16ExistsInIntArrayPjjj>
    392c:	98 2f       	mov	r25, r24
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	89 27       	eor	r24, r25
    3932:	88 23       	and	r24, r24
    3934:	51 f0       	breq	.+20     	; 0x394a <_Z13GetSerialArgsPc+0xec>
    3936:	86 e0       	ldi	r24, 0x06	; 6
    3938:	fe 01       	movw	r30, r28
    393a:	3b 96       	adiw	r30, 0x0b	; 11
    393c:	de 01       	movw	r26, r28
    393e:	15 96       	adiw	r26, 0x05	; 5
    3940:	01 90       	ld	r0, Z+
    3942:	0d 92       	st	X+, r0
    3944:	8a 95       	dec	r24
    3946:	e1 f7       	brne	.-8      	; 0x3940 <_Z13GetSerialArgsPc+0xe2>
    3948:	17 c0       	rjmp	.+46     	; 0x3978 <_Z13GetSerialArgsPc+0x11a>
  
  
  c.hardwareType = atoi(splitStrings[0]);
    394a:	8b 89       	ldd	r24, Y+19	; 0x13
    394c:	9c 89       	ldd	r25, Y+20	; 0x14
    394e:	0e 94 42 64 	call	0xc884	; 0xc884 <atoi>
    3952:	9c 87       	std	Y+12, r25	; 0x0c
    3954:	8b 87       	std	Y+11, r24	; 0x0b
  c.command = splitStrings[1];
    3956:	8d 89       	ldd	r24, Y+21	; 0x15
    3958:	9e 89       	ldd	r25, Y+22	; 0x16
    395a:	9e 87       	std	Y+14, r25	; 0x0e
    395c:	8d 87       	std	Y+13, r24	; 0x0d
  c.value = splitStrings[2];
    395e:	8f 89       	ldd	r24, Y+23	; 0x17
    3960:	98 8d       	ldd	r25, Y+24	; 0x18
    3962:	98 8b       	std	Y+16, r25	; 0x10
    3964:	8f 87       	std	Y+15, r24	; 0x0f
  
  return c;
    3966:	86 e0       	ldi	r24, 0x06	; 6
    3968:	fe 01       	movw	r30, r28
    396a:	3b 96       	adiw	r30, 0x0b	; 11
    396c:	de 01       	movw	r26, r28
    396e:	15 96       	adiw	r26, 0x05	; 5
    3970:	01 90       	ld	r0, Z+
    3972:	0d 92       	st	X+, r0
    3974:	8a 95       	dec	r24
    3976:	e1 f7       	brne	.-8      	; 0x3970 <_Z13GetSerialArgsPc+0x112>
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	5d 81       	ldd	r21, Y+5	; 0x05
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	4e 81       	ldd	r20, Y+6	; 0x06
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	3f 81       	ldd	r19, Y+7	; 0x07
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	28 85       	ldd	r18, Y+8	; 0x08
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	99 85       	ldd	r25, Y+9	; 0x09
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3990:	25 2e       	mov	r2, r21
    3992:	34 2e       	mov	r3, r20
    3994:	43 2e       	mov	r4, r19
    3996:	52 2e       	mov	r5, r18
    3998:	69 2e       	mov	r6, r25
    399a:	78 2e       	mov	r7, r24
    399c:	a2 2c       	mov	r10, r2
    399e:	b3 2c       	mov	r11, r3
    39a0:	c4 2c       	mov	r12, r4
    39a2:	d5 2c       	mov	r13, r5
    39a4:	e6 2c       	mov	r14, r6
    39a6:	f7 2c       	mov	r15, r7
    39a8:	08 2d       	mov	r16, r8
    39aa:	19 2d       	mov	r17, r9

}
    39ac:	2a 2d       	mov	r18, r10
    39ae:	3b 2d       	mov	r19, r11
    39b0:	4c 2d       	mov	r20, r12
    39b2:	5d 2d       	mov	r21, r13
    39b4:	6e 2d       	mov	r22, r14
    39b6:	7f 2d       	mov	r23, r15
    39b8:	80 2f       	mov	r24, r16
    39ba:	91 2f       	mov	r25, r17
    39bc:	a8 96       	adiw	r28, 0x28	; 40
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	ff 90       	pop	r15
    39d2:	ef 90       	pop	r14
    39d4:	df 90       	pop	r13
    39d6:	cf 90       	pop	r12
    39d8:	bf 90       	pop	r11
    39da:	af 90       	pop	r10
    39dc:	9f 90       	pop	r9
    39de:	8f 90       	pop	r8
    39e0:	7f 90       	pop	r7
    39e2:	6f 90       	pop	r6
    39e4:	5f 90       	pop	r5
    39e6:	4f 90       	pop	r4
    39e8:	3f 90       	pop	r3
    39ea:	2f 90       	pop	r2
    39ec:	08 95       	ret

000039ee <_Z16ExistsInIntArrayPjjj>:

bool ExistsInIntArray(uint16_t *arrayToCheck, size_t arraySize, uint16_t numberToCheck)
{
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	28 97       	sbiw	r28, 0x08	; 8
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	9c 83       	std	Y+4, r25	; 0x04
    3a04:	8b 83       	std	Y+3, r24	; 0x03
    3a06:	7e 83       	std	Y+6, r23	; 0x06
    3a08:	6d 83       	std	Y+5, r22	; 0x05
    3a0a:	58 87       	std	Y+8, r21	; 0x08
    3a0c:	4f 83       	std	Y+7, r20	; 0x07
	

  for (unsigned int i = 0; i < arraySize; i++)
    3a0e:	1a 82       	std	Y+2, r1	; 0x02
    3a10:	19 82       	std	Y+1, r1	; 0x01
    3a12:	29 81       	ldd	r18, Y+1	; 0x01
    3a14:	3a 81       	ldd	r19, Y+2	; 0x02
    3a16:	8d 81       	ldd	r24, Y+5	; 0x05
    3a18:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1a:	28 17       	cp	r18, r24
    3a1c:	39 07       	cpc	r19, r25
    3a1e:	c0 f4       	brcc	.+48     	; 0x3a50 <_Z16ExistsInIntArrayPjjj+0x62>
  {
	  if (arrayToCheck[i] == numberToCheck)
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	2b 81       	ldd	r18, Y+3	; 0x03
    3a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a2c:	82 0f       	add	r24, r18
    3a2e:	93 1f       	adc	r25, r19
    3a30:	fc 01       	movw	r30, r24
    3a32:	20 81       	ld	r18, Z
    3a34:	31 81       	ldd	r19, Z+1	; 0x01
    3a36:	8f 81       	ldd	r24, Y+7	; 0x07
    3a38:	98 85       	ldd	r25, Y+8	; 0x08
    3a3a:	28 17       	cp	r18, r24
    3a3c:	39 07       	cpc	r19, r25
    3a3e:	11 f4       	brne	.+4      	; 0x3a44 <_Z16ExistsInIntArrayPjjj+0x56>
	  {
		  return true;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	07 c0       	rjmp	.+14     	; 0x3a52 <_Z16ExistsInIntArrayPjjj+0x64>

bool ExistsInIntArray(uint16_t *arrayToCheck, size_t arraySize, uint16_t numberToCheck)
{
	

  for (unsigned int i = 0; i < arraySize; i++)
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	01 96       	adiw	r24, 0x01	; 1
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	e1 cf       	rjmp	.-62     	; 0x3a12 <_Z16ExistsInIntArrayPjjj+0x24>
	  if (arrayToCheck[i] == numberToCheck)
	  {
		  return true;
	  }
  }
  return false;
    3a50:	80 e0       	ldi	r24, 0x00	; 0
}
    3a52:	28 96       	adiw	r28, 0x08	; 8
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	08 95       	ret

00003a64 <_Z17BuildSerialOutputP13SerialCommandPc>:

void BuildSerialOutput(SerialCommand *sCommand, char *outputBuffer)
{
    3a64:	cf 93       	push	r28
    3a66:	df 93       	push	r29
    3a68:	00 d0       	rcall	.+0      	; 0x3a6a <_Z17BuildSerialOutputP13SerialCommandPc+0x6>
    3a6a:	1f 92       	push	r1
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	9a 83       	std	Y+2, r25	; 0x02
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	7c 83       	std	Y+4, r23	; 0x04
    3a76:	6b 83       	std	Y+3, r22	; 0x03
	sprintf(outputBuffer, OUTPUT_STRING_FORMAT, sCommand->hardwareType, sCommand->command, sCommand->value); 
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	44 81       	ldd	r20, Z+4	; 0x04
    3a80:	55 81       	ldd	r21, Z+5	; 0x05
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	9a 81       	ldd	r25, Y+2	; 0x02
    3a86:	fc 01       	movw	r30, r24
    3a88:	22 81       	ldd	r18, Z+2	; 0x02
    3a8a:	33 81       	ldd	r19, Z+3	; 0x03
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a90:	fc 01       	movw	r30, r24
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	65 2f       	mov	r22, r21
    3a98:	6f 93       	push	r22
    3a9a:	4f 93       	push	r20
    3a9c:	43 2f       	mov	r20, r19
    3a9e:	4f 93       	push	r20
    3aa0:	2f 93       	push	r18
    3aa2:	29 2f       	mov	r18, r25
    3aa4:	2f 93       	push	r18
    3aa6:	8f 93       	push	r24
    3aa8:	85 e1       	ldi	r24, 0x15	; 21
    3aaa:	92 e0       	ldi	r25, 0x02	; 2
    3aac:	89 2f       	mov	r24, r25
    3aae:	8f 93       	push	r24
    3ab0:	85 e1       	ldi	r24, 0x15	; 21
    3ab2:	92 e0       	ldi	r25, 0x02	; 2
    3ab4:	8f 93       	push	r24
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	8f 93       	push	r24
    3aba:	8b 81       	ldd	r24, Y+3	; 0x03
    3abc:	8f 93       	push	r24
    3abe:	0e 94 2e 65 	call	0xca5c	; 0xca5c <sprintf>
    3ac2:	8d b7       	in	r24, 0x3d	; 61
    3ac4:	9e b7       	in	r25, 0x3e	; 62
    3ac6:	0a 96       	adiw	r24, 0x0a	; 10
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
}
    3ad2:	00 00       	nop
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	08 95       	ret

00003ae2 <_Z10array_sizeILj5EjEjRAT__T0_>:

template<size_t SIZE, class T> inline size_t array_size(T (&arr)[SIZE]) {
    3ae2:	cf 93       	push	r28
    3ae4:	df 93       	push	r29
    3ae6:	1f 92       	push	r1
    3ae8:	1f 92       	push	r1
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
	return SIZE;
    3af2:	85 e0       	ldi	r24, 0x05	; 5
    3af4:	90 e0       	ldi	r25, 0x00	; 0
}
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	08 95       	ret

00003b00 <setup>:
Screen screen;



void setup()
{
    3b00:	ef 92       	push	r14
    3b02:	ff 92       	push	r15
    3b04:	0f 93       	push	r16
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
	Serial.begin(SERIAL_BAUD);
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	52 ec       	ldi	r21, 0xC2	; 194
    3b12:	61 e0       	ldi	r22, 0x01	; 1
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	8f ec       	ldi	r24, 0xCF	; 207
    3b18:	93 e0       	ldi	r25, 0x03	; 3
    3b1a:	6d db       	rcall	.-2342   	; 0x31f6 <_ZN14HardwareSerial5beginEm>
	
	
	spcProcessing.init();
    3b1c:	85 e6       	ldi	r24, 0x65	; 101
    3b1e:	93 e0       	ldi	r25, 0x03	; 3
    3b20:	05 d3       	rcall	.+1546   	; 0x412c <_ZN13SpcProcessing4initEv>
	serialPortExpander.init();
    3b22:	8e e7       	ldi	r24, 0x7E	; 126
    3b24:	93 e0       	ldi	r25, 0x03	; 3
    3b26:	c5 db       	rcall	.-2166   	; 0x32b2 <_ZN18SerialPortExpander4initEv>
	screen.init();
    3b28:	8c ec       	ldi	r24, 0xCC	; 204
    3b2a:	93 e0       	ldi	r25, 0x03	; 3
    3b2c:	a7 da       	rcall	.-2738   	; 0x307c <_ZN6Screen4initEv>
    3b2e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SIMULATIONMODE>

	IsInSimulationMode = SIMULATIONMODE;
    3b32:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <IsInSimulationMode>
    3b36:	e1 2c       	mov	r14, r1
	TaskCheckSPC
	,  (const portCHAR *)"CheckSPC"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,   2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3b38:	f1 2c       	mov	r15, r1
    3b3a:	02 e0       	ldi	r16, 0x02	; 2
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	44 ef       	ldi	r20, 0xF4	; 244
    3b42:	51 e0       	ldi	r21, 0x01	; 1
    3b44:	6e e1       	ldi	r22, 0x1E	; 30
    3b46:	72 e0       	ldi	r23, 0x02	; 2
    3b48:	8b ee       	ldi	r24, 0xEB	; 235
    3b4a:	9d e1       	ldi	r25, 0x1D	; 29
    3b4c:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <xTaskCreate>
    3b50:	e1 2c       	mov	r14, r1
	TaskCheckSerialExpander
	,  (const portCHAR *)"CheckSerialExpander"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3b52:	f1 2c       	mov	r15, r1
    3b54:	02 e0       	ldi	r16, 0x02	; 2
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	44 ef       	ldi	r20, 0xF4	; 244
    3b5c:	51 e0       	ldi	r21, 0x01	; 1
    3b5e:	67 e2       	ldi	r22, 0x27	; 39
    3b60:	72 e0       	ldi	r23, 0x02	; 2
    3b62:	8b ef       	ldi	r24, 0xFB	; 251
    3b64:	9d e1       	ldi	r25, 0x1D	; 29
    3b66:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <xTaskCreate>
    3b6a:	e1 2c       	mov	r14, r1
	TaskRunScreen
	,  (const portCHAR *)"RunScreen"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3b6c:	f1 2c       	mov	r15, r1
    3b6e:	02 e0       	ldi	r16, 0x02	; 2
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	44 ef       	ldi	r20, 0xF4	; 244
    3b76:	51 e0       	ldi	r21, 0x01	; 1
    3b78:	6b e3       	ldi	r22, 0x3B	; 59
    3b7a:	72 e0       	ldi	r23, 0x02	; 2
    3b7c:	86 e1       	ldi	r24, 0x16	; 22
    3b7e:	9e e1       	ldi	r25, 0x1E	; 30
    3b80:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <xTaskCreate>
    3b84:	e1 2c       	mov	r14, r1
	TaskCheckSerialCommands
	,  (const portCHAR *)"CheckSerialCommands"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3b86:	f1 2c       	mov	r15, r1
    3b88:	02 e0       	ldi	r16, 0x02	; 2
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	44 ef       	ldi	r20, 0xF4	; 244
    3b90:	51 e0       	ldi	r21, 0x01	; 1
    3b92:	65 e4       	ldi	r22, 0x45	; 69
    3b94:	72 e0       	ldi	r23, 0x02	; 2
    3b96:	88 e0       	ldi	r24, 0x08	; 8
    3b98:	9e e1       	ldi	r25, 0x1E	; 30
    3b9a:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <xTaskCreate>
    3b9e:	e1 2c       	mov	r14, r1
	TaskRunSimulation
	,  (const portCHAR *)"RunSimulation"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3ba0:	f1 2c       	mov	r15, r1
    3ba2:	02 e0       	ldi	r16, 0x02	; 2
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	44 ef       	ldi	r20, 0xF4	; 244
    3baa:	51 e0       	ldi	r21, 0x01	; 1
    3bac:	69 e5       	ldi	r22, 0x59	; 89
    3bae:	72 e0       	ldi	r23, 0x02	; 2
    3bb0:	8a e2       	ldi	r24, 0x2A	; 42
    3bb2:	9e e1       	ldi	r25, 0x1E	; 30
    3bb4:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <xTaskCreate>
    3bb8:	00 00       	nop


	
}
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	0f 91       	pop	r16
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	08 95       	ret

00003bc6 <loop>:
    3bc6:	cf 93       	push	r28

void loop()
{
    3bc8:	df 93       	push	r29
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
	//nothing to do here, all done in RTOS tasks
}
    3bce:	00 00       	nop
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	08 95       	ret

00003bd6 <_Z12TaskCheckSPCPv>:

void TaskCheckSPC(void *pvParameters)  // This is a task.
{
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	1f 92       	push	r1
    3bdc:	1f 92       	push	r1
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	9a 83       	std	Y+2, r25	; 0x02
    3be4:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;
	

	for (;;) // A Task shall never return or exit.
	{
		spcProcessing.RunSPCDataLoop();
    3be6:	85 e6       	ldi	r24, 0x65	; 101
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	ce d2       	rcall	.+1436   	; 0x4188 <_ZN13SpcProcessing14RunSPCDataLoopEv>
		vTaskDelay( 1000 / portTICK_PERIOD_MS); // wait for one second
    3bec:	8e e3       	ldi	r24, 0x3E	; 62
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	0e 94 17 4c 	call	0x982e	; 0x982e <vTaskDelay>
void TaskCheckSPC(void *pvParameters)  // This is a task.
{
	(void) pvParameters;
	

	for (;;) // A Task shall never return or exit.
    3bf4:	f8 cf       	rjmp	.-16     	; 0x3be6 <_Z12TaskCheckSPCPv+0x10>

00003bf6 <_Z23TaskCheckSerialExpanderPv>:
	}

}

void TaskCheckSerialExpander(void *pvParameters)  // This is a task.
{
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	1f 92       	push	r1
    3bfc:	1f 92       	push	r1
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
	{
		//serialPortExpander.RunSerialExpanderDataLoop();
		vTaskDelay( 100 / portTICK_PERIOD_MS ); // wait for one second
    3c06:	86 e0       	ldi	r24, 0x06	; 6
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 17 4c 	call	0x982e	; 0x982e <vTaskDelay>

void TaskCheckSerialExpander(void *pvParameters)  // This is a task.
{
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
    3c0e:	fb cf       	rjmp	.-10     	; 0x3c06 <_Z23TaskCheckSerialExpanderPv+0x10>

00003c10 <_Z23TaskCheckSerialCommandsPv>:
	}

}

void TaskCheckSerialCommands(void *pvParameters)  // This is a task.
{
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	1f 92       	push	r1
    3c16:	1f 92       	push	r1
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
    3c1c:	9a 83       	std	Y+2, r25	; 0x02
    3c1e:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
	{
		CheckSerialCommands();
    3c20:	30 d0       	rcall	.+96     	; 0x3c82 <_Z19CheckSerialCommandsv>
		vTaskDelay( 100 / portTICK_PERIOD_MS ); // wait for one second
    3c22:	86 e0       	ldi	r24, 0x06	; 6
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0e 94 17 4c 	call	0x982e	; 0x982e <vTaskDelay>

void TaskCheckSerialCommands(void *pvParameters)  // This is a task.
{
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
    3c2a:	fa cf       	rjmp	.-12     	; 0x3c20 <_Z23TaskCheckSerialCommandsPv+0x10>

00003c2c <_Z13TaskRunScreenPv>:
	}

}

void TaskRunScreen(void *pvParameters)  // This is a task.
{
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	00 d0       	rcall	.+0      	; 0x3c32 <_Z13TaskRunScreenPv+0x6>
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	9b 83       	std	Y+3, r25	; 0x03
    3c38:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t uxHighWaterMark;
	
	
	for (;;) // A Task shall never return or exit.
	{
		screen.IsInSimulationMode = IsInSimulationMode;
    3c3a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <IsInSimulationMode>
    3c3e:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <screen>
		screen.UpdateScreen();
    3c42:	8c ec       	ldi	r24, 0xCC	; 204
    3c44:	93 e0       	ldi	r25, 0x03	; 3
    3c46:	37 da       	rcall	.-2962   	; 0x30b6 <_ZN6Screen12UpdateScreenEv>
		
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	0e 94 97 50 	call	0xa12e	; 0xa12e <uxTaskGetStackHighWaterMark>
    3c50:	89 83       	std	Y+1, r24	; 0x01
{
	(void) pvParameters;
	UBaseType_t uxHighWaterMark;
	
	
	for (;;) // A Task shall never return or exit.
    3c52:	f3 cf       	rjmp	.-26     	; 0x3c3a <_Z13TaskRunScreenPv+0xe>

00003c54 <_Z17TaskRunSimulationPv>:
	}

}

void TaskRunSimulation(void *pvParameters)  // This is a task.
{
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	1f 92       	push	r1
    3c5a:	1f 92       	push	r1
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	9a 83       	std	Y+2, r25	; 0x02
    3c62:	89 83       	std	Y+1, r24	; 0x01
	for (;;) // A Task shall never return or exit.
	{
		if (spcProcessing.IsInSimulationMode != IsInSimulationMode)
    3c64:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <spcProcessing>
    3c68:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <IsInSimulationMode>
    3c6c:	98 17       	cp	r25, r24
    3c6e:	21 f0       	breq	.+8      	; 0x3c78 <_Z17TaskRunSimulationPv+0x24>
		{
			spcProcessing.IsInSimulationMode = IsInSimulationMode;
    3c70:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <IsInSimulationMode>
    3c74:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <spcProcessing>
		}
		vTaskDelay( 50 / portTICK_PERIOD_MS  ); // wait for one second
    3c78:	83 e0       	ldi	r24, 0x03	; 3
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 17 4c 	call	0x982e	; 0x982e <vTaskDelay>

}

void TaskRunSimulation(void *pvParameters)  // This is a task.
{
	for (;;) // A Task shall never return or exit.
    3c80:	f1 cf       	rjmp	.-30     	; 0x3c64 <_Z17TaskRunSimulationPv+0x10>

00003c82 <_Z19CheckSerialCommandsv>:
	}
}


void CheckSerialCommands()
{
    3c82:	af 92       	push	r10
    3c84:	bf 92       	push	r11
    3c86:	cf 92       	push	r12
    3c88:	df 92       	push	r13
    3c8a:	ef 92       	push	r14
    3c8c:	ff 92       	push	r15
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	df 93       	push	r29
    3c96:	00 d0       	rcall	.+0      	; 0x3c98 <_Z19CheckSerialCommandsv+0x16>
    3c98:	1f 92       	push	r1
    3c9a:	cd b7       	in	r28, 0x3d	; 61
    3c9c:	de b7       	in	r29, 0x3e	; 62
	
	if (Serial.available() > 0 )
    3c9e:	8f ec       	ldi	r24, 0xCF	; 207
    3ca0:	93 e0       	ldi	r25, 0x03	; 3
    3ca2:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN14HardwareSerial9availableEv>
    3ca6:	21 e0       	ldi	r18, 0x01	; 1
    3ca8:	18 16       	cp	r1, r24
    3caa:	19 06       	cpc	r1, r25
    3cac:	0c f0       	brlt	.+2      	; 0x3cb0 <_Z19CheckSerialCommandsv+0x2e>
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	22 23       	and	r18, r18
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <_Z19CheckSerialCommandsv+0x34>
    3cb4:	88 c0       	rjmp	.+272    	; 0x3dc6 <_Z19CheckSerialCommandsv+0x144>
	{
		
		char *usbData = CheckSerial(&Serial);
    3cb6:	8f ec       	ldi	r24, 0xCF	; 207
    3cb8:	93 e0       	ldi	r25, 0x03	; 3
    3cba:	14 dd       	rcall	.-1496   	; 0x36e4 <_Z11CheckSerialP14HardwareSerial>
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
		sCommand = GetSerialArgs(usbData);
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	cc dd       	rcall	.-1128   	; 0x385e <_Z13GetSerialArgsPc>
    3cc6:	a2 2e       	mov	r10, r18
    3cc8:	b3 2e       	mov	r11, r19
    3cca:	c4 2e       	mov	r12, r20
    3ccc:	d5 2e       	mov	r13, r21
    3cce:	e6 2e       	mov	r14, r22
    3cd0:	f7 2e       	mov	r15, r23
    3cd2:	08 2f       	mov	r16, r24
    3cd4:	19 2f       	mov	r17, r25
    3cd6:	2a 2d       	mov	r18, r10
    3cd8:	3b 2d       	mov	r19, r11
    3cda:	4c 2d       	mov	r20, r12
    3cdc:	5d 2d       	mov	r21, r13
    3cde:	6e 2d       	mov	r22, r14
    3ce0:	7f 2d       	mov	r23, r15
    3ce2:	80 2f       	mov	r24, r16
    3ce4:	91 2f       	mov	r25, r17
    3ce6:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <sCommand>
    3cea:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <sCommand+0x1>
    3cee:	40 93 61 03 	sts	0x0361, r20	; 0x800361 <sCommand+0x2>
    3cf2:	50 93 62 03 	sts	0x0362, r21	; 0x800362 <sCommand+0x3>
    3cf6:	60 93 63 03 	sts	0x0363, r22	; 0x800363 <sCommand+0x4>
    3cfa:	70 93 64 03 	sts	0x0364, r23	; 0x800364 <sCommand+0x5>
		

		if(sCommand.hardwareType == hardwareType.internal)
    3cfe:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <sCommand>
    3d02:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <sCommand+0x1>
    3d06:	84 e6       	ldi	r24, 0x64	; 100
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	28 17       	cp	r18, r24
    3d0c:	39 07       	cpc	r19, r25
    3d0e:	29 f4       	brne	.+10     	; 0x3d1a <_Z19CheckSerialCommandsv+0x98>
		{
			CheckInteralCommands(sCommand.command);
    3d10:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <sCommand+0x2>
    3d14:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <sCommand+0x3>
    3d18:	6a d0       	rcall	.+212    	; 0x3dee <_Z20CheckInteralCommandsPc>
		}

		if(sCommand.hardwareType == hardwareType.spooler)
    3d1a:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <sCommand>
    3d1e:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <sCommand+0x1>
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	28 17       	cp	r18, r24
    3d28:	39 07       	cpc	r19, r25
    3d2a:	29 f4       	brne	.+10     	; 0x3d36 <_Z19CheckSerialCommandsv+0xb4>
		{
			CheckSpoolerCommands(sCommand.command);
    3d2c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <sCommand+0x2>
    3d30:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <sCommand+0x3>
    3d34:	83 d0       	rcall	.+262    	; 0x3e3c <_Z20CheckSpoolerCommandsPc>
		}

		if((sCommand.hardwareType > hardwareType.indicator) && (sCommand.hardwareType < hardwareType.internal))
    3d36:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <sCommand>
    3d3a:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <sCommand+0x1>
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	28 17       	cp	r18, r24
    3d44:	39 07       	cpc	r19, r25
    3d46:	70 f4       	brcc	.+28     	; 0x3d64 <_Z19CheckSerialCommandsv+0xe2>
    3d48:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <sCommand>
    3d4c:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <sCommand+0x1>
    3d50:	84 e6       	ldi	r24, 0x64	; 100
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	28 17       	cp	r18, r24
    3d56:	39 07       	cpc	r19, r25
    3d58:	28 f4       	brcc	.+10     	; 0x3d64 <_Z19CheckSerialCommandsv+0xe2>
		{
			//serialPortExpander.channel
			serialPortExpander.ProcessSerialExpander(&sCommand);
    3d5a:	6f e5       	ldi	r22, 0x5F	; 95
    3d5c:	73 e0       	ldi	r23, 0x03	; 3
    3d5e:	8e e7       	ldi	r24, 0x7E	; 126
    3d60:	93 e0       	ldi	r25, 0x03	; 3
    3d62:	dc da       	rcall	.-2632   	; 0x331c <_ZN18SerialPortExpander21ProcessSerialExpanderEP13SerialCommand>
		

		
		

		if (!IsInSimulationMode)
    3d64:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <IsInSimulationMode>
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	89 27       	eor	r24, r25
    3d6c:	88 23       	and	r24, r24
		{
			
			char * serialData = CheckSerial(&Serial);
    3d6e:	59 f1       	breq	.+86     	; 0x3dc6 <_Z19CheckSerialCommandsv+0x144>
    3d70:	8f ec       	ldi	r24, 0xCF	; 207
    3d72:	93 e0       	ldi	r25, 0x03	; 3
    3d74:	b7 dc       	rcall	.-1682   	; 0x36e4 <_Z11CheckSerialP14HardwareSerial>
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
			if (strlen(serialData) > 1)
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    3d82:	02 97       	sbiw	r24, 0x02	; 2
    3d84:	00 f1       	brcs	.+64     	; 0x3dc6 <_Z19CheckSerialCommandsv+0x144>
			{
				Serial.print(sCommand.hardwareType);
    3d86:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <sCommand>
    3d8a:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <sCommand+0x1>
    3d8e:	4a e0       	ldi	r20, 0x0A	; 10
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	bc 01       	movw	r22, r24
    3d94:	8f ec       	ldi	r24, 0xCF	; 207
    3d96:	93 e0       	ldi	r25, 0x03	; 3
    3d98:	0e 94 26 41 	call	0x824c	; 0x824c <_ZN5Print5printEji>
				Serial.print(";");
    3d9c:	67 e6       	ldi	r22, 0x67	; 103
    3d9e:	72 e0       	ldi	r23, 0x02	; 2
    3da0:	8f ec       	ldi	r24, 0xCF	; 207
    3da2:	93 e0       	ldi	r25, 0x03	; 3
    3da4:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <_ZN5Print5printEPKc>
				Serial.print(sCommand.command);
    3da8:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <sCommand+0x2>
    3dac:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <sCommand+0x3>
    3db0:	bc 01       	movw	r22, r24
    3db2:	8f ec       	ldi	r24, 0xCF	; 207
    3db4:	93 e0       	ldi	r25, 0x03	; 3
    3db6:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <_ZN5Print5printEPKc>
				Serial.println(";");
    3dba:	67 e6       	ldi	r22, 0x67	; 103
    3dbc:	72 e0       	ldi	r23, 0x02	; 2
    3dbe:	8f ec       	ldi	r24, 0xCF	; 207
    3dc0:	93 e0       	ldi	r25, 0x03	; 3
    3dc2:	0e 94 08 42 	call	0x8410	; 0x8410 <_ZN5Print7printlnEPKc>
			}
		}
	}

	if (Serial1.available() > 0)
    3dc6:	8c e6       	ldi	r24, 0x6C	; 108
    3dc8:	94 e0       	ldi	r25, 0x04	; 4
    3dca:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN14HardwareSerial9availableEv>
	{
		
	}

}
    3dce:	00 00       	nop
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	1f 91       	pop	r17
    3dde:	0f 91       	pop	r16
    3de0:	ff 90       	pop	r15
    3de2:	ef 90       	pop	r14
    3de4:	df 90       	pop	r13
    3de6:	cf 90       	pop	r12
    3de8:	bf 90       	pop	r11
    3dea:	af 90       	pop	r10
    3dec:	08 95       	ret

00003dee <_Z20CheckInteralCommandsPc>:



int CheckInteralCommands(char *code)
{
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	1f 92       	push	r1
    3df4:	1f 92       	push	r1
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01
	//Serial.println("sim mode routine");
	if (strcmp(sCommand.command, "IsInSimulationMode") == 0)
    3dfe:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <sCommand+0x2>
    3e02:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <sCommand+0x3>
    3e06:	69 e6       	ldi	r22, 0x69	; 105
    3e08:	72 e0       	ldi	r23, 0x02	; 2
    3e0a:	0e 94 72 64 	call	0xc8e4	; 0xc8e4 <strcmp>
    3e0e:	89 2b       	or	r24, r25
    3e10:	71 f4       	brne	.+28     	; 0x3e2e <_Z20CheckInteralCommandsPc+0x40>
	{
		
		IsInSimulationMode = strcmp(sCommand.value, "true") == 0;
    3e12:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <sCommand+0x4>
    3e16:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <sCommand+0x5>
    3e1a:	6c e7       	ldi	r22, 0x7C	; 124
    3e1c:	72 e0       	ldi	r23, 0x02	; 2
    3e1e:	0e 94 72 64 	call	0xc8e4	; 0xc8e4 <strcmp>
    3e22:	21 e0       	ldi	r18, 0x01	; 1
    3e24:	89 2b       	or	r24, r25
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <_Z20CheckInteralCommandsPc+0x3c>
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <IsInSimulationMode>
	}
	
	return 0;
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
}
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	08 95       	ret

00003e3c <_Z20CheckSpoolerCommandsPc>:

int CheckSpoolerCommands(char *code)
{
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	1f 92       	push	r1
    3e42:	1f 92       	push	r1
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	9a 83       	std	Y+2, r25	; 0x02
    3e4a:	89 83       	std	Y+1, r24	; 0x01
	
	if (IsInSimulationMode){
    3e4c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <IsInSimulationMode>
    3e50:	88 23       	and	r24, r24
    3e52:	51 f0       	breq	.+20     	; 0x3e68 <_Z20CheckSpoolerCommandsPc+0x2c>
		if (startsWith("getrpm", code))
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	9a 81       	ldd	r25, Y+2	; 0x02
    3e58:	bc 01       	movw	r22, r24
    3e5a:	81 e8       	ldi	r24, 0x81	; 129
    3e5c:	92 e0       	ldi	r25, 0x02	; 2
    3e5e:	51 d0       	rcall	.+162    	; 0x3f02 <_Z10startsWithPKcS0_>
    3e60:	88 23       	and	r24, r24
    3e62:	49 f0       	breq	.+18     	; 0x3e76 <_Z20CheckSpoolerCommandsPc+0x3a>
		{
			PrintRandomRPMData();
    3e64:	0f d0       	rcall	.+30     	; 0x3e84 <_Z18PrintRandomRPMDatav>
    3e66:	07 c0       	rjmp	.+14     	; 0x3e76 <_Z20CheckSpoolerCommandsPc+0x3a>
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
		}
	}
	else
	{
		Serial.println(code);
    3e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	8f ec       	ldi	r24, 0xCF	; 207
    3e70:	93 e0       	ldi	r25, 0x03	; 3
    3e72:	0e 94 08 42 	call	0x8410	; 0x8410 <_ZN5Print7printlnEPKc>
    3e76:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0f 90       	pop	r0
}
    3e7c:	0f 90       	pop	r0
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	08 95       	ret

00003e84 <_Z18PrintRandomRPMDatav>:
    3e84:	cf 93       	push	r28



void PrintRandomRPMData()
{
    3e86:	df 93       	push	r29
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <_Z18PrintRandomRPMDatav+0x6>
    3e8a:	1f 92       	push	r1
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
	long rpm = random(10, 15);
    3e90:	2f e0       	ldi	r18, 0x0F	; 15
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	6a e0       	ldi	r22, 0x0A	; 10
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <_Z6randomll>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	89 83       	std	Y+1, r24	; 0x01
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	ab 83       	std	Y+3, r26	; 0x03
    3eae:	bc 83       	std	Y+4, r27	; 0x04

	Serial.print(hardwareType.spooler);
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	4a e0       	ldi	r20, 0x0A	; 10
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	bc 01       	movw	r22, r24
    3eba:	8f ec       	ldi	r24, 0xCF	; 207
    3ebc:	93 e0       	ldi	r25, 0x03	; 3
    3ebe:	0e 94 26 41 	call	0x824c	; 0x824c <_ZN5Print5printEji>
	Serial.print(";getrpm = ");
    3ec2:	68 e8       	ldi	r22, 0x88	; 136
    3ec4:	72 e0       	ldi	r23, 0x02	; 2
    3ec6:	8f ec       	ldi	r24, 0xCF	; 207
    3ec8:	93 e0       	ldi	r25, 0x03	; 3
    3eca:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <_ZN5Print5printEPKc>
	Serial.print(rpm);
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ed6:	2a e0       	ldi	r18, 0x0A	; 10
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	ac 01       	movw	r20, r24
    3edc:	bd 01       	movw	r22, r26
    3ede:	8f ec       	ldi	r24, 0xCF	; 207
    3ee0:	93 e0       	ldi	r25, 0x03	; 3
    3ee2:	0e 94 48 41 	call	0x8290	; 0x8290 <_ZN5Print5printEli>
	Serial.println(";");
    3ee6:	67 e6       	ldi	r22, 0x67	; 103
    3ee8:	72 e0       	ldi	r23, 0x02	; 2
    3eea:	8f ec       	ldi	r24, 0xCF	; 207
    3eec:	93 e0       	ldi	r25, 0x03	; 3
    3eee:	0e 94 08 42 	call	0x8410	; 0x8410 <_ZN5Print7printlnEPKc>
}
    3ef2:	00 00       	nop
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	08 95       	ret

00003f02 <_Z10startsWithPKcS0_>:

bool startsWith(const char *pre, const char *str)
{
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	28 97       	sbiw	r28, 0x08	; 8
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	9e 83       	std	Y+6, r25	; 0x06
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	78 87       	std	Y+8, r23	; 0x08
    3f1c:	6f 83       	std	Y+7, r22	; 0x07
	size_t lenpre = strlen(pre),
    3f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f20:	9e 81       	ldd	r25, Y+6	; 0x06
    3f22:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	89 83       	std	Y+1, r24	; 0x01
	lenstr = strlen(str);
    3f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f2c:	98 85       	ldd	r25, Y+8	; 0x08
    3f2e:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    3f32:	9c 83       	std	Y+4, r25	; 0x04
    3f34:	8b 83       	std	Y+3, r24	; 0x03
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    3f36:	2b 81       	ldd	r18, Y+3	; 0x03
    3f38:	3c 81       	ldd	r19, Y+4	; 0x04
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3e:	28 17       	cp	r18, r24
    3f40:	39 07       	cpc	r19, r25
    3f42:	68 f0       	brcs	.+26     	; 0x3f5e <_Z10startsWithPKcS0_+0x5c>
    3f44:	49 81       	ldd	r20, Y+1	; 0x01
    3f46:	5a 81       	ldd	r21, Y+2	; 0x02
    3f48:	2f 81       	ldd	r18, Y+7	; 0x07
    3f4a:	38 85       	ldd	r19, Y+8	; 0x08
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f50:	b9 01       	movw	r22, r18
    3f52:	0e 94 8b 64 	call	0xc916	; 0xc916 <strncmp>
    3f56:	89 2b       	or	r24, r25
    3f58:	11 f4       	brne	.+4      	; 0x3f5e <_Z10startsWithPKcS0_+0x5c>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	01 c0       	rjmp	.+2      	; 0x3f60 <_Z10startsWithPKcS0_+0x5e>
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
}
    3f60:	28 96       	adiw	r28, 0x08	; 8
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	f8 94       	cli
    3f66:	de bf       	out	0x3e, r29	; 62
    3f68:	0f be       	out	0x3f, r0	; 63
    3f6a:	cd bf       	out	0x3d, r28	; 61
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret

00003f72 <_Z41__static_initialization_and_destruction_0ii>:
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <_Z41__static_initialization_and_destruction_0ii+0x6>
    3f78:	1f 92       	push	r1
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	9a 83       	std	Y+2, r25	; 0x02
    3f80:	89 83       	std	Y+1, r24	; 0x01
    3f82:	7c 83       	std	Y+4, r23	; 0x04
    3f84:	6b 83       	std	Y+3, r22	; 0x03
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	69 f4       	brne	.+26     	; 0x3fa8 <_Z41__static_initialization_and_destruction_0ii+0x36>
    3f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f90:	9c 81       	ldd	r25, Y+4	; 0x04
    3f92:	01 96       	adiw	r24, 0x01	; 1
    3f94:	49 f4       	brne	.+18     	; 0x3fa8 <_Z41__static_initialization_and_destruction_0ii+0x36>

bool SIMULATIONMODE = true; //sets default value for simulation
bool IsInSimulationMode;

SerialCommand sCommand;
SpcProcessing spcProcessing;
    3f96:	85 e6       	ldi	r24, 0x65	; 101
    3f98:	93 e0       	ldi	r25, 0x03	; 3
    3f9a:	75 d0       	rcall	.+234    	; 0x4086 <_ZN13SpcProcessingC1Ev>
SerialPortExpander serialPortExpander;
    3f9c:	8e e7       	ldi	r24, 0x7E	; 126
    3f9e:	93 e0       	ldi	r25, 0x03	; 3
    3fa0:	4c d9       	rcall	.-3432   	; 0x323a <_ZN18SerialPortExpanderC1Ev>
Screen screen;
    3fa2:	8c ec       	ldi	r24, 0xCC	; 204
    3fa4:	93 e0       	ldi	r25, 0x03	; 3
    3fa6:	50 d8       	rcall	.-3936   	; 0x3048 <_ZN6ScreenC1Ev>
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	9a 81       	ldd	r25, Y+2	; 0x02
    3fac:	89 2b       	or	r24, r25
    3fae:	69 f4       	brne	.+26     	; 0x3fca <_Z41__static_initialization_and_destruction_0ii+0x58>
    3fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb4:	01 96       	adiw	r24, 0x01	; 1
    3fb6:	49 f4       	brne	.+18     	; 0x3fca <_Z41__static_initialization_and_destruction_0ii+0x58>
    3fb8:	8c ec       	ldi	r24, 0xCC	; 204
    3fba:	93 e0       	ldi	r25, 0x03	; 3
    3fbc:	e0 d8       	rcall	.-3648   	; 0x317e <_ZN6ScreenD1Ev>
bool SIMULATIONMODE = true; //sets default value for simulation
bool IsInSimulationMode;

SerialCommand sCommand;
SpcProcessing spcProcessing;
SerialPortExpander serialPortExpander;
    3fbe:	8e e7       	ldi	r24, 0x7E	; 126
    3fc0:	93 e0       	ldi	r25, 0x03	; 3
    3fc2:	67 da       	rcall	.-2866   	; 0x3492 <_ZN18SerialPortExpanderD1Ev>

bool SIMULATIONMODE = true; //sets default value for simulation
bool IsInSimulationMode;

SerialCommand sCommand;
SpcProcessing spcProcessing;
    3fc4:	85 e6       	ldi	r24, 0x65	; 101
    3fc6:	93 e0       	ldi	r25, 0x03	; 3
    3fc8:	a0 d2       	rcall	.+1344   	; 0x450a <_ZN13SpcProcessingD1Ev>
    3fca:	00 00       	nop
bool startsWith(const char *pre, const char *str)
{
	size_t lenpre = strlen(pre),
	lenstr = strlen(str);
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
}
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	08 95       	ret

00003fda <_GLOBAL__sub_I_SIMULATIONACTIVE>:
    3fda:	cf 93       	push	r28
    3fdc:	df 93       	push	r29
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
    3fe2:	6f ef       	ldi	r22, 0xFF	; 255
    3fe4:	7f ef       	ldi	r23, 0xFF	; 255
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	c3 df       	rcall	.-122    	; 0x3f72 <_Z41__static_initialization_and_destruction_0ii>
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	08 95       	ret

00003ff2 <_GLOBAL__sub_D_SIMULATIONACTIVE>:
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	6f ef       	ldi	r22, 0xFF	; 255
    3ffc:	7f ef       	ldi	r23, 0xFF	; 255
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	b7 df       	rcall	.-146    	; 0x3f72 <_Z41__static_initialization_and_destruction_0ii>
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
    4008:	08 95       	ret

0000400a <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	1f 92       	push	r1
    4010:	1f 92       	push	r1
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
    4016:	9a 83       	std	Y+2, r25	; 0x02
    4018:	89 83       	std	Y+1, r24	; 0x01
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	9a 81       	ldd	r25, Y+2	; 0x02
    401e:	fc 01       	movw	r30, r24
    4020:	84 81       	ldd	r24, Z+4	; 0x04
    4022:	95 81       	ldd	r25, Z+5	; 0x05
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	08 95       	ret

0000402e <_ZN6StringpLEi>:
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	00 d0       	rcall	.+0      	; 0x4034 <_ZN6StringpLEi+0x6>
    4034:	1f 92       	push	r1
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	9a 83       	std	Y+2, r25	; 0x02
    403c:	89 83       	std	Y+1, r24	; 0x01
    403e:	7c 83       	std	Y+4, r23	; 0x04
    4040:	6b 83       	std	Y+3, r22	; 0x03
    4042:	2b 81       	ldd	r18, Y+3	; 0x03
    4044:	3c 81       	ldd	r19, Y+4	; 0x04
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	9a 81       	ldd	r25, Y+2	; 0x02
    404a:	b9 01       	movw	r22, r18
    404c:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <_ZN6String6concatEi>
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	08 95       	ret

00004062 <_ZNK6String5c_strEv>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	1f 92       	push	r1
    4068:	1f 92       	push	r1
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
    406e:	9a 83       	std	Y+2, r25	; 0x02
    4070:	89 83       	std	Y+1, r24	; 0x01
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	fc 01       	movw	r30, r24
    4078:	80 81       	ld	r24, Z
    407a:	91 81       	ldd	r25, Z+1	; 0x01
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	08 95       	ret

00004086 <_ZN13SpcProcessingC1Ev>:

SpcProcessing *SpcProcessing::firstinstance;


// default constructor main entry point
SpcProcessing::SpcProcessing()
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	1f 92       	push	r1
    408c:	1f 92       	push	r1
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	9a 83       	std	Y+2, r25	; 0x02
    4094:	89 83       	std	Y+1, r24	; 0x01
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	9a 81       	ldd	r25, Y+2	; 0x02
    409a:	fc 01       	movw	r30, r24
    409c:	10 82       	st	Z, r1
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	25 e0       	ldi	r18, 0x05	; 5
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	fc 01       	movw	r30, r24
    40a8:	32 83       	std	Z+2, r19	; 0x02
    40aa:	21 83       	std	Z+1, r18	; 0x01
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	22 e0       	ldi	r18, 0x02	; 2
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	fc 01       	movw	r30, r24
    40b6:	34 83       	std	Z+4, r19	; 0x04
    40b8:	23 83       	std	Z+3, r18	; 0x03
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	9a 81       	ldd	r25, Y+2	; 0x02
    40be:	23 e0       	ldi	r18, 0x03	; 3
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	fc 01       	movw	r30, r24
    40c4:	36 83       	std	Z+6, r19	; 0x06
    40c6:	25 83       	std	Z+5, r18	; 0x05
    40c8:	29 81       	ldd	r18, Y+1	; 0x01
    40ca:	3a 81       	ldd	r19, Y+2	; 0x02
    40cc:	82 e3       	ldi	r24, 0x32	; 50
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	a0 e0       	ldi	r26, 0x00	; 0
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	f9 01       	movw	r30, r18
    40d6:	87 83       	std	Z+7, r24	; 0x07
    40d8:	90 87       	std	Z+8, r25	; 0x08
    40da:	a1 87       	std	Z+9, r26	; 0x09
    40dc:	b2 87       	std	Z+10, r27	; 0x0a
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	9a 81       	ldd	r25, Y+2	; 0x02
    40e2:	fc 01       	movw	r30, r24
    40e4:	13 86       	std	Z+11, r1	; 0x0b
    40e6:	14 86       	std	Z+12, r1	; 0x0c
    40e8:	15 86       	std	Z+13, r1	; 0x0d
    40ea:	16 86       	std	Z+14, r1	; 0x0e
    40ec:	89 81       	ldd	r24, Y+1	; 0x01
    40ee:	9a 81       	ldd	r25, Y+2	; 0x02
    40f0:	fc 01       	movw	r30, r24
    40f2:	17 86       	std	Z+15, r1	; 0x0f
    40f4:	10 8a       	std	Z+16, r1	; 0x10
    40f6:	11 8a       	std	Z+17, r1	; 0x11
    40f8:	12 8a       	std	Z+18, r1	; 0x12
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	9a 81       	ldd	r25, Y+2	; 0x02
    40fe:	43 96       	adiw	r24, 0x13	; 19
    4100:	63 e9       	ldi	r22, 0x93	; 147
    4102:	72 e0       	ldi	r23, 0x02	; 2
    4104:	0e 94 3b 48 	call	0x9076	; 0x9076 <_ZN6StringC1EPKc>
{
	if(!firstinstance)
    4108:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_ZN13SpcProcessing13firstinstanceE>
    410c:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZN13SpcProcessing13firstinstanceE+0x1>
    4110:	89 2b       	or	r24, r25
    4112:	31 f4       	brne	.+12     	; 0x4120 <_ZN13SpcProcessingC1Ev+0x9a>
	{
		firstinstance = this;
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	9a 81       	ldd	r25, Y+2	; 0x02
    4118:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZN13SpcProcessing13firstinstanceE+0x1>
    411c:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <_ZN13SpcProcessing13firstinstanceE>
	}

	
} //spcProcessing
    4120:	00 00       	nop
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <_ZN13SpcProcessing4initEv>:

void SpcProcessing::init(void)
{
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	1f 92       	push	r1
    4132:	1f 92       	push	r1
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	9a 83       	std	Y+2, r25	; 0x02
    413a:	89 83       	std	Y+1, r24	; 0x01
	pinMode(req, OUTPUT);
    413c:	89 81       	ldd	r24, Y+1	; 0x01
    413e:	9a 81       	ldd	r25, Y+2	; 0x02
    4140:	fc 01       	movw	r30, r24
    4142:	81 81       	ldd	r24, Z+1	; 0x01
    4144:	92 81       	ldd	r25, Z+2	; 0x02
    4146:	61 e0       	ldi	r22, 0x01	; 1
    4148:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
	pinMode(clk, INPUT_PULLUP);
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	fc 01       	movw	r30, r24
    4152:	85 81       	ldd	r24, Z+5	; 0x05
    4154:	96 81       	ldd	r25, Z+6	; 0x06
    4156:	62 e0       	ldi	r22, 0x02	; 2
    4158:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
	pinMode(dat, INPUT_PULLUP);
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	9a 81       	ldd	r25, Y+2	; 0x02
    4160:	fc 01       	movw	r30, r24
    4162:	83 81       	ldd	r24, Z+3	; 0x03
    4164:	94 81       	ldd	r25, Z+4	; 0x04
    4166:	62 e0       	ldi	r22, 0x02	; 2
    4168:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
	

	digitalWrite(req, HIGH); // set request at high via transistor needed for default state
    416c:	89 81       	ldd	r24, Y+1	; 0x01
    416e:	9a 81       	ldd	r25, Y+2	; 0x02
    4170:	fc 01       	movw	r30, r24
    4172:	81 81       	ldd	r24, Z+1	; 0x01
    4174:	92 81       	ldd	r25, Z+2	; 0x02
    4176:	61 e0       	ldi	r22, 0x01	; 1
    4178:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
}
    417c:	00 00       	nop
    417e:	0f 90       	pop	r0
    4180:	0f 90       	pop	r0
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	08 95       	ret

00004188 <_ZN13SpcProcessing14RunSPCDataLoopEv>:

void SpcProcessing::RunSPCDataLoop(void)
{
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	c7 57       	subi	r28, 0x77	; 119
    419a:	d1 09       	sbc	r29, r1
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	9e 01       	movw	r18, r28
    41a8:	2a 58       	subi	r18, 0x8A	; 138
    41aa:	3f 4f       	sbci	r19, 0xFF	; 255
    41ac:	f9 01       	movw	r30, r18
    41ae:	91 83       	std	Z+1, r25	; 0x01
    41b0:	80 83       	st	Z, r24
	currentMillis = millis();
    41b2:	0e 94 63 43 	call	0x86c6	; 0x86c6 <millis>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	9e 01       	movw	r18, r28
    41bc:	2a 58       	subi	r18, 0x8A	; 138
    41be:	3f 4f       	sbci	r19, 0xFF	; 255
    41c0:	f9 01       	movw	r30, r18
    41c2:	20 81       	ld	r18, Z
    41c4:	31 81       	ldd	r19, Z+1	; 0x01
    41c6:	f9 01       	movw	r30, r18
    41c8:	83 87       	std	Z+11, r24	; 0x0b
    41ca:	94 87       	std	Z+12, r25	; 0x0c
    41cc:	a5 87       	std	Z+13, r26	; 0x0d
    41ce:	b6 87       	std	Z+14, r27	; 0x0e
	int maxRetries = 5;
    41d0:	85 e0       	ldi	r24, 0x05	; 5
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	9a 83       	std	Y+2, r25	; 0x02
    41d6:	89 83       	std	Y+1, r24	; 0x01


	if (currentMillis >= (previousMillis + loopTime))
    41d8:	ce 01       	movw	r24, r28
    41da:	8a 58       	subi	r24, 0x8A	; 138
    41dc:	9f 4f       	sbci	r25, 0xFF	; 255
    41de:	fc 01       	movw	r30, r24
    41e0:	80 81       	ld	r24, Z
    41e2:	91 81       	ldd	r25, Z+1	; 0x01
    41e4:	fc 01       	movw	r30, r24
    41e6:	23 85       	ldd	r18, Z+11	; 0x0b
    41e8:	34 85       	ldd	r19, Z+12	; 0x0c
    41ea:	45 85       	ldd	r20, Z+13	; 0x0d
    41ec:	56 85       	ldd	r21, Z+14	; 0x0e
    41ee:	ce 01       	movw	r24, r28
    41f0:	8a 58       	subi	r24, 0x8A	; 138
    41f2:	9f 4f       	sbci	r25, 0xFF	; 255
    41f4:	fc 01       	movw	r30, r24
    41f6:	80 81       	ld	r24, Z
    41f8:	91 81       	ldd	r25, Z+1	; 0x01
    41fa:	fc 01       	movw	r30, r24
    41fc:	e7 84       	ldd	r14, Z+15	; 0x0f
    41fe:	f0 88       	ldd	r15, Z+16	; 0x10
    4200:	01 89       	ldd	r16, Z+17	; 0x11
    4202:	12 89       	ldd	r17, Z+18	; 0x12
    4204:	ce 01       	movw	r24, r28
    4206:	8a 58       	subi	r24, 0x8A	; 138
    4208:	9f 4f       	sbci	r25, 0xFF	; 255
    420a:	fc 01       	movw	r30, r24
    420c:	80 81       	ld	r24, Z
    420e:	91 81       	ldd	r25, Z+1	; 0x01
    4210:	fc 01       	movw	r30, r24
    4212:	87 81       	ldd	r24, Z+7	; 0x07
    4214:	90 85       	ldd	r25, Z+8	; 0x08
    4216:	a1 85       	ldd	r26, Z+9	; 0x09
    4218:	b2 85       	ldd	r27, Z+10	; 0x0a
    421a:	8e 0d       	add	r24, r14
    421c:	9f 1d       	adc	r25, r15
    421e:	a0 1f       	adc	r26, r16
    4220:	b1 1f       	adc	r27, r17
    4222:	28 17       	cp	r18, r24
    4224:	39 07       	cpc	r19, r25
    4226:	4a 07       	cpc	r20, r26
    4228:	5b 07       	cpc	r21, r27
    422a:	08 f4       	brcc	.+2      	; 0x422e <_ZN13SpcProcessing14RunSPCDataLoopEv+0xa6>
    422c:	ee c0       	rjmp	.+476    	; 0x440a <_ZN13SpcProcessing14RunSPCDataLoopEv+0x282>
	{
		if (IsInSimulationMode)
    422e:	ce 01       	movw	r24, r28
    4230:	8a 58       	subi	r24, 0x8A	; 138
    4232:	9f 4f       	sbci	r25, 0xFF	; 255
    4234:	fc 01       	movw	r30, r24
    4236:	80 81       	ld	r24, Z
    4238:	91 81       	ldd	r25, Z+1	; 0x01
    423a:	fc 01       	movw	r30, r24
    423c:	80 81       	ld	r24, Z
    423e:	88 23       	and	r24, r24
    4240:	41 f0       	breq	.+16     	; 0x4252 <_ZN13SpcProcessing14RunSPCDataLoopEv+0xca>
		{
			PrintRandomDiameterData();
    4242:	ce 01       	movw	r24, r28
    4244:	8a 58       	subi	r24, 0x8A	; 138
    4246:	9f 4f       	sbci	r25, 0xFF	; 255
    4248:	fc 01       	movw	r30, r24
    424a:	80 81       	ld	r24, Z
    424c:	91 81       	ldd	r25, Z+1	; 0x01
    424e:	eb d0       	rcall	.+470    	; 0x4426 <_ZN13SpcProcessing23PrintRandomDiameterDataEv>
			return;
    4250:	dc c0       	rjmp	.+440    	; 0x440a <_ZN13SpcProcessing14RunSPCDataLoopEv+0x282>
		}
		
		digitalWrite(req, HIGH); // generate set request
    4252:	ce 01       	movw	r24, r28
    4254:	8a 58       	subi	r24, 0x8A	; 138
    4256:	9f 4f       	sbci	r25, 0xFF	; 255
    4258:	fc 01       	movw	r30, r24
    425a:	80 81       	ld	r24, Z
    425c:	91 81       	ldd	r25, Z+1	; 0x01
    425e:	fc 01       	movw	r30, r24
    4260:	81 81       	ldd	r24, Z+1	; 0x01
    4262:	92 81       	ldd	r25, Z+2	; 0x02
    4264:	61 e0       	ldi	r22, 0x01	; 1
    4266:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>

		int pinState = 0;
    426a:	1b 86       	std	Y+11, r1	; 0x0b
    426c:	1a 86       	std	Y+10, r1	; 0x0a
		int lastPinState = 0;
    426e:	1c 82       	std	Y+4, r1	; 0x04
    4270:	1b 82       	std	Y+3, r1	; 0x03
		for (int i = 0; i < 52;)
    4272:	1e 82       	std	Y+6, r1	; 0x06
    4274:	1d 82       	std	Y+5, r1	; 0x05
    4276:	8d 81       	ldd	r24, Y+5	; 0x05
    4278:	9e 81       	ldd	r25, Y+6	; 0x06
    427a:	c4 97       	sbiw	r24, 0x34	; 52
    427c:	0c f0       	brlt	.+2      	; 0x4280 <_ZN13SpcProcessing14RunSPCDataLoopEv+0xf8>
    427e:	43 c0       	rjmp	.+134    	; 0x4306 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x17e>
		{
			
			pinState = digitalRead(clk);
    4280:	ce 01       	movw	r24, r28
    4282:	8a 58       	subi	r24, 0x8A	; 138
    4284:	9f 4f       	sbci	r25, 0xFF	; 255
    4286:	fc 01       	movw	r30, r24
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	fc 01       	movw	r30, r24
    428e:	85 81       	ldd	r24, Z+5	; 0x05
    4290:	96 81       	ldd	r25, Z+6	; 0x06
    4292:	0e 94 49 47 	call	0x8e92	; 0x8e92 <digitalRead>
    4296:	9b 87       	std	Y+11, r25	; 0x0b
    4298:	8a 87       	std	Y+10, r24	; 0x0a

			if (pinState != lastPinState)
    429a:	2a 85       	ldd	r18, Y+10	; 0x0a
    429c:	3b 85       	ldd	r19, Y+11	; 0x0b
    429e:	8b 81       	ldd	r24, Y+3	; 0x03
    42a0:	9c 81       	ldd	r25, Y+4	; 0x04
    42a2:	28 17       	cp	r18, r24
    42a4:	39 07       	cpc	r19, r25
    42a6:	f9 f0       	breq	.+62     	; 0x42e6 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x15e>
			{
				if (pinState == LOW)
    42a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    42aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    42ac:	89 2b       	or	r24, r25
    42ae:	01 f5       	brne	.+64     	; 0x42f0 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x168>
				{
					dataStream += digitalRead(dat);
    42b0:	ce 01       	movw	r24, r28
    42b2:	8a 58       	subi	r24, 0x8A	; 138
    42b4:	9f 4f       	sbci	r25, 0xFF	; 255
    42b6:	fc 01       	movw	r30, r24
    42b8:	80 81       	ld	r24, Z
    42ba:	91 81       	ldd	r25, Z+1	; 0x01
    42bc:	fc 01       	movw	r30, r24
    42be:	83 81       	ldd	r24, Z+3	; 0x03
    42c0:	94 81       	ldd	r25, Z+4	; 0x04
    42c2:	0e 94 49 47 	call	0x8e92	; 0x8e92 <digitalRead>
    42c6:	9c 01       	movw	r18, r24
    42c8:	ce 01       	movw	r24, r28
    42ca:	8a 58       	subi	r24, 0x8A	; 138
    42cc:	9f 4f       	sbci	r25, 0xFF	; 255
    42ce:	fc 01       	movw	r30, r24
    42d0:	80 81       	ld	r24, Z
    42d2:	91 81       	ldd	r25, Z+1	; 0x01
    42d4:	43 96       	adiw	r24, 0x13	; 19
    42d6:	b9 01       	movw	r22, r18
    42d8:	aa de       	rcall	.-684    	; 0x402e <_ZN6StringpLEi>
					i++;
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	9e 81       	ldd	r25, Y+6	; 0x06
    42de:	01 96       	adiw	r24, 0x01	; 1
    42e0:	9e 83       	std	Y+6, r25	; 0x06
    42e2:	8d 83       	std	Y+5, r24	; 0x05
    42e4:	05 c0       	rjmp	.+10     	; 0x42f0 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x168>
				}
			}
			else
			{
				maxRetries--;
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
			}
			
			if (maxRetries <= 0){return;}
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	18 16       	cp	r1, r24
    42f6:	19 06       	cpc	r1, r25
    42f8:	0c f0       	brlt	.+2      	; 0x42fc <_ZN13SpcProcessing14RunSPCDataLoopEv+0x174>
    42fa:	86 c0       	rjmp	.+268    	; 0x4408 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x280>

			lastPinState = pinState;
    42fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    42fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4300:	9c 83       	std	Y+4, r25	; 0x04
    4302:	8b 83       	std	Y+3, r24	; 0x03
		
		digitalWrite(req, HIGH); // generate set request

		int pinState = 0;
		int lastPinState = 0;
		for (int i = 0; i < 52;)
    4304:	b8 cf       	rjmp	.-144    	; 0x4276 <_ZN13SpcProcessing14RunSPCDataLoopEv+0xee>

			lastPinState = pinState;
		}

		
		bool dataStreamValid = false;
    4306:	1f 82       	std	Y+7, r1	; 0x07
		for (unsigned int i = 0; i < dataStream.length(); i++)
    4308:	19 86       	std	Y+9, r1	; 0x09
    430a:	18 86       	std	Y+8, r1	; 0x08
    430c:	ce 01       	movw	r24, r28
    430e:	8a 58       	subi	r24, 0x8A	; 138
    4310:	9f 4f       	sbci	r25, 0xFF	; 255
    4312:	fc 01       	movw	r30, r24
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	43 96       	adiw	r24, 0x13	; 19
    431a:	77 de       	rcall	.-786    	; 0x400a <_ZNK6String6lengthEv>
    431c:	9c 01       	movw	r18, r24
    431e:	41 e0       	ldi	r20, 0x01	; 1
    4320:	88 85       	ldd	r24, Y+8	; 0x08
    4322:	99 85       	ldd	r25, Y+9	; 0x09
    4324:	82 17       	cp	r24, r18
    4326:	93 07       	cpc	r25, r19
    4328:	08 f0       	brcs	.+2      	; 0x432c <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1a4>
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	44 23       	and	r20, r20
    432e:	e9 f0       	breq	.+58     	; 0x436a <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1e2>
		{
			if (dataStream[i] == '0')
    4330:	ce 01       	movw	r24, r28
    4332:	8a 58       	subi	r24, 0x8A	; 138
    4334:	9f 4f       	sbci	r25, 0xFF	; 255
    4336:	fc 01       	movw	r30, r24
    4338:	80 81       	ld	r24, Z
    433a:	91 81       	ldd	r25, Z+1	; 0x01
    433c:	43 96       	adiw	r24, 0x13	; 19
    433e:	28 85       	ldd	r18, Y+8	; 0x08
    4340:	39 85       	ldd	r19, Y+9	; 0x09
    4342:	b9 01       	movw	r22, r18
    4344:	0e 94 21 4a 	call	0x9442	; 0x9442 <_ZN6StringixEj>
    4348:	fc 01       	movw	r30, r24
    434a:	90 81       	ld	r25, Z
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	90 33       	cpi	r25, 0x30	; 48
    4350:	09 f0       	breq	.+2      	; 0x4354 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1cc>
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	88 23       	and	r24, r24
    4356:	19 f0       	breq	.+6      	; 0x435e <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1d6>
			{
				dataStreamValid = true;
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	8f 83       	std	Y+7, r24	; 0x07
				break;
    435c:	06 c0       	rjmp	.+12     	; 0x436a <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1e2>
			lastPinState = pinState;
		}

		
		bool dataStreamValid = false;
		for (unsigned int i = 0; i < dataStream.length(); i++)
    435e:	88 85       	ldd	r24, Y+8	; 0x08
    4360:	99 85       	ldd	r25, Y+9	; 0x09
    4362:	01 96       	adiw	r24, 0x01	; 1
    4364:	99 87       	std	Y+9, r25	; 0x09
    4366:	88 87       	std	Y+8, r24	; 0x08
    4368:	d1 cf       	rjmp	.-94     	; 0x430c <_ZN13SpcProcessing14RunSPCDataLoopEv+0x184>
				break;
			}
		}
		
		
		if (dataStreamValid)
    436a:	8f 81       	ldd	r24, Y+7	; 0x07
    436c:	88 23       	and	r24, r24
    436e:	f1 f0       	breq	.+60     	; 0x43ac <_ZN13SpcProcessing14RunSPCDataLoopEv+0x224>
		{
			char charBuilder[100];
			SerialCommand sCommand;
			sCommand.hardwareType = INDICATOR;
    4370:	1d 86       	std	Y+13, r1	; 0x0d
    4372:	1c 86       	std	Y+12, r1	; 0x0c
			strcpy (sCommand.command, dataStream.c_str());
    4374:	ce 01       	movw	r24, r28
    4376:	8a 58       	subi	r24, 0x8A	; 138
    4378:	9f 4f       	sbci	r25, 0xFF	; 255
    437a:	fc 01       	movw	r30, r24
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	43 96       	adiw	r24, 0x13	; 19
    4382:	6f de       	rcall	.-802    	; 0x4062 <_ZNK6String5c_strEv>
    4384:	9c 01       	movw	r18, r24
    4386:	8e 85       	ldd	r24, Y+14	; 0x0e
    4388:	9f 85       	ldd	r25, Y+15	; 0x0f
    438a:	b9 01       	movw	r22, r18
    438c:	0e 94 7b 64 	call	0xc8f6	; 0xc8f6 <strcpy>
			BuildSerialOutput(&sCommand, charBuilder);
    4390:	9e 01       	movw	r18, r28
    4392:	2e 5e       	subi	r18, 0xEE	; 238
    4394:	3f 4f       	sbci	r19, 0xFF	; 255
    4396:	ce 01       	movw	r24, r28
    4398:	0c 96       	adiw	r24, 0x0c	; 12
    439a:	b9 01       	movw	r22, r18
    439c:	63 db       	rcall	.-2362   	; 0x3a64 <_Z17BuildSerialOutputP13SerialCommandPc>
			//BUILD_SERIAL_OUTPUT(INDICATOR, dataStream.c_str(), charBuilder);
			//BUILD_SERIAL_OUTPUT(sCommand, charBuilder);

			Serial.println(charBuilder);
    439e:	ce 01       	movw	r24, r28
    43a0:	42 96       	adiw	r24, 0x12	; 18
    43a2:	bc 01       	movw	r22, r24
    43a4:	8f ec       	ldi	r24, 0xCF	; 207
    43a6:	93 e0       	ldi	r25, 0x03	; 3
    43a8:	0e 94 08 42 	call	0x8410	; 0x8410 <_ZN5Print7printlnEPKc>
		}
		
		dataStream = "";
    43ac:	ce 01       	movw	r24, r28
    43ae:	8a 58       	subi	r24, 0x8A	; 138
    43b0:	9f 4f       	sbci	r25, 0xFF	; 255
    43b2:	fc 01       	movw	r30, r24
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	43 96       	adiw	r24, 0x13	; 19
    43ba:	63 e9       	ldi	r22, 0x93	; 147
    43bc:	72 e0       	ldi	r23, 0x02	; 2
    43be:	0e 94 75 49 	call	0x92ea	; 0x92ea <_ZN6StringaSEPKc>
		digitalWrite(req, LOW);
    43c2:	ce 01       	movw	r24, r28
    43c4:	8a 58       	subi	r24, 0x8A	; 138
    43c6:	9f 4f       	sbci	r25, 0xFF	; 255
    43c8:	fc 01       	movw	r30, r24
    43ca:	80 81       	ld	r24, Z
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	fc 01       	movw	r30, r24
    43d0:	81 81       	ldd	r24, Z+1	; 0x01
    43d2:	92 81       	ldd	r25, Z+2	; 0x02
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
		previousMillis = currentMillis;
    43da:	ce 01       	movw	r24, r28
    43dc:	8a 58       	subi	r24, 0x8A	; 138
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	fc 01       	movw	r30, r24
    43e2:	80 81       	ld	r24, Z
    43e4:	91 81       	ldd	r25, Z+1	; 0x01
    43e6:	fc 01       	movw	r30, r24
    43e8:	83 85       	ldd	r24, Z+11	; 0x0b
    43ea:	94 85       	ldd	r25, Z+12	; 0x0c
    43ec:	a5 85       	ldd	r26, Z+13	; 0x0d
    43ee:	b6 85       	ldd	r27, Z+14	; 0x0e
    43f0:	9e 01       	movw	r18, r28
    43f2:	2a 58       	subi	r18, 0x8A	; 138
    43f4:	3f 4f       	sbci	r19, 0xFF	; 255
    43f6:	f9 01       	movw	r30, r18
    43f8:	20 81       	ld	r18, Z
    43fa:	31 81       	ldd	r19, Z+1	; 0x01
    43fc:	f9 01       	movw	r30, r18
    43fe:	87 87       	std	Z+15, r24	; 0x0f
    4400:	90 8b       	std	Z+16, r25	; 0x10
    4402:	a1 8b       	std	Z+17, r26	; 0x11
    4404:	b2 8b       	std	Z+18, r27	; 0x12
    4406:	01 c0       	rjmp	.+2      	; 0x440a <_ZN13SpcProcessing14RunSPCDataLoopEv+0x282>
			else
			{
				maxRetries--;
			}
			
			if (maxRetries <= 0){return;}
    4408:	00 00       	nop
		dataStream = "";
		digitalWrite(req, LOW);
		previousMillis = currentMillis;
	}
	
}
    440a:	c9 58       	subi	r28, 0x89	; 137
    440c:	df 4f       	sbci	r29, 0xFF	; 255
    440e:	0f b6       	in	r0, 0x3f	; 63
    4410:	f8 94       	cli
    4412:	de bf       	out	0x3e, r29	; 62
    4414:	0f be       	out	0x3f, r0	; 63
    4416:	cd bf       	out	0x3d, r28	; 61
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	1f 91       	pop	r17
    441e:	0f 91       	pop	r16
    4420:	ff 90       	pop	r15
    4422:	ef 90       	pop	r14
    4424:	08 95       	ret

00004426 <_ZN13SpcProcessing23PrintRandomDiameterDataEv>:

int SpcProcessing::PrintRandomDiameterData(void)
{
    4426:	ef 92       	push	r14
    4428:	ff 92       	push	r15
    442a:	0f 93       	push	r16
    442c:	1f 93       	push	r17
    442e:	cf 93       	push	r28
    4430:	df 93       	push	r29
    4432:	cd b7       	in	r28, 0x3d	; 61
    4434:	de b7       	in	r29, 0x3e	; 62
    4436:	2b 97       	sbiw	r28, 0x0b	; 11
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	cd bf       	out	0x3d, r28	; 61
    4442:	9b 87       	std	Y+11, r25	; 0x0b
    4444:	8a 87       	std	Y+10, r24	; 0x0a
	char diameter[5];
	ltoa(random(17000, 18000), diameter, 10);
    4446:	20 e5       	ldi	r18, 0x50	; 80
    4448:	36 e4       	ldi	r19, 0x46	; 70
    444a:	40 e0       	ldi	r20, 0x00	; 0
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	68 e6       	ldi	r22, 0x68	; 104
    4450:	72 e4       	ldi	r23, 0x42	; 66
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <_Z6randomll>
    445a:	7b 01       	movw	r14, r22
    445c:	8c 01       	movw	r16, r24
    445e:	ce 01       	movw	r24, r28
    4460:	05 96       	adiw	r24, 0x05	; 5
    4462:	2a e0       	ldi	r18, 0x0A	; 10
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	ac 01       	movw	r20, r24
    4468:	c8 01       	movw	r24, r16
    446a:	b7 01       	movw	r22, r14
    446c:	0e 94 d4 64 	call	0xc9a8	; 0xc9a8 <ltoa>
	
	Serial.print("0;111111111111111111110000");
    4470:	64 e9       	ldi	r22, 0x94	; 148
    4472:	72 e0       	ldi	r23, 0x02	; 2
    4474:	8f ec       	ldi	r24, 0xCF	; 207
    4476:	93 e0       	ldi	r25, 0x03	; 3
    4478:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <_ZN5Print5printEPKc>
	for (int i = 0; i < 5; i++)
    447c:	1a 82       	std	Y+2, r1	; 0x02
    447e:	19 82       	std	Y+1, r1	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	05 97       	sbiw	r24, 0x05	; 5
    4486:	64 f5       	brge	.+88     	; 0x44e0 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0xba>
	{
		for (int j = 0; j < 4; j++)
    4488:	1c 82       	std	Y+4, r1	; 0x04
    448a:	1b 82       	std	Y+3, r1	; 0x03
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	9c 81       	ldd	r25, Y+4	; 0x04
    4490:	04 97       	sbiw	r24, 0x04	; 4
    4492:	04 f5       	brge	.+64     	; 0x44d4 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0xae>
		{
			Serial.print(((byte)diameter[i] >> j) & 1);
    4494:	9e 01       	movw	r18, r28
    4496:	2b 5f       	subi	r18, 0xFB	; 251
    4498:	3f 4f       	sbci	r19, 0xFF	; 255
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
    449e:	82 0f       	add	r24, r18
    44a0:	93 1f       	adc	r25, r19
    44a2:	fc 01       	movw	r30, r24
    44a4:	80 81       	ld	r24, Z
    44a6:	88 2f       	mov	r24, r24
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	0b 80       	ldd	r0, Y+3	; 0x03
    44ac:	02 c0       	rjmp	.+4      	; 0x44b2 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x8c>
    44ae:	95 95       	asr	r25
    44b0:	87 95       	ror	r24
    44b2:	0a 94       	dec	r0
    44b4:	e2 f7       	brpl	.-8      	; 0x44ae <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x88>
    44b6:	81 70       	andi	r24, 0x01	; 1
    44b8:	99 27       	eor	r25, r25
    44ba:	4a e0       	ldi	r20, 0x0A	; 10
    44bc:	50 e0       	ldi	r21, 0x00	; 0
    44be:	bc 01       	movw	r22, r24
    44c0:	8f ec       	ldi	r24, 0xCF	; 207
    44c2:	93 e0       	ldi	r25, 0x03	; 3
    44c4:	0e 94 03 41 	call	0x8206	; 0x8206 <_ZN5Print5printEii>
	ltoa(random(17000, 18000), diameter, 10);
	
	Serial.print("0;111111111111111111110000");
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 4; j++)
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	9c 81       	ldd	r25, Y+4	; 0x04
    44cc:	01 96       	adiw	r24, 0x01	; 1
    44ce:	9c 83       	std	Y+4, r25	; 0x04
    44d0:	8b 83       	std	Y+3, r24	; 0x03
    44d2:	dc cf       	rjmp	.-72     	; 0x448c <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x66>
{
	char diameter[5];
	ltoa(random(17000, 18000), diameter, 10);
	
	Serial.print("0;111111111111111111110000");
	for (int i = 0; i < 5; i++)
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	9a 81       	ldd	r25, Y+2	; 0x02
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	9a 83       	std	Y+2, r25	; 0x02
    44dc:	89 83       	std	Y+1, r24	; 0x01
    44de:	d0 cf       	rjmp	.-96     	; 0x4480 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x5a>
		for (int j = 0; j < 4; j++)
		{
			Serial.print(((byte)diameter[i] >> j) & 1);
		}
	}
	Serial.println("00100000");
    44e0:	6f ea       	ldi	r22, 0xAF	; 175
    44e2:	72 e0       	ldi	r23, 0x02	; 2
    44e4:	8f ec       	ldi	r24, 0xCF	; 207
    44e6:	93 e0       	ldi	r25, 0x03	; 3
    44e8:	0e 94 08 42 	call	0x8410	; 0x8410 <_ZN5Print7printlnEPKc>
	return 0;
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
}
    44f0:	2b 96       	adiw	r28, 0x0b	; 11
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	f8 94       	cli
    44f6:	de bf       	out	0x3e, r29	; 62
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	cd bf       	out	0x3d, r28	; 61
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	1f 91       	pop	r17
    4502:	0f 91       	pop	r16
    4504:	ff 90       	pop	r15
    4506:	ef 90       	pop	r14
    4508:	08 95       	ret

0000450a <_ZN13SpcProcessingD1Ev>:

// default destructor
SpcProcessing::~SpcProcessing()
    450a:	cf 93       	push	r28
    450c:	df 93       	push	r29
    450e:	1f 92       	push	r1
    4510:	1f 92       	push	r1
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	9a 83       	std	Y+2, r25	; 0x02
    4518:	89 83       	std	Y+1, r24	; 0x01
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	9a 81       	ldd	r25, Y+2	; 0x02
    451e:	43 96       	adiw	r24, 0x13	; 19
    4520:	0e 94 5f 48 	call	0x90be	; 0x90be <_ZN6StringD1Ev>
{
} //~spcProcessing
    4524:	00 00       	nop
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	08 95       	ret

00004530 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4530:	cf 93       	push	r28
    4532:	df 93       	push	r29
    4534:	1f 92       	push	r1
    4536:	1f 92       	push	r1
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	9a 83       	std	Y+2, r25	; 0x02
    453e:	89 83       	std	Y+1, r24	; 0x01
    4540:	28 e0       	ldi	r18, 0x08	; 8
    4542:	33 e0       	ldi	r19, 0x03	; 3
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	9a 81       	ldd	r25, Y+2	; 0x02
    4548:	fc 01       	movw	r30, r24
    454a:	31 83       	std	Z+1, r19	; 0x01
    454c:	20 83       	st	Z, r18
    454e:	89 81       	ldd	r24, Y+1	; 0x01
    4550:	9a 81       	ldd	r25, Y+2	; 0x02
    4552:	fc 01       	movw	r30, r24
    4554:	13 82       	std	Z+3, r1	; 0x03
    4556:	12 82       	std	Z+2, r1	; 0x02
    4558:	00 00       	nop
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	df 91       	pop	r29
    4560:	cf 91       	pop	r28
    4562:	08 95       	ret

00004564 <_ZN18__gen_struct_PORTL1rEv>:
  spi_begin();
  // Send the command twice as otherwise it does not always work!
  writecommand(i ? ILI9341_INVON : ILI9341_INVOFF);
  writecommand(i ? ILI9341_INVON : ILI9341_INVOFF);
  spi_end();
}
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	8b e0       	ldi	r24, 0x0B	; 11
    456e:	91 e0       	ldi	r25, 0x01	; 1
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	08 95       	ret

00004576 <_ZN8SPIClass11setBitOrderEh>:
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	1f 92       	push	r1
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
    4580:	89 83       	std	Y+1, r24	; 0x01
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	88 23       	and	r24, r24
    4586:	51 f4       	brne	.+20     	; 0x459c <_ZN8SPIClass11setBitOrderEh+0x26>
    4588:	8c e4       	ldi	r24, 0x4C	; 76
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	2c e4       	ldi	r18, 0x4C	; 76
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	f9 01       	movw	r30, r18
    4592:	20 81       	ld	r18, Z
    4594:	20 62       	ori	r18, 0x20	; 32
    4596:	fc 01       	movw	r30, r24
    4598:	20 83       	st	Z, r18
    459a:	09 c0       	rjmp	.+18     	; 0x45ae <_ZN8SPIClass11setBitOrderEh+0x38>
    459c:	8c e4       	ldi	r24, 0x4C	; 76
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	2c e4       	ldi	r18, 0x4C	; 76
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	f9 01       	movw	r30, r18
    45a6:	20 81       	ld	r18, Z
    45a8:	2f 7d       	andi	r18, 0xDF	; 223
    45aa:	fc 01       	movw	r30, r24
    45ac:	20 83       	st	Z, r18
    45ae:	00 00       	nop
    45b0:	0f 90       	pop	r0
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	08 95       	ret

000045b8 <_ZN8SPIClass11setDataModeEh>:
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	1f 92       	push	r1
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	89 83       	std	Y+1, r24	; 0x01
    45c4:	8c e4       	ldi	r24, 0x4C	; 76
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	2c e4       	ldi	r18, 0x4C	; 76
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	f9 01       	movw	r30, r18
    45ce:	20 81       	ld	r18, Z
    45d0:	32 2f       	mov	r19, r18
    45d2:	33 7f       	andi	r19, 0xF3	; 243
    45d4:	29 81       	ldd	r18, Y+1	; 0x01
    45d6:	23 2b       	or	r18, r19
    45d8:	fc 01       	movw	r30, r24
    45da:	20 83       	st	Z, r18
    45dc:	00 00       	nop
    45de:	0f 90       	pop	r0
    45e0:	df 91       	pop	r29
    45e2:	cf 91       	pop	r28
    45e4:	08 95       	ret

000045e6 <_ZN8SPIClass15setClockDividerEh>:
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29
    45ea:	1f 92       	push	r1
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    45f0:	89 83       	std	Y+1, r24	; 0x01
    45f2:	8c e4       	ldi	r24, 0x4C	; 76
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	2c e4       	ldi	r18, 0x4C	; 76
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	f9 01       	movw	r30, r18
    45fc:	20 81       	ld	r18, Z
    45fe:	32 2f       	mov	r19, r18
    4600:	3c 7f       	andi	r19, 0xFC	; 252
    4602:	29 81       	ldd	r18, Y+1	; 0x01
    4604:	23 70       	andi	r18, 0x03	; 3
    4606:	23 2b       	or	r18, r19
    4608:	fc 01       	movw	r30, r24
    460a:	20 83       	st	Z, r18
    460c:	8d e4       	ldi	r24, 0x4D	; 77
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	2d e4       	ldi	r18, 0x4D	; 77
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	f9 01       	movw	r30, r18
    4616:	20 81       	ld	r18, Z
    4618:	42 2f       	mov	r20, r18
    461a:	4e 7f       	andi	r20, 0xFE	; 254
    461c:	29 81       	ldd	r18, Y+1	; 0x01
    461e:	22 2f       	mov	r18, r18
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	35 95       	asr	r19
    4624:	27 95       	ror	r18
    4626:	35 95       	asr	r19
    4628:	27 95       	ror	r18
    462a:	21 70       	andi	r18, 0x01	; 1
    462c:	24 2b       	or	r18, r20
    462e:	fc 01       	movw	r30, r24
    4630:	20 83       	st	Z, r18
    4632:	00 00       	nop
    4634:	0f 90       	pop	r0
    4636:	df 91       	pop	r29
    4638:	cf 91       	pop	r28
    463a:	08 95       	ret

0000463c <_ZN11TFT_ILI9341C1Eii>:
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	00 d0       	rcall	.+0      	; 0x4642 <_ZN11TFT_ILI9341C1Eii+0x6>
    4642:	00 d0       	rcall	.+0      	; 0x4644 <_ZN11TFT_ILI9341C1Eii+0x8>
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	9a 83       	std	Y+2, r25	; 0x02
    464a:	89 83       	std	Y+1, r24	; 0x01
    464c:	7c 83       	std	Y+4, r23	; 0x04
    464e:	6b 83       	std	Y+3, r22	; 0x03
    4650:	5e 83       	std	Y+6, r21	; 0x06
    4652:	4d 83       	std	Y+5, r20	; 0x05
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	9a 81       	ldd	r25, Y+2	; 0x02
    4658:	6b df       	rcall	.-298    	; 0x4530 <_ZN5PrintC1Ev>
    465a:	2a ee       	ldi	r18, 0xEA	; 234
    465c:	32 e0       	ldi	r19, 0x02	; 2
    465e:	89 81       	ldd	r24, Y+1	; 0x01
    4660:	9a 81       	ldd	r25, Y+2	; 0x02
    4662:	fc 01       	movw	r30, r24
    4664:	31 83       	std	Z+1, r19	; 0x01
    4666:	20 83       	st	Z, r18
    4668:	60 e0       	ldi	r22, 0x00	; 0
    466a:	8c e2       	ldi	r24, 0x2C	; 44
    466c:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
    4670:	61 e0       	ldi	r22, 0x01	; 1
    4672:	8c e2       	ldi	r24, 0x2C	; 44
    4674:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
    4678:	75 df       	rcall	.-278    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    467a:	fc 01       	movw	r30, r24
    467c:	20 81       	ld	r18, Z
    467e:	22 60       	ori	r18, 0x02	; 2
    4680:	fc 01       	movw	r30, r24
    4682:	20 83       	st	Z, r18
    4684:	61 e0       	ldi	r22, 0x01	; 1
    4686:	80 e3       	ldi	r24, 0x30	; 48
    4688:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
    468c:	6b df       	rcall	.-298    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    468e:	fc 01       	movw	r30, r24
    4690:	20 81       	ld	r18, Z
    4692:	24 60       	ori	r18, 0x04	; 4
    4694:	fc 01       	movw	r30, r24
    4696:	20 83       	st	Z, r18
    4698:	61 e0       	ldi	r22, 0x01	; 1
    469a:	8f e2       	ldi	r24, 0x2F	; 47
    469c:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
    46a0:	2b 81       	ldd	r18, Y+3	; 0x03
    46a2:	3c 81       	ldd	r19, Y+4	; 0x04
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	fc 01       	movw	r30, r24
    46aa:	33 8b       	std	Z+19, r19	; 0x13
    46ac:	22 8b       	std	Z+18, r18	; 0x12
    46ae:	2d 81       	ldd	r18, Y+5	; 0x05
    46b0:	3e 81       	ldd	r19, Y+6	; 0x06
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	9a 81       	ldd	r25, Y+2	; 0x02
    46b6:	fc 01       	movw	r30, r24
    46b8:	35 8b       	std	Z+21, r19	; 0x15
    46ba:	24 8b       	std	Z+20, r18	; 0x14
    46bc:	89 81       	ldd	r24, Y+1	; 0x01
    46be:	9a 81       	ldd	r25, Y+2	; 0x02
    46c0:	fc 01       	movw	r30, r24
    46c2:	13 a2       	std	Z+35, r1	; 0x23
    46c4:	89 81       	ldd	r24, Y+1	; 0x01
    46c6:	9a 81       	ldd	r25, Y+2	; 0x02
    46c8:	fc 01       	movw	r30, r24
    46ca:	11 86       	std	Z+9, r1	; 0x09
    46cc:	10 86       	std	Z+8, r1	; 0x08
    46ce:	89 81       	ldd	r24, Y+1	; 0x01
    46d0:	9a 81       	ldd	r25, Y+2	; 0x02
    46d2:	fc 01       	movw	r30, r24
    46d4:	20 85       	ldd	r18, Z+8	; 0x08
    46d6:	31 85       	ldd	r19, Z+9	; 0x09
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	9a 81       	ldd	r25, Y+2	; 0x02
    46dc:	fc 01       	movw	r30, r24
    46de:	33 87       	std	Z+11, r19	; 0x0b
    46e0:	22 87       	std	Z+10, r18	; 0x0a
    46e2:	89 81       	ldd	r24, Y+1	; 0x01
    46e4:	9a 81       	ldd	r25, Y+2	; 0x02
    46e6:	21 e0       	ldi	r18, 0x01	; 1
    46e8:	fc 01       	movw	r30, r24
    46ea:	20 a3       	std	Z+32, r18	; 0x20
    46ec:	89 81       	ldd	r24, Y+1	; 0x01
    46ee:	9a 81       	ldd	r25, Y+2	; 0x02
    46f0:	21 e0       	ldi	r18, 0x01	; 1
    46f2:	fc 01       	movw	r30, r24
    46f4:	21 a3       	std	Z+33, r18	; 0x21
    46f6:	89 81       	ldd	r24, Y+1	; 0x01
    46f8:	9a 81       	ldd	r25, Y+2	; 0x02
    46fa:	2f ef       	ldi	r18, 0xFF	; 255
    46fc:	3f ef       	ldi	r19, 0xFF	; 255
    46fe:	fc 01       	movw	r30, r24
    4700:	37 8b       	std	Z+23, r19	; 0x17
    4702:	26 8b       	std	Z+22, r18	; 0x16
    4704:	89 81       	ldd	r24, Y+1	; 0x01
    4706:	9a 81       	ldd	r25, Y+2	; 0x02
    4708:	fc 01       	movw	r30, r24
    470a:	11 8e       	std	Z+25, r1	; 0x19
    470c:	10 8e       	std	Z+24, r1	; 0x18
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	9a 81       	ldd	r25, Y+2	; 0x02
    4712:	fc 01       	movw	r30, r24
    4714:	11 8a       	std	Z+17, r1	; 0x11
    4716:	10 8a       	std	Z+16, r1	; 0x10
    4718:	89 81       	ldd	r24, Y+1	; 0x01
    471a:	9a 81       	ldd	r25, Y+2	; 0x02
    471c:	21 e0       	ldi	r18, 0x01	; 1
    471e:	fc 01       	movw	r30, r24
    4720:	24 a3       	std	Z+36, r18	; 0x24
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	9a 81       	ldd	r25, Y+2	; 0x02
    4726:	fc 01       	movw	r30, r24
    4728:	12 a2       	std	Z+34, r1	; 0x22
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	9a 81       	ldd	r25, Y+2	; 0x02
    472e:	fc 01       	movw	r30, r24
    4730:	13 8e       	std	Z+27, r1	; 0x1b
    4732:	12 8e       	std	Z+26, r1	; 0x1a
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	9a 81       	ldd	r25, Y+2	; 0x02
    4738:	2f ef       	ldi	r18, 0xFF	; 255
    473a:	3f ef       	ldi	r19, 0xFF	; 255
    473c:	fc 01       	movw	r30, r24
    473e:	35 8f       	std	Z+29, r19	; 0x1d
    4740:	24 8f       	std	Z+28, r18	; 0x1c
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	9a 81       	ldd	r25, Y+2	; 0x02
    4746:	2f ef       	ldi	r18, 0xFF	; 255
    4748:	3f ef       	ldi	r19, 0xFF	; 255
    474a:	fc 01       	movw	r30, r24
    474c:	37 8f       	std	Z+31, r19	; 0x1f
    474e:	26 8f       	std	Z+30, r18	; 0x1e
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	9a 81       	ldd	r25, Y+2	; 0x02
    4754:	2f ef       	ldi	r18, 0xFF	; 255
    4756:	3f ef       	ldi	r19, 0xFF	; 255
    4758:	fc 01       	movw	r30, r24
    475a:	35 87       	std	Z+13, r19	; 0x0d
    475c:	24 87       	std	Z+12, r18	; 0x0c
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	9a 81       	ldd	r25, Y+2	; 0x02
    4762:	2f ef       	ldi	r18, 0xFF	; 255
    4764:	3f ef       	ldi	r19, 0xFF	; 255
    4766:	fc 01       	movw	r30, r24
    4768:	37 87       	std	Z+15, r19	; 0x0f
    476a:	26 87       	std	Z+14, r18	; 0x0e
    476c:	89 81       	ldd	r24, Y+1	; 0x01
    476e:	9a 81       	ldd	r25, Y+2	; 0x02
    4770:	22 e0       	ldi	r18, 0x02	; 2
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	fc 01       	movw	r30, r24
    4776:	33 8f       	std	Z+27, r19	; 0x1b
    4778:	22 8f       	std	Z+26, r18	; 0x1a
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	9a 81       	ldd	r25, Y+2	; 0x02
    477e:	fc 01       	movw	r30, r24
    4780:	82 8d       	ldd	r24, Z+26	; 0x1a
    4782:	93 8d       	ldd	r25, Z+27	; 0x1b
    4784:	9c 01       	movw	r18, r24
    4786:	24 60       	ori	r18, 0x04	; 4
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	9a 81       	ldd	r25, Y+2	; 0x02
    478c:	fc 01       	movw	r30, r24
    478e:	33 8f       	std	Z+27, r19	; 0x1b
    4790:	22 8f       	std	Z+26, r18	; 0x1a
    4792:	89 81       	ldd	r24, Y+1	; 0x01
    4794:	9a 81       	ldd	r25, Y+2	; 0x02
    4796:	fc 01       	movw	r30, r24
    4798:	82 8d       	ldd	r24, Z+26	; 0x1a
    479a:	93 8d       	ldd	r25, Z+27	; 0x1b
    479c:	9c 01       	movw	r18, r24
    479e:	20 61       	ori	r18, 0x10	; 16
    47a0:	89 81       	ldd	r24, Y+1	; 0x01
    47a2:	9a 81       	ldd	r25, Y+2	; 0x02
    47a4:	fc 01       	movw	r30, r24
    47a6:	33 8f       	std	Z+27, r19	; 0x1b
    47a8:	22 8f       	std	Z+26, r18	; 0x1a
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	9a 81       	ldd	r25, Y+2	; 0x02
    47ae:	fc 01       	movw	r30, r24
    47b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    47b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    47b4:	9c 01       	movw	r18, r24
    47b6:	20 64       	ori	r18, 0x40	; 64
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	9a 81       	ldd	r25, Y+2	; 0x02
    47bc:	fc 01       	movw	r30, r24
    47be:	33 8f       	std	Z+27, r19	; 0x1b
    47c0:	22 8f       	std	Z+26, r18	; 0x1a
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	9a 81       	ldd	r25, Y+2	; 0x02
    47c6:	fc 01       	movw	r30, r24
    47c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    47ca:	93 8d       	ldd	r25, Z+27	; 0x1b
    47cc:	9c 01       	movw	r18, r24
    47ce:	20 68       	ori	r18, 0x80	; 128
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	9a 81       	ldd	r25, Y+2	; 0x02
    47d4:	fc 01       	movw	r30, r24
    47d6:	33 8f       	std	Z+27, r19	; 0x1b
    47d8:	22 8f       	std	Z+26, r18	; 0x1a
    47da:	00 00       	nop
    47dc:	26 96       	adiw	r28, 0x06	; 6
    47de:	0f b6       	in	r0, 0x3f	; 63
    47e0:	f8 94       	cli
    47e2:	de bf       	out	0x3e, r29	; 62
    47e4:	0f be       	out	0x3f, r0	; 63
    47e6:	cd bf       	out	0x3d, r28	; 61
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	08 95       	ret

000047ee <_ZN11TFT_ILI93418spiwriteEh>:
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <_ZN11TFT_ILI93418spiwriteEh+0x6>
    47f4:	1f 92       	push	r1
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
    47fa:	9b 83       	std	Y+3, r25	; 0x03
    47fc:	8a 83       	std	Y+2, r24	; 0x02
    47fe:	6c 83       	std	Y+4, r22	; 0x04
    4800:	8c e4       	ldi	r24, 0x4C	; 76
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	fc 01       	movw	r30, r24
    4806:	80 81       	ld	r24, Z
    4808:	89 83       	std	Y+1, r24	; 0x01
    480a:	8c e4       	ldi	r24, 0x4C	; 76
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	2a 81       	ldd	r18, Y+2	; 0x02
    4810:	3b 81       	ldd	r19, Y+3	; 0x03
    4812:	f9 01       	movw	r30, r18
    4814:	26 81       	ldd	r18, Z+6	; 0x06
    4816:	fc 01       	movw	r30, r24
    4818:	20 83       	st	Z, r18
    481a:	8e e4       	ldi	r24, 0x4E	; 78
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	2c 81       	ldd	r18, Y+4	; 0x04
    4820:	fc 01       	movw	r30, r24
    4822:	20 83       	st	Z, r18
    4824:	00 00       	nop
    4826:	8d e4       	ldi	r24, 0x4D	; 77
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	fc 01       	movw	r30, r24
    482c:	80 81       	ld	r24, Z
    482e:	80 95       	com	r24
    4830:	88 1f       	adc	r24, r24
    4832:	88 27       	eor	r24, r24
    4834:	88 1f       	adc	r24, r24
    4836:	88 23       	and	r24, r24
    4838:	09 f0       	breq	.+2      	; 0x483c <_ZN11TFT_ILI93418spiwriteEh+0x4e>
    483a:	f5 cf       	rjmp	.-22     	; 0x4826 <_ZN11TFT_ILI93418spiwriteEh+0x38>
    483c:	8c e4       	ldi	r24, 0x4C	; 76
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	29 81       	ldd	r18, Y+1	; 0x01
    4842:	fc 01       	movw	r30, r24
    4844:	20 83       	st	Z, r18
    4846:	00 00       	nop
    4848:	0f 90       	pop	r0
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	08 95       	ret

00004856 <_ZN11TFT_ILI934112writecommandEh>:
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	00 d0       	rcall	.+0      	; 0x485c <_ZN11TFT_ILI934112writecommandEh+0x6>
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	9a 83       	std	Y+2, r25	; 0x02
    4862:	89 83       	std	Y+1, r24	; 0x01
    4864:	6b 83       	std	Y+3, r22	; 0x03
    4866:	8d e4       	ldi	r24, 0x4D	; 77
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	fc 01       	movw	r30, r24
    486c:	20 81       	ld	r18, Z
    486e:	89 81       	ldd	r24, Y+1	; 0x01
    4870:	9a 81       	ldd	r25, Y+2	; 0x02
    4872:	fc 01       	movw	r30, r24
    4874:	27 83       	std	Z+7, r18	; 0x07
    4876:	76 de       	rcall	.-788    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    4878:	fc 01       	movw	r30, r24
    487a:	20 81       	ld	r18, Z
    487c:	2d 7f       	andi	r18, 0xFD	; 253
    487e:	fc 01       	movw	r30, r24
    4880:	20 83       	st	Z, r18
    4882:	70 de       	rcall	.-800    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    4884:	fc 01       	movw	r30, r24
    4886:	20 81       	ld	r18, Z
    4888:	2b 7f       	andi	r18, 0xFB	; 251
    488a:	fc 01       	movw	r30, r24
    488c:	20 83       	st	Z, r18
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	9a 81       	ldd	r25, Y+2	; 0x02
    4892:	6b 81       	ldd	r22, Y+3	; 0x03
    4894:	ac df       	rcall	.-168    	; 0x47ee <_ZN11TFT_ILI93418spiwriteEh>
    4896:	66 de       	rcall	.-820    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    4898:	fc 01       	movw	r30, r24
    489a:	20 81       	ld	r18, Z
    489c:	24 60       	ori	r18, 0x04	; 4
    489e:	fc 01       	movw	r30, r24
    48a0:	20 83       	st	Z, r18
    48a2:	00 00       	nop
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	df 91       	pop	r29
    48ac:	cf 91       	pop	r28
    48ae:	08 95       	ret

000048b0 <_ZN11TFT_ILI93419writedataEh>:
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	00 d0       	rcall	.+0      	; 0x48b6 <_ZN11TFT_ILI93419writedataEh+0x6>
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
    48ba:	9a 83       	std	Y+2, r25	; 0x02
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	6b 83       	std	Y+3, r22	; 0x03
    48c0:	51 de       	rcall	.-862    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    48c2:	fc 01       	movw	r30, r24
    48c4:	20 81       	ld	r18, Z
    48c6:	22 60       	ori	r18, 0x02	; 2
    48c8:	fc 01       	movw	r30, r24
    48ca:	20 83       	st	Z, r18
    48cc:	4b de       	rcall	.-874    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    48ce:	fc 01       	movw	r30, r24
    48d0:	20 81       	ld	r18, Z
    48d2:	2b 7f       	andi	r18, 0xFB	; 251
    48d4:	fc 01       	movw	r30, r24
    48d6:	20 83       	st	Z, r18
    48d8:	89 81       	ldd	r24, Y+1	; 0x01
    48da:	9a 81       	ldd	r25, Y+2	; 0x02
    48dc:	6b 81       	ldd	r22, Y+3	; 0x03
    48de:	87 df       	rcall	.-242    	; 0x47ee <_ZN11TFT_ILI93418spiwriteEh>
    48e0:	41 de       	rcall	.-894    	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    48e2:	fc 01       	movw	r30, r24
    48e4:	20 81       	ld	r18, Z
    48e6:	24 60       	ori	r18, 0x04	; 4
    48e8:	fc 01       	movw	r30, r24
    48ea:	20 83       	st	Z, r18
    48ec:	00 00       	nop
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	08 95       	ret

000048fa <_ZN11TFT_ILI93414initEv>:
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	1f 92       	push	r1
    4900:	1f 92       	push	r1
    4902:	cd b7       	in	r28, 0x3d	; 61
    4904:	de b7       	in	r29, 0x3e	; 62
    4906:	9a 83       	std	Y+2, r25	; 0x02
    4908:	89 83       	std	Y+1, r24	; 0x01
    490a:	0e 94 30 57 	call	0xae60	; 0xae60 <_ZN8SPIClass5beginEv>
    490e:	8c e4       	ldi	r24, 0x4C	; 76
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	fc 01       	movw	r30, r24
    4914:	20 81       	ld	r18, Z
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	9a 81       	ldd	r25, Y+2	; 0x02
    491a:	fc 01       	movw	r30, r24
    491c:	27 83       	std	Z+7, r18	; 0x07
    491e:	84 e0       	ldi	r24, 0x04	; 4
    4920:	62 de       	rcall	.-828    	; 0x45e6 <_ZN8SPIClass15setClockDividerEh>
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	28 de       	rcall	.-944    	; 0x4576 <_ZN8SPIClass11setBitOrderEh>
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	47 de       	rcall	.-882    	; 0x45b8 <_ZN8SPIClass11setDataModeEh>
    492a:	8c e4       	ldi	r24, 0x4C	; 76
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	fc 01       	movw	r30, r24
    4930:	20 81       	ld	r18, Z
    4932:	89 81       	ldd	r24, Y+1	; 0x01
    4934:	9a 81       	ldd	r25, Y+2	; 0x02
    4936:	fc 01       	movw	r30, r24
    4938:	26 83       	std	Z+6, r18	; 0x06
    493a:	61 e0       	ldi	r22, 0x01	; 1
    493c:	8c e2       	ldi	r24, 0x2C	; 44
    493e:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
    4942:	65 e0       	ldi	r22, 0x05	; 5
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 94 ed 43 	call	0x87da	; 0x87da <delay>
    494e:	60 e0       	ldi	r22, 0x00	; 0
    4950:	8c e2       	ldi	r24, 0x2C	; 44
    4952:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
    4956:	64 e1       	ldi	r22, 0x14	; 20
    4958:	70 e0       	ldi	r23, 0x00	; 0
    495a:	80 e0       	ldi	r24, 0x00	; 0
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	0e 94 ed 43 	call	0x87da	; 0x87da <delay>
    4962:	61 e0       	ldi	r22, 0x01	; 1
    4964:	8c e2       	ldi	r24, 0x2C	; 44
    4966:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
    496a:	66 e9       	ldi	r22, 0x96	; 150
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	0e 94 ed 43 	call	0x87da	; 0x87da <delay>
    4976:	89 81       	ldd	r24, Y+1	; 0x01
    4978:	9a 81       	ldd	r25, Y+2	; 0x02
    497a:	65 ef       	ldi	r22, 0xF5	; 245
    497c:	7d e2       	ldi	r23, 0x2D	; 45
    497e:	06 d0       	rcall	.+12     	; 0x498c <_ZN11TFT_ILI934111commandListEPKh>
    4980:	00 00       	nop
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	08 95       	ret

0000498c <_ZN11TFT_ILI934111commandListEPKh>:
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	cd b7       	in	r28, 0x3d	; 61
    4992:	de b7       	in	r29, 0x3e	; 62
    4994:	66 97       	sbiw	r28, 0x16	; 22
    4996:	0f b6       	in	r0, 0x3f	; 63
    4998:	f8 94       	cli
    499a:	de bf       	out	0x3e, r29	; 62
    499c:	0f be       	out	0x3f, r0	; 63
    499e:	cd bf       	out	0x3d, r28	; 61
    49a0:	9c 8b       	std	Y+20, r25	; 0x14
    49a2:	8b 8b       	std	Y+19, r24	; 0x13
    49a4:	7e 8b       	std	Y+22, r23	; 0x16
    49a6:	6d 8b       	std	Y+21, r22	; 0x15
    49a8:	8d 89       	ldd	r24, Y+21	; 0x15
    49aa:	9e 89       	ldd	r25, Y+22	; 0x16
    49ac:	9c 01       	movw	r18, r24
    49ae:	2f 5f       	subi	r18, 0xFF	; 255
    49b0:	3f 4f       	sbci	r19, 0xFF	; 255
    49b2:	3e 8b       	std	Y+22, r19	; 0x16
    49b4:	2d 8b       	std	Y+21, r18	; 0x15
    49b6:	9c 83       	std	Y+4, r25	; 0x04
    49b8:	8b 83       	std	Y+3, r24	; 0x03
    49ba:	8b 81       	ldd	r24, Y+3	; 0x03
    49bc:	9c 81       	ldd	r25, Y+4	; 0x04
    49be:	fc 01       	movw	r30, r24
    49c0:	84 91       	lpm	r24, Z
    49c2:	8d 83       	std	Y+5, r24	; 0x05
    49c4:	8d 81       	ldd	r24, Y+5	; 0x05
    49c6:	89 83       	std	Y+1, r24	; 0x01
    49c8:	89 81       	ldd	r24, Y+1	; 0x01
    49ca:	9f ef       	ldi	r25, 0xFF	; 255
    49cc:	98 0f       	add	r25, r24
    49ce:	99 83       	std	Y+1, r25	; 0x01
    49d0:	91 e0       	ldi	r25, 0x01	; 1
    49d2:	88 23       	and	r24, r24
    49d4:	09 f4       	brne	.+2      	; 0x49d8 <_ZN11TFT_ILI934111commandListEPKh+0x4c>
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	99 23       	and	r25, r25
    49da:	09 f4       	brne	.+2      	; 0x49de <_ZN11TFT_ILI934111commandListEPKh+0x52>
    49dc:	6d c0       	rjmp	.+218    	; 0x4ab8 <_ZN11TFT_ILI934111commandListEPKh+0x12c>
    49de:	8d 89       	ldd	r24, Y+21	; 0x15
    49e0:	9e 89       	ldd	r25, Y+22	; 0x16
    49e2:	9c 01       	movw	r18, r24
    49e4:	2f 5f       	subi	r18, 0xFF	; 255
    49e6:	3f 4f       	sbci	r19, 0xFF	; 255
    49e8:	3e 8b       	std	Y+22, r19	; 0x16
    49ea:	2d 8b       	std	Y+21, r18	; 0x15
    49ec:	9f 83       	std	Y+7, r25	; 0x07
    49ee:	8e 83       	std	Y+6, r24	; 0x06
    49f0:	8e 81       	ldd	r24, Y+6	; 0x06
    49f2:	9f 81       	ldd	r25, Y+7	; 0x07
    49f4:	fc 01       	movw	r30, r24
    49f6:	84 91       	lpm	r24, Z
    49f8:	88 87       	std	Y+8, r24	; 0x08
    49fa:	28 85       	ldd	r18, Y+8	; 0x08
    49fc:	8b 89       	ldd	r24, Y+19	; 0x13
    49fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4a00:	62 2f       	mov	r22, r18
    4a02:	29 df       	rcall	.-430    	; 0x4856 <_ZN11TFT_ILI934112writecommandEh>
    4a04:	8d 89       	ldd	r24, Y+21	; 0x15
    4a06:	9e 89       	ldd	r25, Y+22	; 0x16
    4a08:	9c 01       	movw	r18, r24
    4a0a:	2f 5f       	subi	r18, 0xFF	; 255
    4a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0e:	3e 8b       	std	Y+22, r19	; 0x16
    4a10:	2d 8b       	std	Y+21, r18	; 0x15
    4a12:	9a 87       	std	Y+10, r25	; 0x0a
    4a14:	89 87       	std	Y+9, r24	; 0x09
    4a16:	89 85       	ldd	r24, Y+9	; 0x09
    4a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	84 91       	lpm	r24, Z
    4a1e:	8b 87       	std	Y+11, r24	; 0x0b
    4a20:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a22:	8a 83       	std	Y+2, r24	; 0x02
    4a24:	8a 81       	ldd	r24, Y+2	; 0x02
    4a26:	80 78       	andi	r24, 0x80	; 128
    4a28:	8c 87       	std	Y+12, r24	; 0x0c
    4a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2c:	8f 77       	andi	r24, 0x7F	; 127
    4a2e:	8a 83       	std	Y+2, r24	; 0x02
    4a30:	8a 81       	ldd	r24, Y+2	; 0x02
    4a32:	9f ef       	ldi	r25, 0xFF	; 255
    4a34:	98 0f       	add	r25, r24
    4a36:	9a 83       	std	Y+2, r25	; 0x02
    4a38:	91 e0       	ldi	r25, 0x01	; 1
    4a3a:	88 23       	and	r24, r24
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <_ZN11TFT_ILI934111commandListEPKh+0xb4>
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	99 23       	and	r25, r25
    4a42:	a1 f0       	breq	.+40     	; 0x4a6c <_ZN11TFT_ILI934111commandListEPKh+0xe0>
    4a44:	8d 89       	ldd	r24, Y+21	; 0x15
    4a46:	9e 89       	ldd	r25, Y+22	; 0x16
    4a48:	9c 01       	movw	r18, r24
    4a4a:	2f 5f       	subi	r18, 0xFF	; 255
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	3e 8b       	std	Y+22, r19	; 0x16
    4a50:	2d 8b       	std	Y+21, r18	; 0x15
    4a52:	9e 87       	std	Y+14, r25	; 0x0e
    4a54:	8d 87       	std	Y+13, r24	; 0x0d
    4a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	84 91       	lpm	r24, Z
    4a5e:	8f 87       	std	Y+15, r24	; 0x0f
    4a60:	2f 85       	ldd	r18, Y+15	; 0x0f
    4a62:	8b 89       	ldd	r24, Y+19	; 0x13
    4a64:	9c 89       	ldd	r25, Y+20	; 0x14
    4a66:	62 2f       	mov	r22, r18
    4a68:	23 df       	rcall	.-442    	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    4a6a:	e2 cf       	rjmp	.-60     	; 0x4a30 <_ZN11TFT_ILI934111commandListEPKh+0xa4>
    4a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a6e:	88 23       	and	r24, r24
    4a70:	09 f4       	brne	.+2      	; 0x4a74 <_ZN11TFT_ILI934111commandListEPKh+0xe8>
    4a72:	aa cf       	rjmp	.-172    	; 0x49c8 <_ZN11TFT_ILI934111commandListEPKh+0x3c>
    4a74:	8d 89       	ldd	r24, Y+21	; 0x15
    4a76:	9e 89       	ldd	r25, Y+22	; 0x16
    4a78:	9c 01       	movw	r18, r24
    4a7a:	2f 5f       	subi	r18, 0xFF	; 255
    4a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7e:	3e 8b       	std	Y+22, r19	; 0x16
    4a80:	2d 8b       	std	Y+21, r18	; 0x15
    4a82:	99 8b       	std	Y+17, r25	; 0x11
    4a84:	88 8b       	std	Y+16, r24	; 0x10
    4a86:	88 89       	ldd	r24, Y+16	; 0x10
    4a88:	99 89       	ldd	r25, Y+17	; 0x11
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	84 91       	lpm	r24, Z
    4a8e:	8a 8b       	std	Y+18, r24	; 0x12
    4a90:	8a 89       	ldd	r24, Y+18	; 0x12
    4a92:	8c 87       	std	Y+12, r24	; 0x0c
    4a94:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a96:	8f 3f       	cpi	r24, 0xFF	; 255
    4a98:	31 f0       	breq	.+12     	; 0x4aa6 <_ZN11TFT_ILI934111commandListEPKh+0x11a>
    4a9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a9c:	88 2f       	mov	r24, r24
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	a0 e0       	ldi	r26, 0x00	; 0
    4aa2:	b0 e0       	ldi	r27, 0x00	; 0
    4aa4:	04 c0       	rjmp	.+8      	; 0x4aae <_ZN11TFT_ILI934111commandListEPKh+0x122>
    4aa6:	84 ef       	ldi	r24, 0xF4	; 244
    4aa8:	91 e0       	ldi	r25, 0x01	; 1
    4aaa:	a0 e0       	ldi	r26, 0x00	; 0
    4aac:	b0 e0       	ldi	r27, 0x00	; 0
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 ed 43 	call	0x87da	; 0x87da <delay>
    4ab6:	88 cf       	rjmp	.-240    	; 0x49c8 <_ZN11TFT_ILI934111commandListEPKh+0x3c>
    4ab8:	00 00       	nop
    4aba:	66 96       	adiw	r28, 0x16	; 22
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	08 95       	ret

00004acc <_ZN11TFT_ILI934110fillScreenEj>:
    4acc:	ef 92       	push	r14
    4ace:	ff 92       	push	r15
    4ad0:	0f 93       	push	r16
    4ad2:	1f 93       	push	r17
    4ad4:	cf 93       	push	r28
    4ad6:	df 93       	push	r29
    4ad8:	00 d0       	rcall	.+0      	; 0x4ada <_ZN11TFT_ILI934110fillScreenEj+0xe>
    4ada:	1f 92       	push	r1
    4adc:	cd b7       	in	r28, 0x3d	; 61
    4ade:	de b7       	in	r29, 0x3e	; 62
    4ae0:	9a 83       	std	Y+2, r25	; 0x02
    4ae2:	89 83       	std	Y+1, r24	; 0x01
    4ae4:	7c 83       	std	Y+4, r23	; 0x04
    4ae6:	6b 83       	std	Y+3, r22	; 0x03
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	9a 81       	ldd	r25, Y+2	; 0x02
    4aec:	fc 01       	movw	r30, r24
    4aee:	84 89       	ldd	r24, Z+20	; 0x14
    4af0:	95 89       	ldd	r25, Z+21	; 0x15
    4af2:	bc 01       	movw	r22, r24
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	9a 81       	ldd	r25, Y+2	; 0x02
    4af8:	fc 01       	movw	r30, r24
    4afa:	82 89       	ldd	r24, Z+18	; 0x12
    4afc:	93 89       	ldd	r25, Z+19	; 0x13
    4afe:	ac 01       	movw	r20, r24
    4b00:	2b 81       	ldd	r18, Y+3	; 0x03
    4b02:	3c 81       	ldd	r19, Y+4	; 0x04
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	9a 81       	ldd	r25, Y+2	; 0x02
    4b08:	79 01       	movw	r14, r18
    4b0a:	8b 01       	movw	r16, r22
    4b0c:	9a 01       	movw	r18, r20
    4b0e:	40 e0       	ldi	r20, 0x00	; 0
    4b10:	50 e0       	ldi	r21, 0x00	; 0
    4b12:	60 e0       	ldi	r22, 0x00	; 0
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	ab d5       	rcall	.+2902   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
    4b18:	00 00       	nop
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	df 91       	pop	r29
    4b24:	cf 91       	pop	r28
    4b26:	1f 91       	pop	r17
    4b28:	0f 91       	pop	r16
    4b2a:	ff 90       	pop	r15
    4b2c:	ef 90       	pop	r14
    4b2e:	08 95       	ret

00004b30 <_ZN11TFT_ILI93419setCursorEii>:
    4b30:	cf 93       	push	r28
    4b32:	df 93       	push	r29
    4b34:	00 d0       	rcall	.+0      	; 0x4b36 <_ZN11TFT_ILI93419setCursorEii+0x6>
    4b36:	00 d0       	rcall	.+0      	; 0x4b38 <_ZN11TFT_ILI93419setCursorEii+0x8>
    4b38:	cd b7       	in	r28, 0x3d	; 61
    4b3a:	de b7       	in	r29, 0x3e	; 62
    4b3c:	9a 83       	std	Y+2, r25	; 0x02
    4b3e:	89 83       	std	Y+1, r24	; 0x01
    4b40:	7c 83       	std	Y+4, r23	; 0x04
    4b42:	6b 83       	std	Y+3, r22	; 0x03
    4b44:	5e 83       	std	Y+6, r21	; 0x06
    4b46:	4d 83       	std	Y+5, r20	; 0x05
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    4b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    4b50:	fc 01       	movw	r30, r24
    4b52:	31 87       	std	Z+9, r19	; 0x09
    4b54:	20 87       	std	Z+8, r18	; 0x08
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    4b5c:	3e 81       	ldd	r19, Y+6	; 0x06
    4b5e:	fc 01       	movw	r30, r24
    4b60:	33 87       	std	Z+11, r19	; 0x0b
    4b62:	22 87       	std	Z+10, r18	; 0x0a
    4b64:	00 00       	nop
    4b66:	26 96       	adiw	r28, 0x06	; 6
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	de bf       	out	0x3e, r29	; 62
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	cd bf       	out	0x3d, r28	; 61
    4b72:	df 91       	pop	r29
    4b74:	cf 91       	pop	r28
    4b76:	08 95       	ret

00004b78 <_ZN11TFT_ILI934111setTextSizeEh>:
    4b78:	cf 93       	push	r28
    4b7a:	df 93       	push	r29
    4b7c:	00 d0       	rcall	.+0      	; 0x4b7e <_ZN11TFT_ILI934111setTextSizeEh+0x6>
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	9a 83       	std	Y+2, r25	; 0x02
    4b84:	89 83       	std	Y+1, r24	; 0x01
    4b86:	6b 83       	std	Y+3, r22	; 0x03
    4b88:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8a:	88 30       	cpi	r24, 0x08	; 8
    4b8c:	10 f0       	brcs	.+4      	; 0x4b92 <_ZN11TFT_ILI934111setTextSizeEh+0x1a>
    4b8e:	87 e0       	ldi	r24, 0x07	; 7
    4b90:	8b 83       	std	Y+3, r24	; 0x03
    4b92:	8b 81       	ldd	r24, Y+3	; 0x03
    4b94:	88 23       	and	r24, r24
    4b96:	11 f0       	breq	.+4      	; 0x4b9c <_ZN11TFT_ILI934111setTextSizeEh+0x24>
    4b98:	2b 81       	ldd	r18, Y+3	; 0x03
    4b9a:	01 c0       	rjmp	.+2      	; 0x4b9e <_ZN11TFT_ILI934111setTextSizeEh+0x26>
    4b9c:	21 e0       	ldi	r18, 0x01	; 1
    4b9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	21 a3       	std	Z+33, r18	; 0x21
    4ba6:	00 00       	nop
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	0f 90       	pop	r0
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	08 95       	ret

00004bb4 <_ZN11TFT_ILI934112setTextColorEjj>:
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    4bb8:	00 d0       	rcall	.+0      	; 0x4bba <_ZN11TFT_ILI934112setTextColorEjj+0x6>
    4bba:	00 d0       	rcall	.+0      	; 0x4bbc <_ZN11TFT_ILI934112setTextColorEjj+0x8>
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	9a 83       	std	Y+2, r25	; 0x02
    4bc2:	89 83       	std	Y+1, r24	; 0x01
    4bc4:	7c 83       	std	Y+4, r23	; 0x04
    4bc6:	6b 83       	std	Y+3, r22	; 0x03
    4bc8:	5e 83       	std	Y+6, r21	; 0x06
    4bca:	4d 83       	std	Y+5, r20	; 0x05
    4bcc:	89 81       	ldd	r24, Y+1	; 0x01
    4bce:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    4bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	37 8b       	std	Z+23, r19	; 0x17
    4bd8:	26 8b       	std	Z+22, r18	; 0x16
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bde:	2d 81       	ldd	r18, Y+5	; 0x05
    4be0:	3e 81       	ldd	r19, Y+6	; 0x06
    4be2:	fc 01       	movw	r30, r24
    4be4:	31 8f       	std	Z+25, r19	; 0x19
    4be6:	20 8f       	std	Z+24, r18	; 0x18
    4be8:	00 00       	nop
    4bea:	26 96       	adiw	r28, 0x06	; 6
    4bec:	0f b6       	in	r0, 0x3f	; 63
    4bee:	f8 94       	cli
    4bf0:	de bf       	out	0x3e, r29	; 62
    4bf2:	0f be       	out	0x3f, r0	; 63
    4bf4:	cd bf       	out	0x3d, r28	; 61
    4bf6:	df 91       	pop	r29
    4bf8:	cf 91       	pop	r28
    4bfa:	08 95       	ret

00004bfc <_ZN11TFT_ILI93418drawCharEiihjjh>:
    4bfc:	cf 92       	push	r12
    4bfe:	ef 92       	push	r14
    4c00:	ff 92       	push	r15
    4c02:	0f 93       	push	r16
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	cd b7       	in	r28, 0x3d	; 61
    4c0c:	de b7       	in	r29, 0x3e	; 62
    4c0e:	a1 97       	sbiw	r28, 0x21	; 33
    4c10:	0f b6       	in	r0, 0x3f	; 63
    4c12:	f8 94       	cli
    4c14:	de bf       	out	0x3e, r29	; 62
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	cd bf       	out	0x3d, r28	; 61
    4c1a:	9f 8b       	std	Y+23, r25	; 0x17
    4c1c:	8e 8b       	std	Y+22, r24	; 0x16
    4c1e:	79 8f       	std	Y+25, r23	; 0x19
    4c20:	68 8f       	std	Y+24, r22	; 0x18
    4c22:	5b 8f       	std	Y+27, r21	; 0x1b
    4c24:	4a 8f       	std	Y+26, r20	; 0x1a
    4c26:	2c 8f       	std	Y+28, r18	; 0x1c
    4c28:	1e 8f       	std	Y+30, r17	; 0x1e
    4c2a:	0d 8f       	std	Y+29, r16	; 0x1d
    4c2c:	f8 a2       	std	Y+32, r15	; 0x20
    4c2e:	ef 8e       	std	Y+31, r14	; 0x1f
    4c30:	c9 a2       	std	Y+33, r12	; 0x21
    4c32:	8e 89       	ldd	r24, Y+22	; 0x16
    4c34:	9f 89       	ldd	r25, Y+23	; 0x17
    4c36:	fc 01       	movw	r30, r24
    4c38:	82 89       	ldd	r24, Z+18	; 0x12
    4c3a:	93 89       	ldd	r25, Z+19	; 0x13
    4c3c:	9c 01       	movw	r18, r24
    4c3e:	88 8d       	ldd	r24, Y+24	; 0x18
    4c40:	99 8d       	ldd	r25, Y+25	; 0x19
    4c42:	82 17       	cp	r24, r18
    4c44:	93 07       	cpc	r25, r19
    4c46:	0c f0       	brlt	.+2      	; 0x4c4a <_ZN11TFT_ILI93418drawCharEiihjjh+0x4e>
    4c48:	04 c2       	rjmp	.+1032   	; 0x5052 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4c4a:	8e 89       	ldd	r24, Y+22	; 0x16
    4c4c:	9f 89       	ldd	r25, Y+23	; 0x17
    4c4e:	fc 01       	movw	r30, r24
    4c50:	84 89       	ldd	r24, Z+20	; 0x14
    4c52:	95 89       	ldd	r25, Z+21	; 0x15
    4c54:	9c 01       	movw	r18, r24
    4c56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c5a:	82 17       	cp	r24, r18
    4c5c:	93 07       	cpc	r25, r19
    4c5e:	0c f0       	brlt	.+2      	; 0x4c62 <_ZN11TFT_ILI93418drawCharEiihjjh+0x66>
    4c60:	f8 c1       	rjmp	.+1008   	; 0x5052 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4c62:	89 a1       	ldd	r24, Y+33	; 0x21
    4c64:	28 2f       	mov	r18, r24
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	c9 01       	movw	r24, r18
    4c6a:	88 0f       	add	r24, r24
    4c6c:	99 1f       	adc	r25, r25
    4c6e:	82 0f       	add	r24, r18
    4c70:	93 1f       	adc	r25, r19
    4c72:	88 0f       	add	r24, r24
    4c74:	99 1f       	adc	r25, r25
    4c76:	9c 01       	movw	r18, r24
    4c78:	88 8d       	ldd	r24, Y+24	; 0x18
    4c7a:	99 8d       	ldd	r25, Y+25	; 0x19
    4c7c:	82 0f       	add	r24, r18
    4c7e:	93 1f       	adc	r25, r19
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	99 23       	and	r25, r25
    4c84:	0c f4       	brge	.+2      	; 0x4c88 <_ZN11TFT_ILI93418drawCharEiihjjh+0x8c>
    4c86:	e5 c1       	rjmp	.+970    	; 0x5052 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4c88:	89 a1       	ldd	r24, Y+33	; 0x21
    4c8a:	88 2f       	mov	r24, r24
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	9c 01       	movw	r18, r24
    4c90:	22 0f       	add	r18, r18
    4c92:	33 1f       	adc	r19, r19
    4c94:	22 0f       	add	r18, r18
    4c96:	33 1f       	adc	r19, r19
    4c98:	22 0f       	add	r18, r18
    4c9a:	33 1f       	adc	r19, r19
    4c9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ca0:	82 0f       	add	r24, r18
    4ca2:	93 1f       	adc	r25, r19
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	99 23       	and	r25, r25
    4ca8:	0c f4       	brge	.+2      	; 0x4cac <_ZN11TFT_ILI93418drawCharEiihjjh+0xb0>
    4caa:	d3 c1       	rjmp	.+934    	; 0x5052 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4cac:	41 e0       	ldi	r20, 0x01	; 1
    4cae:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4cb0:	38 a1       	ldd	r19, Y+32	; 0x20
    4cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cb6:	28 17       	cp	r18, r24
    4cb8:	39 07       	cpc	r19, r25
    4cba:	09 f4       	brne	.+2      	; 0x4cbe <_ZN11TFT_ILI93418drawCharEiihjjh+0xc2>
    4cbc:	40 e0       	ldi	r20, 0x00	; 0
    4cbe:	49 87       	std	Y+9, r20	; 0x09
    4cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    4cc2:	81 30       	cpi	r24, 0x01	; 1
    4cc4:	09 f0       	breq	.+2      	; 0x4cc8 <_ZN11TFT_ILI93418drawCharEiihjjh+0xcc>
    4cc6:	e9 c0       	rjmp	.+466    	; 0x4e9a <_ZN11TFT_ILI93418drawCharEiihjjh+0x29e>
    4cc8:	89 85       	ldd	r24, Y+9	; 0x09
    4cca:	88 23       	and	r24, r24
    4ccc:	09 f4       	brne	.+2      	; 0x4cd0 <_ZN11TFT_ILI93418drawCharEiihjjh+0xd4>
    4cce:	e5 c0       	rjmp	.+458    	; 0x4e9a <_ZN11TFT_ILI93418drawCharEiihjjh+0x29e>
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	89 83       	std	Y+1, r24	; 0x01
    4cd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4cd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4cd8:	fc 01       	movw	r30, r24
    4cda:	38 96       	adiw	r30, 0x08	; 8
    4cdc:	88 8d       	ldd	r24, Y+24	; 0x18
    4cde:	99 8d       	ldd	r25, Y+25	; 0x19
    4ce0:	9c 01       	movw	r18, r24
    4ce2:	2b 5f       	subi	r18, 0xFB	; 251
    4ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ce8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4cea:	68 8d       	ldd	r22, Y+24	; 0x18
    4cec:	79 8d       	ldd	r23, Y+25	; 0x19
    4cee:	8e 89       	ldd	r24, Y+22	; 0x16
    4cf0:	9f 89       	ldd	r25, Y+23	; 0x17
    4cf2:	8f 01       	movw	r16, r30
    4cf4:	bd d1       	rcall	.+890    	; 0x5070 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    4cf6:	1a 82       	std	Y+2, r1	; 0x02
    4cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfa:	85 30       	cpi	r24, 0x05	; 5
    4cfc:	5c f5       	brge	.+86     	; 0x4d54 <_ZN11TFT_ILI93418drawCharEiihjjh+0x158>
    4cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4d00:	08 2e       	mov	r0, r24
    4d02:	00 0c       	add	r0, r0
    4d04:	99 0b       	sbc	r25, r25
    4d06:	9e 01       	movw	r18, r28
    4d08:	20 5f       	subi	r18, 0xF0	; 240
    4d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0c:	a9 01       	movw	r20, r18
    4d0e:	48 0f       	add	r20, r24
    4d10:	59 1f       	adc	r21, r25
    4d12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d14:	28 2f       	mov	r18, r24
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	c9 01       	movw	r24, r18
    4d1a:	88 0f       	add	r24, r24
    4d1c:	99 1f       	adc	r25, r25
    4d1e:	88 0f       	add	r24, r24
    4d20:	99 1f       	adc	r25, r25
    4d22:	82 0f       	add	r24, r18
    4d24:	93 1f       	adc	r25, r19
    4d26:	9c 01       	movw	r18, r24
    4d28:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2a:	08 2e       	mov	r0, r24
    4d2c:	00 0c       	add	r0, r0
    4d2e:	99 0b       	sbc	r25, r25
    4d30:	82 0f       	add	r24, r18
    4d32:	93 1f       	adc	r25, r19
    4d34:	86 5c       	subi	r24, 0xC6	; 198
    4d36:	9e 4f       	sbci	r25, 0xFE	; 254
    4d38:	9b 87       	std	Y+11, r25	; 0x0b
    4d3a:	8a 87       	std	Y+10, r24	; 0x0a
    4d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d40:	fc 01       	movw	r30, r24
    4d42:	84 91       	lpm	r24, Z
    4d44:	8c 87       	std	Y+12, r24	; 0x0c
    4d46:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d48:	fa 01       	movw	r30, r20
    4d4a:	80 83       	st	Z, r24
    4d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4e:	8f 5f       	subi	r24, 0xFF	; 255
    4d50:	8a 83       	std	Y+2, r24	; 0x02
    4d52:	d2 cf       	rjmp	.-92     	; 0x4cf8 <_ZN11TFT_ILI93418drawCharEiihjjh+0xfc>
    4d54:	1d 8a       	std	Y+21, r1	; 0x15
    4d56:	1b 82       	std	Y+3, r1	; 0x03
    4d58:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5a:	88 30       	cpi	r24, 0x08	; 8
    4d5c:	0c f0       	brlt	.+2      	; 0x4d60 <_ZN11TFT_ILI93418drawCharEiihjjh+0x164>
    4d5e:	8b c0       	rjmp	.+278    	; 0x4e76 <_ZN11TFT_ILI93418drawCharEiihjjh+0x27a>
    4d60:	1c 82       	std	Y+4, r1	; 0x04
    4d62:	8c 81       	ldd	r24, Y+4	; 0x04
    4d64:	85 30       	cpi	r24, 0x05	; 5
    4d66:	0c f0       	brlt	.+2      	; 0x4d6a <_ZN11TFT_ILI93418drawCharEiihjjh+0x16e>
    4d68:	5c c0       	rjmp	.+184    	; 0x4e22 <_ZN11TFT_ILI93418drawCharEiihjjh+0x226>
    4d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d6c:	08 2e       	mov	r0, r24
    4d6e:	00 0c       	add	r0, r0
    4d70:	99 0b       	sbc	r25, r25
    4d72:	9e 01       	movw	r18, r28
    4d74:	20 5f       	subi	r18, 0xF0	; 240
    4d76:	3f 4f       	sbci	r19, 0xFF	; 255
    4d78:	82 0f       	add	r24, r18
    4d7a:	93 1f       	adc	r25, r19
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	90 81       	ld	r25, Z
    4d80:	89 81       	ldd	r24, Y+1	; 0x01
    4d82:	89 23       	and	r24, r25
    4d84:	88 23       	and	r24, r24
    4d86:	29 f1       	breq	.+74     	; 0x4dd2 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1d6>
    4d88:	8d e4       	ldi	r24, 0x4D	; 77
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	80 81       	ld	r24, Z
    4d90:	80 95       	com	r24
    4d92:	88 1f       	adc	r24, r24
    4d94:	88 27       	eor	r24, r24
    4d96:	88 1f       	adc	r24, r24
    4d98:	88 23       	and	r24, r24
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <_ZN11TFT_ILI93418drawCharEiihjjh+0x1a2>
    4d9c:	f5 cf       	rjmp	.-22     	; 0x4d88 <_ZN11TFT_ILI93418drawCharEiihjjh+0x18c>
    4d9e:	8e e4       	ldi	r24, 0x4E	; 78
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4da4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4da6:	23 2f       	mov	r18, r19
    4da8:	33 27       	eor	r19, r19
    4daa:	fc 01       	movw	r30, r24
    4dac:	20 83       	st	Z, r18
    4dae:	00 00       	nop
    4db0:	8d e4       	ldi	r24, 0x4D	; 77
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	fc 01       	movw	r30, r24
    4db6:	80 81       	ld	r24, Z
    4db8:	80 95       	com	r24
    4dba:	88 1f       	adc	r24, r24
    4dbc:	88 27       	eor	r24, r24
    4dbe:	88 1f       	adc	r24, r24
    4dc0:	88 23       	and	r24, r24
    4dc2:	09 f0       	breq	.+2      	; 0x4dc6 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1ca>
    4dc4:	f5 cf       	rjmp	.-22     	; 0x4db0 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1b4>
    4dc6:	8e e4       	ldi	r24, 0x4E	; 78
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4dcc:	fc 01       	movw	r30, r24
    4dce:	20 83       	st	Z, r18
    4dd0:	24 c0       	rjmp	.+72     	; 0x4e1a <_ZN11TFT_ILI93418drawCharEiihjjh+0x21e>
    4dd2:	8d e4       	ldi	r24, 0x4D	; 77
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	80 81       	ld	r24, Z
    4dda:	80 95       	com	r24
    4ddc:	88 1f       	adc	r24, r24
    4dde:	88 27       	eor	r24, r24
    4de0:	88 1f       	adc	r24, r24
    4de2:	88 23       	and	r24, r24
    4de4:	09 f0       	breq	.+2      	; 0x4de8 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1ec>
    4de6:	f5 cf       	rjmp	.-22     	; 0x4dd2 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1d6>
    4de8:	8e e4       	ldi	r24, 0x4E	; 78
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4dee:	38 a1       	ldd	r19, Y+32	; 0x20
    4df0:	23 2f       	mov	r18, r19
    4df2:	33 27       	eor	r19, r19
    4df4:	fc 01       	movw	r30, r24
    4df6:	20 83       	st	Z, r18
    4df8:	00 00       	nop
    4dfa:	8d e4       	ldi	r24, 0x4D	; 77
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	fc 01       	movw	r30, r24
    4e00:	80 81       	ld	r24, Z
    4e02:	80 95       	com	r24
    4e04:	88 1f       	adc	r24, r24
    4e06:	88 27       	eor	r24, r24
    4e08:	88 1f       	adc	r24, r24
    4e0a:	88 23       	and	r24, r24
    4e0c:	09 f0       	breq	.+2      	; 0x4e10 <_ZN11TFT_ILI93418drawCharEiihjjh+0x214>
    4e0e:	f5 cf       	rjmp	.-22     	; 0x4dfa <_ZN11TFT_ILI93418drawCharEiihjjh+0x1fe>
    4e10:	8e e4       	ldi	r24, 0x4E	; 78
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4e16:	fc 01       	movw	r30, r24
    4e18:	20 83       	st	Z, r18
    4e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1c:	8f 5f       	subi	r24, 0xFF	; 255
    4e1e:	8c 83       	std	Y+4, r24	; 0x04
    4e20:	a0 cf       	rjmp	.-192    	; 0x4d62 <_ZN11TFT_ILI93418drawCharEiihjjh+0x166>
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
    4e24:	88 0f       	add	r24, r24
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	8d e4       	ldi	r24, 0x4D	; 77
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	fc 01       	movw	r30, r24
    4e2e:	80 81       	ld	r24, Z
    4e30:	80 95       	com	r24
    4e32:	88 1f       	adc	r24, r24
    4e34:	88 27       	eor	r24, r24
    4e36:	88 1f       	adc	r24, r24
    4e38:	88 23       	and	r24, r24
    4e3a:	09 f0       	breq	.+2      	; 0x4e3e <_ZN11TFT_ILI93418drawCharEiihjjh+0x242>
    4e3c:	f5 cf       	rjmp	.-22     	; 0x4e28 <_ZN11TFT_ILI93418drawCharEiihjjh+0x22c>
    4e3e:	8e e4       	ldi	r24, 0x4E	; 78
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4e44:	38 a1       	ldd	r19, Y+32	; 0x20
    4e46:	23 2f       	mov	r18, r19
    4e48:	33 27       	eor	r19, r19
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	20 83       	st	Z, r18
    4e4e:	8d e4       	ldi	r24, 0x4D	; 77
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	fc 01       	movw	r30, r24
    4e54:	80 81       	ld	r24, Z
    4e56:	80 95       	com	r24
    4e58:	88 1f       	adc	r24, r24
    4e5a:	88 27       	eor	r24, r24
    4e5c:	88 1f       	adc	r24, r24
    4e5e:	88 23       	and	r24, r24
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <_ZN11TFT_ILI93418drawCharEiihjjh+0x268>
    4e62:	f5 cf       	rjmp	.-22     	; 0x4e4e <_ZN11TFT_ILI93418drawCharEiihjjh+0x252>
    4e64:	8e e4       	ldi	r24, 0x4E	; 78
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	20 83       	st	Z, r18
    4e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e70:	8f 5f       	subi	r24, 0xFF	; 255
    4e72:	8b 83       	std	Y+3, r24	; 0x03
    4e74:	71 cf       	rjmp	.-286    	; 0x4d58 <_ZN11TFT_ILI93418drawCharEiihjjh+0x15c>
    4e76:	8d e4       	ldi	r24, 0x4D	; 77
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	fc 01       	movw	r30, r24
    4e7c:	80 81       	ld	r24, Z
    4e7e:	80 95       	com	r24
    4e80:	88 1f       	adc	r24, r24
    4e82:	88 27       	eor	r24, r24
    4e84:	88 1f       	adc	r24, r24
    4e86:	88 23       	and	r24, r24
    4e88:	09 f0       	breq	.+2      	; 0x4e8c <_ZN11TFT_ILI93418drawCharEiihjjh+0x290>
    4e8a:	f5 cf       	rjmp	.-22     	; 0x4e76 <_ZN11TFT_ILI93418drawCharEiihjjh+0x27a>
    4e8c:	6b db       	rcall	.-2346   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    4e8e:	fc 01       	movw	r30, r24
    4e90:	20 81       	ld	r18, Z
    4e92:	24 60       	ori	r18, 0x04	; 4
    4e94:	fc 01       	movw	r30, r24
    4e96:	20 83       	st	Z, r18
    4e98:	dd c0       	rjmp	.+442    	; 0x5054 <_ZN11TFT_ILI93418drawCharEiihjjh+0x458>
    4e9a:	1d 82       	std	Y+5, r1	; 0x05
    4e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9e:	86 30       	cpi	r24, 0x06	; 6
    4ea0:	0c f0       	brlt	.+2      	; 0x4ea4 <_ZN11TFT_ILI93418drawCharEiihjjh+0x2a8>
    4ea2:	d8 c0       	rjmp	.+432    	; 0x5054 <_ZN11TFT_ILI93418drawCharEiihjjh+0x458>
    4ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea6:	85 30       	cpi	r24, 0x05	; 5
    4ea8:	11 f4       	brne	.+4      	; 0x4eae <_ZN11TFT_ILI93418drawCharEiihjjh+0x2b2>
    4eaa:	1e 82       	std	Y+6, r1	; 0x06
    4eac:	1c c0       	rjmp	.+56     	; 0x4ee6 <_ZN11TFT_ILI93418drawCharEiihjjh+0x2ea>
    4eae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4eb0:	28 2f       	mov	r18, r24
    4eb2:	30 e0       	ldi	r19, 0x00	; 0
    4eb4:	c9 01       	movw	r24, r18
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	88 0f       	add	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	82 0f       	add	r24, r18
    4ec0:	93 1f       	adc	r25, r19
    4ec2:	9c 01       	movw	r18, r24
    4ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec6:	08 2e       	mov	r0, r24
    4ec8:	00 0c       	add	r0, r0
    4eca:	99 0b       	sbc	r25, r25
    4ecc:	82 0f       	add	r24, r18
    4ece:	93 1f       	adc	r25, r19
    4ed0:	86 5c       	subi	r24, 0xC6	; 198
    4ed2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ed4:	9e 87       	std	Y+14, r25	; 0x0e
    4ed6:	8d 87       	std	Y+13, r24	; 0x0d
    4ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    4edc:	fc 01       	movw	r30, r24
    4ede:	84 91       	lpm	r24, Z
    4ee0:	8f 87       	std	Y+15, r24	; 0x0f
    4ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ee4:	8e 83       	std	Y+6, r24	; 0x06
    4ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ee8:	81 30       	cpi	r24, 0x01	; 1
    4eea:	69 f5       	brne	.+90     	; 0x4f46 <_ZN11TFT_ILI93418drawCharEiihjjh+0x34a>
    4eec:	1f 82       	std	Y+7, r1	; 0x07
    4eee:	8f 81       	ldd	r24, Y+7	; 0x07
    4ef0:	88 30       	cpi	r24, 0x08	; 8
    4ef2:	0c f0       	brlt	.+2      	; 0x4ef6 <_ZN11TFT_ILI93418drawCharEiihjjh+0x2fa>
    4ef4:	aa c0       	rjmp	.+340    	; 0x504a <_ZN11TFT_ILI93418drawCharEiihjjh+0x44e>
    4ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ef8:	88 2f       	mov	r24, r24
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	81 70       	andi	r24, 0x01	; 1
    4efe:	99 27       	eor	r25, r25
    4f00:	89 2b       	or	r24, r25
    4f02:	b9 f0       	breq	.+46     	; 0x4f32 <_ZN11TFT_ILI93418drawCharEiihjjh+0x336>
    4f04:	8f 81       	ldd	r24, Y+7	; 0x07
    4f06:	28 2f       	mov	r18, r24
    4f08:	88 0f       	add	r24, r24
    4f0a:	33 0b       	sbc	r19, r19
    4f0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f10:	82 0f       	add	r24, r18
    4f12:	93 1f       	adc	r25, r19
    4f14:	ac 01       	movw	r20, r24
    4f16:	8d 81       	ldd	r24, Y+5	; 0x05
    4f18:	28 2f       	mov	r18, r24
    4f1a:	88 0f       	add	r24, r24
    4f1c:	33 0b       	sbc	r19, r19
    4f1e:	88 8d       	ldd	r24, Y+24	; 0x18
    4f20:	99 8d       	ldd	r25, Y+25	; 0x19
    4f22:	82 0f       	add	r24, r18
    4f24:	93 1f       	adc	r25, r19
    4f26:	bc 01       	movw	r22, r24
    4f28:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4f2a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4f2c:	8e 89       	ldd	r24, Y+22	; 0x16
    4f2e:	9f 89       	ldd	r25, Y+23	; 0x17
    4f30:	a0 d1       	rcall	.+832    	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
    4f32:	8e 81       	ldd	r24, Y+6	; 0x06
    4f34:	88 2f       	mov	r24, r24
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	95 95       	asr	r25
    4f3a:	87 95       	ror	r24
    4f3c:	8e 83       	std	Y+6, r24	; 0x06
    4f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    4f40:	8f 5f       	subi	r24, 0xFF	; 255
    4f42:	8f 83       	std	Y+7, r24	; 0x07
    4f44:	d4 cf       	rjmp	.-88     	; 0x4eee <_ZN11TFT_ILI93418drawCharEiihjjh+0x2f2>
    4f46:	18 86       	std	Y+8, r1	; 0x08
    4f48:	88 85       	ldd	r24, Y+8	; 0x08
    4f4a:	88 30       	cpi	r24, 0x08	; 8
    4f4c:	0c f0       	brlt	.+2      	; 0x4f50 <_ZN11TFT_ILI93418drawCharEiihjjh+0x354>
    4f4e:	7d c0       	rjmp	.+250    	; 0x504a <_ZN11TFT_ILI93418drawCharEiihjjh+0x44e>
    4f50:	8e 81       	ldd	r24, Y+6	; 0x06
    4f52:	88 2f       	mov	r24, r24
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	81 70       	andi	r24, 0x01	; 1
    4f58:	99 27       	eor	r25, r25
    4f5a:	89 2b       	or	r24, r25
    4f5c:	a9 f1       	breq	.+106    	; 0x4fc8 <_ZN11TFT_ILI93418drawCharEiihjjh+0x3cc>
    4f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    4f60:	08 2f       	mov	r16, r24
    4f62:	10 e0       	ldi	r17, 0x00	; 0
    4f64:	89 a1       	ldd	r24, Y+33	; 0x21
    4f66:	a8 2f       	mov	r26, r24
    4f68:	b0 e0       	ldi	r27, 0x00	; 0
    4f6a:	88 85       	ldd	r24, Y+8	; 0x08
    4f6c:	48 2f       	mov	r20, r24
    4f6e:	88 0f       	add	r24, r24
    4f70:	55 0b       	sbc	r21, r21
    4f72:	89 a1       	ldd	r24, Y+33	; 0x21
    4f74:	88 2f       	mov	r24, r24
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	48 9f       	mul	r20, r24
    4f7a:	90 01       	movw	r18, r0
    4f7c:	49 9f       	mul	r20, r25
    4f7e:	30 0d       	add	r19, r0
    4f80:	58 9f       	mul	r21, r24
    4f82:	30 0d       	add	r19, r0
    4f84:	11 24       	eor	r1, r1
    4f86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f88:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f8a:	f9 01       	movw	r30, r18
    4f8c:	e8 0f       	add	r30, r24
    4f8e:	f9 1f       	adc	r31, r25
    4f90:	8d 81       	ldd	r24, Y+5	; 0x05
    4f92:	48 2f       	mov	r20, r24
    4f94:	88 0f       	add	r24, r24
    4f96:	55 0b       	sbc	r21, r21
    4f98:	89 a1       	ldd	r24, Y+33	; 0x21
    4f9a:	88 2f       	mov	r24, r24
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	48 9f       	mul	r20, r24
    4fa0:	90 01       	movw	r18, r0
    4fa2:	49 9f       	mul	r20, r25
    4fa4:	30 0d       	add	r19, r0
    4fa6:	58 9f       	mul	r21, r24
    4fa8:	30 0d       	add	r19, r0
    4faa:	11 24       	eor	r1, r1
    4fac:	88 8d       	ldd	r24, Y+24	; 0x18
    4fae:	99 8d       	ldd	r25, Y+25	; 0x19
    4fb0:	b9 01       	movw	r22, r18
    4fb2:	68 0f       	add	r22, r24
    4fb4:	79 1f       	adc	r23, r25
    4fb6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4fb8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4fba:	8e 89       	ldd	r24, Y+22	; 0x16
    4fbc:	9f 89       	ldd	r25, Y+23	; 0x17
    4fbe:	79 01       	movw	r14, r18
    4fc0:	9d 01       	movw	r18, r26
    4fc2:	af 01       	movw	r20, r30
    4fc4:	54 d3       	rcall	.+1704   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
    4fc6:	37 c0       	rjmp	.+110    	; 0x5036 <_ZN11TFT_ILI93418drawCharEiihjjh+0x43a>
    4fc8:	89 85       	ldd	r24, Y+9	; 0x09
    4fca:	88 23       	and	r24, r24
    4fcc:	a1 f1       	breq	.+104    	; 0x5036 <_ZN11TFT_ILI93418drawCharEiihjjh+0x43a>
    4fce:	89 a1       	ldd	r24, Y+33	; 0x21
    4fd0:	08 2f       	mov	r16, r24
    4fd2:	10 e0       	ldi	r17, 0x00	; 0
    4fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    4fd6:	a8 2f       	mov	r26, r24
    4fd8:	b0 e0       	ldi	r27, 0x00	; 0
    4fda:	88 85       	ldd	r24, Y+8	; 0x08
    4fdc:	48 2f       	mov	r20, r24
    4fde:	88 0f       	add	r24, r24
    4fe0:	55 0b       	sbc	r21, r21
    4fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    4fe4:	88 2f       	mov	r24, r24
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	48 9f       	mul	r20, r24
    4fea:	90 01       	movw	r18, r0
    4fec:	49 9f       	mul	r20, r25
    4fee:	30 0d       	add	r19, r0
    4ff0:	58 9f       	mul	r21, r24
    4ff2:	30 0d       	add	r19, r0
    4ff4:	11 24       	eor	r1, r1
    4ff6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ff8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ffa:	f9 01       	movw	r30, r18
    4ffc:	e8 0f       	add	r30, r24
    4ffe:	f9 1f       	adc	r31, r25
    5000:	8d 81       	ldd	r24, Y+5	; 0x05
    5002:	48 2f       	mov	r20, r24
    5004:	88 0f       	add	r24, r24
    5006:	55 0b       	sbc	r21, r21
    5008:	89 a1       	ldd	r24, Y+33	; 0x21
    500a:	88 2f       	mov	r24, r24
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	48 9f       	mul	r20, r24
    5010:	90 01       	movw	r18, r0
    5012:	49 9f       	mul	r20, r25
    5014:	30 0d       	add	r19, r0
    5016:	58 9f       	mul	r21, r24
    5018:	30 0d       	add	r19, r0
    501a:	11 24       	eor	r1, r1
    501c:	88 8d       	ldd	r24, Y+24	; 0x18
    501e:	99 8d       	ldd	r25, Y+25	; 0x19
    5020:	b9 01       	movw	r22, r18
    5022:	68 0f       	add	r22, r24
    5024:	79 1f       	adc	r23, r25
    5026:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5028:	38 a1       	ldd	r19, Y+32	; 0x20
    502a:	8e 89       	ldd	r24, Y+22	; 0x16
    502c:	9f 89       	ldd	r25, Y+23	; 0x17
    502e:	79 01       	movw	r14, r18
    5030:	9d 01       	movw	r18, r26
    5032:	af 01       	movw	r20, r30
    5034:	1c d3       	rcall	.+1592   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
    5036:	8e 81       	ldd	r24, Y+6	; 0x06
    5038:	88 2f       	mov	r24, r24
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	95 95       	asr	r25
    503e:	87 95       	ror	r24
    5040:	8e 83       	std	Y+6, r24	; 0x06
    5042:	88 85       	ldd	r24, Y+8	; 0x08
    5044:	8f 5f       	subi	r24, 0xFF	; 255
    5046:	88 87       	std	Y+8, r24	; 0x08
    5048:	7f cf       	rjmp	.-258    	; 0x4f48 <_ZN11TFT_ILI93418drawCharEiihjjh+0x34c>
    504a:	8d 81       	ldd	r24, Y+5	; 0x05
    504c:	8f 5f       	subi	r24, 0xFF	; 255
    504e:	8d 83       	std	Y+5, r24	; 0x05
    5050:	25 cf       	rjmp	.-438    	; 0x4e9c <_ZN11TFT_ILI93418drawCharEiihjjh+0x2a0>
    5052:	00 00       	nop
    5054:	a1 96       	adiw	r28, 0x21	; 33
    5056:	0f b6       	in	r0, 0x3f	; 63
    5058:	f8 94       	cli
    505a:	de bf       	out	0x3e, r29	; 62
    505c:	0f be       	out	0x3f, r0	; 63
    505e:	cd bf       	out	0x3d, r28	; 61
    5060:	df 91       	pop	r29
    5062:	cf 91       	pop	r28
    5064:	1f 91       	pop	r17
    5066:	0f 91       	pop	r16
    5068:	ff 90       	pop	r15
    506a:	ef 90       	pop	r14
    506c:	cf 90       	pop	r12
    506e:	08 95       	ret

00005070 <_ZN11TFT_ILI934113setAddrWindowEiiii>:
    5070:	0f 93       	push	r16
    5072:	1f 93       	push	r17
    5074:	cf 93       	push	r28
    5076:	df 93       	push	r29
    5078:	cd b7       	in	r28, 0x3d	; 61
    507a:	de b7       	in	r29, 0x3e	; 62
    507c:	2a 97       	sbiw	r28, 0x0a	; 10
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	9a 83       	std	Y+2, r25	; 0x02
    508a:	89 83       	std	Y+1, r24	; 0x01
    508c:	7c 83       	std	Y+4, r23	; 0x04
    508e:	6b 83       	std	Y+3, r22	; 0x03
    5090:	5e 83       	std	Y+6, r21	; 0x06
    5092:	4d 83       	std	Y+5, r20	; 0x05
    5094:	38 87       	std	Y+8, r19	; 0x08
    5096:	2f 83       	std	Y+7, r18	; 0x07
    5098:	1a 87       	std	Y+10, r17	; 0x0a
    509a:	09 87       	std	Y+9, r16	; 0x09
    509c:	63 da       	rcall	.-2874   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    509e:	fc 01       	movw	r30, r24
    50a0:	20 81       	ld	r18, Z
    50a2:	2d 7f       	andi	r18, 0xFD	; 253
    50a4:	fc 01       	movw	r30, r24
    50a6:	20 83       	st	Z, r18
    50a8:	5d da       	rcall	.-2886   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    50aa:	fc 01       	movw	r30, r24
    50ac:	20 81       	ld	r18, Z
    50ae:	2b 7f       	andi	r18, 0xFB	; 251
    50b0:	fc 01       	movw	r30, r24
    50b2:	20 83       	st	Z, r18
    50b4:	8e e4       	ldi	r24, 0x4E	; 78
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	2a e2       	ldi	r18, 0x2A	; 42
    50ba:	fc 01       	movw	r30, r24
    50bc:	20 83       	st	Z, r18
    50be:	00 96       	adiw	r24, 0x00	; 0
    50c0:	00 96       	adiw	r24, 0x00	; 0
    50c2:	00 96       	adiw	r24, 0x00	; 0
    50c4:	01 d0       	rcall	.+2      	; 0x50c8 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x58>
    50c6:	01 c0       	rjmp	.+2      	; 0x50ca <_ZN11TFT_ILI934113setAddrWindowEiiii+0x5a>
    50c8:	08 95       	ret
    50ca:	4c da       	rcall	.-2920   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    50cc:	fc 01       	movw	r30, r24
    50ce:	20 81       	ld	r18, Z
    50d0:	22 60       	ori	r18, 0x02	; 2
    50d2:	fc 01       	movw	r30, r24
    50d4:	20 83       	st	Z, r18
    50d6:	8e e4       	ldi	r24, 0x4E	; 78
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	2b 81       	ldd	r18, Y+3	; 0x03
    50dc:	3c 81       	ldd	r19, Y+4	; 0x04
    50de:	23 2f       	mov	r18, r19
    50e0:	33 0f       	add	r19, r19
    50e2:	33 0b       	sbc	r19, r19
    50e4:	fc 01       	movw	r30, r24
    50e6:	20 83       	st	Z, r18
    50e8:	00 00       	nop
    50ea:	00 96       	adiw	r24, 0x00	; 0
    50ec:	01 d0       	rcall	.+2      	; 0x50f0 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x80>
    50ee:	01 c0       	rjmp	.+2      	; 0x50f2 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x82>
    50f0:	08 95       	ret
    50f2:	89 81       	ldd	r24, Y+1	; 0x01
    50f4:	9a 81       	ldd	r25, Y+2	; 0x02
    50f6:	2f ef       	ldi	r18, 0xFF	; 255
    50f8:	3f ef       	ldi	r19, 0xFF	; 255
    50fa:	fc 01       	movw	r30, r24
    50fc:	37 8f       	std	Z+31, r19	; 0x1f
    50fe:	26 8f       	std	Z+30, r18	; 0x1e
    5100:	8e e4       	ldi	r24, 0x4E	; 78
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	2b 81       	ldd	r18, Y+3	; 0x03
    5106:	fc 01       	movw	r30, r24
    5108:	20 83       	st	Z, r18
    510a:	00 00       	nop
    510c:	00 96       	adiw	r24, 0x00	; 0
    510e:	01 d0       	rcall	.+2      	; 0x5112 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xa2>
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xa4>
    5112:	08 95       	ret
    5114:	89 81       	ldd	r24, Y+1	; 0x01
    5116:	9a 81       	ldd	r25, Y+2	; 0x02
    5118:	fc 01       	movw	r30, r24
    511a:	24 85       	ldd	r18, Z+12	; 0x0c
    511c:	35 85       	ldd	r19, Z+13	; 0x0d
    511e:	8f 81       	ldd	r24, Y+7	; 0x07
    5120:	98 85       	ldd	r25, Y+8	; 0x08
    5122:	28 17       	cp	r18, r24
    5124:	39 07       	cpc	r19, r25
    5126:	09 f1       	breq	.+66     	; 0x516a <_ZN11TFT_ILI934113setAddrWindowEiiii+0xfa>
    5128:	8e e4       	ldi	r24, 0x4E	; 78
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	2f 81       	ldd	r18, Y+7	; 0x07
    512e:	38 85       	ldd	r19, Y+8	; 0x08
    5130:	23 2f       	mov	r18, r19
    5132:	33 0f       	add	r19, r19
    5134:	33 0b       	sbc	r19, r19
    5136:	fc 01       	movw	r30, r24
    5138:	20 83       	st	Z, r18
    513a:	00 00       	nop
    513c:	00 96       	adiw	r24, 0x00	; 0
    513e:	01 d0       	rcall	.+2      	; 0x5142 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xd2>
    5140:	01 c0       	rjmp	.+2      	; 0x5144 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xd4>
    5142:	08 95       	ret
    5144:	00 00       	nop
    5146:	89 81       	ldd	r24, Y+1	; 0x01
    5148:	9a 81       	ldd	r25, Y+2	; 0x02
    514a:	2f 81       	ldd	r18, Y+7	; 0x07
    514c:	38 85       	ldd	r19, Y+8	; 0x08
    514e:	fc 01       	movw	r30, r24
    5150:	35 87       	std	Z+13, r19	; 0x0d
    5152:	24 87       	std	Z+12, r18	; 0x0c
    5154:	8e e4       	ldi	r24, 0x4E	; 78
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	2f 81       	ldd	r18, Y+7	; 0x07
    515a:	fc 01       	movw	r30, r24
    515c:	20 83       	st	Z, r18
    515e:	00 00       	nop
    5160:	00 96       	adiw	r24, 0x00	; 0
    5162:	00 96       	adiw	r24, 0x00	; 0
    5164:	01 d0       	rcall	.+2      	; 0x5168 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xf8>
    5166:	01 c0       	rjmp	.+2      	; 0x516a <_ZN11TFT_ILI934113setAddrWindowEiiii+0xfa>
    5168:	08 95       	ret
    516a:	fc d9       	rcall	.-3080   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    516c:	fc 01       	movw	r30, r24
    516e:	20 81       	ld	r18, Z
    5170:	2d 7f       	andi	r18, 0xFD	; 253
    5172:	fc 01       	movw	r30, r24
    5174:	20 83       	st	Z, r18
    5176:	8e e4       	ldi	r24, 0x4E	; 78
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	2b e2       	ldi	r18, 0x2B	; 43
    517c:	fc 01       	movw	r30, r24
    517e:	20 83       	st	Z, r18
    5180:	00 96       	adiw	r24, 0x00	; 0
    5182:	00 96       	adiw	r24, 0x00	; 0
    5184:	00 96       	adiw	r24, 0x00	; 0
    5186:	01 d0       	rcall	.+2      	; 0x518a <_ZN11TFT_ILI934113setAddrWindowEiiii+0x11a>
    5188:	01 c0       	rjmp	.+2      	; 0x518c <_ZN11TFT_ILI934113setAddrWindowEiiii+0x11c>
    518a:	08 95       	ret
    518c:	eb d9       	rcall	.-3114   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    518e:	fc 01       	movw	r30, r24
    5190:	20 81       	ld	r18, Z
    5192:	22 60       	ori	r18, 0x02	; 2
    5194:	fc 01       	movw	r30, r24
    5196:	20 83       	st	Z, r18
    5198:	8e e4       	ldi	r24, 0x4E	; 78
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	2d 81       	ldd	r18, Y+5	; 0x05
    519e:	3e 81       	ldd	r19, Y+6	; 0x06
    51a0:	23 2f       	mov	r18, r19
    51a2:	33 0f       	add	r19, r19
    51a4:	33 0b       	sbc	r19, r19
    51a6:	fc 01       	movw	r30, r24
    51a8:	20 83       	st	Z, r18
    51aa:	00 00       	nop
    51ac:	00 96       	adiw	r24, 0x00	; 0
    51ae:	01 d0       	rcall	.+2      	; 0x51b2 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x142>
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x144>
    51b2:	08 95       	ret
    51b4:	89 81       	ldd	r24, Y+1	; 0x01
    51b6:	9a 81       	ldd	r25, Y+2	; 0x02
    51b8:	2f ef       	ldi	r18, 0xFF	; 255
    51ba:	3f ef       	ldi	r19, 0xFF	; 255
    51bc:	fc 01       	movw	r30, r24
    51be:	35 8f       	std	Z+29, r19	; 0x1d
    51c0:	24 8f       	std	Z+28, r18	; 0x1c
    51c2:	8e e4       	ldi	r24, 0x4E	; 78
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	2d 81       	ldd	r18, Y+5	; 0x05
    51c8:	fc 01       	movw	r30, r24
    51ca:	20 83       	st	Z, r18
    51cc:	00 00       	nop
    51ce:	00 96       	adiw	r24, 0x00	; 0
    51d0:	01 d0       	rcall	.+2      	; 0x51d4 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x164>
    51d2:	01 c0       	rjmp	.+2      	; 0x51d6 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x166>
    51d4:	08 95       	ret
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	9a 81       	ldd	r25, Y+2	; 0x02
    51da:	fc 01       	movw	r30, r24
    51dc:	26 85       	ldd	r18, Z+14	; 0x0e
    51de:	37 85       	ldd	r19, Z+15	; 0x0f
    51e0:	89 85       	ldd	r24, Y+9	; 0x09
    51e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e4:	28 17       	cp	r18, r24
    51e6:	39 07       	cpc	r19, r25
    51e8:	09 f1       	breq	.+66     	; 0x522c <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1bc>
    51ea:	8e e4       	ldi	r24, 0x4E	; 78
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	29 85       	ldd	r18, Y+9	; 0x09
    51f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    51f2:	23 2f       	mov	r18, r19
    51f4:	33 0f       	add	r19, r19
    51f6:	33 0b       	sbc	r19, r19
    51f8:	fc 01       	movw	r30, r24
    51fa:	20 83       	st	Z, r18
    51fc:	00 00       	nop
    51fe:	00 96       	adiw	r24, 0x00	; 0
    5200:	01 d0       	rcall	.+2      	; 0x5204 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x194>
    5202:	01 c0       	rjmp	.+2      	; 0x5206 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x196>
    5204:	08 95       	ret
    5206:	00 00       	nop
    5208:	89 81       	ldd	r24, Y+1	; 0x01
    520a:	9a 81       	ldd	r25, Y+2	; 0x02
    520c:	29 85       	ldd	r18, Y+9	; 0x09
    520e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5210:	fc 01       	movw	r30, r24
    5212:	37 87       	std	Z+15, r19	; 0x0f
    5214:	26 87       	std	Z+14, r18	; 0x0e
    5216:	8e e4       	ldi	r24, 0x4E	; 78
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	29 85       	ldd	r18, Y+9	; 0x09
    521c:	fc 01       	movw	r30, r24
    521e:	20 83       	st	Z, r18
    5220:	00 00       	nop
    5222:	00 96       	adiw	r24, 0x00	; 0
    5224:	00 96       	adiw	r24, 0x00	; 0
    5226:	01 d0       	rcall	.+2      	; 0x522a <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1ba>
    5228:	01 c0       	rjmp	.+2      	; 0x522c <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1bc>
    522a:	08 95       	ret
    522c:	9b d9       	rcall	.-3274   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    522e:	fc 01       	movw	r30, r24
    5230:	20 81       	ld	r18, Z
    5232:	2d 7f       	andi	r18, 0xFD	; 253
    5234:	fc 01       	movw	r30, r24
    5236:	20 83       	st	Z, r18
    5238:	8e e4       	ldi	r24, 0x4E	; 78
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	2c e2       	ldi	r18, 0x2C	; 44
    523e:	fc 01       	movw	r30, r24
    5240:	20 83       	st	Z, r18
    5242:	00 00       	nop
    5244:	00 96       	adiw	r24, 0x00	; 0
    5246:	00 96       	adiw	r24, 0x00	; 0
    5248:	01 d0       	rcall	.+2      	; 0x524c <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1dc>
    524a:	01 c0       	rjmp	.+2      	; 0x524e <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1de>
    524c:	08 95       	ret
    524e:	8a d9       	rcall	.-3308   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    5250:	fc 01       	movw	r30, r24
    5252:	20 81       	ld	r18, Z
    5254:	22 60       	ori	r18, 0x02	; 2
    5256:	fc 01       	movw	r30, r24
    5258:	20 83       	st	Z, r18
    525a:	00 00       	nop
    525c:	2a 96       	adiw	r28, 0x0a	; 10
    525e:	0f b6       	in	r0, 0x3f	; 63
    5260:	f8 94       	cli
    5262:	de bf       	out	0x3e, r29	; 62
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	cd bf       	out	0x3d, r28	; 61
    5268:	df 91       	pop	r29
    526a:	cf 91       	pop	r28
    526c:	1f 91       	pop	r17
    526e:	0f 91       	pop	r16
    5270:	08 95       	ret

00005272 <_ZN11TFT_ILI93419drawPixelEjjj>:
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	cd b7       	in	r28, 0x3d	; 61
    5278:	de b7       	in	r29, 0x3e	; 62
    527a:	28 97       	sbiw	r28, 0x08	; 8
    527c:	0f b6       	in	r0, 0x3f	; 63
    527e:	f8 94       	cli
    5280:	de bf       	out	0x3e, r29	; 62
    5282:	0f be       	out	0x3f, r0	; 63
    5284:	cd bf       	out	0x3d, r28	; 61
    5286:	9a 83       	std	Y+2, r25	; 0x02
    5288:	89 83       	std	Y+1, r24	; 0x01
    528a:	7c 83       	std	Y+4, r23	; 0x04
    528c:	6b 83       	std	Y+3, r22	; 0x03
    528e:	5e 83       	std	Y+6, r21	; 0x06
    5290:	4d 83       	std	Y+5, r20	; 0x05
    5292:	38 87       	std	Y+8, r19	; 0x08
    5294:	2f 83       	std	Y+7, r18	; 0x07
    5296:	89 81       	ldd	r24, Y+1	; 0x01
    5298:	9a 81       	ldd	r25, Y+2	; 0x02
    529a:	fc 01       	movw	r30, r24
    529c:	22 89       	ldd	r18, Z+18	; 0x12
    529e:	33 89       	ldd	r19, Z+19	; 0x13
    52a0:	8b 81       	ldd	r24, Y+3	; 0x03
    52a2:	9c 81       	ldd	r25, Y+4	; 0x04
    52a4:	82 17       	cp	r24, r18
    52a6:	93 07       	cpc	r25, r19
    52a8:	08 f0       	brcs	.+2      	; 0x52ac <_ZN11TFT_ILI93419drawPixelEjjj+0x3a>
    52aa:	02 c1       	rjmp	.+516    	; 0x54b0 <_ZN11TFT_ILI93419drawPixelEjjj+0x23e>
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	9a 81       	ldd	r25, Y+2	; 0x02
    52b0:	fc 01       	movw	r30, r24
    52b2:	24 89       	ldd	r18, Z+20	; 0x14
    52b4:	35 89       	ldd	r19, Z+21	; 0x15
    52b6:	8d 81       	ldd	r24, Y+5	; 0x05
    52b8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ba:	82 17       	cp	r24, r18
    52bc:	93 07       	cpc	r25, r19
    52be:	08 f0       	brcs	.+2      	; 0x52c2 <_ZN11TFT_ILI93419drawPixelEjjj+0x50>
    52c0:	f7 c0       	rjmp	.+494    	; 0x54b0 <_ZN11TFT_ILI93419drawPixelEjjj+0x23e>
    52c2:	50 d9       	rcall	.-3424   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    52c4:	fc 01       	movw	r30, r24
    52c6:	20 81       	ld	r18, Z
    52c8:	2b 7f       	andi	r18, 0xFB	; 251
    52ca:	fc 01       	movw	r30, r24
    52cc:	20 83       	st	Z, r18
    52ce:	89 81       	ldd	r24, Y+1	; 0x01
    52d0:	9a 81       	ldd	r25, Y+2	; 0x02
    52d2:	fc 01       	movw	r30, r24
    52d4:	26 8d       	ldd	r18, Z+30	; 0x1e
    52d6:	37 8d       	ldd	r19, Z+31	; 0x1f
    52d8:	8b 81       	ldd	r24, Y+3	; 0x03
    52da:	9c 81       	ldd	r25, Y+4	; 0x04
    52dc:	28 17       	cp	r18, r24
    52de:	39 07       	cpc	r19, r25
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <_ZN11TFT_ILI93419drawPixelEjjj+0x72>
    52e2:	4b c0       	rjmp	.+150    	; 0x537a <_ZN11TFT_ILI93419drawPixelEjjj+0x108>
    52e4:	3f d9       	rcall	.-3458   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    52e6:	fc 01       	movw	r30, r24
    52e8:	20 81       	ld	r18, Z
    52ea:	2d 7f       	andi	r18, 0xFD	; 253
    52ec:	fc 01       	movw	r30, r24
    52ee:	20 83       	st	Z, r18
    52f0:	8e e4       	ldi	r24, 0x4E	; 78
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	2a e2       	ldi	r18, 0x2A	; 42
    52f6:	fc 01       	movw	r30, r24
    52f8:	20 83       	st	Z, r18
    52fa:	00 00       	nop
    52fc:	00 96       	adiw	r24, 0x00	; 0
    52fe:	01 d0       	rcall	.+2      	; 0x5302 <_ZN11TFT_ILI93419drawPixelEjjj+0x90>
    5300:	01 c0       	rjmp	.+2      	; 0x5304 <_ZN11TFT_ILI93419drawPixelEjjj+0x92>
    5302:	08 95       	ret
    5304:	89 81       	ldd	r24, Y+1	; 0x01
    5306:	9a 81       	ldd	r25, Y+2	; 0x02
    5308:	2b 81       	ldd	r18, Y+3	; 0x03
    530a:	3c 81       	ldd	r19, Y+4	; 0x04
    530c:	fc 01       	movw	r30, r24
    530e:	37 8f       	std	Z+31, r19	; 0x1f
    5310:	26 8f       	std	Z+30, r18	; 0x1e
    5312:	28 d9       	rcall	.-3504   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    5314:	fc 01       	movw	r30, r24
    5316:	20 81       	ld	r18, Z
    5318:	22 60       	ori	r18, 0x02	; 2
    531a:	fc 01       	movw	r30, r24
    531c:	20 83       	st	Z, r18
    531e:	8e e4       	ldi	r24, 0x4E	; 78
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	2b 81       	ldd	r18, Y+3	; 0x03
    5324:	3c 81       	ldd	r19, Y+4	; 0x04
    5326:	23 2f       	mov	r18, r19
    5328:	33 27       	eor	r19, r19
    532a:	fc 01       	movw	r30, r24
    532c:	20 83       	st	Z, r18
    532e:	02 d0       	rcall	.+4      	; 0x5334 <_ZN11TFT_ILI93419drawPixelEjjj+0xc2>
    5330:	01 d0       	rcall	.+2      	; 0x5334 <_ZN11TFT_ILI93419drawPixelEjjj+0xc2>
    5332:	01 c0       	rjmp	.+2      	; 0x5336 <_ZN11TFT_ILI93419drawPixelEjjj+0xc4>
    5334:	08 95       	ret
    5336:	00 00       	nop
    5338:	8e e4       	ldi	r24, 0x4E	; 78
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	2b 81       	ldd	r18, Y+3	; 0x03
    533e:	fc 01       	movw	r30, r24
    5340:	20 83       	st	Z, r18
    5342:	02 d0       	rcall	.+4      	; 0x5348 <_ZN11TFT_ILI93419drawPixelEjjj+0xd6>
    5344:	01 d0       	rcall	.+2      	; 0x5348 <_ZN11TFT_ILI93419drawPixelEjjj+0xd6>
    5346:	01 c0       	rjmp	.+2      	; 0x534a <_ZN11TFT_ILI93419drawPixelEjjj+0xd8>
    5348:	08 95       	ret
    534a:	00 00       	nop
    534c:	8e e4       	ldi	r24, 0x4E	; 78
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	2b 81       	ldd	r18, Y+3	; 0x03
    5352:	3c 81       	ldd	r19, Y+4	; 0x04
    5354:	23 2f       	mov	r18, r19
    5356:	33 27       	eor	r19, r19
    5358:	fc 01       	movw	r30, r24
    535a:	20 83       	st	Z, r18
    535c:	02 d0       	rcall	.+4      	; 0x5362 <_ZN11TFT_ILI93419drawPixelEjjj+0xf0>
    535e:	01 d0       	rcall	.+2      	; 0x5362 <_ZN11TFT_ILI93419drawPixelEjjj+0xf0>
    5360:	01 c0       	rjmp	.+2      	; 0x5364 <_ZN11TFT_ILI93419drawPixelEjjj+0xf2>
    5362:	08 95       	ret
    5364:	00 00       	nop
    5366:	8e e4       	ldi	r24, 0x4E	; 78
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	2b 81       	ldd	r18, Y+3	; 0x03
    536c:	fc 01       	movw	r30, r24
    536e:	20 83       	st	Z, r18
    5370:	00 00       	nop
    5372:	00 96       	adiw	r24, 0x00	; 0
    5374:	01 d0       	rcall	.+2      	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj+0x106>
    5376:	01 c0       	rjmp	.+2      	; 0x537a <_ZN11TFT_ILI93419drawPixelEjjj+0x108>
    5378:	08 95       	ret
    537a:	89 81       	ldd	r24, Y+1	; 0x01
    537c:	9a 81       	ldd	r25, Y+2	; 0x02
    537e:	fc 01       	movw	r30, r24
    5380:	24 8d       	ldd	r18, Z+28	; 0x1c
    5382:	35 8d       	ldd	r19, Z+29	; 0x1d
    5384:	8d 81       	ldd	r24, Y+5	; 0x05
    5386:	9e 81       	ldd	r25, Y+6	; 0x06
    5388:	28 17       	cp	r18, r24
    538a:	39 07       	cpc	r19, r25
    538c:	09 f4       	brne	.+2      	; 0x5390 <_ZN11TFT_ILI93419drawPixelEjjj+0x11e>
    538e:	4c c0       	rjmp	.+152    	; 0x5428 <_ZN11TFT_ILI93419drawPixelEjjj+0x1b6>
    5390:	e9 d8       	rcall	.-3630   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    5392:	fc 01       	movw	r30, r24
    5394:	20 81       	ld	r18, Z
    5396:	2d 7f       	andi	r18, 0xFD	; 253
    5398:	fc 01       	movw	r30, r24
    539a:	20 83       	st	Z, r18
    539c:	8e e4       	ldi	r24, 0x4E	; 78
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	2b e2       	ldi	r18, 0x2B	; 43
    53a2:	fc 01       	movw	r30, r24
    53a4:	20 83       	st	Z, r18
    53a6:	00 00       	nop
    53a8:	00 96       	adiw	r24, 0x00	; 0
    53aa:	01 d0       	rcall	.+2      	; 0x53ae <_ZN11TFT_ILI93419drawPixelEjjj+0x13c>
    53ac:	01 c0       	rjmp	.+2      	; 0x53b0 <_ZN11TFT_ILI93419drawPixelEjjj+0x13e>
    53ae:	08 95       	ret
    53b0:	89 81       	ldd	r24, Y+1	; 0x01
    53b2:	9a 81       	ldd	r25, Y+2	; 0x02
    53b4:	2d 81       	ldd	r18, Y+5	; 0x05
    53b6:	3e 81       	ldd	r19, Y+6	; 0x06
    53b8:	fc 01       	movw	r30, r24
    53ba:	35 8f       	std	Z+29, r19	; 0x1d
    53bc:	24 8f       	std	Z+28, r18	; 0x1c
    53be:	d2 d8       	rcall	.-3676   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    53c0:	fc 01       	movw	r30, r24
    53c2:	20 81       	ld	r18, Z
    53c4:	22 60       	ori	r18, 0x02	; 2
    53c6:	fc 01       	movw	r30, r24
    53c8:	20 83       	st	Z, r18
    53ca:	8e e4       	ldi	r24, 0x4E	; 78
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	2d 81       	ldd	r18, Y+5	; 0x05
    53d0:	3e 81       	ldd	r19, Y+6	; 0x06
    53d2:	23 2f       	mov	r18, r19
    53d4:	33 27       	eor	r19, r19
    53d6:	fc 01       	movw	r30, r24
    53d8:	20 83       	st	Z, r18
    53da:	02 d0       	rcall	.+4      	; 0x53e0 <_ZN11TFT_ILI93419drawPixelEjjj+0x16e>
    53dc:	01 d0       	rcall	.+2      	; 0x53e0 <_ZN11TFT_ILI93419drawPixelEjjj+0x16e>
    53de:	01 c0       	rjmp	.+2      	; 0x53e2 <_ZN11TFT_ILI93419drawPixelEjjj+0x170>
    53e0:	08 95       	ret
    53e2:	00 00       	nop
    53e4:	8e e4       	ldi	r24, 0x4E	; 78
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	2d 81       	ldd	r18, Y+5	; 0x05
    53ea:	fc 01       	movw	r30, r24
    53ec:	20 83       	st	Z, r18
    53ee:	02 d0       	rcall	.+4      	; 0x53f4 <_ZN11TFT_ILI93419drawPixelEjjj+0x182>
    53f0:	01 d0       	rcall	.+2      	; 0x53f4 <_ZN11TFT_ILI93419drawPixelEjjj+0x182>
    53f2:	01 c0       	rjmp	.+2      	; 0x53f6 <_ZN11TFT_ILI93419drawPixelEjjj+0x184>
    53f4:	08 95       	ret
    53f6:	00 00       	nop
    53f8:	8e e4       	ldi	r24, 0x4E	; 78
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	2d 81       	ldd	r18, Y+5	; 0x05
    53fe:	3e 81       	ldd	r19, Y+6	; 0x06
    5400:	23 2f       	mov	r18, r19
    5402:	33 27       	eor	r19, r19
    5404:	fc 01       	movw	r30, r24
    5406:	20 83       	st	Z, r18
    5408:	02 d0       	rcall	.+4      	; 0x540e <_ZN11TFT_ILI93419drawPixelEjjj+0x19c>
    540a:	01 d0       	rcall	.+2      	; 0x540e <_ZN11TFT_ILI93419drawPixelEjjj+0x19c>
    540c:	01 c0       	rjmp	.+2      	; 0x5410 <_ZN11TFT_ILI93419drawPixelEjjj+0x19e>
    540e:	08 95       	ret
    5410:	00 00       	nop
    5412:	8e e4       	ldi	r24, 0x4E	; 78
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	2d 81       	ldd	r18, Y+5	; 0x05
    5418:	fc 01       	movw	r30, r24
    541a:	20 83       	st	Z, r18
    541c:	00 00       	nop
    541e:	00 96       	adiw	r24, 0x00	; 0
    5420:	00 96       	adiw	r24, 0x00	; 0
    5422:	01 d0       	rcall	.+2      	; 0x5426 <_ZN11TFT_ILI93419drawPixelEjjj+0x1b4>
    5424:	01 c0       	rjmp	.+2      	; 0x5428 <_ZN11TFT_ILI93419drawPixelEjjj+0x1b6>
    5426:	08 95       	ret
    5428:	9d d8       	rcall	.-3782   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    542a:	fc 01       	movw	r30, r24
    542c:	20 81       	ld	r18, Z
    542e:	2d 7f       	andi	r18, 0xFD	; 253
    5430:	fc 01       	movw	r30, r24
    5432:	20 83       	st	Z, r18
    5434:	8e e4       	ldi	r24, 0x4E	; 78
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	2c e2       	ldi	r18, 0x2C	; 44
    543a:	fc 01       	movw	r30, r24
    543c:	20 83       	st	Z, r18
    543e:	00 96       	adiw	r24, 0x00	; 0
    5440:	00 96       	adiw	r24, 0x00	; 0
    5442:	00 96       	adiw	r24, 0x00	; 0
    5444:	01 d0       	rcall	.+2      	; 0x5448 <_ZN11TFT_ILI93419drawPixelEjjj+0x1d6>
    5446:	01 c0       	rjmp	.+2      	; 0x544a <_ZN11TFT_ILI93419drawPixelEjjj+0x1d8>
    5448:	08 95       	ret
    544a:	8c d8       	rcall	.-3816   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    544c:	fc 01       	movw	r30, r24
    544e:	20 81       	ld	r18, Z
    5450:	22 60       	ori	r18, 0x02	; 2
    5452:	fc 01       	movw	r30, r24
    5454:	20 83       	st	Z, r18
    5456:	8e e4       	ldi	r24, 0x4E	; 78
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	2f 81       	ldd	r18, Y+7	; 0x07
    545c:	38 85       	ldd	r19, Y+8	; 0x08
    545e:	23 2f       	mov	r18, r19
    5460:	33 27       	eor	r19, r19
    5462:	fc 01       	movw	r30, r24
    5464:	20 83       	st	Z, r18
    5466:	00 96       	adiw	r24, 0x00	; 0
    5468:	00 96       	adiw	r24, 0x00	; 0
    546a:	00 96       	adiw	r24, 0x00	; 0
    546c:	01 d0       	rcall	.+2      	; 0x5470 <_ZN11TFT_ILI93419drawPixelEjjj+0x1fe>
    546e:	01 c0       	rjmp	.+2      	; 0x5472 <_ZN11TFT_ILI93419drawPixelEjjj+0x200>
    5470:	08 95       	ret
    5472:	2b 81       	ldd	r18, Y+3	; 0x03
    5474:	3c 81       	ldd	r19, Y+4	; 0x04
    5476:	89 81       	ldd	r24, Y+1	; 0x01
    5478:	9a 81       	ldd	r25, Y+2	; 0x02
    547a:	fc 01       	movw	r30, r24
    547c:	35 87       	std	Z+13, r19	; 0x0d
    547e:	24 87       	std	Z+12, r18	; 0x0c
    5480:	8e e4       	ldi	r24, 0x4E	; 78
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	2f 81       	ldd	r18, Y+7	; 0x07
    5486:	fc 01       	movw	r30, r24
    5488:	20 83       	st	Z, r18
    548a:	00 00       	nop
    548c:	00 96       	adiw	r24, 0x00	; 0
    548e:	01 d0       	rcall	.+2      	; 0x5492 <_ZN11TFT_ILI93419drawPixelEjjj+0x220>
    5490:	01 c0       	rjmp	.+2      	; 0x5494 <_ZN11TFT_ILI93419drawPixelEjjj+0x222>
    5492:	08 95       	ret
    5494:	2d 81       	ldd	r18, Y+5	; 0x05
    5496:	3e 81       	ldd	r19, Y+6	; 0x06
    5498:	89 81       	ldd	r24, Y+1	; 0x01
    549a:	9a 81       	ldd	r25, Y+2	; 0x02
    549c:	fc 01       	movw	r30, r24
    549e:	37 87       	std	Z+15, r19	; 0x0f
    54a0:	26 87       	std	Z+14, r18	; 0x0e
    54a2:	60 d8       	rcall	.-3904   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    54a4:	fc 01       	movw	r30, r24
    54a6:	20 81       	ld	r18, Z
    54a8:	24 60       	ori	r18, 0x04	; 4
    54aa:	fc 01       	movw	r30, r24
    54ac:	20 83       	st	Z, r18
    54ae:	01 c0       	rjmp	.+2      	; 0x54b2 <_ZN11TFT_ILI93419drawPixelEjjj+0x240>
    54b0:	00 00       	nop
    54b2:	28 96       	adiw	r28, 0x08	; 8
    54b4:	0f b6       	in	r0, 0x3f	; 63
    54b6:	f8 94       	cli
    54b8:	de bf       	out	0x3e, r29	; 62
    54ba:	0f be       	out	0x3f, r0	; 63
    54bc:	cd bf       	out	0x3d, r28	; 61
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	08 95       	ret

000054c4 <_ZN11TFT_ILI93419fastSetupEv>:
    54c4:	cf 93       	push	r28
    54c6:	df 93       	push	r29
    54c8:	1f 92       	push	r1
    54ca:	1f 92       	push	r1
    54cc:	cd b7       	in	r28, 0x3d	; 61
    54ce:	de b7       	in	r29, 0x3e	; 62
    54d0:	9a 83       	std	Y+2, r25	; 0x02
    54d2:	89 83       	std	Y+1, r24	; 0x01
    54d4:	47 d8       	rcall	.-3954   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    54d6:	fc 01       	movw	r30, r24
    54d8:	20 81       	ld	r18, Z
    54da:	2d 7f       	andi	r18, 0xFD	; 253
    54dc:	fc 01       	movw	r30, r24
    54de:	20 83       	st	Z, r18
    54e0:	41 d8       	rcall	.-3966   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    54e2:	fc 01       	movw	r30, r24
    54e4:	20 81       	ld	r18, Z
    54e6:	2b 7f       	andi	r18, 0xFB	; 251
    54e8:	fc 01       	movw	r30, r24
    54ea:	20 83       	st	Z, r18
    54ec:	8e e4       	ldi	r24, 0x4E	; 78
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	2a e2       	ldi	r18, 0x2A	; 42
    54f2:	fc 01       	movw	r30, r24
    54f4:	20 83       	st	Z, r18
    54f6:	00 96       	adiw	r24, 0x00	; 0
    54f8:	00 96       	adiw	r24, 0x00	; 0
    54fa:	00 96       	adiw	r24, 0x00	; 0
    54fc:	01 d0       	rcall	.+2      	; 0x5500 <_ZN11TFT_ILI93419fastSetupEv+0x3c>
    54fe:	01 c0       	rjmp	.+2      	; 0x5502 <_ZN11TFT_ILI93419fastSetupEv+0x3e>
    5500:	08 95       	ret
    5502:	30 d8       	rcall	.-4000   	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    5504:	fc 01       	movw	r30, r24
    5506:	20 81       	ld	r18, Z
    5508:	22 60       	ori	r18, 0x02	; 2
    550a:	fc 01       	movw	r30, r24
    550c:	20 83       	st	Z, r18
    550e:	8e e4       	ldi	r24, 0x4E	; 78
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	fc 01       	movw	r30, r24
    5514:	10 82       	st	Z, r1
    5516:	00 00       	nop
    5518:	00 96       	adiw	r24, 0x00	; 0
    551a:	00 96       	adiw	r24, 0x00	; 0
    551c:	01 d0       	rcall	.+2      	; 0x5520 <_ZN11TFT_ILI93419fastSetupEv+0x5c>
    551e:	01 c0       	rjmp	.+2      	; 0x5522 <_ZN11TFT_ILI93419fastSetupEv+0x5e>
    5520:	08 95       	ret
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	9a 81       	ldd	r25, Y+2	; 0x02
    5526:	fc 01       	movw	r30, r24
    5528:	17 8e       	std	Z+31, r1	; 0x1f
    552a:	16 8e       	std	Z+30, r1	; 0x1e
    552c:	8e e4       	ldi	r24, 0x4E	; 78
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	fc 01       	movw	r30, r24
    5532:	10 82       	st	Z, r1
    5534:	00 00       	nop
    5536:	00 96       	adiw	r24, 0x00	; 0
    5538:	01 d0       	rcall	.+2      	; 0x553c <_ZN11TFT_ILI93419fastSetupEv+0x78>
    553a:	01 c0       	rjmp	.+2      	; 0x553e <_ZN11TFT_ILI93419fastSetupEv+0x7a>
    553c:	08 95       	ret
    553e:	89 81       	ldd	r24, Y+1	; 0x01
    5540:	9a 81       	ldd	r25, Y+2	; 0x02
    5542:	fc 01       	movw	r30, r24
    5544:	82 89       	ldd	r24, Z+18	; 0x12
    5546:	93 89       	ldd	r25, Z+19	; 0x13
    5548:	01 97       	sbiw	r24, 0x01	; 1
    554a:	9c 01       	movw	r18, r24
    554c:	89 81       	ldd	r24, Y+1	; 0x01
    554e:	9a 81       	ldd	r25, Y+2	; 0x02
    5550:	fc 01       	movw	r30, r24
    5552:	35 87       	std	Z+13, r19	; 0x0d
    5554:	24 87       	std	Z+12, r18	; 0x0c
    5556:	8e e4       	ldi	r24, 0x4E	; 78
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	29 81       	ldd	r18, Y+1	; 0x01
    555c:	3a 81       	ldd	r19, Y+2	; 0x02
    555e:	f9 01       	movw	r30, r18
    5560:	24 85       	ldd	r18, Z+12	; 0x0c
    5562:	35 85       	ldd	r19, Z+13	; 0x0d
    5564:	23 2f       	mov	r18, r19
    5566:	33 0f       	add	r19, r19
    5568:	33 0b       	sbc	r19, r19
    556a:	fc 01       	movw	r30, r24
    556c:	20 83       	st	Z, r18
    556e:	00 96       	adiw	r24, 0x00	; 0
    5570:	00 96       	adiw	r24, 0x00	; 0
    5572:	00 96       	adiw	r24, 0x00	; 0
    5574:	01 d0       	rcall	.+2      	; 0x5578 <_ZN11TFT_ILI93419fastSetupEv+0xb4>
    5576:	01 c0       	rjmp	.+2      	; 0x557a <_ZN11TFT_ILI93419fastSetupEv+0xb6>
    5578:	08 95       	ret
    557a:	8e e4       	ldi	r24, 0x4E	; 78
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	29 81       	ldd	r18, Y+1	; 0x01
    5580:	3a 81       	ldd	r19, Y+2	; 0x02
    5582:	f9 01       	movw	r30, r18
    5584:	24 85       	ldd	r18, Z+12	; 0x0c
    5586:	35 85       	ldd	r19, Z+13	; 0x0d
    5588:	fc 01       	movw	r30, r24
    558a:	20 83       	st	Z, r18
    558c:	00 00       	nop
    558e:	00 96       	adiw	r24, 0x00	; 0
    5590:	00 96       	adiw	r24, 0x00	; 0
    5592:	01 d0       	rcall	.+2      	; 0x5596 <_ZN11TFT_ILI93419fastSetupEv+0xd2>
    5594:	01 c0       	rjmp	.+2      	; 0x5598 <_ZN11TFT_ILI93419fastSetupEv+0xd4>
    5596:	08 95       	ret
    5598:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    559c:	fc 01       	movw	r30, r24
    559e:	20 81       	ld	r18, Z
    55a0:	2d 7f       	andi	r18, 0xFD	; 253
    55a2:	fc 01       	movw	r30, r24
    55a4:	20 83       	st	Z, r18
    55a6:	8e e4       	ldi	r24, 0x4E	; 78
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	2b e2       	ldi	r18, 0x2B	; 43
    55ac:	fc 01       	movw	r30, r24
    55ae:	20 83       	st	Z, r18
    55b0:	00 96       	adiw	r24, 0x00	; 0
    55b2:	00 96       	adiw	r24, 0x00	; 0
    55b4:	00 96       	adiw	r24, 0x00	; 0
    55b6:	01 d0       	rcall	.+2      	; 0x55ba <_ZN11TFT_ILI93419fastSetupEv+0xf6>
    55b8:	01 c0       	rjmp	.+2      	; 0x55bc <_ZN11TFT_ILI93419fastSetupEv+0xf8>
    55ba:	08 95       	ret
    55bc:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    55c0:	fc 01       	movw	r30, r24
    55c2:	20 81       	ld	r18, Z
    55c4:	22 60       	ori	r18, 0x02	; 2
    55c6:	fc 01       	movw	r30, r24
    55c8:	20 83       	st	Z, r18
    55ca:	8e e4       	ldi	r24, 0x4E	; 78
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	fc 01       	movw	r30, r24
    55d0:	10 82       	st	Z, r1
    55d2:	00 00       	nop
    55d4:	00 96       	adiw	r24, 0x00	; 0
    55d6:	00 96       	adiw	r24, 0x00	; 0
    55d8:	01 d0       	rcall	.+2      	; 0x55dc <_ZN11TFT_ILI93419fastSetupEv+0x118>
    55da:	01 c0       	rjmp	.+2      	; 0x55de <_ZN11TFT_ILI93419fastSetupEv+0x11a>
    55dc:	08 95       	ret
    55de:	89 81       	ldd	r24, Y+1	; 0x01
    55e0:	9a 81       	ldd	r25, Y+2	; 0x02
    55e2:	fc 01       	movw	r30, r24
    55e4:	15 8e       	std	Z+29, r1	; 0x1d
    55e6:	14 8e       	std	Z+28, r1	; 0x1c
    55e8:	8e e4       	ldi	r24, 0x4E	; 78
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	fc 01       	movw	r30, r24
    55ee:	10 82       	st	Z, r1
    55f0:	00 00       	nop
    55f2:	00 96       	adiw	r24, 0x00	; 0
    55f4:	01 d0       	rcall	.+2      	; 0x55f8 <_ZN11TFT_ILI93419fastSetupEv+0x134>
    55f6:	01 c0       	rjmp	.+2      	; 0x55fa <_ZN11TFT_ILI93419fastSetupEv+0x136>
    55f8:	08 95       	ret
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	9a 81       	ldd	r25, Y+2	; 0x02
    55fe:	fc 01       	movw	r30, r24
    5600:	84 89       	ldd	r24, Z+20	; 0x14
    5602:	95 89       	ldd	r25, Z+21	; 0x15
    5604:	01 97       	sbiw	r24, 0x01	; 1
    5606:	9c 01       	movw	r18, r24
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	fc 01       	movw	r30, r24
    560e:	37 87       	std	Z+15, r19	; 0x0f
    5610:	26 87       	std	Z+14, r18	; 0x0e
    5612:	8e e4       	ldi	r24, 0x4E	; 78
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	29 81       	ldd	r18, Y+1	; 0x01
    5618:	3a 81       	ldd	r19, Y+2	; 0x02
    561a:	f9 01       	movw	r30, r18
    561c:	26 85       	ldd	r18, Z+14	; 0x0e
    561e:	37 85       	ldd	r19, Z+15	; 0x0f
    5620:	23 2f       	mov	r18, r19
    5622:	33 0f       	add	r19, r19
    5624:	33 0b       	sbc	r19, r19
    5626:	fc 01       	movw	r30, r24
    5628:	20 83       	st	Z, r18
    562a:	00 96       	adiw	r24, 0x00	; 0
    562c:	00 96       	adiw	r24, 0x00	; 0
    562e:	00 96       	adiw	r24, 0x00	; 0
    5630:	01 d0       	rcall	.+2      	; 0x5634 <_ZN11TFT_ILI93419fastSetupEv+0x170>
    5632:	01 c0       	rjmp	.+2      	; 0x5636 <_ZN11TFT_ILI93419fastSetupEv+0x172>
    5634:	08 95       	ret
    5636:	8e e4       	ldi	r24, 0x4E	; 78
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	29 81       	ldd	r18, Y+1	; 0x01
    563c:	3a 81       	ldd	r19, Y+2	; 0x02
    563e:	f9 01       	movw	r30, r18
    5640:	26 85       	ldd	r18, Z+14	; 0x0e
    5642:	37 85       	ldd	r19, Z+15	; 0x0f
    5644:	fc 01       	movw	r30, r24
    5646:	20 83       	st	Z, r18
    5648:	00 00       	nop
    564a:	00 96       	adiw	r24, 0x00	; 0
    564c:	00 96       	adiw	r24, 0x00	; 0
    564e:	01 d0       	rcall	.+2      	; 0x5652 <_ZN11TFT_ILI93419fastSetupEv+0x18e>
    5650:	01 c0       	rjmp	.+2      	; 0x5654 <_ZN11TFT_ILI93419fastSetupEv+0x190>
    5652:	08 95       	ret
    5654:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    5658:	fc 01       	movw	r30, r24
    565a:	20 81       	ld	r18, Z
    565c:	24 60       	ori	r18, 0x04	; 4
    565e:	fc 01       	movw	r30, r24
    5660:	20 83       	st	Z, r18
    5662:	00 00       	nop
    5664:	0f 90       	pop	r0
    5666:	0f 90       	pop	r0
    5668:	df 91       	pop	r29
    566a:	cf 91       	pop	r28
    566c:	08 95       	ret

0000566e <_ZN11TFT_ILI93418fillRectEiiiij>:
    566e:	ef 92       	push	r14
    5670:	ff 92       	push	r15
    5672:	0f 93       	push	r16
    5674:	1f 93       	push	r17
    5676:	cf 93       	push	r28
    5678:	df 93       	push	r29
    567a:	cd b7       	in	r28, 0x3d	; 61
    567c:	de b7       	in	r29, 0x3e	; 62
    567e:	61 97       	sbiw	r28, 0x11	; 17
    5680:	0f b6       	in	r0, 0x3f	; 63
    5682:	f8 94       	cli
    5684:	de bf       	out	0x3e, r29	; 62
    5686:	0f be       	out	0x3f, r0	; 63
    5688:	cd bf       	out	0x3d, r28	; 61
    568a:	9f 83       	std	Y+7, r25	; 0x07
    568c:	8e 83       	std	Y+6, r24	; 0x06
    568e:	79 87       	std	Y+9, r23	; 0x09
    5690:	68 87       	std	Y+8, r22	; 0x08
    5692:	5b 87       	std	Y+11, r21	; 0x0b
    5694:	4a 87       	std	Y+10, r20	; 0x0a
    5696:	3d 87       	std	Y+13, r19	; 0x0d
    5698:	2c 87       	std	Y+12, r18	; 0x0c
    569a:	1f 87       	std	Y+15, r17	; 0x0f
    569c:	0e 87       	std	Y+14, r16	; 0x0e
    569e:	f9 8a       	std	Y+17, r15	; 0x11
    56a0:	e8 8a       	std	Y+16, r14	; 0x10
    56a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    56a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    56a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    56a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    56aa:	82 0f       	add	r24, r18
    56ac:	93 1f       	adc	r25, r19
    56ae:	fc 01       	movw	r30, r24
    56b0:	31 97       	sbiw	r30, 0x01	; 1
    56b2:	28 85       	ldd	r18, Y+8	; 0x08
    56b4:	39 85       	ldd	r19, Y+9	; 0x09
    56b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    56b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    56ba:	82 0f       	add	r24, r18
    56bc:	93 1f       	adc	r25, r19
    56be:	9c 01       	movw	r18, r24
    56c0:	21 50       	subi	r18, 0x01	; 1
    56c2:	31 09       	sbc	r19, r1
    56c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    56c6:	5b 85       	ldd	r21, Y+11	; 0x0b
    56c8:	68 85       	ldd	r22, Y+8	; 0x08
    56ca:	79 85       	ldd	r23, Y+9	; 0x09
    56cc:	8e 81       	ldd	r24, Y+6	; 0x06
    56ce:	9f 81       	ldd	r25, Y+7	; 0x07
    56d0:	8f 01       	movw	r16, r30
    56d2:	ce dc       	rcall	.-1636   	; 0x5070 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    56d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    56d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    56d8:	9c 01       	movw	r18, r24
    56da:	21 50       	subi	r18, 0x01	; 1
    56dc:	31 09       	sbc	r19, r1
    56de:	3f 87       	std	Y+15, r19	; 0x0f
    56e0:	2e 87       	std	Y+14, r18	; 0x0e
    56e2:	21 e0       	ldi	r18, 0x01	; 1
    56e4:	89 2b       	or	r24, r25
    56e6:	09 f4       	brne	.+2      	; 0x56ea <_ZN11TFT_ILI93418fillRectEiiiij+0x7c>
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	22 23       	and	r18, r18
    56ec:	21 f1       	breq	.+72     	; 0x5736 <_ZN11TFT_ILI93418fillRectEiiiij+0xc8>
    56ee:	88 89       	ldd	r24, Y+16	; 0x10
    56f0:	99 89       	ldd	r25, Y+17	; 0x11
    56f2:	9a 83       	std	Y+2, r25	; 0x02
    56f4:	89 83       	std	Y+1, r24	; 0x01
    56f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    56f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    56fa:	9c 83       	std	Y+4, r25	; 0x04
    56fc:	8b 83       	std	Y+3, r24	; 0x03
    56fe:	29 81       	ldd	r18, Y+1	; 0x01
    5700:	89 81       	ldd	r24, Y+1	; 0x01
    5702:	9a 81       	ldd	r25, Y+2	; 0x02
    5704:	89 2f       	mov	r24, r25
    5706:	99 27       	eor	r25, r25
    5708:	38 2f       	mov	r19, r24
    570a:	8b 81       	ldd	r24, Y+3	; 0x03
    570c:	9c 81       	ldd	r25, Y+4	; 0x04
    570e:	00 97       	sbiw	r24, 0x00	; 0
    5710:	71 f0       	breq	.+28     	; 0x572e <_ZN11TFT_ILI93418fillRectEiiiij+0xc0>
    5712:	3e bd       	out	0x2e, r19	; 46
    5714:	02 d0       	rcall	.+4      	; 0x571a <_ZN11TFT_ILI93418fillRectEiiiij+0xac>
    5716:	01 d0       	rcall	.+2      	; 0x571a <_ZN11TFT_ILI93418fillRectEiiiij+0xac>
    5718:	01 c0       	rjmp	.+2      	; 0x571c <_ZN11TFT_ILI93418fillRectEiiiij+0xae>
    571a:	08 95       	ret
    571c:	00 00       	nop
    571e:	2e bd       	out	0x2e, r18	; 46
    5720:	00 96       	adiw	r24, 0x00	; 0
    5722:	00 96       	adiw	r24, 0x00	; 0
    5724:	01 d0       	rcall	.+2      	; 0x5728 <_ZN11TFT_ILI93418fillRectEiiiij+0xba>
    5726:	01 c0       	rjmp	.+2      	; 0x572a <_ZN11TFT_ILI93418fillRectEiiiij+0xbc>
    5728:	08 95       	ret
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	91 f7       	brne	.-28     	; 0x5712 <_ZN11TFT_ILI93418fillRectEiiiij+0xa4>
    572e:	2d 83       	std	Y+5, r18	; 0x05
    5730:	9c 83       	std	Y+4, r25	; 0x04
    5732:	8b 83       	std	Y+3, r24	; 0x03
    5734:	cf cf       	rjmp	.-98     	; 0x56d4 <_ZN11TFT_ILI93418fillRectEiiiij+0x66>
    5736:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    573a:	fc 01       	movw	r30, r24
    573c:	20 81       	ld	r18, Z
    573e:	24 60       	ori	r18, 0x04	; 4
    5740:	fc 01       	movw	r30, r24
    5742:	20 83       	st	Z, r18
    5744:	00 00       	nop
    5746:	61 96       	adiw	r28, 0x11	; 17
    5748:	0f b6       	in	r0, 0x3f	; 63
    574a:	f8 94       	cli
    574c:	de bf       	out	0x3e, r29	; 62
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	cd bf       	out	0x3d, r28	; 61
    5752:	df 91       	pop	r29
    5754:	cf 91       	pop	r28
    5756:	1f 91       	pop	r17
    5758:	0f 91       	pop	r16
    575a:	ff 90       	pop	r15
    575c:	ef 90       	pop	r14
    575e:	08 95       	ret

00005760 <_ZN11TFT_ILI934111setRotationEh>:
    5760:	cf 93       	push	r28
    5762:	df 93       	push	r29
    5764:	00 d0       	rcall	.+0      	; 0x5766 <_ZN11TFT_ILI934111setRotationEh+0x6>
    5766:	cd b7       	in	r28, 0x3d	; 61
    5768:	de b7       	in	r29, 0x3e	; 62
    576a:	9a 83       	std	Y+2, r25	; 0x02
    576c:	89 83       	std	Y+1, r24	; 0x01
    576e:	6b 83       	std	Y+3, r22	; 0x03
    5770:	8b 81       	ldd	r24, Y+3	; 0x03
    5772:	28 2f       	mov	r18, r24
    5774:	27 70       	andi	r18, 0x07	; 7
    5776:	89 81       	ldd	r24, Y+1	; 0x01
    5778:	9a 81       	ldd	r25, Y+2	; 0x02
    577a:	fc 01       	movw	r30, r24
    577c:	23 a3       	std	Z+35, r18	; 0x23
    577e:	89 81       	ldd	r24, Y+1	; 0x01
    5780:	9a 81       	ldd	r25, Y+2	; 0x02
    5782:	66 e3       	ldi	r22, 0x36	; 54
    5784:	68 d8       	rcall	.-3888   	; 0x4856 <_ZN11TFT_ILI934112writecommandEh>
    5786:	89 81       	ldd	r24, Y+1	; 0x01
    5788:	9a 81       	ldd	r25, Y+2	; 0x02
    578a:	fc 01       	movw	r30, r24
    578c:	83 a1       	ldd	r24, Z+35	; 0x23
    578e:	88 2f       	mov	r24, r24
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	09 2e       	mov	r0, r25
    5794:	00 0c       	add	r0, r0
    5796:	aa 0b       	sbc	r26, r26
    5798:	bb 0b       	sbc	r27, r27
    579a:	40 e0       	ldi	r20, 0x00	; 0
    579c:	50 e0       	ldi	r21, 0x00	; 0
    579e:	27 e0       	ldi	r18, 0x07	; 7
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	84 1b       	sub	r24, r20
    57a4:	95 0b       	sbc	r25, r21
    57a6:	28 17       	cp	r18, r24
    57a8:	39 07       	cpc	r19, r25
    57aa:	08 f4       	brcc	.+2      	; 0x57ae <_ZN11TFT_ILI934111setRotationEh+0x4e>
    57ac:	a0 c0       	rjmp	.+320    	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    57ae:	fc 01       	movw	r30, r24
    57b0:	88 27       	eor	r24, r24
    57b2:	ee 58       	subi	r30, 0x8E	; 142
    57b4:	ff 4f       	sbci	r31, 0xFF	; 255
    57b6:	8f 4f       	sbci	r24, 0xFF	; 255
    57b8:	0c 94 6c 61 	jmp	0xc2d8	; 0xc2d8 <__tablejump2__>
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	9a 81       	ldd	r25, Y+2	; 0x02
    57c0:	68 e4       	ldi	r22, 0x48	; 72
    57c2:	76 d8       	rcall	.-3860   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    57c4:	89 81       	ldd	r24, Y+1	; 0x01
    57c6:	9a 81       	ldd	r25, Y+2	; 0x02
    57c8:	20 ef       	ldi	r18, 0xF0	; 240
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	fc 01       	movw	r30, r24
    57ce:	33 8b       	std	Z+19, r19	; 0x13
    57d0:	22 8b       	std	Z+18, r18	; 0x12
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	9a 81       	ldd	r25, Y+2	; 0x02
    57d6:	20 e4       	ldi	r18, 0x40	; 64
    57d8:	31 e0       	ldi	r19, 0x01	; 1
    57da:	fc 01       	movw	r30, r24
    57dc:	35 8b       	std	Z+21, r19	; 0x15
    57de:	24 8b       	std	Z+20, r18	; 0x14
    57e0:	86 c0       	rjmp	.+268    	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	9a 81       	ldd	r25, Y+2	; 0x02
    57e6:	68 e2       	ldi	r22, 0x28	; 40
    57e8:	63 d8       	rcall	.-3898   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	9a 81       	ldd	r25, Y+2	; 0x02
    57ee:	20 e4       	ldi	r18, 0x40	; 64
    57f0:	31 e0       	ldi	r19, 0x01	; 1
    57f2:	fc 01       	movw	r30, r24
    57f4:	33 8b       	std	Z+19, r19	; 0x13
    57f6:	22 8b       	std	Z+18, r18	; 0x12
    57f8:	89 81       	ldd	r24, Y+1	; 0x01
    57fa:	9a 81       	ldd	r25, Y+2	; 0x02
    57fc:	20 ef       	ldi	r18, 0xF0	; 240
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	fc 01       	movw	r30, r24
    5802:	35 8b       	std	Z+21, r19	; 0x15
    5804:	24 8b       	std	Z+20, r18	; 0x14
    5806:	73 c0       	rjmp	.+230    	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    5808:	89 81       	ldd	r24, Y+1	; 0x01
    580a:	9a 81       	ldd	r25, Y+2	; 0x02
    580c:	68 e8       	ldi	r22, 0x88	; 136
    580e:	50 d8       	rcall	.-3936   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    5810:	89 81       	ldd	r24, Y+1	; 0x01
    5812:	9a 81       	ldd	r25, Y+2	; 0x02
    5814:	20 ef       	ldi	r18, 0xF0	; 240
    5816:	30 e0       	ldi	r19, 0x00	; 0
    5818:	fc 01       	movw	r30, r24
    581a:	33 8b       	std	Z+19, r19	; 0x13
    581c:	22 8b       	std	Z+18, r18	; 0x12
    581e:	89 81       	ldd	r24, Y+1	; 0x01
    5820:	9a 81       	ldd	r25, Y+2	; 0x02
    5822:	20 e4       	ldi	r18, 0x40	; 64
    5824:	31 e0       	ldi	r19, 0x01	; 1
    5826:	fc 01       	movw	r30, r24
    5828:	35 8b       	std	Z+21, r19	; 0x15
    582a:	24 8b       	std	Z+20, r18	; 0x14
    582c:	60 c0       	rjmp	.+192    	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    582e:	89 81       	ldd	r24, Y+1	; 0x01
    5830:	9a 81       	ldd	r25, Y+2	; 0x02
    5832:	68 ee       	ldi	r22, 0xE8	; 232
    5834:	3d d8       	rcall	.-3974   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    5836:	89 81       	ldd	r24, Y+1	; 0x01
    5838:	9a 81       	ldd	r25, Y+2	; 0x02
    583a:	20 e4       	ldi	r18, 0x40	; 64
    583c:	31 e0       	ldi	r19, 0x01	; 1
    583e:	fc 01       	movw	r30, r24
    5840:	33 8b       	std	Z+19, r19	; 0x13
    5842:	22 8b       	std	Z+18, r18	; 0x12
    5844:	89 81       	ldd	r24, Y+1	; 0x01
    5846:	9a 81       	ldd	r25, Y+2	; 0x02
    5848:	20 ef       	ldi	r18, 0xF0	; 240
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	fc 01       	movw	r30, r24
    584e:	35 8b       	std	Z+21, r19	; 0x15
    5850:	24 8b       	std	Z+20, r18	; 0x14
    5852:	4d c0       	rjmp	.+154    	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    5854:	89 81       	ldd	r24, Y+1	; 0x01
    5856:	9a 81       	ldd	r25, Y+2	; 0x02
    5858:	68 ec       	ldi	r22, 0xC8	; 200
    585a:	2a d8       	rcall	.-4012   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    585c:	89 81       	ldd	r24, Y+1	; 0x01
    585e:	9a 81       	ldd	r25, Y+2	; 0x02
    5860:	20 ef       	ldi	r18, 0xF0	; 240
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	fc 01       	movw	r30, r24
    5866:	33 8b       	std	Z+19, r19	; 0x13
    5868:	22 8b       	std	Z+18, r18	; 0x12
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	9a 81       	ldd	r25, Y+2	; 0x02
    586e:	20 e4       	ldi	r18, 0x40	; 64
    5870:	31 e0       	ldi	r19, 0x01	; 1
    5872:	fc 01       	movw	r30, r24
    5874:	35 8b       	std	Z+21, r19	; 0x15
    5876:	24 8b       	std	Z+20, r18	; 0x14
    5878:	3a c0       	rjmp	.+116    	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    587a:	89 81       	ldd	r24, Y+1	; 0x01
    587c:	9a 81       	ldd	r25, Y+2	; 0x02
    587e:	68 e6       	ldi	r22, 0x68	; 104
    5880:	17 d8       	rcall	.-4050   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    5882:	89 81       	ldd	r24, Y+1	; 0x01
    5884:	9a 81       	ldd	r25, Y+2	; 0x02
    5886:	20 e4       	ldi	r18, 0x40	; 64
    5888:	31 e0       	ldi	r19, 0x01	; 1
    588a:	fc 01       	movw	r30, r24
    588c:	33 8b       	std	Z+19, r19	; 0x13
    588e:	22 8b       	std	Z+18, r18	; 0x12
    5890:	89 81       	ldd	r24, Y+1	; 0x01
    5892:	9a 81       	ldd	r25, Y+2	; 0x02
    5894:	20 ef       	ldi	r18, 0xF0	; 240
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	fc 01       	movw	r30, r24
    589a:	35 8b       	std	Z+21, r19	; 0x15
    589c:	24 8b       	std	Z+20, r18	; 0x14
    589e:	27 c0       	rjmp	.+78     	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    58a0:	89 81       	ldd	r24, Y+1	; 0x01
    58a2:	9a 81       	ldd	r25, Y+2	; 0x02
    58a4:	68 e0       	ldi	r22, 0x08	; 8
    58a6:	04 d8       	rcall	.-4088   	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
    58aa:	9a 81       	ldd	r25, Y+2	; 0x02
    58ac:	20 ef       	ldi	r18, 0xF0	; 240
    58ae:	30 e0       	ldi	r19, 0x00	; 0
    58b0:	fc 01       	movw	r30, r24
    58b2:	33 8b       	std	Z+19, r19	; 0x13
    58b4:	22 8b       	std	Z+18, r18	; 0x12
    58b6:	89 81       	ldd	r24, Y+1	; 0x01
    58b8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ba:	20 e4       	ldi	r18, 0x40	; 64
    58bc:	31 e0       	ldi	r19, 0x01	; 1
    58be:	fc 01       	movw	r30, r24
    58c0:	35 8b       	std	Z+21, r19	; 0x15
    58c2:	24 8b       	std	Z+20, r18	; 0x14
    58c4:	14 c0       	rjmp	.+40     	; 0x58ee <_ZN11TFT_ILI934111setRotationEh+0x18e>
    58c6:	89 81       	ldd	r24, Y+1	; 0x01
    58c8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ca:	68 ea       	ldi	r22, 0xA8	; 168
    58cc:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN11TFT_ILI93419writedataEh>
    58d0:	89 81       	ldd	r24, Y+1	; 0x01
    58d2:	9a 81       	ldd	r25, Y+2	; 0x02
    58d4:	20 e4       	ldi	r18, 0x40	; 64
    58d6:	31 e0       	ldi	r19, 0x01	; 1
    58d8:	fc 01       	movw	r30, r24
    58da:	33 8b       	std	Z+19, r19	; 0x13
    58dc:	22 8b       	std	Z+18, r18	; 0x12
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	9a 81       	ldd	r25, Y+2	; 0x02
    58e2:	20 ef       	ldi	r18, 0xF0	; 240
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	fc 01       	movw	r30, r24
    58e8:	35 8b       	std	Z+21, r19	; 0x15
    58ea:	24 8b       	std	Z+20, r18	; 0x14
    58ec:	00 00       	nop
    58ee:	89 81       	ldd	r24, Y+1	; 0x01
    58f0:	9a 81       	ldd	r25, Y+2	; 0x02
    58f2:	e8 dd       	rcall	.-1072   	; 0x54c4 <_ZN11TFT_ILI93419fastSetupEv>
    58f4:	89 81       	ldd	r24, Y+1	; 0x01
    58f6:	9a 81       	ldd	r25, Y+2	; 0x02
    58f8:	2f ef       	ldi	r18, 0xFF	; 255
    58fa:	3f ef       	ldi	r19, 0xFF	; 255
    58fc:	fc 01       	movw	r30, r24
    58fe:	35 8f       	std	Z+29, r19	; 0x1d
    5900:	24 8f       	std	Z+28, r18	; 0x1c
    5902:	89 81       	ldd	r24, Y+1	; 0x01
    5904:	9a 81       	ldd	r25, Y+2	; 0x02
    5906:	2f ef       	ldi	r18, 0xFF	; 255
    5908:	3f ef       	ldi	r19, 0xFF	; 255
    590a:	fc 01       	movw	r30, r24
    590c:	37 8f       	std	Z+31, r19	; 0x1f
    590e:	26 8f       	std	Z+30, r18	; 0x1e
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	9a 81       	ldd	r25, Y+2	; 0x02
    5914:	2f ef       	ldi	r18, 0xFF	; 255
    5916:	3f ef       	ldi	r19, 0xFF	; 255
    5918:	fc 01       	movw	r30, r24
    591a:	35 87       	std	Z+13, r19	; 0x0d
    591c:	24 87       	std	Z+12, r18	; 0x0c
    591e:	89 81       	ldd	r24, Y+1	; 0x01
    5920:	9a 81       	ldd	r25, Y+2	; 0x02
    5922:	2f ef       	ldi	r18, 0xFF	; 255
    5924:	3f ef       	ldi	r19, 0xFF	; 255
    5926:	fc 01       	movw	r30, r24
    5928:	37 87       	std	Z+15, r19	; 0x0f
    592a:	26 87       	std	Z+14, r18	; 0x0e
    592c:	00 00       	nop
    592e:	0f 90       	pop	r0
    5930:	0f 90       	pop	r0
    5932:	0f 90       	pop	r0
    5934:	df 91       	pop	r29
    5936:	cf 91       	pop	r28
    5938:	08 95       	ret

0000593a <_ZN11TFT_ILI93415writeEh>:
/***************************************************************************************
** Function name:           write
** Description:             draw characters piped through serial stream
***************************************************************************************/
size_t TFT_ILI9341::write(uint8_t uniCode)
{
    593a:	0f 93       	push	r16
    593c:	1f 93       	push	r17
    593e:	cf 93       	push	r28
    5940:	df 93       	push	r29
    5942:	cd b7       	in	r28, 0x3d	; 61
    5944:	de b7       	in	r29, 0x3e	; 62
    5946:	64 97       	sbiw	r28, 0x14	; 20
    5948:	0f b6       	in	r0, 0x3f	; 63
    594a:	f8 94       	cli
    594c:	de bf       	out	0x3e, r29	; 62
    594e:	0f be       	out	0x3f, r0	; 63
    5950:	cd bf       	out	0x3d, r28	; 61
    5952:	9b 8b       	std	Y+19, r25	; 0x13
    5954:	8a 8b       	std	Y+18, r24	; 0x12
    5956:	6c 8b       	std	Y+20, r22	; 0x14
  if (uniCode == '\r') return 1;
    5958:	8c 89       	ldd	r24, Y+20	; 0x14
    595a:	8d 30       	cpi	r24, 0x0D	; 13
    595c:	19 f4       	brne	.+6      	; 0x5964 <_ZN11TFT_ILI93415writeEh+0x2a>
    595e:	81 e0       	ldi	r24, 0x01	; 1
    5960:	90 e0       	ldi	r25, 0x00	; 0
    5962:	30 c1       	rjmp	.+608    	; 0x5bc4 <_ZN11TFT_ILI93415writeEh+0x28a>
  unsigned int width = 0;
    5964:	1a 82       	std	Y+2, r1	; 0x02
    5966:	19 82       	std	Y+1, r1	; 0x01
  unsigned int height = 0;
    5968:	1c 82       	std	Y+4, r1	; 0x04
    596a:	1b 82       	std	Y+3, r1	; 0x03
  //Serial.print((char) uniCode); // Debug line sends all printed TFT text to serial port

#ifdef LOAD_FONT2
  if (textfont == 2)
    596c:	8a 89       	ldd	r24, Y+18	; 0x12
    596e:	9b 89       	ldd	r25, Y+19	; 0x13
    5970:	dc 01       	movw	r26, r24
    5972:	90 96       	adiw	r26, 0x20	; 32
    5974:	8c 91       	ld	r24, X
    5976:	82 30       	cpi	r24, 0x02	; 2
    5978:	61 f5       	brne	.+88     	; 0x59d2 <_ZN11TFT_ILI93415writeEh+0x98>
  {
      // This is 20us faster than using the fontdata structure (0.443ms per character instead of 0.465ms)
      width = pgm_read_byte(widtbl_f16 + uniCode-32);
    597a:	8c 89       	ldd	r24, Y+20	; 0x14
    597c:	88 2f       	mov	r24, r24
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	80 97       	sbiw	r24, 0x20	; 32
    5982:	8b 5c       	subi	r24, 0xCB	; 203
    5984:	99 4f       	sbci	r25, 0xF9	; 249
    5986:	9e 83       	std	Y+6, r25	; 0x06
    5988:	8d 83       	std	Y+5, r24	; 0x05
    598a:	8d 81       	ldd	r24, Y+5	; 0x05
    598c:	9e 81       	ldd	r25, Y+6	; 0x06
    598e:	fc 01       	movw	r30, r24
    5990:	84 91       	lpm	r24, Z
    5992:	8f 83       	std	Y+7, r24	; 0x07
    5994:	8f 81       	ldd	r24, Y+7	; 0x07
    5996:	88 2f       	mov	r24, r24
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	9a 83       	std	Y+2, r25	; 0x02
    599c:	89 83       	std	Y+1, r24	; 0x01
      height = chr_hgt_f16;
    599e:	80 e1       	ldi	r24, 0x10	; 16
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	9c 83       	std	Y+4, r25	; 0x04
    59a4:	8b 83       	std	Y+3, r24	; 0x03
      // Font 2 is rendered in whole byte widths so we must allow for this
      width = (width + 6) / 8;  // Width in whole bytes for font 2, should be + 7 but must allow for font width change
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
    59a8:	9a 81       	ldd	r25, Y+2	; 0x02
    59aa:	06 96       	adiw	r24, 0x06	; 6
    59ac:	96 95       	lsr	r25
    59ae:	87 95       	ror	r24
    59b0:	96 95       	lsr	r25
    59b2:	87 95       	ror	r24
    59b4:	96 95       	lsr	r25
    59b6:	87 95       	ror	r24
    59b8:	9a 83       	std	Y+2, r25	; 0x02
    59ba:	89 83       	std	Y+1, r24	; 0x01
      width = width * 8;        // Width converted back to pixles
    59bc:	89 81       	ldd	r24, Y+1	; 0x01
    59be:	9a 81       	ldd	r25, Y+2	; 0x02
    59c0:	88 0f       	add	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	88 0f       	add	r24, r24
    59c6:	99 1f       	adc	r25, r25
    59c8:	88 0f       	add	r24, r24
    59ca:	99 1f       	adc	r25, r25
    59cc:	9a 83       	std	Y+2, r25	; 0x02
    59ce:	89 83       	std	Y+1, r24	; 0x01
    59d0:	4e c0       	rjmp	.+156    	; 0x5a6e <_ZN11TFT_ILI93415writeEh+0x134>
#ifdef LOAD_RLE
  {
      // Uses the fontinfo struct array to avoid lots of 'if' or 'switch' statements
      // A tad slower than above but this is not significant and is more convenient for the RLE fonts
      // Yes, this code can be needlessly executed when textfont == 1...
      width = pgm_read_byte( pgm_read_word( &(fontdata[textfont].widthtbl ) ) + uniCode-32 );
    59d2:	8a 89       	ldd	r24, Y+18	; 0x12
    59d4:	9b 89       	ldd	r25, Y+19	; 0x13
    59d6:	dc 01       	movw	r26, r24
    59d8:	90 96       	adiw	r26, 0x20	; 32
    59da:	8c 91       	ld	r24, X
    59dc:	28 2f       	mov	r18, r24
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	c9 01       	movw	r24, r18
    59e2:	88 0f       	add	r24, r24
    59e4:	99 1f       	adc	r25, r25
    59e6:	88 0f       	add	r24, r24
    59e8:	99 1f       	adc	r25, r25
    59ea:	82 0f       	add	r24, r18
    59ec:	93 1f       	adc	r25, r19
    59ee:	02 96       	adiw	r24, 0x02	; 2
    59f0:	88 53       	subi	r24, 0x38	; 56
    59f2:	92 4d       	sbci	r25, 0xD2	; 210
    59f4:	99 87       	std	Y+9, r25	; 0x09
    59f6:	88 87       	std	Y+8, r24	; 0x08
    59f8:	88 85       	ldd	r24, Y+8	; 0x08
    59fa:	99 85       	ldd	r25, Y+9	; 0x09
    59fc:	fc 01       	movw	r30, r24
    59fe:	25 91       	lpm	r18, Z+
    5a00:	34 91       	lpm	r19, Z
    5a02:	cf 01       	movw	r24, r30
    5a04:	3b 87       	std	Y+11, r19	; 0x0b
    5a06:	2a 87       	std	Y+10, r18	; 0x0a
    5a08:	99 87       	std	Y+9, r25	; 0x09
    5a0a:	88 87       	std	Y+8, r24	; 0x08
    5a0c:	2a 85       	ldd	r18, Y+10	; 0x0a
    5a0e:	3b 85       	ldd	r19, Y+11	; 0x0b
    5a10:	8c 89       	ldd	r24, Y+20	; 0x14
    5a12:	88 2f       	mov	r24, r24
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	82 0f       	add	r24, r18
    5a18:	93 1f       	adc	r25, r19
    5a1a:	80 97       	sbiw	r24, 0x20	; 32
    5a1c:	9d 87       	std	Y+13, r25	; 0x0d
    5a1e:	8c 87       	std	Y+12, r24	; 0x0c
    5a20:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a22:	9d 85       	ldd	r25, Y+13	; 0x0d
    5a24:	fc 01       	movw	r30, r24
    5a26:	84 91       	lpm	r24, Z
    5a28:	8e 87       	std	Y+14, r24	; 0x0e
    5a2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a2c:	88 2f       	mov	r24, r24
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	9a 83       	std	Y+2, r25	; 0x02
    5a32:	89 83       	std	Y+1, r24	; 0x01
      height= pgm_read_byte( &fontdata[textfont].height );
    5a34:	8a 89       	ldd	r24, Y+18	; 0x12
    5a36:	9b 89       	ldd	r25, Y+19	; 0x13
    5a38:	dc 01       	movw	r26, r24
    5a3a:	90 96       	adiw	r26, 0x20	; 32
    5a3c:	8c 91       	ld	r24, X
    5a3e:	28 2f       	mov	r18, r24
    5a40:	30 e0       	ldi	r19, 0x00	; 0
    5a42:	c9 01       	movw	r24, r18
    5a44:	88 0f       	add	r24, r24
    5a46:	99 1f       	adc	r25, r25
    5a48:	88 0f       	add	r24, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	82 0f       	add	r24, r18
    5a4e:	93 1f       	adc	r25, r19
    5a50:	04 96       	adiw	r24, 0x04	; 4
    5a52:	88 53       	subi	r24, 0x38	; 56
    5a54:	92 4d       	sbci	r25, 0xD2	; 210
    5a56:	98 8b       	std	Y+16, r25	; 0x10
    5a58:	8f 87       	std	Y+15, r24	; 0x0f
    5a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a5c:	98 89       	ldd	r25, Y+16	; 0x10
    5a5e:	fc 01       	movw	r30, r24
    5a60:	84 91       	lpm	r24, Z
    5a62:	89 8b       	std	Y+17, r24	; 0x11
    5a64:	89 89       	ldd	r24, Y+17	; 0x11
    5a66:	88 2f       	mov	r24, r24
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	9c 83       	std	Y+4, r25	; 0x04
    5a6c:	8b 83       	std	Y+3, r24	; 0x03
  }
#endif

#ifdef LOAD_GLCD
  if (textfont==1)
    5a6e:	8a 89       	ldd	r24, Y+18	; 0x12
    5a70:	9b 89       	ldd	r25, Y+19	; 0x13
    5a72:	dc 01       	movw	r26, r24
    5a74:	90 96       	adiw	r26, 0x20	; 32
    5a76:	8c 91       	ld	r24, X
    5a78:	81 30       	cpi	r24, 0x01	; 1
    5a7a:	41 f4       	brne	.+16     	; 0x5a8c <_ZN11TFT_ILI93415writeEh+0x152>
  {
      width =  6;
    5a7c:	86 e0       	ldi	r24, 0x06	; 6
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	9a 83       	std	Y+2, r25	; 0x02
    5a82:	89 83       	std	Y+1, r24	; 0x01
      height = 8;
    5a84:	88 e0       	ldi	r24, 0x08	; 8
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	9c 83       	std	Y+4, r25	; 0x04
    5a8a:	8b 83       	std	Y+3, r24	; 0x03
  }
#else
  if (textfont==1) return 0;
#endif

  height = height * textsize;
    5a8c:	8a 89       	ldd	r24, Y+18	; 0x12
    5a8e:	9b 89       	ldd	r25, Y+19	; 0x13
    5a90:	fc 01       	movw	r30, r24
    5a92:	81 a1       	ldd	r24, Z+33	; 0x21
    5a94:	28 2f       	mov	r18, r24
    5a96:	30 e0       	ldi	r19, 0x00	; 0
    5a98:	4b 81       	ldd	r20, Y+3	; 0x03
    5a9a:	5c 81       	ldd	r21, Y+4	; 0x04
    5a9c:	42 9f       	mul	r20, r18
    5a9e:	c0 01       	movw	r24, r0
    5aa0:	43 9f       	mul	r20, r19
    5aa2:	90 0d       	add	r25, r0
    5aa4:	52 9f       	mul	r21, r18
    5aa6:	90 0d       	add	r25, r0
    5aa8:	11 24       	eor	r1, r1
    5aaa:	9c 83       	std	Y+4, r25	; 0x04
    5aac:	8b 83       	std	Y+3, r24	; 0x03

  if (uniCode == '\n') {
    5aae:	8c 89       	ldd	r24, Y+20	; 0x14
    5ab0:	8a 30       	cpi	r24, 0x0A	; 10
    5ab2:	d1 f4       	brne	.+52     	; 0x5ae8 <_ZN11TFT_ILI93415writeEh+0x1ae>
    cursor_y += height;
    5ab4:	8a 89       	ldd	r24, Y+18	; 0x12
    5ab6:	9b 89       	ldd	r25, Y+19	; 0x13
    5ab8:	dc 01       	movw	r26, r24
    5aba:	1a 96       	adiw	r26, 0x0a	; 10
    5abc:	8d 91       	ld	r24, X+
    5abe:	9c 91       	ld	r25, X
    5ac0:	1b 97       	sbiw	r26, 0x0b	; 11
    5ac2:	9c 01       	movw	r18, r24
    5ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ac8:	82 0f       	add	r24, r18
    5aca:	93 1f       	adc	r25, r19
    5acc:	9c 01       	movw	r18, r24
    5ace:	8a 89       	ldd	r24, Y+18	; 0x12
    5ad0:	9b 89       	ldd	r25, Y+19	; 0x13
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	33 87       	std	Z+11, r19	; 0x0b
    5ad6:	22 87       	std	Z+10, r18	; 0x0a
    cursor_x  = 0;
    5ad8:	8a 89       	ldd	r24, Y+18	; 0x12
    5ada:	9b 89       	ldd	r25, Y+19	; 0x13
    5adc:	dc 01       	movw	r26, r24
    5ade:	19 96       	adiw	r26, 0x09	; 9
    5ae0:	1c 92       	st	X, r1
    5ae2:	1e 92       	st	-X, r1
    5ae4:	18 97       	sbiw	r26, 0x08	; 8
    5ae6:	6c c0       	rjmp	.+216    	; 0x5bc0 <_ZN11TFT_ILI93415writeEh+0x286>
  }
  else
  {
    if (textwrap && (cursor_x + width * textsize >= _width))
    5ae8:	8a 89       	ldd	r24, Y+18	; 0x12
    5aea:	9b 89       	ldd	r25, Y+19	; 0x13
    5aec:	fc 01       	movw	r30, r24
    5aee:	84 a1       	ldd	r24, Z+36	; 0x24
    5af0:	88 23       	and	r24, r24
    5af2:	d9 f1       	breq	.+118    	; 0x5b6a <_ZN11TFT_ILI93415writeEh+0x230>
    5af4:	8a 89       	ldd	r24, Y+18	; 0x12
    5af6:	9b 89       	ldd	r25, Y+19	; 0x13
    5af8:	dc 01       	movw	r26, r24
    5afa:	18 96       	adiw	r26, 0x08	; 8
    5afc:	8d 91       	ld	r24, X+
    5afe:	9c 91       	ld	r25, X
    5b00:	19 97       	sbiw	r26, 0x09	; 9
    5b02:	bc 01       	movw	r22, r24
    5b04:	8a 89       	ldd	r24, Y+18	; 0x12
    5b06:	9b 89       	ldd	r25, Y+19	; 0x13
    5b08:	fc 01       	movw	r30, r24
    5b0a:	81 a1       	ldd	r24, Z+33	; 0x21
    5b0c:	48 2f       	mov	r20, r24
    5b0e:	50 e0       	ldi	r21, 0x00	; 0
    5b10:	29 81       	ldd	r18, Y+1	; 0x01
    5b12:	3a 81       	ldd	r19, Y+2	; 0x02
    5b14:	42 9f       	mul	r20, r18
    5b16:	c0 01       	movw	r24, r0
    5b18:	43 9f       	mul	r20, r19
    5b1a:	90 0d       	add	r25, r0
    5b1c:	52 9f       	mul	r21, r18
    5b1e:	90 0d       	add	r25, r0
    5b20:	11 24       	eor	r1, r1
    5b22:	9b 01       	movw	r18, r22
    5b24:	28 0f       	add	r18, r24
    5b26:	39 1f       	adc	r19, r25
    5b28:	8a 89       	ldd	r24, Y+18	; 0x12
    5b2a:	9b 89       	ldd	r25, Y+19	; 0x13
    5b2c:	dc 01       	movw	r26, r24
    5b2e:	52 96       	adiw	r26, 0x12	; 18
    5b30:	8d 91       	ld	r24, X+
    5b32:	9c 91       	ld	r25, X
    5b34:	53 97       	sbiw	r26, 0x13	; 19
    5b36:	28 17       	cp	r18, r24
    5b38:	39 07       	cpc	r19, r25
    5b3a:	b8 f0       	brcs	.+46     	; 0x5b6a <_ZN11TFT_ILI93415writeEh+0x230>
    {
      cursor_y += height;
    5b3c:	8a 89       	ldd	r24, Y+18	; 0x12
    5b3e:	9b 89       	ldd	r25, Y+19	; 0x13
    5b40:	fc 01       	movw	r30, r24
    5b42:	82 85       	ldd	r24, Z+10	; 0x0a
    5b44:	93 85       	ldd	r25, Z+11	; 0x0b
    5b46:	9c 01       	movw	r18, r24
    5b48:	8b 81       	ldd	r24, Y+3	; 0x03
    5b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b4c:	82 0f       	add	r24, r18
    5b4e:	93 1f       	adc	r25, r19
    5b50:	9c 01       	movw	r18, r24
    5b52:	8a 89       	ldd	r24, Y+18	; 0x12
    5b54:	9b 89       	ldd	r25, Y+19	; 0x13
    5b56:	dc 01       	movw	r26, r24
    5b58:	1b 96       	adiw	r26, 0x0b	; 11
    5b5a:	3c 93       	st	X, r19
    5b5c:	2e 93       	st	-X, r18
    5b5e:	1a 97       	sbiw	r26, 0x0a	; 10
      cursor_x = 0;
    5b60:	8a 89       	ldd	r24, Y+18	; 0x12
    5b62:	9b 89       	ldd	r25, Y+19	; 0x13
    5b64:	fc 01       	movw	r30, r24
    5b66:	11 86       	std	Z+9, r1	; 0x09
    5b68:	10 86       	std	Z+8, r1	; 0x08
    }
    cursor_x += drawChar(uniCode, cursor_x, cursor_y, textfont);
    5b6a:	8a 89       	ldd	r24, Y+18	; 0x12
    5b6c:	9b 89       	ldd	r25, Y+19	; 0x13
    5b6e:	dc 01       	movw	r26, r24
    5b70:	90 96       	adiw	r26, 0x20	; 32
    5b72:	8c 91       	ld	r24, X
    5b74:	e8 2f       	mov	r30, r24
    5b76:	f0 e0       	ldi	r31, 0x00	; 0
    5b78:	8a 89       	ldd	r24, Y+18	; 0x12
    5b7a:	9b 89       	ldd	r25, Y+19	; 0x13
    5b7c:	dc 01       	movw	r26, r24
    5b7e:	1a 96       	adiw	r26, 0x0a	; 10
    5b80:	2d 91       	ld	r18, X+
    5b82:	3c 91       	ld	r19, X
    5b84:	1b 97       	sbiw	r26, 0x0b	; 11
    5b86:	8a 89       	ldd	r24, Y+18	; 0x12
    5b88:	9b 89       	ldd	r25, Y+19	; 0x13
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	18 96       	adiw	r26, 0x08	; 8
    5b8e:	4d 91       	ld	r20, X+
    5b90:	5c 91       	ld	r21, X
    5b92:	19 97       	sbiw	r26, 0x09	; 9
    5b94:	8c 89       	ldd	r24, Y+20	; 0x14
    5b96:	68 2f       	mov	r22, r24
    5b98:	70 e0       	ldi	r23, 0x00	; 0
    5b9a:	8a 89       	ldd	r24, Y+18	; 0x12
    5b9c:	9b 89       	ldd	r25, Y+19	; 0x13
    5b9e:	8f 01       	movw	r16, r30
    5ba0:	1c d0       	rcall	.+56     	; 0x5bda <_ZN11TFT_ILI93418drawCharEjiii>
    5ba2:	9c 01       	movw	r18, r24
    5ba4:	8a 89       	ldd	r24, Y+18	; 0x12
    5ba6:	9b 89       	ldd	r25, Y+19	; 0x13
    5ba8:	fc 01       	movw	r30, r24
    5baa:	80 85       	ldd	r24, Z+8	; 0x08
    5bac:	91 85       	ldd	r25, Z+9	; 0x09
    5bae:	28 0f       	add	r18, r24
    5bb0:	39 1f       	adc	r19, r25
    5bb2:	8a 89       	ldd	r24, Y+18	; 0x12
    5bb4:	9b 89       	ldd	r25, Y+19	; 0x13
    5bb6:	dc 01       	movw	r26, r24
    5bb8:	19 96       	adiw	r26, 0x09	; 9
    5bba:	3c 93       	st	X, r19
    5bbc:	2e 93       	st	-X, r18
    5bbe:	18 97       	sbiw	r26, 0x08	; 8
  }
  return 1;
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
}
    5bc4:	64 96       	adiw	r28, 0x14	; 20
    5bc6:	0f b6       	in	r0, 0x3f	; 63
    5bc8:	f8 94       	cli
    5bca:	de bf       	out	0x3e, r29	; 62
    5bcc:	0f be       	out	0x3f, r0	; 63
    5bce:	cd bf       	out	0x3d, r28	; 61
    5bd0:	df 91       	pop	r29
    5bd2:	cf 91       	pop	r28
    5bd4:	1f 91       	pop	r17
    5bd6:	0f 91       	pop	r16
    5bd8:	08 95       	ret

00005bda <_ZN11TFT_ILI93418drawCharEjiii>:
/***************************************************************************************
** Function name:           drawChar
** Description:             draw a unicode onto the screen
***************************************************************************************/
int TFT_ILI9341::drawChar(unsigned int uniCode, int x, int y, int font)
{
    5bda:	cf 92       	push	r12
    5bdc:	ef 92       	push	r14
    5bde:	ff 92       	push	r15
    5be0:	0f 93       	push	r16
    5be2:	1f 93       	push	r17
    5be4:	cf 93       	push	r28
    5be6:	df 93       	push	r29
    5be8:	cd b7       	in	r28, 0x3d	; 61
    5bea:	de b7       	in	r29, 0x3e	; 62
    5bec:	ce 55       	subi	r28, 0x5E	; 94
    5bee:	d1 09       	sbc	r29, r1
    5bf0:	0f b6       	in	r0, 0x3f	; 63
    5bf2:	f8 94       	cli
    5bf4:	de bf       	out	0x3e, r29	; 62
    5bf6:	0f be       	out	0x3f, r0	; 63
    5bf8:	cd bf       	out	0x3d, r28	; 61
    5bfa:	fe 01       	movw	r30, r28
    5bfc:	ed 5a       	subi	r30, 0xAD	; 173
    5bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5c00:	91 83       	std	Z+1, r25	; 0x01
    5c02:	80 83       	st	Z, r24
    5c04:	ce 01       	movw	r24, r28
    5c06:	8b 5a       	subi	r24, 0xAB	; 171
    5c08:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0a:	dc 01       	movw	r26, r24
    5c0c:	6d 93       	st	X+, r22
    5c0e:	7c 93       	st	X, r23
    5c10:	ce 01       	movw	r24, r28
    5c12:	89 5a       	subi	r24, 0xA9	; 169
    5c14:	9f 4f       	sbci	r25, 0xFF	; 255
    5c16:	fc 01       	movw	r30, r24
    5c18:	51 83       	std	Z+1, r21	; 0x01
    5c1a:	40 83       	st	Z, r20
    5c1c:	ce 01       	movw	r24, r28
    5c1e:	87 5a       	subi	r24, 0xA7	; 167
    5c20:	9f 4f       	sbci	r25, 0xFF	; 255
    5c22:	dc 01       	movw	r26, r24
    5c24:	2d 93       	st	X+, r18
    5c26:	3c 93       	st	X, r19
    5c28:	ce 01       	movw	r24, r28
    5c2a:	85 5a       	subi	r24, 0xA5	; 165
    5c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2e:	fc 01       	movw	r30, r24
    5c30:	11 83       	std	Z+1, r17	; 0x01
    5c32:	00 83       	st	Z, r16

  if (font==1)
    5c34:	ce 01       	movw	r24, r28
    5c36:	85 5a       	subi	r24, 0xA5	; 165
    5c38:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	8d 91       	ld	r24, X+
    5c3e:	9c 91       	ld	r25, X
    5c40:	01 97       	sbiw	r24, 0x01	; 1
    5c42:	09 f0       	breq	.+2      	; 0x5c46 <_ZN11TFT_ILI93418drawCharEjiii+0x6c>
    5c44:	52 c0       	rjmp	.+164    	; 0x5cea <_ZN11TFT_ILI93418drawCharEjiii+0x110>
  {
#ifdef LOAD_GLCD
      drawChar(x, y, uniCode, textcolor, textbgcolor, textsize);
    5c46:	ce 01       	movw	r24, r28
    5c48:	8d 5a       	subi	r24, 0xAD	; 173
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	fc 01       	movw	r30, r24
    5c4e:	80 81       	ld	r24, Z
    5c50:	91 81       	ldd	r25, Z+1	; 0x01
    5c52:	fc 01       	movw	r30, r24
    5c54:	b1 a1       	ldd	r27, Z+33	; 0x21
    5c56:	ce 01       	movw	r24, r28
    5c58:	8d 5a       	subi	r24, 0xAD	; 173
    5c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	80 81       	ld	r24, Z
    5c60:	91 81       	ldd	r25, Z+1	; 0x01
    5c62:	fc 01       	movw	r30, r24
    5c64:	00 8c       	ldd	r0, Z+24	; 0x18
    5c66:	f1 8d       	ldd	r31, Z+25	; 0x19
    5c68:	e0 2d       	mov	r30, r0
    5c6a:	6f 96       	adiw	r28, 0x1f	; 31
    5c6c:	ff af       	std	Y+63, r31	; 0x3f
    5c6e:	ee af       	std	Y+62, r30	; 0x3e
    5c70:	6f 97       	sbiw	r28, 0x1f	; 31
    5c72:	ce 01       	movw	r24, r28
    5c74:	8d 5a       	subi	r24, 0xAD	; 173
    5c76:	9f 4f       	sbci	r25, 0xFF	; 255
    5c78:	fc 01       	movw	r30, r24
    5c7a:	80 81       	ld	r24, Z
    5c7c:	91 81       	ldd	r25, Z+1	; 0x01
    5c7e:	fc 01       	movw	r30, r24
    5c80:	26 89       	ldd	r18, Z+22	; 0x16
    5c82:	37 89       	ldd	r19, Z+23	; 0x17
    5c84:	ce 01       	movw	r24, r28
    5c86:	8b 5a       	subi	r24, 0xAB	; 171
    5c88:	9f 4f       	sbci	r25, 0xFF	; 255
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	a0 81       	ld	r26, Z
    5c8e:	ce 01       	movw	r24, r28
    5c90:	87 5a       	subi	r24, 0xA7	; 167
    5c92:	9f 4f       	sbci	r25, 0xFF	; 255
    5c94:	fc 01       	movw	r30, r24
    5c96:	40 81       	ld	r20, Z
    5c98:	51 81       	ldd	r21, Z+1	; 0x01
    5c9a:	ce 01       	movw	r24, r28
    5c9c:	89 5a       	subi	r24, 0xA9	; 169
    5c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	60 81       	ld	r22, Z
    5ca4:	71 81       	ldd	r23, Z+1	; 0x01
    5ca6:	ce 01       	movw	r24, r28
    5ca8:	8d 5a       	subi	r24, 0xAD	; 173
    5caa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cac:	fc 01       	movw	r30, r24
    5cae:	80 81       	ld	r24, Z
    5cb0:	91 81       	ldd	r25, Z+1	; 0x01
    5cb2:	cb 2e       	mov	r12, r27
    5cb4:	6f 96       	adiw	r28, 0x1f	; 31
    5cb6:	ee ac       	ldd	r14, Y+62	; 0x3e
    5cb8:	ff ac       	ldd	r15, Y+63	; 0x3f
    5cba:	6f 97       	sbiw	r28, 0x1f	; 31
    5cbc:	89 01       	movw	r16, r18
    5cbe:	2a 2f       	mov	r18, r26
    5cc0:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <_ZN11TFT_ILI93418drawCharEiihjjh>
      return 6 * textsize;
    5cc4:	ce 01       	movw	r24, r28
    5cc6:	8d 5a       	subi	r24, 0xAD	; 173
    5cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cca:	dc 01       	movw	r26, r24
    5ccc:	8d 91       	ld	r24, X+
    5cce:	9c 91       	ld	r25, X
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	81 a1       	ldd	r24, Z+33	; 0x21
    5cd4:	28 2f       	mov	r18, r24
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	c9 01       	movw	r24, r18
    5cda:	88 0f       	add	r24, r24
    5cdc:	99 1f       	adc	r25, r25
    5cde:	82 0f       	add	r24, r18
    5ce0:	93 1f       	adc	r25, r19
    5ce2:	88 0f       	add	r24, r24
    5ce4:	99 1f       	adc	r25, r25
    5ce6:	0c 94 e6 38 	jmp	0x71cc	; 0x71cc <_ZN11TFT_ILI93418drawCharEjiii+0x15f2>
#else
      return 0;
#endif
  }

  int width  = 0;
    5cea:	1a 82       	std	Y+2, r1	; 0x02
    5cec:	19 82       	std	Y+1, r1	; 0x01
  int height = 0;
    5cee:	1c 82       	std	Y+4, r1	; 0x04
    5cf0:	1b 82       	std	Y+3, r1	; 0x03
  unsigned int flash_address = 0; // 16 bit address OK for Arduino if font files <60K
    5cf2:	1e 82       	std	Y+6, r1	; 0x06
    5cf4:	1d 82       	std	Y+5, r1	; 0x05
  uniCode -= 32;
    5cf6:	ce 01       	movw	r24, r28
    5cf8:	8b 5a       	subi	r24, 0xAB	; 171
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	9e 01       	movw	r18, r28
    5cfe:	2b 5a       	subi	r18, 0xAB	; 171
    5d00:	3f 4f       	sbci	r19, 0xFF	; 255
    5d02:	d9 01       	movw	r26, r18
    5d04:	2d 91       	ld	r18, X+
    5d06:	3c 91       	ld	r19, X
    5d08:	20 52       	subi	r18, 0x20	; 32
    5d0a:	31 09       	sbc	r19, r1
    5d0c:	fc 01       	movw	r30, r24
    5d0e:	31 83       	std	Z+1, r19	; 0x01
    5d10:	20 83       	st	Z, r18

#ifdef LOAD_FONT2
  if (font == 2)
    5d12:	ce 01       	movw	r24, r28
    5d14:	85 5a       	subi	r24, 0xA5	; 165
    5d16:	9f 4f       	sbci	r25, 0xFF	; 255
    5d18:	dc 01       	movw	r26, r24
    5d1a:	8d 91       	ld	r24, X+
    5d1c:	9c 91       	ld	r25, X
    5d1e:	02 97       	sbiw	r24, 0x02	; 2
    5d20:	99 f5       	brne	.+102    	; 0x5d88 <_ZN11TFT_ILI93418drawCharEjiii+0x1ae>
  {
      // This is 20us faster than using the fontdata structure (0.413ms per character instead of 0.433ms)
      flash_address = pgm_read_word(&chrtbl_f16[uniCode]);
    5d22:	ce 01       	movw	r24, r28
    5d24:	8b 5a       	subi	r24, 0xAB	; 171
    5d26:	9f 4f       	sbci	r25, 0xFF	; 255
    5d28:	fc 01       	movw	r30, r24
    5d2a:	80 81       	ld	r24, Z
    5d2c:	91 81       	ldd	r25, Z+1	; 0x01
    5d2e:	88 0f       	add	r24, r24
    5d30:	99 1f       	adc	r25, r25
    5d32:	8b 52       	subi	r24, 0x2B	; 43
    5d34:	93 4f       	sbci	r25, 0xF3	; 243
    5d36:	9d 8f       	std	Y+29, r25	; 0x1d
    5d38:	8c 8f       	std	Y+28, r24	; 0x1c
    5d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5d3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5d3e:	fc 01       	movw	r30, r24
    5d40:	25 91       	lpm	r18, Z+
    5d42:	34 91       	lpm	r19, Z
    5d44:	cf 01       	movw	r24, r30
    5d46:	3f 8f       	std	Y+31, r19	; 0x1f
    5d48:	2e 8f       	std	Y+30, r18	; 0x1e
    5d4a:	9d 8f       	std	Y+29, r25	; 0x1d
    5d4c:	8c 8f       	std	Y+28, r24	; 0x1c
    5d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d52:	9e 83       	std	Y+6, r25	; 0x06
    5d54:	8d 83       	std	Y+5, r24	; 0x05
      width = pgm_read_byte(widtbl_f16 + uniCode);
    5d56:	ce 01       	movw	r24, r28
    5d58:	8b 5a       	subi	r24, 0xAB	; 171
    5d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5c:	dc 01       	movw	r26, r24
    5d5e:	8d 91       	ld	r24, X+
    5d60:	9c 91       	ld	r25, X
    5d62:	8b 5c       	subi	r24, 0xCB	; 203
    5d64:	99 4f       	sbci	r25, 0xF9	; 249
    5d66:	99 a3       	std	Y+33, r25	; 0x21
    5d68:	88 a3       	std	Y+32, r24	; 0x20
    5d6a:	88 a1       	ldd	r24, Y+32	; 0x20
    5d6c:	99 a1       	ldd	r25, Y+33	; 0x21
    5d6e:	fc 01       	movw	r30, r24
    5d70:	84 91       	lpm	r24, Z
    5d72:	8a a3       	std	Y+34, r24	; 0x22
    5d74:	8a a1       	ldd	r24, Y+34	; 0x22
    5d76:	88 2f       	mov	r24, r24
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	9a 83       	std	Y+2, r25	; 0x02
    5d7c:	89 83       	std	Y+1, r24	; 0x01
      height = chr_hgt_f16;
    5d7e:	80 e1       	ldi	r24, 0x10	; 16
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	9c 83       	std	Y+4, r25	; 0x04
    5d84:	8b 83       	std	Y+3, r24	; 0x03
    5d86:	85 c0       	rjmp	.+266    	; 0x5e92 <_ZN11TFT_ILI93418drawCharEjiii+0x2b8>
#endif

#ifdef LOAD_RLE
  {
      // This is slower than above but is more convenient for the RLE fonts
      flash_address = pgm_read_word( pgm_read_word( &(fontdata[font].chartbl ) ) + uniCode*sizeof(void *) );
    5d88:	ce 01       	movw	r24, r28
    5d8a:	85 5a       	subi	r24, 0xA5	; 165
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	dc 01       	movw	r26, r24
    5d90:	2d 91       	ld	r18, X+
    5d92:	3c 91       	ld	r19, X
    5d94:	c9 01       	movw	r24, r18
    5d96:	88 0f       	add	r24, r24
    5d98:	99 1f       	adc	r25, r25
    5d9a:	88 0f       	add	r24, r24
    5d9c:	99 1f       	adc	r25, r25
    5d9e:	82 0f       	add	r24, r18
    5da0:	93 1f       	adc	r25, r19
    5da2:	88 53       	subi	r24, 0x38	; 56
    5da4:	92 4d       	sbci	r25, 0xD2	; 210
    5da6:	9c a3       	std	Y+36, r25	; 0x24
    5da8:	8b a3       	std	Y+35, r24	; 0x23
    5daa:	8b a1       	ldd	r24, Y+35	; 0x23
    5dac:	9c a1       	ldd	r25, Y+36	; 0x24
    5dae:	fc 01       	movw	r30, r24
    5db0:	25 91       	lpm	r18, Z+
    5db2:	34 91       	lpm	r19, Z
    5db4:	cf 01       	movw	r24, r30
    5db6:	3e a3       	std	Y+38, r19	; 0x26
    5db8:	2d a3       	std	Y+37, r18	; 0x25
    5dba:	9c a3       	std	Y+36, r25	; 0x24
    5dbc:	8b a3       	std	Y+35, r24	; 0x23
    5dbe:	2d a1       	ldd	r18, Y+37	; 0x25
    5dc0:	3e a1       	ldd	r19, Y+38	; 0x26
    5dc2:	ce 01       	movw	r24, r28
    5dc4:	8b 5a       	subi	r24, 0xAB	; 171
    5dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc8:	dc 01       	movw	r26, r24
    5dca:	8d 91       	ld	r24, X+
    5dcc:	9c 91       	ld	r25, X
    5dce:	88 0f       	add	r24, r24
    5dd0:	99 1f       	adc	r25, r25
    5dd2:	82 0f       	add	r24, r18
    5dd4:	93 1f       	adc	r25, r19
    5dd6:	98 a7       	std	Y+40, r25	; 0x28
    5dd8:	8f a3       	std	Y+39, r24	; 0x27
    5dda:	8f a1       	ldd	r24, Y+39	; 0x27
    5ddc:	98 a5       	ldd	r25, Y+40	; 0x28
    5dde:	fc 01       	movw	r30, r24
    5de0:	25 91       	lpm	r18, Z+
    5de2:	34 91       	lpm	r19, Z
    5de4:	cf 01       	movw	r24, r30
    5de6:	3a a7       	std	Y+42, r19	; 0x2a
    5de8:	29 a7       	std	Y+41, r18	; 0x29
    5dea:	98 a7       	std	Y+40, r25	; 0x28
    5dec:	8f a3       	std	Y+39, r24	; 0x27
    5dee:	89 a5       	ldd	r24, Y+41	; 0x29
    5df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5df2:	9e 83       	std	Y+6, r25	; 0x06
    5df4:	8d 83       	std	Y+5, r24	; 0x05
      width = pgm_read_byte( pgm_read_word( &(fontdata[font].widthtbl ) ) + uniCode );
    5df6:	ce 01       	movw	r24, r28
    5df8:	85 5a       	subi	r24, 0xA5	; 165
    5dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfc:	dc 01       	movw	r26, r24
    5dfe:	2d 91       	ld	r18, X+
    5e00:	3c 91       	ld	r19, X
    5e02:	c9 01       	movw	r24, r18
    5e04:	88 0f       	add	r24, r24
    5e06:	99 1f       	adc	r25, r25
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	82 0f       	add	r24, r18
    5e0e:	93 1f       	adc	r25, r19
    5e10:	02 96       	adiw	r24, 0x02	; 2
    5e12:	88 53       	subi	r24, 0x38	; 56
    5e14:	92 4d       	sbci	r25, 0xD2	; 210
    5e16:	9c a7       	std	Y+44, r25	; 0x2c
    5e18:	8b a7       	std	Y+43, r24	; 0x2b
    5e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5e1e:	fc 01       	movw	r30, r24
    5e20:	25 91       	lpm	r18, Z+
    5e22:	34 91       	lpm	r19, Z
    5e24:	cf 01       	movw	r24, r30
    5e26:	3e a7       	std	Y+46, r19	; 0x2e
    5e28:	2d a7       	std	Y+45, r18	; 0x2d
    5e2a:	9c a7       	std	Y+44, r25	; 0x2c
    5e2c:	8b a7       	std	Y+43, r24	; 0x2b
    5e2e:	2d a5       	ldd	r18, Y+45	; 0x2d
    5e30:	3e a5       	ldd	r19, Y+46	; 0x2e
    5e32:	ce 01       	movw	r24, r28
    5e34:	8b 5a       	subi	r24, 0xAB	; 171
    5e36:	9f 4f       	sbci	r25, 0xFF	; 255
    5e38:	dc 01       	movw	r26, r24
    5e3a:	8d 91       	ld	r24, X+
    5e3c:	9c 91       	ld	r25, X
    5e3e:	82 0f       	add	r24, r18
    5e40:	93 1f       	adc	r25, r19
    5e42:	98 ab       	std	Y+48, r25	; 0x30
    5e44:	8f a7       	std	Y+47, r24	; 0x2f
    5e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e48:	98 a9       	ldd	r25, Y+48	; 0x30
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	84 91       	lpm	r24, Z
    5e4e:	89 ab       	std	Y+49, r24	; 0x31
    5e50:	89 a9       	ldd	r24, Y+49	; 0x31
    5e52:	88 2f       	mov	r24, r24
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	9a 83       	std	Y+2, r25	; 0x02
    5e58:	89 83       	std	Y+1, r24	; 0x01
      height= pgm_read_byte( &fontdata[font].height );
    5e5a:	ce 01       	movw	r24, r28
    5e5c:	85 5a       	subi	r24, 0xA5	; 165
    5e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e60:	dc 01       	movw	r26, r24
    5e62:	2d 91       	ld	r18, X+
    5e64:	3c 91       	ld	r19, X
    5e66:	c9 01       	movw	r24, r18
    5e68:	88 0f       	add	r24, r24
    5e6a:	99 1f       	adc	r25, r25
    5e6c:	88 0f       	add	r24, r24
    5e6e:	99 1f       	adc	r25, r25
    5e70:	82 0f       	add	r24, r18
    5e72:	93 1f       	adc	r25, r19
    5e74:	04 96       	adiw	r24, 0x04	; 4
    5e76:	88 53       	subi	r24, 0x38	; 56
    5e78:	92 4d       	sbci	r25, 0xD2	; 210
    5e7a:	9b ab       	std	Y+51, r25	; 0x33
    5e7c:	8a ab       	std	Y+50, r24	; 0x32
    5e7e:	8a a9       	ldd	r24, Y+50	; 0x32
    5e80:	9b a9       	ldd	r25, Y+51	; 0x33
    5e82:	fc 01       	movw	r30, r24
    5e84:	84 91       	lpm	r24, Z
    5e86:	8c ab       	std	Y+52, r24	; 0x34
    5e88:	8c a9       	ldd	r24, Y+52	; 0x34
    5e8a:	88 2f       	mov	r24, r24
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	9c 83       	std	Y+4, r25	; 0x04
    5e90:	8b 83       	std	Y+3, r24	; 0x03
  }
#endif

  int w = width;
    5e92:	89 81       	ldd	r24, Y+1	; 0x01
    5e94:	9a 81       	ldd	r25, Y+2	; 0x02
    5e96:	98 87       	std	Y+8, r25	; 0x08
    5e98:	8f 83       	std	Y+7, r24	; 0x07
  int pX      = 0;
    5e9a:	1e aa       	std	Y+54, r1	; 0x36
    5e9c:	1d aa       	std	Y+53, r1	; 0x35
  int pY      = y;
    5e9e:	ce 01       	movw	r24, r28
    5ea0:	87 5a       	subi	r24, 0xA7	; 167
    5ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ea4:	dc 01       	movw	r26, r24
    5ea6:	8d 91       	ld	r24, X+
    5ea8:	9c 91       	ld	r25, X
    5eaa:	9a 87       	std	Y+10, r25	; 0x0a
    5eac:	89 87       	std	Y+9, r24	; 0x09
  byte line = 0;
    5eae:	1b 86       	std	Y+11, r1	; 0x0b

  byte tl = textcolor;
    5eb0:	ce 01       	movw	r24, r28
    5eb2:	8d 5a       	subi	r24, 0xAD	; 173
    5eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	80 81       	ld	r24, Z
    5eba:	91 81       	ldd	r25, Z+1	; 0x01
    5ebc:	dc 01       	movw	r26, r24
    5ebe:	56 96       	adiw	r26, 0x16	; 22
    5ec0:	8d 91       	ld	r24, X+
    5ec2:	9c 91       	ld	r25, X
    5ec4:	57 97       	sbiw	r26, 0x17	; 23
    5ec6:	8f ab       	std	Y+55, r24	; 0x37
  byte th = textcolor >> 8;
    5ec8:	ce 01       	movw	r24, r28
    5eca:	8d 5a       	subi	r24, 0xAD	; 173
    5ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ece:	fc 01       	movw	r30, r24
    5ed0:	80 81       	ld	r24, Z
    5ed2:	91 81       	ldd	r25, Z+1	; 0x01
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	56 96       	adiw	r26, 0x16	; 22
    5ed8:	8d 91       	ld	r24, X+
    5eda:	9c 91       	ld	r25, X
    5edc:	57 97       	sbiw	r26, 0x17	; 23
    5ede:	89 2f       	mov	r24, r25
    5ee0:	99 27       	eor	r25, r25
    5ee2:	88 af       	std	Y+56, r24	; 0x38
  byte bl = textbgcolor;
    5ee4:	ce 01       	movw	r24, r28
    5ee6:	8d 5a       	subi	r24, 0xAD	; 173
    5ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eea:	fc 01       	movw	r30, r24
    5eec:	80 81       	ld	r24, Z
    5eee:	91 81       	ldd	r25, Z+1	; 0x01
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	58 96       	adiw	r26, 0x18	; 24
    5ef4:	8d 91       	ld	r24, X+
    5ef6:	9c 91       	ld	r25, X
    5ef8:	59 97       	sbiw	r26, 0x19	; 25
    5efa:	89 af       	std	Y+57, r24	; 0x39
  byte bh = textbgcolor >> 8;
    5efc:	ce 01       	movw	r24, r28
    5efe:	8d 5a       	subi	r24, 0xAD	; 173
    5f00:	9f 4f       	sbci	r25, 0xFF	; 255
    5f02:	fc 01       	movw	r30, r24
    5f04:	80 81       	ld	r24, Z
    5f06:	91 81       	ldd	r25, Z+1	; 0x01
    5f08:	dc 01       	movw	r26, r24
    5f0a:	58 96       	adiw	r26, 0x18	; 24
    5f0c:	8d 91       	ld	r24, X+
    5f0e:	9c 91       	ld	r25, X
    5f10:	59 97       	sbiw	r26, 0x19	; 25
    5f12:	89 2f       	mov	r24, r25
    5f14:	99 27       	eor	r25, r25
    5f16:	8a af       	std	Y+58, r24	; 0x3a

#ifdef LOAD_FONT2 // chop out 962 bytes of code if we do not need it
  if (font == 2) {
    5f18:	ce 01       	movw	r24, r28
    5f1a:	85 5a       	subi	r24, 0xA5	; 165
    5f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1e:	fc 01       	movw	r30, r24
    5f20:	80 81       	ld	r24, Z
    5f22:	91 81       	ldd	r25, Z+1	; 0x01
    5f24:	02 97       	sbiw	r24, 0x02	; 2
    5f26:	09 f0       	breq	.+2      	; 0x5f2a <_ZN11TFT_ILI93418drawCharEjiii+0x350>
    5f28:	ac c5       	rjmp	.+2904   	; 0x6a82 <_ZN11TFT_ILI93418drawCharEjiii+0xea8>
    w = w + 6; // Should be + 7 but we need to compensate for width increment
    5f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    5f2c:	98 85       	ldd	r25, Y+8	; 0x08
    5f2e:	06 96       	adiw	r24, 0x06	; 6
    5f30:	98 87       	std	Y+8, r25	; 0x08
    5f32:	8f 83       	std	Y+7, r24	; 0x07
    w = w / 8;
    5f34:	8f 81       	ldd	r24, Y+7	; 0x07
    5f36:	98 85       	ldd	r25, Y+8	; 0x08
    5f38:	99 23       	and	r25, r25
    5f3a:	0c f4       	brge	.+2      	; 0x5f3e <_ZN11TFT_ILI93418drawCharEjiii+0x364>
    5f3c:	07 96       	adiw	r24, 0x07	; 7
    5f3e:	95 95       	asr	r25
    5f40:	87 95       	ror	r24
    5f42:	95 95       	asr	r25
    5f44:	87 95       	ror	r24
    5f46:	95 95       	asr	r25
    5f48:	87 95       	ror	r24
    5f4a:	98 87       	std	Y+8, r25	; 0x08
    5f4c:	8f 83       	std	Y+7, r24	; 0x07
    if (x + width * textsize >= (int16_t)_width) return width * textsize ;
    5f4e:	ce 01       	movw	r24, r28
    5f50:	8d 5a       	subi	r24, 0xAD	; 173
    5f52:	9f 4f       	sbci	r25, 0xFF	; 255
    5f54:	dc 01       	movw	r26, r24
    5f56:	8d 91       	ld	r24, X+
    5f58:	9c 91       	ld	r25, X
    5f5a:	fc 01       	movw	r30, r24
    5f5c:	81 a1       	ldd	r24, Z+33	; 0x21
    5f5e:	48 2f       	mov	r20, r24
    5f60:	50 e0       	ldi	r21, 0x00	; 0
    5f62:	89 81       	ldd	r24, Y+1	; 0x01
    5f64:	9a 81       	ldd	r25, Y+2	; 0x02
    5f66:	48 9f       	mul	r20, r24
    5f68:	90 01       	movw	r18, r0
    5f6a:	49 9f       	mul	r20, r25
    5f6c:	30 0d       	add	r19, r0
    5f6e:	58 9f       	mul	r21, r24
    5f70:	30 0d       	add	r19, r0
    5f72:	11 24       	eor	r1, r1
    5f74:	ce 01       	movw	r24, r28
    5f76:	89 5a       	subi	r24, 0xA9	; 169
    5f78:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7a:	dc 01       	movw	r26, r24
    5f7c:	8d 91       	ld	r24, X+
    5f7e:	9c 91       	ld	r25, X
    5f80:	82 0f       	add	r24, r18
    5f82:	93 1f       	adc	r25, r19
    5f84:	9e 01       	movw	r18, r28
    5f86:	2d 5a       	subi	r18, 0xAD	; 173
    5f88:	3f 4f       	sbci	r19, 0xFF	; 255
    5f8a:	f9 01       	movw	r30, r18
    5f8c:	20 81       	ld	r18, Z
    5f8e:	31 81       	ldd	r19, Z+1	; 0x01
    5f90:	d9 01       	movw	r26, r18
    5f92:	52 96       	adiw	r26, 0x12	; 18
    5f94:	2d 91       	ld	r18, X+
    5f96:	3c 91       	ld	r19, X
    5f98:	53 97       	sbiw	r26, 0x13	; 19
    5f9a:	82 17       	cp	r24, r18
    5f9c:	93 07       	cpc	r25, r19
    5f9e:	b4 f0       	brlt	.+44     	; 0x5fcc <_ZN11TFT_ILI93418drawCharEjiii+0x3f2>
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	8d 5a       	subi	r24, 0xAD	; 173
    5fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fa6:	fc 01       	movw	r30, r24
    5fa8:	80 81       	ld	r24, Z
    5faa:	91 81       	ldd	r25, Z+1	; 0x01
    5fac:	dc 01       	movw	r26, r24
    5fae:	91 96       	adiw	r26, 0x21	; 33
    5fb0:	8c 91       	ld	r24, X
    5fb2:	48 2f       	mov	r20, r24
    5fb4:	50 e0       	ldi	r21, 0x00	; 0
    5fb6:	29 81       	ldd	r18, Y+1	; 0x01
    5fb8:	3a 81       	ldd	r19, Y+2	; 0x02
    5fba:	42 9f       	mul	r20, r18
    5fbc:	c0 01       	movw	r24, r0
    5fbe:	43 9f       	mul	r20, r19
    5fc0:	90 0d       	add	r25, r0
    5fc2:	52 9f       	mul	r21, r18
    5fc4:	90 0d       	add	r25, r0
    5fc6:	11 24       	eor	r1, r1
    5fc8:	0c 94 e6 38 	jmp	0x71cc	; 0x71cc <_ZN11TFT_ILI93418drawCharEjiii+0x15f2>

    if (textcolor == textbgcolor || textsize != 1) {
    5fcc:	ce 01       	movw	r24, r28
    5fce:	8d 5a       	subi	r24, 0xAD	; 173
    5fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd2:	fc 01       	movw	r30, r24
    5fd4:	80 81       	ld	r24, Z
    5fd6:	91 81       	ldd	r25, Z+1	; 0x01
    5fd8:	dc 01       	movw	r26, r24
    5fda:	56 96       	adiw	r26, 0x16	; 22
    5fdc:	2d 91       	ld	r18, X+
    5fde:	3c 91       	ld	r19, X
    5fe0:	57 97       	sbiw	r26, 0x17	; 23
    5fe2:	ce 01       	movw	r24, r28
    5fe4:	8d 5a       	subi	r24, 0xAD	; 173
    5fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe8:	fc 01       	movw	r30, r24
    5fea:	80 81       	ld	r24, Z
    5fec:	91 81       	ldd	r25, Z+1	; 0x01
    5fee:	dc 01       	movw	r26, r24
    5ff0:	58 96       	adiw	r26, 0x18	; 24
    5ff2:	8d 91       	ld	r24, X+
    5ff4:	9c 91       	ld	r25, X
    5ff6:	59 97       	sbiw	r26, 0x19	; 25
    5ff8:	28 17       	cp	r18, r24
    5ffa:	39 07       	cpc	r19, r25
    5ffc:	61 f0       	breq	.+24     	; 0x6016 <_ZN11TFT_ILI93418drawCharEjiii+0x43c>
    5ffe:	ce 01       	movw	r24, r28
    6000:	8d 5a       	subi	r24, 0xAD	; 173
    6002:	9f 4f       	sbci	r25, 0xFF	; 255
    6004:	fc 01       	movw	r30, r24
    6006:	80 81       	ld	r24, Z
    6008:	91 81       	ldd	r25, Z+1	; 0x01
    600a:	dc 01       	movw	r26, r24
    600c:	91 96       	adiw	r26, 0x21	; 33
    600e:	8c 91       	ld	r24, X
    6010:	81 30       	cpi	r24, 0x01	; 1
    6012:	09 f4       	brne	.+2      	; 0x6016 <_ZN11TFT_ILI93418drawCharEjiii+0x43c>
    6014:	38 c4       	rjmp	.+2160   	; 0x6886 <_ZN11TFT_ILI93418drawCharEjiii+0xcac>

      for (int i = 0; i < height; i++)
    6016:	1d 86       	std	Y+13, r1	; 0x0d
    6018:	1c 86       	std	Y+12, r1	; 0x0c
    601a:	2c 85       	ldd	r18, Y+12	; 0x0c
    601c:	3d 85       	ldd	r19, Y+13	; 0x0d
    601e:	8b 81       	ldd	r24, Y+3	; 0x03
    6020:	9c 81       	ldd	r25, Y+4	; 0x04
    6022:	28 17       	cp	r18, r24
    6024:	39 07       	cpc	r19, r25
    6026:	14 f0       	brlt	.+4      	; 0x602c <_ZN11TFT_ILI93418drawCharEjiii+0x452>
    6028:	0c 94 d2 38 	jmp	0x71a4	; 0x71a4 <_ZN11TFT_ILI93418drawCharEjiii+0x15ca>
      {
        if (textcolor != textbgcolor) fillRect(x, pY, width * textsize, textsize, textbgcolor);
    602c:	ce 01       	movw	r24, r28
    602e:	8d 5a       	subi	r24, 0xAD	; 173
    6030:	9f 4f       	sbci	r25, 0xFF	; 255
    6032:	fc 01       	movw	r30, r24
    6034:	80 81       	ld	r24, Z
    6036:	91 81       	ldd	r25, Z+1	; 0x01
    6038:	dc 01       	movw	r26, r24
    603a:	56 96       	adiw	r26, 0x16	; 22
    603c:	2d 91       	ld	r18, X+
    603e:	3c 91       	ld	r19, X
    6040:	57 97       	sbiw	r26, 0x17	; 23
    6042:	ce 01       	movw	r24, r28
    6044:	8d 5a       	subi	r24, 0xAD	; 173
    6046:	9f 4f       	sbci	r25, 0xFF	; 255
    6048:	fc 01       	movw	r30, r24
    604a:	80 81       	ld	r24, Z
    604c:	91 81       	ldd	r25, Z+1	; 0x01
    604e:	dc 01       	movw	r26, r24
    6050:	58 96       	adiw	r26, 0x18	; 24
    6052:	8d 91       	ld	r24, X+
    6054:	9c 91       	ld	r25, X
    6056:	59 97       	sbiw	r26, 0x19	; 25
    6058:	28 17       	cp	r18, r24
    605a:	39 07       	cpc	r19, r25
    605c:	09 f4       	brne	.+2      	; 0x6060 <_ZN11TFT_ILI93418drawCharEjiii+0x486>
    605e:	42 c0       	rjmp	.+132    	; 0x60e4 <_ZN11TFT_ILI93418drawCharEjiii+0x50a>
    6060:	ce 01       	movw	r24, r28
    6062:	8d 5a       	subi	r24, 0xAD	; 173
    6064:	9f 4f       	sbci	r25, 0xFF	; 255
    6066:	fc 01       	movw	r30, r24
    6068:	80 81       	ld	r24, Z
    606a:	91 81       	ldd	r25, Z+1	; 0x01
    606c:	dc 01       	movw	r26, r24
    606e:	58 96       	adiw	r26, 0x18	; 24
    6070:	0d 91       	ld	r16, X+
    6072:	1c 91       	ld	r17, X
    6074:	59 97       	sbiw	r26, 0x19	; 25
    6076:	ce 01       	movw	r24, r28
    6078:	8d 5a       	subi	r24, 0xAD	; 173
    607a:	9f 4f       	sbci	r25, 0xFF	; 255
    607c:	fc 01       	movw	r30, r24
    607e:	80 81       	ld	r24, Z
    6080:	91 81       	ldd	r25, Z+1	; 0x01
    6082:	dc 01       	movw	r26, r24
    6084:	91 96       	adiw	r26, 0x21	; 33
    6086:	8c 91       	ld	r24, X
    6088:	a8 2f       	mov	r26, r24
    608a:	b0 e0       	ldi	r27, 0x00	; 0
    608c:	ce 01       	movw	r24, r28
    608e:	8d 5a       	subi	r24, 0xAD	; 173
    6090:	9f 4f       	sbci	r25, 0xFF	; 255
    6092:	fc 01       	movw	r30, r24
    6094:	80 81       	ld	r24, Z
    6096:	91 81       	ldd	r25, Z+1	; 0x01
    6098:	fc 01       	movw	r30, r24
    609a:	81 a1       	ldd	r24, Z+33	; 0x21
    609c:	28 2f       	mov	r18, r24
    609e:	30 e0       	ldi	r19, 0x00	; 0
    60a0:	89 81       	ldd	r24, Y+1	; 0x01
    60a2:	9a 81       	ldd	r25, Y+2	; 0x02
    60a4:	28 9f       	mul	r18, r24
    60a6:	a0 01       	movw	r20, r0
    60a8:	29 9f       	mul	r18, r25
    60aa:	50 0d       	add	r21, r0
    60ac:	38 9f       	mul	r19, r24
    60ae:	50 0d       	add	r21, r0
    60b0:	11 24       	eor	r1, r1
    60b2:	6f 96       	adiw	r28, 0x1f	; 31
    60b4:	5f af       	std	Y+63, r21	; 0x3f
    60b6:	4e af       	std	Y+62, r20	; 0x3e
    60b8:	6f 97       	sbiw	r28, 0x1f	; 31
    60ba:	49 85       	ldd	r20, Y+9	; 0x09
    60bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    60be:	ce 01       	movw	r24, r28
    60c0:	89 5a       	subi	r24, 0xA9	; 169
    60c2:	9f 4f       	sbci	r25, 0xFF	; 255
    60c4:	fc 01       	movw	r30, r24
    60c6:	60 81       	ld	r22, Z
    60c8:	71 81       	ldd	r23, Z+1	; 0x01
    60ca:	ce 01       	movw	r24, r28
    60cc:	8d 5a       	subi	r24, 0xAD	; 173
    60ce:	9f 4f       	sbci	r25, 0xFF	; 255
    60d0:	fc 01       	movw	r30, r24
    60d2:	80 81       	ld	r24, Z
    60d4:	91 81       	ldd	r25, Z+1	; 0x01
    60d6:	78 01       	movw	r14, r16
    60d8:	8d 01       	movw	r16, r26
    60da:	6f 96       	adiw	r28, 0x1f	; 31
    60dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    60de:	3f ad       	ldd	r19, Y+63	; 0x3f
    60e0:	6f 97       	sbiw	r28, 0x1f	; 31
    60e2:	c5 da       	rcall	.-2678   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>

        for (int k = 0; k < w; k++)
    60e4:	1f 86       	std	Y+15, r1	; 0x0f
    60e6:	1e 86       	std	Y+14, r1	; 0x0e
    60e8:	2e 85       	ldd	r18, Y+14	; 0x0e
    60ea:	3f 85       	ldd	r19, Y+15	; 0x0f
    60ec:	8f 81       	ldd	r24, Y+7	; 0x07
    60ee:	98 85       	ldd	r25, Y+8	; 0x08
    60f0:	28 17       	cp	r18, r24
    60f2:	39 07       	cpc	r19, r25
    60f4:	0c f0       	brlt	.+2      	; 0x60f8 <_ZN11TFT_ILI93418drawCharEjiii+0x51e>
    60f6:	b1 c3       	rjmp	.+1890   	; 0x685a <_ZN11TFT_ILI93418drawCharEjiii+0xc80>
        {
          line = pgm_read_byte(flash_address + w * i + k);
    60f8:	2f 81       	ldd	r18, Y+7	; 0x07
    60fa:	38 85       	ldd	r19, Y+8	; 0x08
    60fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    60fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    6100:	28 9f       	mul	r18, r24
    6102:	a0 01       	movw	r20, r0
    6104:	29 9f       	mul	r18, r25
    6106:	50 0d       	add	r21, r0
    6108:	38 9f       	mul	r19, r24
    610a:	50 0d       	add	r21, r0
    610c:	11 24       	eor	r1, r1
    610e:	9a 01       	movw	r18, r20
    6110:	8d 81       	ldd	r24, Y+5	; 0x05
    6112:	9e 81       	ldd	r25, Y+6	; 0x06
    6114:	28 0f       	add	r18, r24
    6116:	39 1f       	adc	r19, r25
    6118:	8e 85       	ldd	r24, Y+14	; 0x0e
    611a:	9f 85       	ldd	r25, Y+15	; 0x0f
    611c:	82 0f       	add	r24, r18
    611e:	93 1f       	adc	r25, r19
    6120:	9f af       	std	Y+63, r25	; 0x3f
    6122:	8e af       	std	Y+62, r24	; 0x3e
    6124:	8e ad       	ldd	r24, Y+62	; 0x3e
    6126:	9f ad       	ldd	r25, Y+63	; 0x3f
    6128:	fc 01       	movw	r30, r24
    612a:	24 91       	lpm	r18, Z
    612c:	ce 01       	movw	r24, r28
    612e:	80 5c       	subi	r24, 0xC0	; 192
    6130:	9f 4f       	sbci	r25, 0xFF	; 255
    6132:	dc 01       	movw	r26, r24
    6134:	2c 93       	st	X, r18
    6136:	ce 01       	movw	r24, r28
    6138:	80 5c       	subi	r24, 0xC0	; 192
    613a:	9f 4f       	sbci	r25, 0xFF	; 255
    613c:	fc 01       	movw	r30, r24
    613e:	80 81       	ld	r24, Z
    6140:	8b 87       	std	Y+11, r24	; 0x0b
          if (line) {
    6142:	8b 85       	ldd	r24, Y+11	; 0x0b
    6144:	88 23       	and	r24, r24
    6146:	09 f4       	brne	.+2      	; 0x614a <_ZN11TFT_ILI93418drawCharEjiii+0x570>
    6148:	82 c3       	rjmp	.+1796   	; 0x684e <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
            if (textsize == 1) {
    614a:	ce 01       	movw	r24, r28
    614c:	8d 5a       	subi	r24, 0xAD	; 173
    614e:	9f 4f       	sbci	r25, 0xFF	; 255
    6150:	dc 01       	movw	r26, r24
    6152:	8d 91       	ld	r24, X+
    6154:	9c 91       	ld	r25, X
    6156:	fc 01       	movw	r30, r24
    6158:	81 a1       	ldd	r24, Z+33	; 0x21
    615a:	81 30       	cpi	r24, 0x01	; 1
    615c:	09 f0       	breq	.+2      	; 0x6160 <_ZN11TFT_ILI93418drawCharEjiii+0x586>
    615e:	03 c1       	rjmp	.+518    	; 0x6366 <_ZN11TFT_ILI93418drawCharEjiii+0x78c>
              pX = x + k * 8;
    6160:	8e 85       	ldd	r24, Y+14	; 0x0e
    6162:	9f 85       	ldd	r25, Y+15	; 0x0f
    6164:	9c 01       	movw	r18, r24
    6166:	22 0f       	add	r18, r18
    6168:	33 1f       	adc	r19, r19
    616a:	22 0f       	add	r18, r18
    616c:	33 1f       	adc	r19, r19
    616e:	22 0f       	add	r18, r18
    6170:	33 1f       	adc	r19, r19
    6172:	ce 01       	movw	r24, r28
    6174:	89 5a       	subi	r24, 0xA9	; 169
    6176:	9f 4f       	sbci	r25, 0xFF	; 255
    6178:	dc 01       	movw	r26, r24
    617a:	8d 91       	ld	r24, X+
    617c:	9c 91       	ld	r25, X
    617e:	82 0f       	add	r24, r18
    6180:	93 1f       	adc	r25, r19
    6182:	9e ab       	std	Y+54, r25	; 0x36
    6184:	8d ab       	std	Y+53, r24	; 0x35
              if (line & 0x80) drawPixel(pX, pY, textcolor);
    6186:	8b 85       	ldd	r24, Y+11	; 0x0b
    6188:	88 23       	and	r24, r24
    618a:	b4 f4       	brge	.+44     	; 0x61b8 <_ZN11TFT_ILI93418drawCharEjiii+0x5de>
    618c:	ce 01       	movw	r24, r28
    618e:	8d 5a       	subi	r24, 0xAD	; 173
    6190:	9f 4f       	sbci	r25, 0xFF	; 255
    6192:	fc 01       	movw	r30, r24
    6194:	80 81       	ld	r24, Z
    6196:	91 81       	ldd	r25, Z+1	; 0x01
    6198:	dc 01       	movw	r26, r24
    619a:	56 96       	adiw	r26, 0x16	; 22
    619c:	2d 91       	ld	r18, X+
    619e:	3c 91       	ld	r19, X
    61a0:	57 97       	sbiw	r26, 0x17	; 23
    61a2:	49 85       	ldd	r20, Y+9	; 0x09
    61a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    61a6:	6d a9       	ldd	r22, Y+53	; 0x35
    61a8:	7e a9       	ldd	r23, Y+54	; 0x36
    61aa:	ce 01       	movw	r24, r28
    61ac:	8d 5a       	subi	r24, 0xAD	; 173
    61ae:	9f 4f       	sbci	r25, 0xFF	; 255
    61b0:	fc 01       	movw	r30, r24
    61b2:	80 81       	ld	r24, Z
    61b4:	91 81       	ldd	r25, Z+1	; 0x01
    61b6:	5d d8       	rcall	.-3910   	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x40) drawPixel(pX + 1, pY, textcolor);
    61b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    61ba:	88 2f       	mov	r24, r24
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	80 74       	andi	r24, 0x40	; 64
    61c0:	99 27       	eor	r25, r25
    61c2:	89 2b       	or	r24, r25
    61c4:	b1 f0       	breq	.+44     	; 0x61f2 <_ZN11TFT_ILI93418drawCharEjiii+0x618>
    61c6:	ce 01       	movw	r24, r28
    61c8:	8d 5a       	subi	r24, 0xAD	; 173
    61ca:	9f 4f       	sbci	r25, 0xFF	; 255
    61cc:	dc 01       	movw	r26, r24
    61ce:	8d 91       	ld	r24, X+
    61d0:	9c 91       	ld	r25, X
    61d2:	fc 01       	movw	r30, r24
    61d4:	26 89       	ldd	r18, Z+22	; 0x16
    61d6:	37 89       	ldd	r19, Z+23	; 0x17
    61d8:	49 85       	ldd	r20, Y+9	; 0x09
    61da:	5a 85       	ldd	r21, Y+10	; 0x0a
    61dc:	8d a9       	ldd	r24, Y+53	; 0x35
    61de:	9e a9       	ldd	r25, Y+54	; 0x36
    61e0:	01 96       	adiw	r24, 0x01	; 1
    61e2:	bc 01       	movw	r22, r24
    61e4:	ce 01       	movw	r24, r28
    61e6:	8d 5a       	subi	r24, 0xAD	; 173
    61e8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ea:	dc 01       	movw	r26, r24
    61ec:	8d 91       	ld	r24, X+
    61ee:	9c 91       	ld	r25, X
    61f0:	40 d8       	rcall	.-3968   	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x20) drawPixel(pX + 2, pY, textcolor);
    61f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    61f4:	88 2f       	mov	r24, r24
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	80 72       	andi	r24, 0x20	; 32
    61fa:	99 27       	eor	r25, r25
    61fc:	89 2b       	or	r24, r25
    61fe:	c1 f0       	breq	.+48     	; 0x6230 <_ZN11TFT_ILI93418drawCharEjiii+0x656>
    6200:	ce 01       	movw	r24, r28
    6202:	8d 5a       	subi	r24, 0xAD	; 173
    6204:	9f 4f       	sbci	r25, 0xFF	; 255
    6206:	fc 01       	movw	r30, r24
    6208:	80 81       	ld	r24, Z
    620a:	91 81       	ldd	r25, Z+1	; 0x01
    620c:	dc 01       	movw	r26, r24
    620e:	56 96       	adiw	r26, 0x16	; 22
    6210:	2d 91       	ld	r18, X+
    6212:	3c 91       	ld	r19, X
    6214:	57 97       	sbiw	r26, 0x17	; 23
    6216:	49 85       	ldd	r20, Y+9	; 0x09
    6218:	5a 85       	ldd	r21, Y+10	; 0x0a
    621a:	8d a9       	ldd	r24, Y+53	; 0x35
    621c:	9e a9       	ldd	r25, Y+54	; 0x36
    621e:	02 96       	adiw	r24, 0x02	; 2
    6220:	bc 01       	movw	r22, r24
    6222:	ce 01       	movw	r24, r28
    6224:	8d 5a       	subi	r24, 0xAD	; 173
    6226:	9f 4f       	sbci	r25, 0xFF	; 255
    6228:	fc 01       	movw	r30, r24
    622a:	80 81       	ld	r24, Z
    622c:	91 81       	ldd	r25, Z+1	; 0x01
    622e:	21 d8       	rcall	.-4030   	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x10) drawPixel(pX + 3, pY, textcolor);
    6230:	8b 85       	ldd	r24, Y+11	; 0x0b
    6232:	88 2f       	mov	r24, r24
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	80 71       	andi	r24, 0x10	; 16
    6238:	99 27       	eor	r25, r25
    623a:	89 2b       	or	r24, r25
    623c:	b1 f0       	breq	.+44     	; 0x626a <_ZN11TFT_ILI93418drawCharEjiii+0x690>
    623e:	ce 01       	movw	r24, r28
    6240:	8d 5a       	subi	r24, 0xAD	; 173
    6242:	9f 4f       	sbci	r25, 0xFF	; 255
    6244:	dc 01       	movw	r26, r24
    6246:	8d 91       	ld	r24, X+
    6248:	9c 91       	ld	r25, X
    624a:	fc 01       	movw	r30, r24
    624c:	26 89       	ldd	r18, Z+22	; 0x16
    624e:	37 89       	ldd	r19, Z+23	; 0x17
    6250:	49 85       	ldd	r20, Y+9	; 0x09
    6252:	5a 85       	ldd	r21, Y+10	; 0x0a
    6254:	8d a9       	ldd	r24, Y+53	; 0x35
    6256:	9e a9       	ldd	r25, Y+54	; 0x36
    6258:	03 96       	adiw	r24, 0x03	; 3
    625a:	bc 01       	movw	r22, r24
    625c:	ce 01       	movw	r24, r28
    625e:	8d 5a       	subi	r24, 0xAD	; 173
    6260:	9f 4f       	sbci	r25, 0xFF	; 255
    6262:	dc 01       	movw	r26, r24
    6264:	8d 91       	ld	r24, X+
    6266:	9c 91       	ld	r25, X
    6268:	04 d8       	rcall	.-4088   	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x08) drawPixel(pX + 4, pY, textcolor);
    626a:	8b 85       	ldd	r24, Y+11	; 0x0b
    626c:	88 2f       	mov	r24, r24
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	88 70       	andi	r24, 0x08	; 8
    6272:	99 27       	eor	r25, r25
    6274:	89 2b       	or	r24, r25
    6276:	c9 f0       	breq	.+50     	; 0x62aa <_ZN11TFT_ILI93418drawCharEjiii+0x6d0>
    6278:	ce 01       	movw	r24, r28
    627a:	8d 5a       	subi	r24, 0xAD	; 173
    627c:	9f 4f       	sbci	r25, 0xFF	; 255
    627e:	fc 01       	movw	r30, r24
    6280:	80 81       	ld	r24, Z
    6282:	91 81       	ldd	r25, Z+1	; 0x01
    6284:	dc 01       	movw	r26, r24
    6286:	56 96       	adiw	r26, 0x16	; 22
    6288:	2d 91       	ld	r18, X+
    628a:	3c 91       	ld	r19, X
    628c:	57 97       	sbiw	r26, 0x17	; 23
    628e:	49 85       	ldd	r20, Y+9	; 0x09
    6290:	5a 85       	ldd	r21, Y+10	; 0x0a
    6292:	8d a9       	ldd	r24, Y+53	; 0x35
    6294:	9e a9       	ldd	r25, Y+54	; 0x36
    6296:	04 96       	adiw	r24, 0x04	; 4
    6298:	bc 01       	movw	r22, r24
    629a:	ce 01       	movw	r24, r28
    629c:	8d 5a       	subi	r24, 0xAD	; 173
    629e:	9f 4f       	sbci	r25, 0xFF	; 255
    62a0:	fc 01       	movw	r30, r24
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	0e 94 39 29 	call	0x5272	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x04) drawPixel(pX + 5, pY, textcolor);
    62aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    62ac:	88 2f       	mov	r24, r24
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	84 70       	andi	r24, 0x04	; 4
    62b2:	99 27       	eor	r25, r25
    62b4:	89 2b       	or	r24, r25
    62b6:	b9 f0       	breq	.+46     	; 0x62e6 <_ZN11TFT_ILI93418drawCharEjiii+0x70c>
    62b8:	ce 01       	movw	r24, r28
    62ba:	8d 5a       	subi	r24, 0xAD	; 173
    62bc:	9f 4f       	sbci	r25, 0xFF	; 255
    62be:	dc 01       	movw	r26, r24
    62c0:	8d 91       	ld	r24, X+
    62c2:	9c 91       	ld	r25, X
    62c4:	fc 01       	movw	r30, r24
    62c6:	26 89       	ldd	r18, Z+22	; 0x16
    62c8:	37 89       	ldd	r19, Z+23	; 0x17
    62ca:	49 85       	ldd	r20, Y+9	; 0x09
    62cc:	5a 85       	ldd	r21, Y+10	; 0x0a
    62ce:	8d a9       	ldd	r24, Y+53	; 0x35
    62d0:	9e a9       	ldd	r25, Y+54	; 0x36
    62d2:	05 96       	adiw	r24, 0x05	; 5
    62d4:	bc 01       	movw	r22, r24
    62d6:	ce 01       	movw	r24, r28
    62d8:	8d 5a       	subi	r24, 0xAD	; 173
    62da:	9f 4f       	sbci	r25, 0xFF	; 255
    62dc:	dc 01       	movw	r26, r24
    62de:	8d 91       	ld	r24, X+
    62e0:	9c 91       	ld	r25, X
    62e2:	0e 94 39 29 	call	0x5272	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x02) drawPixel(pX + 6, pY, textcolor);
    62e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    62e8:	88 2f       	mov	r24, r24
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	82 70       	andi	r24, 0x02	; 2
    62ee:	99 27       	eor	r25, r25
    62f0:	89 2b       	or	r24, r25
    62f2:	c9 f0       	breq	.+50     	; 0x6326 <_ZN11TFT_ILI93418drawCharEjiii+0x74c>
    62f4:	ce 01       	movw	r24, r28
    62f6:	8d 5a       	subi	r24, 0xAD	; 173
    62f8:	9f 4f       	sbci	r25, 0xFF	; 255
    62fa:	fc 01       	movw	r30, r24
    62fc:	80 81       	ld	r24, Z
    62fe:	91 81       	ldd	r25, Z+1	; 0x01
    6300:	dc 01       	movw	r26, r24
    6302:	56 96       	adiw	r26, 0x16	; 22
    6304:	2d 91       	ld	r18, X+
    6306:	3c 91       	ld	r19, X
    6308:	57 97       	sbiw	r26, 0x17	; 23
    630a:	49 85       	ldd	r20, Y+9	; 0x09
    630c:	5a 85       	ldd	r21, Y+10	; 0x0a
    630e:	8d a9       	ldd	r24, Y+53	; 0x35
    6310:	9e a9       	ldd	r25, Y+54	; 0x36
    6312:	06 96       	adiw	r24, 0x06	; 6
    6314:	bc 01       	movw	r22, r24
    6316:	ce 01       	movw	r24, r28
    6318:	8d 5a       	subi	r24, 0xAD	; 173
    631a:	9f 4f       	sbci	r25, 0xFF	; 255
    631c:	fc 01       	movw	r30, r24
    631e:	80 81       	ld	r24, Z
    6320:	91 81       	ldd	r25, Z+1	; 0x01
    6322:	0e 94 39 29 	call	0x5272	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
              if (line & 0x01) drawPixel(pX + 7, pY, textcolor);
    6326:	8b 85       	ldd	r24, Y+11	; 0x0b
    6328:	88 2f       	mov	r24, r24
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	81 70       	andi	r24, 0x01	; 1
    632e:	99 27       	eor	r25, r25
    6330:	89 2b       	or	r24, r25
    6332:	09 f4       	brne	.+2      	; 0x6336 <_ZN11TFT_ILI93418drawCharEjiii+0x75c>
    6334:	8c c2       	rjmp	.+1304   	; 0x684e <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
    6336:	ce 01       	movw	r24, r28
    6338:	8d 5a       	subi	r24, 0xAD	; 173
    633a:	9f 4f       	sbci	r25, 0xFF	; 255
    633c:	dc 01       	movw	r26, r24
    633e:	8d 91       	ld	r24, X+
    6340:	9c 91       	ld	r25, X
    6342:	fc 01       	movw	r30, r24
    6344:	26 89       	ldd	r18, Z+22	; 0x16
    6346:	37 89       	ldd	r19, Z+23	; 0x17
    6348:	49 85       	ldd	r20, Y+9	; 0x09
    634a:	5a 85       	ldd	r21, Y+10	; 0x0a
    634c:	8d a9       	ldd	r24, Y+53	; 0x35
    634e:	9e a9       	ldd	r25, Y+54	; 0x36
    6350:	07 96       	adiw	r24, 0x07	; 7
    6352:	bc 01       	movw	r22, r24
    6354:	ce 01       	movw	r24, r28
    6356:	8d 5a       	subi	r24, 0xAD	; 173
    6358:	9f 4f       	sbci	r25, 0xFF	; 255
    635a:	dc 01       	movw	r26, r24
    635c:	8d 91       	ld	r24, X+
    635e:	9c 91       	ld	r25, X
    6360:	0e 94 39 29 	call	0x5272	; 0x5272 <_ZN11TFT_ILI93419drawPixelEjjj>
    6364:	74 c2       	rjmp	.+1256   	; 0x684e <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
            }
            else {
              pX = x + k * 8 * textsize;
    6366:	8e 85       	ldd	r24, Y+14	; 0x0e
    6368:	9f 85       	ldd	r25, Y+15	; 0x0f
    636a:	ac 01       	movw	r20, r24
    636c:	44 0f       	add	r20, r20
    636e:	55 1f       	adc	r21, r21
    6370:	44 0f       	add	r20, r20
    6372:	55 1f       	adc	r21, r21
    6374:	44 0f       	add	r20, r20
    6376:	55 1f       	adc	r21, r21
    6378:	ce 01       	movw	r24, r28
    637a:	8d 5a       	subi	r24, 0xAD	; 173
    637c:	9f 4f       	sbci	r25, 0xFF	; 255
    637e:	fc 01       	movw	r30, r24
    6380:	80 81       	ld	r24, Z
    6382:	91 81       	ldd	r25, Z+1	; 0x01
    6384:	dc 01       	movw	r26, r24
    6386:	91 96       	adiw	r26, 0x21	; 33
    6388:	8c 91       	ld	r24, X
    638a:	88 2f       	mov	r24, r24
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	48 9f       	mul	r20, r24
    6390:	90 01       	movw	r18, r0
    6392:	49 9f       	mul	r20, r25
    6394:	30 0d       	add	r19, r0
    6396:	58 9f       	mul	r21, r24
    6398:	30 0d       	add	r19, r0
    639a:	11 24       	eor	r1, r1
    639c:	ce 01       	movw	r24, r28
    639e:	89 5a       	subi	r24, 0xA9	; 169
    63a0:	9f 4f       	sbci	r25, 0xFF	; 255
    63a2:	fc 01       	movw	r30, r24
    63a4:	80 81       	ld	r24, Z
    63a6:	91 81       	ldd	r25, Z+1	; 0x01
    63a8:	82 0f       	add	r24, r18
    63aa:	93 1f       	adc	r25, r19
    63ac:	9e ab       	std	Y+54, r25	; 0x36
    63ae:	8d ab       	std	Y+53, r24	; 0x35
              if (line & 0x80) fillRect(pX, pY, textsize, textsize, textcolor);
    63b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    63b2:	88 23       	and	r24, r24
    63b4:	8c f5       	brge	.+98     	; 0x6418 <_ZN11TFT_ILI93418drawCharEjiii+0x83e>
    63b6:	ce 01       	movw	r24, r28
    63b8:	8d 5a       	subi	r24, 0xAD	; 173
    63ba:	9f 4f       	sbci	r25, 0xFF	; 255
    63bc:	dc 01       	movw	r26, r24
    63be:	8d 91       	ld	r24, X+
    63c0:	9c 91       	ld	r25, X
    63c2:	fc 01       	movw	r30, r24
    63c4:	a6 89       	ldd	r26, Z+22	; 0x16
    63c6:	b7 89       	ldd	r27, Z+23	; 0x17
    63c8:	ce 01       	movw	r24, r28
    63ca:	8d 5a       	subi	r24, 0xAD	; 173
    63cc:	9f 4f       	sbci	r25, 0xFF	; 255
    63ce:	fc 01       	movw	r30, r24
    63d0:	80 81       	ld	r24, Z
    63d2:	91 81       	ldd	r25, Z+1	; 0x01
    63d4:	fc 01       	movw	r30, r24
    63d6:	81 a1       	ldd	r24, Z+33	; 0x21
    63d8:	28 2f       	mov	r18, r24
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	6f 96       	adiw	r28, 0x1f	; 31
    63de:	3f af       	std	Y+63, r19	; 0x3f
    63e0:	2e af       	std	Y+62, r18	; 0x3e
    63e2:	6f 97       	sbiw	r28, 0x1f	; 31
    63e4:	ce 01       	movw	r24, r28
    63e6:	8d 5a       	subi	r24, 0xAD	; 173
    63e8:	9f 4f       	sbci	r25, 0xFF	; 255
    63ea:	fc 01       	movw	r30, r24
    63ec:	80 81       	ld	r24, Z
    63ee:	91 81       	ldd	r25, Z+1	; 0x01
    63f0:	fc 01       	movw	r30, r24
    63f2:	81 a1       	ldd	r24, Z+33	; 0x21
    63f4:	28 2f       	mov	r18, r24
    63f6:	30 e0       	ldi	r19, 0x00	; 0
    63f8:	49 85       	ldd	r20, Y+9	; 0x09
    63fa:	5a 85       	ldd	r21, Y+10	; 0x0a
    63fc:	6d a9       	ldd	r22, Y+53	; 0x35
    63fe:	7e a9       	ldd	r23, Y+54	; 0x36
    6400:	ce 01       	movw	r24, r28
    6402:	8d 5a       	subi	r24, 0xAD	; 173
    6404:	9f 4f       	sbci	r25, 0xFF	; 255
    6406:	fc 01       	movw	r30, r24
    6408:	80 81       	ld	r24, Z
    640a:	91 81       	ldd	r25, Z+1	; 0x01
    640c:	7d 01       	movw	r14, r26
    640e:	6f 96       	adiw	r28, 0x1f	; 31
    6410:	0e ad       	ldd	r16, Y+62	; 0x3e
    6412:	1f ad       	ldd	r17, Y+63	; 0x3f
    6414:	6f 97       	sbiw	r28, 0x1f	; 31
    6416:	2b d9       	rcall	.-3498   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x40) fillRect(pX + textsize, pY, textsize, textsize, textcolor);
    6418:	8b 85       	ldd	r24, Y+11	; 0x0b
    641a:	88 2f       	mov	r24, r24
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	80 74       	andi	r24, 0x40	; 64
    6420:	99 27       	eor	r25, r25
    6422:	89 2b       	or	r24, r25
    6424:	09 f4       	brne	.+2      	; 0x6428 <_ZN11TFT_ILI93418drawCharEjiii+0x84e>
    6426:	3f c0       	rjmp	.+126    	; 0x64a6 <_ZN11TFT_ILI93418drawCharEjiii+0x8cc>
    6428:	ce 01       	movw	r24, r28
    642a:	8d 5a       	subi	r24, 0xAD	; 173
    642c:	9f 4f       	sbci	r25, 0xFF	; 255
    642e:	dc 01       	movw	r26, r24
    6430:	8d 91       	ld	r24, X+
    6432:	9c 91       	ld	r25, X
    6434:	fc 01       	movw	r30, r24
    6436:	06 89       	ldd	r16, Z+22	; 0x16
    6438:	17 89       	ldd	r17, Z+23	; 0x17
    643a:	ce 01       	movw	r24, r28
    643c:	8d 5a       	subi	r24, 0xAD	; 173
    643e:	9f 4f       	sbci	r25, 0xFF	; 255
    6440:	dc 01       	movw	r26, r24
    6442:	8d 91       	ld	r24, X+
    6444:	9c 91       	ld	r25, X
    6446:	fc 01       	movw	r30, r24
    6448:	81 a1       	ldd	r24, Z+33	; 0x21
    644a:	a8 2f       	mov	r26, r24
    644c:	b0 e0       	ldi	r27, 0x00	; 0
    644e:	ce 01       	movw	r24, r28
    6450:	8d 5a       	subi	r24, 0xAD	; 173
    6452:	9f 4f       	sbci	r25, 0xFF	; 255
    6454:	fc 01       	movw	r30, r24
    6456:	80 81       	ld	r24, Z
    6458:	91 81       	ldd	r25, Z+1	; 0x01
    645a:	fc 01       	movw	r30, r24
    645c:	81 a1       	ldd	r24, Z+33	; 0x21
    645e:	28 2f       	mov	r18, r24
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	6f 96       	adiw	r28, 0x1f	; 31
    6464:	3f af       	std	Y+63, r19	; 0x3f
    6466:	2e af       	std	Y+62, r18	; 0x3e
    6468:	6f 97       	sbiw	r28, 0x1f	; 31
    646a:	ce 01       	movw	r24, r28
    646c:	8d 5a       	subi	r24, 0xAD	; 173
    646e:	9f 4f       	sbci	r25, 0xFF	; 255
    6470:	fc 01       	movw	r30, r24
    6472:	80 81       	ld	r24, Z
    6474:	91 81       	ldd	r25, Z+1	; 0x01
    6476:	fc 01       	movw	r30, r24
    6478:	81 a1       	ldd	r24, Z+33	; 0x21
    647a:	28 2f       	mov	r18, r24
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	8d a9       	ldd	r24, Y+53	; 0x35
    6480:	9e a9       	ldd	r25, Y+54	; 0x36
    6482:	b9 01       	movw	r22, r18
    6484:	68 0f       	add	r22, r24
    6486:	79 1f       	adc	r23, r25
    6488:	49 85       	ldd	r20, Y+9	; 0x09
    648a:	5a 85       	ldd	r21, Y+10	; 0x0a
    648c:	ce 01       	movw	r24, r28
    648e:	8d 5a       	subi	r24, 0xAD	; 173
    6490:	9f 4f       	sbci	r25, 0xFF	; 255
    6492:	fc 01       	movw	r30, r24
    6494:	80 81       	ld	r24, Z
    6496:	91 81       	ldd	r25, Z+1	; 0x01
    6498:	78 01       	movw	r14, r16
    649a:	8d 01       	movw	r16, r26
    649c:	6f 96       	adiw	r28, 0x1f	; 31
    649e:	2e ad       	ldd	r18, Y+62	; 0x3e
    64a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    64a2:	6f 97       	sbiw	r28, 0x1f	; 31
    64a4:	e4 d8       	rcall	.-3640   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x20) fillRect(pX + 2 * textsize, pY, textsize, textsize, textcolor);
    64a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    64a8:	88 2f       	mov	r24, r24
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	80 72       	andi	r24, 0x20	; 32
    64ae:	99 27       	eor	r25, r25
    64b0:	89 2b       	or	r24, r25
    64b2:	09 f4       	brne	.+2      	; 0x64b6 <_ZN11TFT_ILI93418drawCharEjiii+0x8dc>
    64b4:	42 c0       	rjmp	.+132    	; 0x653a <_ZN11TFT_ILI93418drawCharEjiii+0x960>
    64b6:	ce 01       	movw	r24, r28
    64b8:	8d 5a       	subi	r24, 0xAD	; 173
    64ba:	9f 4f       	sbci	r25, 0xFF	; 255
    64bc:	dc 01       	movw	r26, r24
    64be:	8d 91       	ld	r24, X+
    64c0:	9c 91       	ld	r25, X
    64c2:	fc 01       	movw	r30, r24
    64c4:	06 89       	ldd	r16, Z+22	; 0x16
    64c6:	17 89       	ldd	r17, Z+23	; 0x17
    64c8:	ce 01       	movw	r24, r28
    64ca:	8d 5a       	subi	r24, 0xAD	; 173
    64cc:	9f 4f       	sbci	r25, 0xFF	; 255
    64ce:	dc 01       	movw	r26, r24
    64d0:	8d 91       	ld	r24, X+
    64d2:	9c 91       	ld	r25, X
    64d4:	fc 01       	movw	r30, r24
    64d6:	81 a1       	ldd	r24, Z+33	; 0x21
    64d8:	a8 2f       	mov	r26, r24
    64da:	b0 e0       	ldi	r27, 0x00	; 0
    64dc:	ce 01       	movw	r24, r28
    64de:	8d 5a       	subi	r24, 0xAD	; 173
    64e0:	9f 4f       	sbci	r25, 0xFF	; 255
    64e2:	fc 01       	movw	r30, r24
    64e4:	80 81       	ld	r24, Z
    64e6:	91 81       	ldd	r25, Z+1	; 0x01
    64e8:	fc 01       	movw	r30, r24
    64ea:	81 a1       	ldd	r24, Z+33	; 0x21
    64ec:	28 2f       	mov	r18, r24
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	6f 96       	adiw	r28, 0x1f	; 31
    64f2:	3f af       	std	Y+63, r19	; 0x3f
    64f4:	2e af       	std	Y+62, r18	; 0x3e
    64f6:	6f 97       	sbiw	r28, 0x1f	; 31
    64f8:	ce 01       	movw	r24, r28
    64fa:	8d 5a       	subi	r24, 0xAD	; 173
    64fc:	9f 4f       	sbci	r25, 0xFF	; 255
    64fe:	fc 01       	movw	r30, r24
    6500:	80 81       	ld	r24, Z
    6502:	91 81       	ldd	r25, Z+1	; 0x01
    6504:	fc 01       	movw	r30, r24
    6506:	81 a1       	ldd	r24, Z+33	; 0x21
    6508:	88 2f       	mov	r24, r24
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	9c 01       	movw	r18, r24
    650e:	22 0f       	add	r18, r18
    6510:	33 1f       	adc	r19, r19
    6512:	8d a9       	ldd	r24, Y+53	; 0x35
    6514:	9e a9       	ldd	r25, Y+54	; 0x36
    6516:	b9 01       	movw	r22, r18
    6518:	68 0f       	add	r22, r24
    651a:	79 1f       	adc	r23, r25
    651c:	49 85       	ldd	r20, Y+9	; 0x09
    651e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6520:	ce 01       	movw	r24, r28
    6522:	8d 5a       	subi	r24, 0xAD	; 173
    6524:	9f 4f       	sbci	r25, 0xFF	; 255
    6526:	fc 01       	movw	r30, r24
    6528:	80 81       	ld	r24, Z
    652a:	91 81       	ldd	r25, Z+1	; 0x01
    652c:	78 01       	movw	r14, r16
    652e:	8d 01       	movw	r16, r26
    6530:	6f 96       	adiw	r28, 0x1f	; 31
    6532:	2e ad       	ldd	r18, Y+62	; 0x3e
    6534:	3f ad       	ldd	r19, Y+63	; 0x3f
    6536:	6f 97       	sbiw	r28, 0x1f	; 31
    6538:	9a d8       	rcall	.-3788   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x10) fillRect(pX + 3 * textsize, pY, textsize, textsize, textcolor);
    653a:	8b 85       	ldd	r24, Y+11	; 0x0b
    653c:	88 2f       	mov	r24, r24
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	80 71       	andi	r24, 0x10	; 16
    6542:	99 27       	eor	r25, r25
    6544:	89 2b       	or	r24, r25
    6546:	09 f4       	brne	.+2      	; 0x654a <_ZN11TFT_ILI93418drawCharEjiii+0x970>
    6548:	44 c0       	rjmp	.+136    	; 0x65d2 <_ZN11TFT_ILI93418drawCharEjiii+0x9f8>
    654a:	ce 01       	movw	r24, r28
    654c:	8d 5a       	subi	r24, 0xAD	; 173
    654e:	9f 4f       	sbci	r25, 0xFF	; 255
    6550:	dc 01       	movw	r26, r24
    6552:	8d 91       	ld	r24, X+
    6554:	9c 91       	ld	r25, X
    6556:	fc 01       	movw	r30, r24
    6558:	06 89       	ldd	r16, Z+22	; 0x16
    655a:	17 89       	ldd	r17, Z+23	; 0x17
    655c:	ce 01       	movw	r24, r28
    655e:	8d 5a       	subi	r24, 0xAD	; 173
    6560:	9f 4f       	sbci	r25, 0xFF	; 255
    6562:	dc 01       	movw	r26, r24
    6564:	8d 91       	ld	r24, X+
    6566:	9c 91       	ld	r25, X
    6568:	fc 01       	movw	r30, r24
    656a:	81 a1       	ldd	r24, Z+33	; 0x21
    656c:	a8 2f       	mov	r26, r24
    656e:	b0 e0       	ldi	r27, 0x00	; 0
    6570:	ce 01       	movw	r24, r28
    6572:	8d 5a       	subi	r24, 0xAD	; 173
    6574:	9f 4f       	sbci	r25, 0xFF	; 255
    6576:	fc 01       	movw	r30, r24
    6578:	80 81       	ld	r24, Z
    657a:	91 81       	ldd	r25, Z+1	; 0x01
    657c:	fc 01       	movw	r30, r24
    657e:	81 a1       	ldd	r24, Z+33	; 0x21
    6580:	28 2f       	mov	r18, r24
    6582:	30 e0       	ldi	r19, 0x00	; 0
    6584:	6f 96       	adiw	r28, 0x1f	; 31
    6586:	3f af       	std	Y+63, r19	; 0x3f
    6588:	2e af       	std	Y+62, r18	; 0x3e
    658a:	6f 97       	sbiw	r28, 0x1f	; 31
    658c:	ce 01       	movw	r24, r28
    658e:	8d 5a       	subi	r24, 0xAD	; 173
    6590:	9f 4f       	sbci	r25, 0xFF	; 255
    6592:	fc 01       	movw	r30, r24
    6594:	80 81       	ld	r24, Z
    6596:	91 81       	ldd	r25, Z+1	; 0x01
    6598:	fc 01       	movw	r30, r24
    659a:	81 a1       	ldd	r24, Z+33	; 0x21
    659c:	28 2f       	mov	r18, r24
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	c9 01       	movw	r24, r18
    65a2:	88 0f       	add	r24, r24
    65a4:	99 1f       	adc	r25, r25
    65a6:	28 0f       	add	r18, r24
    65a8:	39 1f       	adc	r19, r25
    65aa:	8d a9       	ldd	r24, Y+53	; 0x35
    65ac:	9e a9       	ldd	r25, Y+54	; 0x36
    65ae:	b9 01       	movw	r22, r18
    65b0:	68 0f       	add	r22, r24
    65b2:	79 1f       	adc	r23, r25
    65b4:	49 85       	ldd	r20, Y+9	; 0x09
    65b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    65b8:	ce 01       	movw	r24, r28
    65ba:	8d 5a       	subi	r24, 0xAD	; 173
    65bc:	9f 4f       	sbci	r25, 0xFF	; 255
    65be:	fc 01       	movw	r30, r24
    65c0:	80 81       	ld	r24, Z
    65c2:	91 81       	ldd	r25, Z+1	; 0x01
    65c4:	78 01       	movw	r14, r16
    65c6:	8d 01       	movw	r16, r26
    65c8:	6f 96       	adiw	r28, 0x1f	; 31
    65ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    65cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    65ce:	6f 97       	sbiw	r28, 0x1f	; 31
    65d0:	4e d8       	rcall	.-3940   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x08) fillRect(pX + 4 * textsize, pY, textsize, textsize, textcolor);
    65d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    65d4:	88 2f       	mov	r24, r24
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	88 70       	andi	r24, 0x08	; 8
    65da:	99 27       	eor	r25, r25
    65dc:	89 2b       	or	r24, r25
    65de:	09 f4       	brne	.+2      	; 0x65e2 <_ZN11TFT_ILI93418drawCharEjiii+0xa08>
    65e0:	44 c0       	rjmp	.+136    	; 0x666a <_ZN11TFT_ILI93418drawCharEjiii+0xa90>
    65e2:	ce 01       	movw	r24, r28
    65e4:	8d 5a       	subi	r24, 0xAD	; 173
    65e6:	9f 4f       	sbci	r25, 0xFF	; 255
    65e8:	dc 01       	movw	r26, r24
    65ea:	8d 91       	ld	r24, X+
    65ec:	9c 91       	ld	r25, X
    65ee:	fc 01       	movw	r30, r24
    65f0:	06 89       	ldd	r16, Z+22	; 0x16
    65f2:	17 89       	ldd	r17, Z+23	; 0x17
    65f4:	ce 01       	movw	r24, r28
    65f6:	8d 5a       	subi	r24, 0xAD	; 173
    65f8:	9f 4f       	sbci	r25, 0xFF	; 255
    65fa:	dc 01       	movw	r26, r24
    65fc:	8d 91       	ld	r24, X+
    65fe:	9c 91       	ld	r25, X
    6600:	fc 01       	movw	r30, r24
    6602:	81 a1       	ldd	r24, Z+33	; 0x21
    6604:	a8 2f       	mov	r26, r24
    6606:	b0 e0       	ldi	r27, 0x00	; 0
    6608:	ce 01       	movw	r24, r28
    660a:	8d 5a       	subi	r24, 0xAD	; 173
    660c:	9f 4f       	sbci	r25, 0xFF	; 255
    660e:	fc 01       	movw	r30, r24
    6610:	80 81       	ld	r24, Z
    6612:	91 81       	ldd	r25, Z+1	; 0x01
    6614:	fc 01       	movw	r30, r24
    6616:	81 a1       	ldd	r24, Z+33	; 0x21
    6618:	28 2f       	mov	r18, r24
    661a:	30 e0       	ldi	r19, 0x00	; 0
    661c:	6f 96       	adiw	r28, 0x1f	; 31
    661e:	3f af       	std	Y+63, r19	; 0x3f
    6620:	2e af       	std	Y+62, r18	; 0x3e
    6622:	6f 97       	sbiw	r28, 0x1f	; 31
    6624:	ce 01       	movw	r24, r28
    6626:	8d 5a       	subi	r24, 0xAD	; 173
    6628:	9f 4f       	sbci	r25, 0xFF	; 255
    662a:	fc 01       	movw	r30, r24
    662c:	80 81       	ld	r24, Z
    662e:	91 81       	ldd	r25, Z+1	; 0x01
    6630:	fc 01       	movw	r30, r24
    6632:	81 a1       	ldd	r24, Z+33	; 0x21
    6634:	88 2f       	mov	r24, r24
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	9c 01       	movw	r18, r24
    663a:	22 0f       	add	r18, r18
    663c:	33 1f       	adc	r19, r19
    663e:	22 0f       	add	r18, r18
    6640:	33 1f       	adc	r19, r19
    6642:	8d a9       	ldd	r24, Y+53	; 0x35
    6644:	9e a9       	ldd	r25, Y+54	; 0x36
    6646:	b9 01       	movw	r22, r18
    6648:	68 0f       	add	r22, r24
    664a:	79 1f       	adc	r23, r25
    664c:	49 85       	ldd	r20, Y+9	; 0x09
    664e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6650:	ce 01       	movw	r24, r28
    6652:	8d 5a       	subi	r24, 0xAD	; 173
    6654:	9f 4f       	sbci	r25, 0xFF	; 255
    6656:	fc 01       	movw	r30, r24
    6658:	80 81       	ld	r24, Z
    665a:	91 81       	ldd	r25, Z+1	; 0x01
    665c:	78 01       	movw	r14, r16
    665e:	8d 01       	movw	r16, r26
    6660:	6f 96       	adiw	r28, 0x1f	; 31
    6662:	2e ad       	ldd	r18, Y+62	; 0x3e
    6664:	3f ad       	ldd	r19, Y+63	; 0x3f
    6666:	6f 97       	sbiw	r28, 0x1f	; 31
    6668:	02 d8       	rcall	.-4092   	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x04) fillRect(pX + 5 * textsize, pY, textsize, textsize, textcolor);
    666a:	8b 85       	ldd	r24, Y+11	; 0x0b
    666c:	88 2f       	mov	r24, r24
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	84 70       	andi	r24, 0x04	; 4
    6672:	99 27       	eor	r25, r25
    6674:	89 2b       	or	r24, r25
    6676:	09 f4       	brne	.+2      	; 0x667a <_ZN11TFT_ILI93418drawCharEjiii+0xaa0>
    6678:	47 c0       	rjmp	.+142    	; 0x6708 <_ZN11TFT_ILI93418drawCharEjiii+0xb2e>
    667a:	ce 01       	movw	r24, r28
    667c:	8d 5a       	subi	r24, 0xAD	; 173
    667e:	9f 4f       	sbci	r25, 0xFF	; 255
    6680:	dc 01       	movw	r26, r24
    6682:	8d 91       	ld	r24, X+
    6684:	9c 91       	ld	r25, X
    6686:	fc 01       	movw	r30, r24
    6688:	06 89       	ldd	r16, Z+22	; 0x16
    668a:	17 89       	ldd	r17, Z+23	; 0x17
    668c:	ce 01       	movw	r24, r28
    668e:	8d 5a       	subi	r24, 0xAD	; 173
    6690:	9f 4f       	sbci	r25, 0xFF	; 255
    6692:	dc 01       	movw	r26, r24
    6694:	8d 91       	ld	r24, X+
    6696:	9c 91       	ld	r25, X
    6698:	fc 01       	movw	r30, r24
    669a:	81 a1       	ldd	r24, Z+33	; 0x21
    669c:	a8 2f       	mov	r26, r24
    669e:	b0 e0       	ldi	r27, 0x00	; 0
    66a0:	ce 01       	movw	r24, r28
    66a2:	8d 5a       	subi	r24, 0xAD	; 173
    66a4:	9f 4f       	sbci	r25, 0xFF	; 255
    66a6:	fc 01       	movw	r30, r24
    66a8:	80 81       	ld	r24, Z
    66aa:	91 81       	ldd	r25, Z+1	; 0x01
    66ac:	fc 01       	movw	r30, r24
    66ae:	81 a1       	ldd	r24, Z+33	; 0x21
    66b0:	28 2f       	mov	r18, r24
    66b2:	30 e0       	ldi	r19, 0x00	; 0
    66b4:	6f 96       	adiw	r28, 0x1f	; 31
    66b6:	3f af       	std	Y+63, r19	; 0x3f
    66b8:	2e af       	std	Y+62, r18	; 0x3e
    66ba:	6f 97       	sbiw	r28, 0x1f	; 31
    66bc:	ce 01       	movw	r24, r28
    66be:	8d 5a       	subi	r24, 0xAD	; 173
    66c0:	9f 4f       	sbci	r25, 0xFF	; 255
    66c2:	fc 01       	movw	r30, r24
    66c4:	80 81       	ld	r24, Z
    66c6:	91 81       	ldd	r25, Z+1	; 0x01
    66c8:	fc 01       	movw	r30, r24
    66ca:	81 a1       	ldd	r24, Z+33	; 0x21
    66cc:	28 2f       	mov	r18, r24
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	c9 01       	movw	r24, r18
    66d2:	88 0f       	add	r24, r24
    66d4:	99 1f       	adc	r25, r25
    66d6:	88 0f       	add	r24, r24
    66d8:	99 1f       	adc	r25, r25
    66da:	28 0f       	add	r18, r24
    66dc:	39 1f       	adc	r19, r25
    66de:	8d a9       	ldd	r24, Y+53	; 0x35
    66e0:	9e a9       	ldd	r25, Y+54	; 0x36
    66e2:	b9 01       	movw	r22, r18
    66e4:	68 0f       	add	r22, r24
    66e6:	79 1f       	adc	r23, r25
    66e8:	49 85       	ldd	r20, Y+9	; 0x09
    66ea:	5a 85       	ldd	r21, Y+10	; 0x0a
    66ec:	ce 01       	movw	r24, r28
    66ee:	8d 5a       	subi	r24, 0xAD	; 173
    66f0:	9f 4f       	sbci	r25, 0xFF	; 255
    66f2:	fc 01       	movw	r30, r24
    66f4:	80 81       	ld	r24, Z
    66f6:	91 81       	ldd	r25, Z+1	; 0x01
    66f8:	78 01       	movw	r14, r16
    66fa:	8d 01       	movw	r16, r26
    66fc:	6f 96       	adiw	r28, 0x1f	; 31
    66fe:	2e ad       	ldd	r18, Y+62	; 0x3e
    6700:	3f ad       	ldd	r19, Y+63	; 0x3f
    6702:	6f 97       	sbiw	r28, 0x1f	; 31
    6704:	0e 94 37 2b 	call	0x566e	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x02) fillRect(pX + 6 * textsize, pY, textsize, textsize, textcolor);
    6708:	8b 85       	ldd	r24, Y+11	; 0x0b
    670a:	88 2f       	mov	r24, r24
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	82 70       	andi	r24, 0x02	; 2
    6710:	99 27       	eor	r25, r25
    6712:	89 2b       	or	r24, r25
    6714:	09 f4       	brne	.+2      	; 0x6718 <_ZN11TFT_ILI93418drawCharEjiii+0xb3e>
    6716:	48 c0       	rjmp	.+144    	; 0x67a8 <_ZN11TFT_ILI93418drawCharEjiii+0xbce>
    6718:	ce 01       	movw	r24, r28
    671a:	8d 5a       	subi	r24, 0xAD	; 173
    671c:	9f 4f       	sbci	r25, 0xFF	; 255
    671e:	dc 01       	movw	r26, r24
    6720:	8d 91       	ld	r24, X+
    6722:	9c 91       	ld	r25, X
    6724:	fc 01       	movw	r30, r24
    6726:	06 89       	ldd	r16, Z+22	; 0x16
    6728:	17 89       	ldd	r17, Z+23	; 0x17
    672a:	ce 01       	movw	r24, r28
    672c:	8d 5a       	subi	r24, 0xAD	; 173
    672e:	9f 4f       	sbci	r25, 0xFF	; 255
    6730:	dc 01       	movw	r26, r24
    6732:	8d 91       	ld	r24, X+
    6734:	9c 91       	ld	r25, X
    6736:	fc 01       	movw	r30, r24
    6738:	81 a1       	ldd	r24, Z+33	; 0x21
    673a:	a8 2f       	mov	r26, r24
    673c:	b0 e0       	ldi	r27, 0x00	; 0
    673e:	ce 01       	movw	r24, r28
    6740:	8d 5a       	subi	r24, 0xAD	; 173
    6742:	9f 4f       	sbci	r25, 0xFF	; 255
    6744:	fc 01       	movw	r30, r24
    6746:	80 81       	ld	r24, Z
    6748:	91 81       	ldd	r25, Z+1	; 0x01
    674a:	fc 01       	movw	r30, r24
    674c:	81 a1       	ldd	r24, Z+33	; 0x21
    674e:	28 2f       	mov	r18, r24
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	6f 96       	adiw	r28, 0x1f	; 31
    6754:	3f af       	std	Y+63, r19	; 0x3f
    6756:	2e af       	std	Y+62, r18	; 0x3e
    6758:	6f 97       	sbiw	r28, 0x1f	; 31
    675a:	ce 01       	movw	r24, r28
    675c:	8d 5a       	subi	r24, 0xAD	; 173
    675e:	9f 4f       	sbci	r25, 0xFF	; 255
    6760:	fc 01       	movw	r30, r24
    6762:	80 81       	ld	r24, Z
    6764:	91 81       	ldd	r25, Z+1	; 0x01
    6766:	fc 01       	movw	r30, r24
    6768:	81 a1       	ldd	r24, Z+33	; 0x21
    676a:	28 2f       	mov	r18, r24
    676c:	30 e0       	ldi	r19, 0x00	; 0
    676e:	c9 01       	movw	r24, r18
    6770:	88 0f       	add	r24, r24
    6772:	99 1f       	adc	r25, r25
    6774:	82 0f       	add	r24, r18
    6776:	93 1f       	adc	r25, r19
    6778:	88 0f       	add	r24, r24
    677a:	99 1f       	adc	r25, r25
    677c:	9c 01       	movw	r18, r24
    677e:	8d a9       	ldd	r24, Y+53	; 0x35
    6780:	9e a9       	ldd	r25, Y+54	; 0x36
    6782:	b9 01       	movw	r22, r18
    6784:	68 0f       	add	r22, r24
    6786:	79 1f       	adc	r23, r25
    6788:	49 85       	ldd	r20, Y+9	; 0x09
    678a:	5a 85       	ldd	r21, Y+10	; 0x0a
    678c:	ce 01       	movw	r24, r28
    678e:	8d 5a       	subi	r24, 0xAD	; 173
    6790:	9f 4f       	sbci	r25, 0xFF	; 255
    6792:	fc 01       	movw	r30, r24
    6794:	80 81       	ld	r24, Z
    6796:	91 81       	ldd	r25, Z+1	; 0x01
    6798:	78 01       	movw	r14, r16
    679a:	8d 01       	movw	r16, r26
    679c:	6f 96       	adiw	r28, 0x1f	; 31
    679e:	2e ad       	ldd	r18, Y+62	; 0x3e
    67a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    67a2:	6f 97       	sbiw	r28, 0x1f	; 31
    67a4:	0e 94 37 2b 	call	0x566e	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
              if (line & 0x01) fillRect(pX + 7 * textsize, pY, textsize, textsize, textcolor);
    67a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    67aa:	88 2f       	mov	r24, r24
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	81 70       	andi	r24, 0x01	; 1
    67b0:	99 27       	eor	r25, r25
    67b2:	89 2b       	or	r24, r25
    67b4:	09 f4       	brne	.+2      	; 0x67b8 <_ZN11TFT_ILI93418drawCharEjiii+0xbde>
    67b6:	4b c0       	rjmp	.+150    	; 0x684e <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
    67b8:	ce 01       	movw	r24, r28
    67ba:	8d 5a       	subi	r24, 0xAD	; 173
    67bc:	9f 4f       	sbci	r25, 0xFF	; 255
    67be:	dc 01       	movw	r26, r24
    67c0:	8d 91       	ld	r24, X+
    67c2:	9c 91       	ld	r25, X
    67c4:	fc 01       	movw	r30, r24
    67c6:	06 89       	ldd	r16, Z+22	; 0x16
    67c8:	17 89       	ldd	r17, Z+23	; 0x17
    67ca:	ce 01       	movw	r24, r28
    67cc:	8d 5a       	subi	r24, 0xAD	; 173
    67ce:	9f 4f       	sbci	r25, 0xFF	; 255
    67d0:	dc 01       	movw	r26, r24
    67d2:	8d 91       	ld	r24, X+
    67d4:	9c 91       	ld	r25, X
    67d6:	fc 01       	movw	r30, r24
    67d8:	81 a1       	ldd	r24, Z+33	; 0x21
    67da:	a8 2f       	mov	r26, r24
    67dc:	b0 e0       	ldi	r27, 0x00	; 0
    67de:	ce 01       	movw	r24, r28
    67e0:	8d 5a       	subi	r24, 0xAD	; 173
    67e2:	9f 4f       	sbci	r25, 0xFF	; 255
    67e4:	fc 01       	movw	r30, r24
    67e6:	80 81       	ld	r24, Z
    67e8:	91 81       	ldd	r25, Z+1	; 0x01
    67ea:	fc 01       	movw	r30, r24
    67ec:	81 a1       	ldd	r24, Z+33	; 0x21
    67ee:	28 2f       	mov	r18, r24
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	6f 96       	adiw	r28, 0x1f	; 31
    67f4:	3f af       	std	Y+63, r19	; 0x3f
    67f6:	2e af       	std	Y+62, r18	; 0x3e
    67f8:	6f 97       	sbiw	r28, 0x1f	; 31
    67fa:	ce 01       	movw	r24, r28
    67fc:	8d 5a       	subi	r24, 0xAD	; 173
    67fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6800:	fc 01       	movw	r30, r24
    6802:	80 81       	ld	r24, Z
    6804:	91 81       	ldd	r25, Z+1	; 0x01
    6806:	fc 01       	movw	r30, r24
    6808:	81 a1       	ldd	r24, Z+33	; 0x21
    680a:	28 2f       	mov	r18, r24
    680c:	30 e0       	ldi	r19, 0x00	; 0
    680e:	c9 01       	movw	r24, r18
    6810:	88 0f       	add	r24, r24
    6812:	99 1f       	adc	r25, r25
    6814:	88 0f       	add	r24, r24
    6816:	99 1f       	adc	r25, r25
    6818:	88 0f       	add	r24, r24
    681a:	99 1f       	adc	r25, r25
    681c:	ac 01       	movw	r20, r24
    681e:	42 1b       	sub	r20, r18
    6820:	53 0b       	sbc	r21, r19
    6822:	9a 01       	movw	r18, r20
    6824:	8d a9       	ldd	r24, Y+53	; 0x35
    6826:	9e a9       	ldd	r25, Y+54	; 0x36
    6828:	b9 01       	movw	r22, r18
    682a:	68 0f       	add	r22, r24
    682c:	79 1f       	adc	r23, r25
    682e:	49 85       	ldd	r20, Y+9	; 0x09
    6830:	5a 85       	ldd	r21, Y+10	; 0x0a
    6832:	ce 01       	movw	r24, r28
    6834:	8d 5a       	subi	r24, 0xAD	; 173
    6836:	9f 4f       	sbci	r25, 0xFF	; 255
    6838:	fc 01       	movw	r30, r24
    683a:	80 81       	ld	r24, Z
    683c:	91 81       	ldd	r25, Z+1	; 0x01
    683e:	78 01       	movw	r14, r16
    6840:	8d 01       	movw	r16, r26
    6842:	6f 96       	adiw	r28, 0x1f	; 31
    6844:	2e ad       	ldd	r18, Y+62	; 0x3e
    6846:	3f ad       	ldd	r19, Y+63	; 0x3f
    6848:	6f 97       	sbiw	r28, 0x1f	; 31
    684a:	0e 94 37 2b 	call	0x566e	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>

      for (int i = 0; i < height; i++)
      {
        if (textcolor != textbgcolor) fillRect(x, pY, width * textsize, textsize, textbgcolor);

        for (int k = 0; k < w; k++)
    684e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6850:	9f 85       	ldd	r25, Y+15	; 0x0f
    6852:	01 96       	adiw	r24, 0x01	; 1
    6854:	9f 87       	std	Y+15, r25	; 0x0f
    6856:	8e 87       	std	Y+14, r24	; 0x0e
    6858:	47 cc       	rjmp	.-1906   	; 0x60e8 <_ZN11TFT_ILI93418drawCharEjiii+0x50e>
              if (line & 0x02) fillRect(pX + 6 * textsize, pY, textsize, textsize, textcolor);
              if (line & 0x01) fillRect(pX + 7 * textsize, pY, textsize, textsize, textcolor);
            }
          }
        }
        pY += textsize;
    685a:	ce 01       	movw	r24, r28
    685c:	8d 5a       	subi	r24, 0xAD	; 173
    685e:	9f 4f       	sbci	r25, 0xFF	; 255
    6860:	dc 01       	movw	r26, r24
    6862:	8d 91       	ld	r24, X+
    6864:	9c 91       	ld	r25, X
    6866:	fc 01       	movw	r30, r24
    6868:	81 a1       	ldd	r24, Z+33	; 0x21
    686a:	88 2f       	mov	r24, r24
    686c:	90 e0       	ldi	r25, 0x00	; 0
    686e:	29 85       	ldd	r18, Y+9	; 0x09
    6870:	3a 85       	ldd	r19, Y+10	; 0x0a
    6872:	82 0f       	add	r24, r18
    6874:	93 1f       	adc	r25, r19
    6876:	9a 87       	std	Y+10, r25	; 0x0a
    6878:	89 87       	std	Y+9, r24	; 0x09
    w = w / 8;
    if (x + width * textsize >= (int16_t)_width) return width * textsize ;

    if (textcolor == textbgcolor || textsize != 1) {

      for (int i = 0; i < height; i++)
    687a:	8c 85       	ldd	r24, Y+12	; 0x0c
    687c:	9d 85       	ldd	r25, Y+13	; 0x0d
    687e:	01 96       	adiw	r24, 0x01	; 1
    6880:	9d 87       	std	Y+13, r25	; 0x0d
    6882:	8c 87       	std	Y+12, r24	; 0x0c
    6884:	ca cb       	rjmp	.-2156   	; 0x601a <_ZN11TFT_ILI93418drawCharEjiii+0x440>
    }
    else
      // Faster drawing of characters and background using block write
    {
      spi_begin();
      setAddrWindow(x, y, (x + w * 8) - 1, y + height - 1);
    6886:	ce 01       	movw	r24, r28
    6888:	87 5a       	subi	r24, 0xA7	; 167
    688a:	9f 4f       	sbci	r25, 0xFF	; 255
    688c:	dc 01       	movw	r26, r24
    688e:	2d 91       	ld	r18, X+
    6890:	3c 91       	ld	r19, X
    6892:	8b 81       	ldd	r24, Y+3	; 0x03
    6894:	9c 81       	ldd	r25, Y+4	; 0x04
    6896:	82 0f       	add	r24, r18
    6898:	93 1f       	adc	r25, r19
    689a:	fc 01       	movw	r30, r24
    689c:	31 97       	sbiw	r30, 0x01	; 1
    689e:	8f 81       	ldd	r24, Y+7	; 0x07
    68a0:	98 85       	ldd	r25, Y+8	; 0x08
    68a2:	9c 01       	movw	r18, r24
    68a4:	22 0f       	add	r18, r18
    68a6:	33 1f       	adc	r19, r19
    68a8:	22 0f       	add	r18, r18
    68aa:	33 1f       	adc	r19, r19
    68ac:	22 0f       	add	r18, r18
    68ae:	33 1f       	adc	r19, r19
    68b0:	ce 01       	movw	r24, r28
    68b2:	89 5a       	subi	r24, 0xA9	; 169
    68b4:	9f 4f       	sbci	r25, 0xFF	; 255
    68b6:	dc 01       	movw	r26, r24
    68b8:	8d 91       	ld	r24, X+
    68ba:	9c 91       	ld	r25, X
    68bc:	82 0f       	add	r24, r18
    68be:	93 1f       	adc	r25, r19
    68c0:	9c 01       	movw	r18, r24
    68c2:	21 50       	subi	r18, 0x01	; 1
    68c4:	31 09       	sbc	r19, r1
    68c6:	ce 01       	movw	r24, r28
    68c8:	87 5a       	subi	r24, 0xA7	; 167
    68ca:	9f 4f       	sbci	r25, 0xFF	; 255
    68cc:	dc 01       	movw	r26, r24
    68ce:	4d 91       	ld	r20, X+
    68d0:	5c 91       	ld	r21, X
    68d2:	ce 01       	movw	r24, r28
    68d4:	89 5a       	subi	r24, 0xA9	; 169
    68d6:	9f 4f       	sbci	r25, 0xFF	; 255
    68d8:	dc 01       	movw	r26, r24
    68da:	6d 91       	ld	r22, X+
    68dc:	7c 91       	ld	r23, X
    68de:	ce 01       	movw	r24, r28
    68e0:	8d 5a       	subi	r24, 0xAD	; 173
    68e2:	9f 4f       	sbci	r25, 0xFF	; 255
    68e4:	dc 01       	movw	r26, r24
    68e6:	8d 91       	ld	r24, X+
    68e8:	9c 91       	ld	r25, X
    68ea:	8f 01       	movw	r16, r30
    68ec:	0e 94 38 28 	call	0x5070	; 0x5070 <_ZN11TFT_ILI934113setAddrWindowEiiii>

      byte mask;
      for (int i = 0; i < height; i++)
    68f0:	1a 8a       	std	Y+18, r1	; 0x12
    68f2:	19 8a       	std	Y+17, r1	; 0x11
    68f4:	29 89       	ldd	r18, Y+17	; 0x11
    68f6:	3a 89       	ldd	r19, Y+18	; 0x12
    68f8:	8b 81       	ldd	r24, Y+3	; 0x03
    68fa:	9c 81       	ldd	r25, Y+4	; 0x04
    68fc:	28 17       	cp	r18, r24
    68fe:	39 07       	cpc	r19, r25
    6900:	0c f0       	brlt	.+2      	; 0x6904 <_ZN11TFT_ILI93418drawCharEjiii+0xd2a>
    6902:	ac c0       	rjmp	.+344    	; 0x6a5c <_ZN11TFT_ILI93418drawCharEjiii+0xe82>
      {
        for (int k = 0; k < w; k++)
    6904:	1c 8a       	std	Y+20, r1	; 0x14
    6906:	1b 8a       	std	Y+19, r1	; 0x13
    6908:	2b 89       	ldd	r18, Y+19	; 0x13
    690a:	3c 89       	ldd	r19, Y+20	; 0x14
    690c:	8f 81       	ldd	r24, Y+7	; 0x07
    690e:	98 85       	ldd	r25, Y+8	; 0x08
    6910:	28 17       	cp	r18, r24
    6912:	39 07       	cpc	r19, r25
    6914:	0c f0       	brlt	.+2      	; 0x6918 <_ZN11TFT_ILI93418drawCharEjiii+0xd3e>
    6916:	8b c0       	rjmp	.+278    	; 0x6a2e <_ZN11TFT_ILI93418drawCharEjiii+0xe54>
        {
          line = pgm_read_byte(flash_address + w * i + k);
    6918:	2f 81       	ldd	r18, Y+7	; 0x07
    691a:	38 85       	ldd	r19, Y+8	; 0x08
    691c:	89 89       	ldd	r24, Y+17	; 0x11
    691e:	9a 89       	ldd	r25, Y+18	; 0x12
    6920:	28 9f       	mul	r18, r24
    6922:	a0 01       	movw	r20, r0
    6924:	29 9f       	mul	r18, r25
    6926:	50 0d       	add	r21, r0
    6928:	38 9f       	mul	r19, r24
    692a:	50 0d       	add	r21, r0
    692c:	11 24       	eor	r1, r1
    692e:	9a 01       	movw	r18, r20
    6930:	8d 81       	ldd	r24, Y+5	; 0x05
    6932:	9e 81       	ldd	r25, Y+6	; 0x06
    6934:	28 0f       	add	r18, r24
    6936:	39 1f       	adc	r19, r25
    6938:	8b 89       	ldd	r24, Y+19	; 0x13
    693a:	9c 89       	ldd	r25, Y+20	; 0x14
    693c:	82 0f       	add	r24, r18
    693e:	93 1f       	adc	r25, r19
    6940:	9c af       	std	Y+60, r25	; 0x3c
    6942:	8b af       	std	Y+59, r24	; 0x3b
    6944:	8b ad       	ldd	r24, Y+59	; 0x3b
    6946:	9c ad       	ldd	r25, Y+60	; 0x3c
    6948:	fc 01       	movw	r30, r24
    694a:	84 91       	lpm	r24, Z
    694c:	8d af       	std	Y+61, r24	; 0x3d
    694e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6950:	8b 87       	std	Y+11, r24	; 0x0b
          pX = x + k * 8;
    6952:	8b 89       	ldd	r24, Y+19	; 0x13
    6954:	9c 89       	ldd	r25, Y+20	; 0x14
    6956:	9c 01       	movw	r18, r24
    6958:	22 0f       	add	r18, r18
    695a:	33 1f       	adc	r19, r19
    695c:	22 0f       	add	r18, r18
    695e:	33 1f       	adc	r19, r19
    6960:	22 0f       	add	r18, r18
    6962:	33 1f       	adc	r19, r19
    6964:	ce 01       	movw	r24, r28
    6966:	89 5a       	subi	r24, 0xA9	; 169
    6968:	9f 4f       	sbci	r25, 0xFF	; 255
    696a:	dc 01       	movw	r26, r24
    696c:	8d 91       	ld	r24, X+
    696e:	9c 91       	ld	r25, X
    6970:	82 0f       	add	r24, r18
    6972:	93 1f       	adc	r25, r19
    6974:	9e ab       	std	Y+54, r25	; 0x36
    6976:	8d ab       	std	Y+53, r24	; 0x35
          mask = 0x80;
    6978:	80 e8       	ldi	r24, 0x80	; 128
    697a:	88 8b       	std	Y+16, r24	; 0x10
          while (mask) {
    697c:	88 89       	ldd	r24, Y+16	; 0x10
    697e:	88 23       	and	r24, r24
    6980:	09 f4       	brne	.+2      	; 0x6984 <_ZN11TFT_ILI93418drawCharEjiii+0xdaa>
    6982:	4f c0       	rjmp	.+158    	; 0x6a22 <_ZN11TFT_ILI93418drawCharEjiii+0xe48>
            if (line & mask) {
    6984:	9b 85       	ldd	r25, Y+11	; 0x0b
    6986:	88 89       	ldd	r24, Y+16	; 0x10
    6988:	89 23       	and	r24, r25
    698a:	88 23       	and	r24, r24
    698c:	11 f1       	breq	.+68     	; 0x69d2 <_ZN11TFT_ILI93418drawCharEjiii+0xdf8>
              while (!(SPSR & _BV(SPIF)));
    698e:	8d e4       	ldi	r24, 0x4D	; 77
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	fc 01       	movw	r30, r24
    6994:	80 81       	ld	r24, Z
    6996:	80 95       	com	r24
    6998:	88 1f       	adc	r24, r24
    699a:	88 27       	eor	r24, r24
    699c:	88 1f       	adc	r24, r24
    699e:	88 23       	and	r24, r24
    69a0:	09 f0       	breq	.+2      	; 0x69a4 <_ZN11TFT_ILI93418drawCharEjiii+0xdca>
    69a2:	f5 cf       	rjmp	.-22     	; 0x698e <_ZN11TFT_ILI93418drawCharEjiii+0xdb4>
              SPDR = th; asm volatile( "nop\n\t" ::);
    69a4:	8e e4       	ldi	r24, 0x4E	; 78
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	28 ad       	ldd	r18, Y+56	; 0x38
    69aa:	dc 01       	movw	r26, r24
    69ac:	2c 93       	st	X, r18
    69ae:	00 00       	nop
              while (!(SPSR & _BV(SPIF)));
    69b0:	8d e4       	ldi	r24, 0x4D	; 77
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	fc 01       	movw	r30, r24
    69b6:	80 81       	ld	r24, Z
    69b8:	80 95       	com	r24
    69ba:	88 1f       	adc	r24, r24
    69bc:	88 27       	eor	r24, r24
    69be:	88 1f       	adc	r24, r24
    69c0:	88 23       	and	r24, r24
    69c2:	09 f0       	breq	.+2      	; 0x69c6 <_ZN11TFT_ILI93418drawCharEjiii+0xdec>
    69c4:	f5 cf       	rjmp	.-22     	; 0x69b0 <_ZN11TFT_ILI93418drawCharEjiii+0xdd6>
              SPDR = tl;
    69c6:	8e e4       	ldi	r24, 0x4E	; 78
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	2f a9       	ldd	r18, Y+55	; 0x37
    69cc:	dc 01       	movw	r26, r24
    69ce:	2c 93       	st	X, r18
    69d0:	21 c0       	rjmp	.+66     	; 0x6a14 <_ZN11TFT_ILI93418drawCharEjiii+0xe3a>
            }
            else {
              while (!(SPSR & _BV(SPIF)));
    69d2:	8d e4       	ldi	r24, 0x4D	; 77
    69d4:	90 e0       	ldi	r25, 0x00	; 0
    69d6:	fc 01       	movw	r30, r24
    69d8:	80 81       	ld	r24, Z
    69da:	80 95       	com	r24
    69dc:	88 1f       	adc	r24, r24
    69de:	88 27       	eor	r24, r24
    69e0:	88 1f       	adc	r24, r24
    69e2:	88 23       	and	r24, r24
    69e4:	09 f0       	breq	.+2      	; 0x69e8 <_ZN11TFT_ILI93418drawCharEjiii+0xe0e>
    69e6:	f5 cf       	rjmp	.-22     	; 0x69d2 <_ZN11TFT_ILI93418drawCharEjiii+0xdf8>
              SPDR = bh; asm volatile( "nop\n\t" ::);
    69e8:	8e e4       	ldi	r24, 0x4E	; 78
    69ea:	90 e0       	ldi	r25, 0x00	; 0
    69ec:	2a ad       	ldd	r18, Y+58	; 0x3a
    69ee:	dc 01       	movw	r26, r24
    69f0:	2c 93       	st	X, r18
    69f2:	00 00       	nop
              while (!(SPSR & _BV(SPIF)));
    69f4:	8d e4       	ldi	r24, 0x4D	; 77
    69f6:	90 e0       	ldi	r25, 0x00	; 0
    69f8:	fc 01       	movw	r30, r24
    69fa:	80 81       	ld	r24, Z
    69fc:	80 95       	com	r24
    69fe:	88 1f       	adc	r24, r24
    6a00:	88 27       	eor	r24, r24
    6a02:	88 1f       	adc	r24, r24
    6a04:	88 23       	and	r24, r24
    6a06:	09 f0       	breq	.+2      	; 0x6a0a <_ZN11TFT_ILI93418drawCharEjiii+0xe30>
    6a08:	f5 cf       	rjmp	.-22     	; 0x69f4 <_ZN11TFT_ILI93418drawCharEjiii+0xe1a>
              SPDR = bl;
    6a0a:	8e e4       	ldi	r24, 0x4E	; 78
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	29 ad       	ldd	r18, Y+57	; 0x39
    6a10:	dc 01       	movw	r26, r24
    6a12:	2c 93       	st	X, r18
            }
            mask = mask >> 1;
    6a14:	88 89       	ldd	r24, Y+16	; 0x10
    6a16:	88 2f       	mov	r24, r24
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	95 95       	asr	r25
    6a1c:	87 95       	ror	r24
    6a1e:	88 8b       	std	Y+16, r24	; 0x10
        for (int k = 0; k < w; k++)
        {
          line = pgm_read_byte(flash_address + w * i + k);
          pX = x + k * 8;
          mask = 0x80;
          while (mask) {
    6a20:	ad cf       	rjmp	.-166    	; 0x697c <_ZN11TFT_ILI93418drawCharEjiii+0xda2>
      setAddrWindow(x, y, (x + w * 8) - 1, y + height - 1);

      byte mask;
      for (int i = 0; i < height; i++)
      {
        for (int k = 0; k < w; k++)
    6a22:	8b 89       	ldd	r24, Y+19	; 0x13
    6a24:	9c 89       	ldd	r25, Y+20	; 0x14
    6a26:	01 96       	adiw	r24, 0x01	; 1
    6a28:	9c 8b       	std	Y+20, r25	; 0x14
    6a2a:	8b 8b       	std	Y+19, r24	; 0x13
    6a2c:	6d cf       	rjmp	.-294    	; 0x6908 <_ZN11TFT_ILI93418drawCharEjiii+0xd2e>
              SPDR = bl;
            }
            mask = mask >> 1;
          }
        }
        pY += textsize;
    6a2e:	ce 01       	movw	r24, r28
    6a30:	8d 5a       	subi	r24, 0xAD	; 173
    6a32:	9f 4f       	sbci	r25, 0xFF	; 255
    6a34:	fc 01       	movw	r30, r24
    6a36:	80 81       	ld	r24, Z
    6a38:	91 81       	ldd	r25, Z+1	; 0x01
    6a3a:	dc 01       	movw	r26, r24
    6a3c:	91 96       	adiw	r26, 0x21	; 33
    6a3e:	8c 91       	ld	r24, X
    6a40:	88 2f       	mov	r24, r24
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	29 85       	ldd	r18, Y+9	; 0x09
    6a46:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a48:	82 0f       	add	r24, r18
    6a4a:	93 1f       	adc	r25, r19
    6a4c:	9a 87       	std	Y+10, r25	; 0x0a
    6a4e:	89 87       	std	Y+9, r24	; 0x09
    {
      spi_begin();
      setAddrWindow(x, y, (x + w * 8) - 1, y + height - 1);

      byte mask;
      for (int i = 0; i < height; i++)
    6a50:	89 89       	ldd	r24, Y+17	; 0x11
    6a52:	9a 89       	ldd	r25, Y+18	; 0x12
    6a54:	01 96       	adiw	r24, 0x01	; 1
    6a56:	9a 8b       	std	Y+18, r25	; 0x12
    6a58:	89 8b       	std	Y+17, r24	; 0x11
    6a5a:	4c cf       	rjmp	.-360    	; 0x68f4 <_ZN11TFT_ILI93418drawCharEjiii+0xd1a>
            mask = mask >> 1;
          }
        }
        pY += textsize;
      }
      while (!(SPSR & _BV(SPIF)));
    6a5c:	8d e4       	ldi	r24, 0x4D	; 77
    6a5e:	90 e0       	ldi	r25, 0x00	; 0
    6a60:	fc 01       	movw	r30, r24
    6a62:	80 81       	ld	r24, Z
    6a64:	80 95       	com	r24
    6a66:	88 1f       	adc	r24, r24
    6a68:	88 27       	eor	r24, r24
    6a6a:	88 1f       	adc	r24, r24
    6a6c:	88 23       	and	r24, r24
    6a6e:	09 f0       	breq	.+2      	; 0x6a72 <_ZN11TFT_ILI93418drawCharEjiii+0xe98>
    6a70:	f5 cf       	rjmp	.-22     	; 0x6a5c <_ZN11TFT_ILI93418drawCharEjiii+0xe82>
	typedef uint8_t port_t;
	 
	inline static void setOutput() { _DDR::r() |= _MASK; }
	inline static void setInput() { _DDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PORT::r() |= _MASK; }
    6a72:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    6a76:	dc 01       	movw	r26, r24
    6a78:	2c 91       	ld	r18, X
    6a7a:	24 60       	ori	r18, 0x04	; 4
    6a7c:	fc 01       	movw	r30, r24
    6a7e:	20 83       	st	Z, r18
    6a80:	92 c3       	rjmp	.+1828   	; 0x71a6 <_ZN11TFT_ILI93418drawCharEjiii+0x15cc>

#ifdef LOAD_RLE  //674 bytes of code
  // Font is not 2 and hence is RLE encoded
  {
    spi_begin();
    SPDR = 0; // Dummy write to ensure SPIF flag gets set for first check in while() loop
    6a82:	8e e4       	ldi	r24, 0x4E	; 78
    6a84:	90 e0       	ldi	r25, 0x00	; 0
    6a86:	dc 01       	movw	r26, r24
    6a88:	1c 92       	st	X, r1
    w *= height; // Now w is total number of pixels in the character
    6a8a:	4f 81       	ldd	r20, Y+7	; 0x07
    6a8c:	58 85       	ldd	r21, Y+8	; 0x08
    6a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    6a90:	3c 81       	ldd	r19, Y+4	; 0x04
    6a92:	42 9f       	mul	r20, r18
    6a94:	c0 01       	movw	r24, r0
    6a96:	43 9f       	mul	r20, r19
    6a98:	90 0d       	add	r25, r0
    6a9a:	52 9f       	mul	r21, r18
    6a9c:	90 0d       	add	r25, r0
    6a9e:	11 24       	eor	r1, r1
    6aa0:	98 87       	std	Y+8, r25	; 0x08
    6aa2:	8f 83       	std	Y+7, r24	; 0x07
    if ((textsize != 1) || (textcolor == textbgcolor)) {
    6aa4:	ce 01       	movw	r24, r28
    6aa6:	8d 5a       	subi	r24, 0xAD	; 173
    6aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    6aaa:	fc 01       	movw	r30, r24
    6aac:	80 81       	ld	r24, Z
    6aae:	91 81       	ldd	r25, Z+1	; 0x01
    6ab0:	dc 01       	movw	r26, r24
    6ab2:	91 96       	adiw	r26, 0x21	; 33
    6ab4:	8c 91       	ld	r24, X
    6ab6:	81 30       	cpi	r24, 0x01	; 1
    6ab8:	d1 f4       	brne	.+52     	; 0x6aee <_ZN11TFT_ILI93418drawCharEjiii+0xf14>
    6aba:	ce 01       	movw	r24, r28
    6abc:	8d 5a       	subi	r24, 0xAD	; 173
    6abe:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac0:	fc 01       	movw	r30, r24
    6ac2:	80 81       	ld	r24, Z
    6ac4:	91 81       	ldd	r25, Z+1	; 0x01
    6ac6:	dc 01       	movw	r26, r24
    6ac8:	56 96       	adiw	r26, 0x16	; 22
    6aca:	2d 91       	ld	r18, X+
    6acc:	3c 91       	ld	r19, X
    6ace:	57 97       	sbiw	r26, 0x17	; 23
    6ad0:	ce 01       	movw	r24, r28
    6ad2:	8d 5a       	subi	r24, 0xAD	; 173
    6ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad6:	fc 01       	movw	r30, r24
    6ad8:	80 81       	ld	r24, Z
    6ada:	91 81       	ldd	r25, Z+1	; 0x01
    6adc:	dc 01       	movw	r26, r24
    6ade:	58 96       	adiw	r26, 0x18	; 24
    6ae0:	8d 91       	ld	r24, X+
    6ae2:	9c 91       	ld	r25, X
    6ae4:	59 97       	sbiw	r26, 0x19	; 25
    6ae6:	28 17       	cp	r18, r24
    6ae8:	39 07       	cpc	r19, r25
    6aea:	09 f0       	breq	.+2      	; 0x6aee <_ZN11TFT_ILI93418drawCharEjiii+0xf14>
    6aec:	41 c2       	rjmp	.+1154   	; 0x6f70 <_ZN11TFT_ILI93418drawCharEjiii+0x1396>
      if (textcolor != textbgcolor) fillRect(x, pY, width * textsize, textsize * height, textbgcolor);
    6aee:	ce 01       	movw	r24, r28
    6af0:	8d 5a       	subi	r24, 0xAD	; 173
    6af2:	9f 4f       	sbci	r25, 0xFF	; 255
    6af4:	fc 01       	movw	r30, r24
    6af6:	80 81       	ld	r24, Z
    6af8:	91 81       	ldd	r25, Z+1	; 0x01
    6afa:	dc 01       	movw	r26, r24
    6afc:	56 96       	adiw	r26, 0x16	; 22
    6afe:	2d 91       	ld	r18, X+
    6b00:	3c 91       	ld	r19, X
    6b02:	57 97       	sbiw	r26, 0x17	; 23
    6b04:	ce 01       	movw	r24, r28
    6b06:	8d 5a       	subi	r24, 0xAD	; 173
    6b08:	9f 4f       	sbci	r25, 0xFF	; 255
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	80 81       	ld	r24, Z
    6b0e:	91 81       	ldd	r25, Z+1	; 0x01
    6b10:	dc 01       	movw	r26, r24
    6b12:	58 96       	adiw	r26, 0x18	; 24
    6b14:	8d 91       	ld	r24, X+
    6b16:	9c 91       	ld	r25, X
    6b18:	59 97       	sbiw	r26, 0x19	; 25
    6b1a:	28 17       	cp	r18, r24
    6b1c:	39 07       	cpc	r19, r25
    6b1e:	09 f4       	brne	.+2      	; 0x6b22 <_ZN11TFT_ILI93418drawCharEjiii+0xf48>
    6b20:	4c c0       	rjmp	.+152    	; 0x6bba <_ZN11TFT_ILI93418drawCharEjiii+0xfe0>
    6b22:	ce 01       	movw	r24, r28
    6b24:	8d 5a       	subi	r24, 0xAD	; 173
    6b26:	9f 4f       	sbci	r25, 0xFF	; 255
    6b28:	fc 01       	movw	r30, r24
    6b2a:	80 81       	ld	r24, Z
    6b2c:	91 81       	ldd	r25, Z+1	; 0x01
    6b2e:	dc 01       	movw	r26, r24
    6b30:	58 96       	adiw	r26, 0x18	; 24
    6b32:	0d 91       	ld	r16, X+
    6b34:	1c 91       	ld	r17, X
    6b36:	59 97       	sbiw	r26, 0x19	; 25
    6b38:	ce 01       	movw	r24, r28
    6b3a:	8d 5a       	subi	r24, 0xAD	; 173
    6b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b3e:	fc 01       	movw	r30, r24
    6b40:	80 81       	ld	r24, Z
    6b42:	91 81       	ldd	r25, Z+1	; 0x01
    6b44:	dc 01       	movw	r26, r24
    6b46:	91 96       	adiw	r26, 0x21	; 33
    6b48:	8c 91       	ld	r24, X
    6b4a:	28 2f       	mov	r18, r24
    6b4c:	30 e0       	ldi	r19, 0x00	; 0
    6b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b50:	9c 81       	ldd	r25, Y+4	; 0x04
    6b52:	28 9f       	mul	r18, r24
    6b54:	d0 01       	movw	r26, r0
    6b56:	29 9f       	mul	r18, r25
    6b58:	b0 0d       	add	r27, r0
    6b5a:	38 9f       	mul	r19, r24
    6b5c:	b0 0d       	add	r27, r0
    6b5e:	11 24       	eor	r1, r1
    6b60:	ce 01       	movw	r24, r28
    6b62:	8d 5a       	subi	r24, 0xAD	; 173
    6b64:	9f 4f       	sbci	r25, 0xFF	; 255
    6b66:	fc 01       	movw	r30, r24
    6b68:	80 81       	ld	r24, Z
    6b6a:	91 81       	ldd	r25, Z+1	; 0x01
    6b6c:	fc 01       	movw	r30, r24
    6b6e:	81 a1       	ldd	r24, Z+33	; 0x21
    6b70:	28 2f       	mov	r18, r24
    6b72:	30 e0       	ldi	r19, 0x00	; 0
    6b74:	89 81       	ldd	r24, Y+1	; 0x01
    6b76:	9a 81       	ldd	r25, Y+2	; 0x02
    6b78:	28 9f       	mul	r18, r24
    6b7a:	a0 01       	movw	r20, r0
    6b7c:	29 9f       	mul	r18, r25
    6b7e:	50 0d       	add	r21, r0
    6b80:	38 9f       	mul	r19, r24
    6b82:	50 0d       	add	r21, r0
    6b84:	11 24       	eor	r1, r1
    6b86:	6f 96       	adiw	r28, 0x1f	; 31
    6b88:	5f af       	std	Y+63, r21	; 0x3f
    6b8a:	4e af       	std	Y+62, r20	; 0x3e
    6b8c:	6f 97       	sbiw	r28, 0x1f	; 31
    6b8e:	49 85       	ldd	r20, Y+9	; 0x09
    6b90:	5a 85       	ldd	r21, Y+10	; 0x0a
    6b92:	ce 01       	movw	r24, r28
    6b94:	89 5a       	subi	r24, 0xA9	; 169
    6b96:	9f 4f       	sbci	r25, 0xFF	; 255
    6b98:	fc 01       	movw	r30, r24
    6b9a:	60 81       	ld	r22, Z
    6b9c:	71 81       	ldd	r23, Z+1	; 0x01
    6b9e:	ce 01       	movw	r24, r28
    6ba0:	8d 5a       	subi	r24, 0xAD	; 173
    6ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba4:	fc 01       	movw	r30, r24
    6ba6:	80 81       	ld	r24, Z
    6ba8:	91 81       	ldd	r25, Z+1	; 0x01
    6baa:	78 01       	movw	r14, r16
    6bac:	8d 01       	movw	r16, r26
    6bae:	6f 96       	adiw	r28, 0x1f	; 31
    6bb0:	2e ad       	ldd	r18, Y+62	; 0x3e
    6bb2:	3f ad       	ldd	r19, Y+63	; 0x3f
    6bb4:	6f 97       	sbiw	r28, 0x1f	; 31
    6bb6:	0e 94 37 2b 	call	0x566e	; 0x566e <_ZN11TFT_ILI93418fillRectEiiiij>
      int px = 0, py = pY; // To hold character block start and end column and row values
    6bba:	1e 8a       	std	Y+22, r1	; 0x16
    6bbc:	1d 8a       	std	Y+21, r1	; 0x15
    6bbe:	89 85       	ldd	r24, Y+9	; 0x09
    6bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bc2:	98 8f       	std	Y+24, r25	; 0x18
    6bc4:	8f 8b       	std	Y+23, r24	; 0x17
      int pc = 0; // Pixel count
    6bc6:	1a 8e       	std	Y+26, r1	; 0x1a
    6bc8:	19 8e       	std	Y+25, r1	; 0x19
      byte np = textsize * textsize; // Number of pixels in a drawn pixel
    6bca:	ce 01       	movw	r24, r28
    6bcc:	8d 5a       	subi	r24, 0xAD	; 173
    6bce:	9f 4f       	sbci	r25, 0xFF	; 255
    6bd0:	dc 01       	movw	r26, r24
    6bd2:	8d 91       	ld	r24, X+
    6bd4:	9c 91       	ld	r25, X
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	31 a1       	ldd	r19, Z+33	; 0x21
    6bda:	ce 01       	movw	r24, r28
    6bdc:	8d 5a       	subi	r24, 0xAD	; 173
    6bde:	9f 4f       	sbci	r25, 0xFF	; 255
    6be0:	dc 01       	movw	r26, r24
    6be2:	8d 91       	ld	r24, X+
    6be4:	9c 91       	ld	r25, X
    6be6:	fc 01       	movw	r30, r24
    6be8:	21 a1       	ldd	r18, Z+33	; 0x21
    6bea:	ce 01       	movw	r24, r28
    6bec:	8a 5b       	subi	r24, 0xBA	; 186
    6bee:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf0:	32 9f       	mul	r19, r18
    6bf2:	20 2d       	mov	r18, r0
    6bf4:	11 24       	eor	r1, r1
    6bf6:	dc 01       	movw	r26, r24
    6bf8:	2c 93       	st	X, r18

      byte tnp = 0; // Temporary copy of np for while loop
    6bfa:	1b 8e       	std	Y+27, r1	; 0x1b
      byte ts = textsize - 1; // Temporary copy of textsize
    6bfc:	ce 01       	movw	r24, r28
    6bfe:	8d 5a       	subi	r24, 0xAD	; 173
    6c00:	9f 4f       	sbci	r25, 0xFF	; 255
    6c02:	fc 01       	movw	r30, r24
    6c04:	80 81       	ld	r24, Z
    6c06:	91 81       	ldd	r25, Z+1	; 0x01
    6c08:	dc 01       	movw	r26, r24
    6c0a:	91 96       	adiw	r26, 0x21	; 33
    6c0c:	2c 91       	ld	r18, X
    6c0e:	ce 01       	movw	r24, r28
    6c10:	89 5b       	subi	r24, 0xB9	; 185
    6c12:	9f 4f       	sbci	r25, 0xFF	; 255
    6c14:	21 50       	subi	r18, 0x01	; 1
    6c16:	fc 01       	movw	r30, r24
    6c18:	20 83       	st	Z, r18
      // 16 bit pixel count so maximum font size is equivalent to 180x180 pixels in area
      // w is total number of pixels to plot to fill character block
      while (pc < w)
    6c1a:	29 8d       	ldd	r18, Y+25	; 0x19
    6c1c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    6c20:	98 85       	ldd	r25, Y+8	; 0x08
    6c22:	28 17       	cp	r18, r24
    6c24:	39 07       	cpc	r19, r25
    6c26:	0c f0       	brlt	.+2      	; 0x6c2a <_ZN11TFT_ILI93418drawCharEjiii+0x1050>
    6c28:	90 c1       	rjmp	.+800    	; 0x6f4a <_ZN11TFT_ILI93418drawCharEjiii+0x1370>
      {
        line = pgm_read_byte(flash_address);
    6c2a:	ce 01       	movw	r24, r28
    6c2c:	88 5b       	subi	r24, 0xB8	; 184
    6c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c30:	2d 81       	ldd	r18, Y+5	; 0x05
    6c32:	3e 81       	ldd	r19, Y+6	; 0x06
    6c34:	dc 01       	movw	r26, r24
    6c36:	2d 93       	st	X+, r18
    6c38:	3c 93       	st	X, r19
    6c3a:	ce 01       	movw	r24, r28
    6c3c:	88 5b       	subi	r24, 0xB8	; 184
    6c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c40:	fc 01       	movw	r30, r24
    6c42:	80 81       	ld	r24, Z
    6c44:	91 81       	ldd	r25, Z+1	; 0x01
    6c46:	fc 01       	movw	r30, r24
    6c48:	24 91       	lpm	r18, Z
    6c4a:	ce 01       	movw	r24, r28
    6c4c:	86 5b       	subi	r24, 0xB6	; 182
    6c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c50:	dc 01       	movw	r26, r24
    6c52:	2c 93       	st	X, r18
    6c54:	ce 01       	movw	r24, r28
    6c56:	86 5b       	subi	r24, 0xB6	; 182
    6c58:	9f 4f       	sbci	r25, 0xFF	; 255
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	80 81       	ld	r24, Z
    6c5e:	8b 87       	std	Y+11, r24	; 0x0b
        flash_address++; // 20 bytes smaller by incrementing here
    6c60:	8d 81       	ldd	r24, Y+5	; 0x05
    6c62:	9e 81       	ldd	r25, Y+6	; 0x06
    6c64:	01 96       	adiw	r24, 0x01	; 1
    6c66:	9e 83       	std	Y+6, r25	; 0x06
    6c68:	8d 83       	std	Y+5, r24	; 0x05
        if (line & 0x80) {
    6c6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c6c:	88 23       	and	r24, r24
    6c6e:	0c f0       	brlt	.+2      	; 0x6c72 <_ZN11TFT_ILI93418drawCharEjiii+0x1098>
    6c70:	5f c1       	rjmp	.+702    	; 0x6f30 <_ZN11TFT_ILI93418drawCharEjiii+0x1356>
          line &= 0x7F;
    6c72:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c74:	8f 77       	andi	r24, 0x7F	; 127
    6c76:	8b 87       	std	Y+11, r24	; 0x0b
          line++;
    6c78:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c7a:	8f 5f       	subi	r24, 0xFF	; 255
    6c7c:	8b 87       	std	Y+11, r24	; 0x0b
          if (ts) {
    6c7e:	ce 01       	movw	r24, r28
    6c80:	89 5b       	subi	r24, 0xB9	; 185
    6c82:	9f 4f       	sbci	r25, 0xFF	; 255
    6c84:	dc 01       	movw	r26, r24
    6c86:	8c 91       	ld	r24, X
    6c88:	88 23       	and	r24, r24
    6c8a:	09 f4       	brne	.+2      	; 0x6c8e <_ZN11TFT_ILI93418drawCharEjiii+0x10b4>
    6c8c:	47 c0       	rjmp	.+142    	; 0x6d1c <_ZN11TFT_ILI93418drawCharEjiii+0x1142>
            px = x + textsize * (pc % width); // Keep these px and py calculations outside the loop as they are slow
    6c8e:	ce 01       	movw	r24, r28
    6c90:	8d 5a       	subi	r24, 0xAD	; 173
    6c92:	9f 4f       	sbci	r25, 0xFF	; 255
    6c94:	fc 01       	movw	r30, r24
    6c96:	80 81       	ld	r24, Z
    6c98:	91 81       	ldd	r25, Z+1	; 0x01
    6c9a:	dc 01       	movw	r26, r24
    6c9c:	91 96       	adiw	r26, 0x21	; 33
    6c9e:	8c 91       	ld	r24, X
    6ca0:	e8 2f       	mov	r30, r24
    6ca2:	f0 e0       	ldi	r31, 0x00	; 0
    6ca4:	89 8d       	ldd	r24, Y+25	; 0x19
    6ca6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6ca8:	29 81       	ldd	r18, Y+1	; 0x01
    6caa:	3a 81       	ldd	r19, Y+2	; 0x02
    6cac:	b9 01       	movw	r22, r18
    6cae:	0e 94 1b 61 	call	0xc236	; 0xc236 <__divmodhi4>
    6cb2:	e8 9f       	mul	r30, r24
    6cb4:	90 01       	movw	r18, r0
    6cb6:	e9 9f       	mul	r30, r25
    6cb8:	30 0d       	add	r19, r0
    6cba:	f8 9f       	mul	r31, r24
    6cbc:	30 0d       	add	r19, r0
    6cbe:	11 24       	eor	r1, r1
    6cc0:	ce 01       	movw	r24, r28
    6cc2:	89 5a       	subi	r24, 0xA9	; 169
    6cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    6cc6:	fc 01       	movw	r30, r24
    6cc8:	80 81       	ld	r24, Z
    6cca:	91 81       	ldd	r25, Z+1	; 0x01
    6ccc:	82 0f       	add	r24, r18
    6cce:	93 1f       	adc	r25, r19
    6cd0:	9e 8b       	std	Y+22, r25	; 0x16
    6cd2:	8d 8b       	std	Y+21, r24	; 0x15
            py = y + textsize * (pc / width);
    6cd4:	ce 01       	movw	r24, r28
    6cd6:	8d 5a       	subi	r24, 0xAD	; 173
    6cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cda:	dc 01       	movw	r26, r24
    6cdc:	8d 91       	ld	r24, X+
    6cde:	9c 91       	ld	r25, X
    6ce0:	fc 01       	movw	r30, r24
    6ce2:	81 a1       	ldd	r24, Z+33	; 0x21
    6ce4:	e8 2f       	mov	r30, r24
    6ce6:	f0 e0       	ldi	r31, 0x00	; 0
    6ce8:	89 8d       	ldd	r24, Y+25	; 0x19
    6cea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6cec:	29 81       	ldd	r18, Y+1	; 0x01
    6cee:	3a 81       	ldd	r19, Y+2	; 0x02
    6cf0:	b9 01       	movw	r22, r18
    6cf2:	0e 94 1b 61 	call	0xc236	; 0xc236 <__divmodhi4>
    6cf6:	cb 01       	movw	r24, r22
    6cf8:	e8 9f       	mul	r30, r24
    6cfa:	90 01       	movw	r18, r0
    6cfc:	e9 9f       	mul	r30, r25
    6cfe:	30 0d       	add	r19, r0
    6d00:	f8 9f       	mul	r31, r24
    6d02:	30 0d       	add	r19, r0
    6d04:	11 24       	eor	r1, r1
    6d06:	ce 01       	movw	r24, r28
    6d08:	87 5a       	subi	r24, 0xA7	; 167
    6d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d0c:	dc 01       	movw	r26, r24
    6d0e:	8d 91       	ld	r24, X+
    6d10:	9c 91       	ld	r25, X
    6d12:	82 0f       	add	r24, r18
    6d14:	93 1f       	adc	r25, r19
    6d16:	98 8f       	std	Y+24, r25	; 0x18
    6d18:	8f 8b       	std	Y+23, r24	; 0x17
    6d1a:	25 c0       	rjmp	.+74     	; 0x6d66 <_ZN11TFT_ILI93418drawCharEjiii+0x118c>
          }
          else {
            px = x + pc % width; // Keep these px and py calculations outside the loop as they are slow
    6d1c:	89 8d       	ldd	r24, Y+25	; 0x19
    6d1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d20:	29 81       	ldd	r18, Y+1	; 0x01
    6d22:	3a 81       	ldd	r19, Y+2	; 0x02
    6d24:	b9 01       	movw	r22, r18
    6d26:	0e 94 1b 61 	call	0xc236	; 0xc236 <__divmodhi4>
    6d2a:	9c 01       	movw	r18, r24
    6d2c:	ce 01       	movw	r24, r28
    6d2e:	89 5a       	subi	r24, 0xA9	; 169
    6d30:	9f 4f       	sbci	r25, 0xFF	; 255
    6d32:	fc 01       	movw	r30, r24
    6d34:	80 81       	ld	r24, Z
    6d36:	91 81       	ldd	r25, Z+1	; 0x01
    6d38:	82 0f       	add	r24, r18
    6d3a:	93 1f       	adc	r25, r19
    6d3c:	9e 8b       	std	Y+22, r25	; 0x16
    6d3e:	8d 8b       	std	Y+21, r24	; 0x15
            py = y + pc / width;
    6d40:	89 8d       	ldd	r24, Y+25	; 0x19
    6d42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d44:	29 81       	ldd	r18, Y+1	; 0x01
    6d46:	3a 81       	ldd	r19, Y+2	; 0x02
    6d48:	b9 01       	movw	r22, r18
    6d4a:	0e 94 1b 61 	call	0xc236	; 0xc236 <__divmodhi4>
    6d4e:	cb 01       	movw	r24, r22
    6d50:	9c 01       	movw	r18, r24
    6d52:	ce 01       	movw	r24, r28
    6d54:	87 5a       	subi	r24, 0xA7	; 167
    6d56:	9f 4f       	sbci	r25, 0xFF	; 255
    6d58:	dc 01       	movw	r26, r24
    6d5a:	8d 91       	ld	r24, X+
    6d5c:	9c 91       	ld	r25, X
    6d5e:	82 0f       	add	r24, r18
    6d60:	93 1f       	adc	r25, r19
    6d62:	98 8f       	std	Y+24, r25	; 0x18
    6d64:	8f 8b       	std	Y+23, r24	; 0x17
          }
          while (line--) { // In this case the while(line--) is faster
    6d66:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d68:	9f ef       	ldi	r25, 0xFF	; 255
    6d6a:	98 0f       	add	r25, r24
    6d6c:	9b 87       	std	Y+11, r25	; 0x0b
    6d6e:	91 e0       	ldi	r25, 0x01	; 1
    6d70:	88 23       	and	r24, r24
    6d72:	09 f4       	brne	.+2      	; 0x6d76 <_ZN11TFT_ILI93418drawCharEjiii+0x119c>
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	99 23       	and	r25, r25
    6d78:	09 f4       	brne	.+2      	; 0x6d7c <_ZN11TFT_ILI93418drawCharEjiii+0x11a2>
    6d7a:	4f cf       	rjmp	.-354    	; 0x6c1a <_ZN11TFT_ILI93418drawCharEjiii+0x1040>
            pc++; // This is faster than putting pc+=line before while() as we use up SPI wait time
    6d7c:	89 8d       	ldd	r24, Y+25	; 0x19
    6d7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d80:	01 96       	adiw	r24, 0x01	; 1
    6d82:	9a 8f       	std	Y+26, r25	; 0x1a
    6d84:	89 8f       	std	Y+25, r24	; 0x19
            while (!(SPSR & _BV(SPIF)));
    6d86:	8d e4       	ldi	r24, 0x4D	; 77
    6d88:	90 e0       	ldi	r25, 0x00	; 0
    6d8a:	fc 01       	movw	r30, r24
    6d8c:	80 81       	ld	r24, Z
    6d8e:	80 95       	com	r24
    6d90:	88 1f       	adc	r24, r24
    6d92:	88 27       	eor	r24, r24
    6d94:	88 1f       	adc	r24, r24
    6d96:	88 23       	and	r24, r24
    6d98:	09 f0       	breq	.+2      	; 0x6d9c <_ZN11TFT_ILI93418drawCharEjiii+0x11c2>
    6d9a:	f5 cf       	rjmp	.-22     	; 0x6d86 <_ZN11TFT_ILI93418drawCharEjiii+0x11ac>
            setAddrWindow(px, py, px + ts, py + ts);
    6d9c:	ce 01       	movw	r24, r28
    6d9e:	89 5b       	subi	r24, 0xB9	; 185
    6da0:	9f 4f       	sbci	r25, 0xFF	; 255
    6da2:	dc 01       	movw	r26, r24
    6da4:	8c 91       	ld	r24, X
    6da6:	28 2f       	mov	r18, r24
    6da8:	30 e0       	ldi	r19, 0x00	; 0
    6daa:	8f 89       	ldd	r24, Y+23	; 0x17
    6dac:	98 8d       	ldd	r25, Y+24	; 0x18
    6dae:	f9 01       	movw	r30, r18
    6db0:	e8 0f       	add	r30, r24
    6db2:	f9 1f       	adc	r31, r25
    6db4:	ce 01       	movw	r24, r28
    6db6:	89 5b       	subi	r24, 0xB9	; 185
    6db8:	9f 4f       	sbci	r25, 0xFF	; 255
    6dba:	dc 01       	movw	r26, r24
    6dbc:	8c 91       	ld	r24, X
    6dbe:	28 2f       	mov	r18, r24
    6dc0:	30 e0       	ldi	r19, 0x00	; 0
    6dc2:	8d 89       	ldd	r24, Y+21	; 0x15
    6dc4:	9e 89       	ldd	r25, Y+22	; 0x16
    6dc6:	28 0f       	add	r18, r24
    6dc8:	39 1f       	adc	r19, r25
    6dca:	4f 89       	ldd	r20, Y+23	; 0x17
    6dcc:	58 8d       	ldd	r21, Y+24	; 0x18
    6dce:	6d 89       	ldd	r22, Y+21	; 0x15
    6dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    6dd2:	ce 01       	movw	r24, r28
    6dd4:	8d 5a       	subi	r24, 0xAD	; 173
    6dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    6dd8:	dc 01       	movw	r26, r24
    6dda:	8d 91       	ld	r24, X+
    6ddc:	9c 91       	ld	r25, X
    6dde:	8f 01       	movw	r16, r30
    6de0:	0e 94 38 28 	call	0x5070	; 0x5070 <_ZN11TFT_ILI934113setAddrWindowEiiii>

            if (ts) {
    6de4:	ce 01       	movw	r24, r28
    6de6:	89 5b       	subi	r24, 0xB9	; 185
    6de8:	9f 4f       	sbci	r25, 0xFF	; 255
    6dea:	fc 01       	movw	r30, r24
    6dec:	80 81       	ld	r24, Z
    6dee:	88 23       	and	r24, r24
    6df0:	91 f1       	breq	.+100    	; 0x6e56 <_ZN11TFT_ILI93418drawCharEjiii+0x127c>
              tnp = np;
    6df2:	ce 01       	movw	r24, r28
    6df4:	8a 5b       	subi	r24, 0xBA	; 186
    6df6:	9f 4f       	sbci	r25, 0xFF	; 255
    6df8:	dc 01       	movw	r26, r24
    6dfa:	8c 91       	ld	r24, X
    6dfc:	8b 8f       	std	Y+27, r24	; 0x1b
              while (tnp--) {
    6dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e00:	9f ef       	ldi	r25, 0xFF	; 255
    6e02:	98 0f       	add	r25, r24
    6e04:	9b 8f       	std	Y+27, r25	; 0x1b
    6e06:	91 e0       	ldi	r25, 0x01	; 1
    6e08:	88 23       	and	r24, r24
    6e0a:	09 f4       	brne	.+2      	; 0x6e0e <_ZN11TFT_ILI93418drawCharEjiii+0x1234>
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	99 23       	and	r25, r25
    6e10:	09 f4       	brne	.+2      	; 0x6e14 <_ZN11TFT_ILI93418drawCharEjiii+0x123a>
    6e12:	41 c0       	rjmp	.+130    	; 0x6e96 <_ZN11TFT_ILI93418drawCharEjiii+0x12bc>
                while (!(SPSR & _BV(SPIF)));
    6e14:	8d e4       	ldi	r24, 0x4D	; 77
    6e16:	90 e0       	ldi	r25, 0x00	; 0
    6e18:	fc 01       	movw	r30, r24
    6e1a:	80 81       	ld	r24, Z
    6e1c:	80 95       	com	r24
    6e1e:	88 1f       	adc	r24, r24
    6e20:	88 27       	eor	r24, r24
    6e22:	88 1f       	adc	r24, r24
    6e24:	88 23       	and	r24, r24
    6e26:	09 f0       	breq	.+2      	; 0x6e2a <_ZN11TFT_ILI93418drawCharEjiii+0x1250>
    6e28:	f5 cf       	rjmp	.-22     	; 0x6e14 <_ZN11TFT_ILI93418drawCharEjiii+0x123a>
                SPDR = th;
    6e2a:	8e e4       	ldi	r24, 0x4E	; 78
    6e2c:	90 e0       	ldi	r25, 0x00	; 0
    6e2e:	28 ad       	ldd	r18, Y+56	; 0x38
    6e30:	dc 01       	movw	r26, r24
    6e32:	2c 93       	st	X, r18
                while (!(SPSR & _BV(SPIF)));
    6e34:	8d e4       	ldi	r24, 0x4D	; 77
    6e36:	90 e0       	ldi	r25, 0x00	; 0
    6e38:	fc 01       	movw	r30, r24
    6e3a:	80 81       	ld	r24, Z
    6e3c:	80 95       	com	r24
    6e3e:	88 1f       	adc	r24, r24
    6e40:	88 27       	eor	r24, r24
    6e42:	88 1f       	adc	r24, r24
    6e44:	88 23       	and	r24, r24
    6e46:	09 f0       	breq	.+2      	; 0x6e4a <_ZN11TFT_ILI93418drawCharEjiii+0x1270>
    6e48:	f5 cf       	rjmp	.-22     	; 0x6e34 <_ZN11TFT_ILI93418drawCharEjiii+0x125a>
                SPDR = tl;
    6e4a:	8e e4       	ldi	r24, 0x4E	; 78
    6e4c:	90 e0       	ldi	r25, 0x00	; 0
    6e4e:	2f a9       	ldd	r18, Y+55	; 0x37
    6e50:	dc 01       	movw	r26, r24
    6e52:	2c 93       	st	X, r18
            while (!(SPSR & _BV(SPIF)));
            setAddrWindow(px, py, px + ts, py + ts);

            if (ts) {
              tnp = np;
              while (tnp--) {
    6e54:	d4 cf       	rjmp	.-88     	; 0x6dfe <_ZN11TFT_ILI93418drawCharEjiii+0x1224>
                while (!(SPSR & _BV(SPIF)));
                SPDR = tl;
              }
            }
            else {
              while (!(SPSR & _BV(SPIF)));
    6e56:	8d e4       	ldi	r24, 0x4D	; 77
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	fc 01       	movw	r30, r24
    6e5c:	80 81       	ld	r24, Z
    6e5e:	80 95       	com	r24
    6e60:	88 1f       	adc	r24, r24
    6e62:	88 27       	eor	r24, r24
    6e64:	88 1f       	adc	r24, r24
    6e66:	88 23       	and	r24, r24
    6e68:	09 f0       	breq	.+2      	; 0x6e6c <_ZN11TFT_ILI93418drawCharEjiii+0x1292>
    6e6a:	f5 cf       	rjmp	.-22     	; 0x6e56 <_ZN11TFT_ILI93418drawCharEjiii+0x127c>
              SPDR = th;
    6e6c:	8e e4       	ldi	r24, 0x4E	; 78
    6e6e:	90 e0       	ldi	r25, 0x00	; 0
    6e70:	28 ad       	ldd	r18, Y+56	; 0x38
    6e72:	dc 01       	movw	r26, r24
    6e74:	2c 93       	st	X, r18
              while (!(SPSR & _BV(SPIF)));
    6e76:	8d e4       	ldi	r24, 0x4D	; 77
    6e78:	90 e0       	ldi	r25, 0x00	; 0
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	80 81       	ld	r24, Z
    6e7e:	80 95       	com	r24
    6e80:	88 1f       	adc	r24, r24
    6e82:	88 27       	eor	r24, r24
    6e84:	88 1f       	adc	r24, r24
    6e86:	88 23       	and	r24, r24
    6e88:	09 f0       	breq	.+2      	; 0x6e8c <_ZN11TFT_ILI93418drawCharEjiii+0x12b2>
    6e8a:	f5 cf       	rjmp	.-22     	; 0x6e76 <_ZN11TFT_ILI93418drawCharEjiii+0x129c>
              SPDR = tl;
    6e8c:	8e e4       	ldi	r24, 0x4E	; 78
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	2f a9       	ldd	r18, Y+55	; 0x37
    6e92:	dc 01       	movw	r26, r24
    6e94:	2c 93       	st	X, r18
            }
            px += textsize;
    6e96:	ce 01       	movw	r24, r28
    6e98:	8d 5a       	subi	r24, 0xAD	; 173
    6e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e9c:	fc 01       	movw	r30, r24
    6e9e:	80 81       	ld	r24, Z
    6ea0:	91 81       	ldd	r25, Z+1	; 0x01
    6ea2:	dc 01       	movw	r26, r24
    6ea4:	91 96       	adiw	r26, 0x21	; 33
    6ea6:	8c 91       	ld	r24, X
    6ea8:	88 2f       	mov	r24, r24
    6eaa:	90 e0       	ldi	r25, 0x00	; 0
    6eac:	2d 89       	ldd	r18, Y+21	; 0x15
    6eae:	3e 89       	ldd	r19, Y+22	; 0x16
    6eb0:	82 0f       	add	r24, r18
    6eb2:	93 1f       	adc	r25, r19
    6eb4:	9e 8b       	std	Y+22, r25	; 0x16
    6eb6:	8d 8b       	std	Y+21, r24	; 0x15

            if (px >= (x + width * textsize))
    6eb8:	ce 01       	movw	r24, r28
    6eba:	8d 5a       	subi	r24, 0xAD	; 173
    6ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    6ebe:	fc 01       	movw	r30, r24
    6ec0:	80 81       	ld	r24, Z
    6ec2:	91 81       	ldd	r25, Z+1	; 0x01
    6ec4:	dc 01       	movw	r26, r24
    6ec6:	91 96       	adiw	r26, 0x21	; 33
    6ec8:	8c 91       	ld	r24, X
    6eca:	48 2f       	mov	r20, r24
    6ecc:	50 e0       	ldi	r21, 0x00	; 0
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ed2:	48 9f       	mul	r20, r24
    6ed4:	90 01       	movw	r18, r0
    6ed6:	49 9f       	mul	r20, r25
    6ed8:	30 0d       	add	r19, r0
    6eda:	58 9f       	mul	r21, r24
    6edc:	30 0d       	add	r19, r0
    6ede:	11 24       	eor	r1, r1
    6ee0:	ce 01       	movw	r24, r28
    6ee2:	89 5a       	subi	r24, 0xA9	; 169
    6ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ee6:	fc 01       	movw	r30, r24
    6ee8:	80 81       	ld	r24, Z
    6eea:	91 81       	ldd	r25, Z+1	; 0x01
    6eec:	28 0f       	add	r18, r24
    6eee:	39 1f       	adc	r19, r25
    6ef0:	8d 89       	ldd	r24, Y+21	; 0x15
    6ef2:	9e 89       	ldd	r25, Y+22	; 0x16
    6ef4:	82 17       	cp	r24, r18
    6ef6:	93 07       	cpc	r25, r19
    6ef8:	0c f4       	brge	.+2      	; 0x6efc <_ZN11TFT_ILI93418drawCharEjiii+0x1322>
    6efa:	35 cf       	rjmp	.-406    	; 0x6d66 <_ZN11TFT_ILI93418drawCharEjiii+0x118c>
            {
              px = x;
    6efc:	ce 01       	movw	r24, r28
    6efe:	89 5a       	subi	r24, 0xA9	; 169
    6f00:	9f 4f       	sbci	r25, 0xFF	; 255
    6f02:	dc 01       	movw	r26, r24
    6f04:	8d 91       	ld	r24, X+
    6f06:	9c 91       	ld	r25, X
    6f08:	9e 8b       	std	Y+22, r25	; 0x16
    6f0a:	8d 8b       	std	Y+21, r24	; 0x15
              py += textsize;
    6f0c:	ce 01       	movw	r24, r28
    6f0e:	8d 5a       	subi	r24, 0xAD	; 173
    6f10:	9f 4f       	sbci	r25, 0xFF	; 255
    6f12:	fc 01       	movw	r30, r24
    6f14:	80 81       	ld	r24, Z
    6f16:	91 81       	ldd	r25, Z+1	; 0x01
    6f18:	dc 01       	movw	r26, r24
    6f1a:	91 96       	adiw	r26, 0x21	; 33
    6f1c:	8c 91       	ld	r24, X
    6f1e:	88 2f       	mov	r24, r24
    6f20:	90 e0       	ldi	r25, 0x00	; 0
    6f22:	2f 89       	ldd	r18, Y+23	; 0x17
    6f24:	38 8d       	ldd	r19, Y+24	; 0x18
    6f26:	82 0f       	add	r24, r18
    6f28:	93 1f       	adc	r25, r19
    6f2a:	98 8f       	std	Y+24, r25	; 0x18
    6f2c:	8f 8b       	std	Y+23, r24	; 0x17
          }
          else {
            px = x + pc % width; // Keep these px and py calculations outside the loop as they are slow
            py = y + pc / width;
          }
          while (line--) { // In this case the while(line--) is faster
    6f2e:	1b cf       	rjmp	.-458    	; 0x6d66 <_ZN11TFT_ILI93418drawCharEjiii+0x118c>
              py += textsize;
            }
          }
        }
        else {
          line++;
    6f30:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f32:	8f 5f       	subi	r24, 0xFF	; 255
    6f34:	8b 87       	std	Y+11, r24	; 0x0b
          pc += line;
    6f36:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f38:	88 2f       	mov	r24, r24
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	29 8d       	ldd	r18, Y+25	; 0x19
    6f3e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6f40:	82 0f       	add	r24, r18
    6f42:	93 1f       	adc	r25, r19
    6f44:	9a 8f       	std	Y+26, r25	; 0x1a
    6f46:	89 8f       	std	Y+25, r24	; 0x19

      byte tnp = 0; // Temporary copy of np for while loop
      byte ts = textsize - 1; // Temporary copy of textsize
      // 16 bit pixel count so maximum font size is equivalent to 180x180 pixels in area
      // w is total number of pixels to plot to fill character block
      while (pc < w)
    6f48:	68 ce       	rjmp	.-816    	; 0x6c1a <_ZN11TFT_ILI93418drawCharEjiii+0x1040>
        else {
          line++;
          pc += line;
        }
      }
      while (!(SPSR & _BV(SPIF)));
    6f4a:	8d e4       	ldi	r24, 0x4D	; 77
    6f4c:	90 e0       	ldi	r25, 0x00	; 0
    6f4e:	fc 01       	movw	r30, r24
    6f50:	80 81       	ld	r24, Z
    6f52:	80 95       	com	r24
    6f54:	88 1f       	adc	r24, r24
    6f56:	88 27       	eor	r24, r24
    6f58:	88 1f       	adc	r24, r24
    6f5a:	88 23       	and	r24, r24
    6f5c:	09 f0       	breq	.+2      	; 0x6f60 <_ZN11TFT_ILI93418drawCharEjiii+0x1386>
    6f5e:	f5 cf       	rjmp	.-22     	; 0x6f4a <_ZN11TFT_ILI93418drawCharEjiii+0x1370>
    6f60:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    6f64:	dc 01       	movw	r26, r24
    6f66:	2c 91       	ld	r18, X
    6f68:	24 60       	ori	r18, 0x04	; 4
    6f6a:	fc 01       	movw	r30, r24
    6f6c:	20 83       	st	Z, r18
      TFT_CS_H;
      spi_end();
    6f6e:	1b c1       	rjmp	.+566    	; 0x71a6 <_ZN11TFT_ILI93418drawCharEjiii+0x15cc>
    }
    else // Text colour != background && textsize = 1
         // so use faster drawing of characters and background using block write
    {
      spi_begin();
      setAddrWindow(x, y, x + width - 1, y + height - 1);
    6f70:	ce 01       	movw	r24, r28
    6f72:	87 5a       	subi	r24, 0xA7	; 167
    6f74:	9f 4f       	sbci	r25, 0xFF	; 255
    6f76:	dc 01       	movw	r26, r24
    6f78:	2d 91       	ld	r18, X+
    6f7a:	3c 91       	ld	r19, X
    6f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    6f80:	82 0f       	add	r24, r18
    6f82:	93 1f       	adc	r25, r19
    6f84:	fc 01       	movw	r30, r24
    6f86:	31 97       	sbiw	r30, 0x01	; 1
    6f88:	ce 01       	movw	r24, r28
    6f8a:	89 5a       	subi	r24, 0xA9	; 169
    6f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    6f8e:	dc 01       	movw	r26, r24
    6f90:	2d 91       	ld	r18, X+
    6f92:	3c 91       	ld	r19, X
    6f94:	89 81       	ldd	r24, Y+1	; 0x01
    6f96:	9a 81       	ldd	r25, Y+2	; 0x02
    6f98:	82 0f       	add	r24, r18
    6f9a:	93 1f       	adc	r25, r19
    6f9c:	9c 01       	movw	r18, r24
    6f9e:	21 50       	subi	r18, 0x01	; 1
    6fa0:	31 09       	sbc	r19, r1
    6fa2:	ce 01       	movw	r24, r28
    6fa4:	87 5a       	subi	r24, 0xA7	; 167
    6fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    6fa8:	dc 01       	movw	r26, r24
    6faa:	4d 91       	ld	r20, X+
    6fac:	5c 91       	ld	r21, X
    6fae:	ce 01       	movw	r24, r28
    6fb0:	89 5a       	subi	r24, 0xA9	; 169
    6fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    6fb4:	dc 01       	movw	r26, r24
    6fb6:	6d 91       	ld	r22, X+
    6fb8:	7c 91       	ld	r23, X
    6fba:	ce 01       	movw	r24, r28
    6fbc:	8d 5a       	subi	r24, 0xAD	; 173
    6fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc0:	dc 01       	movw	r26, r24
    6fc2:	8d 91       	ld	r24, X+
    6fc4:	9c 91       	ld	r25, X
    6fc6:	8f 01       	movw	r16, r30
    6fc8:	0e 94 38 28 	call	0x5070	; 0x5070 <_ZN11TFT_ILI934113setAddrWindowEiiii>

      // Maximum font size is equivalent to 180x180 pixels in area
      while (w > 0)
    6fcc:	8f 81       	ldd	r24, Y+7	; 0x07
    6fce:	98 85       	ldd	r25, Y+8	; 0x08
    6fd0:	18 16       	cp	r1, r24
    6fd2:	19 06       	cpc	r1, r25
    6fd4:	0c f0       	brlt	.+2      	; 0x6fd8 <_ZN11TFT_ILI93418drawCharEjiii+0x13fe>
    6fd6:	d3 c0       	rjmp	.+422    	; 0x717e <_ZN11TFT_ILI93418drawCharEjiii+0x15a4>
      {
        line = pgm_read_byte(flash_address++); // 8 bytes smaller when incrementing here
    6fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    6fda:	9e 81       	ldd	r25, Y+6	; 0x06
    6fdc:	9c 01       	movw	r18, r24
    6fde:	2f 5f       	subi	r18, 0xFF	; 255
    6fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe2:	3e 83       	std	Y+6, r19	; 0x06
    6fe4:	2d 83       	std	Y+5, r18	; 0x05
    6fe6:	9e 01       	movw	r18, r28
    6fe8:	2f 5b       	subi	r18, 0xBF	; 191
    6fea:	3f 4f       	sbci	r19, 0xFF	; 255
    6fec:	f9 01       	movw	r30, r18
    6fee:	91 83       	std	Z+1, r25	; 0x01
    6ff0:	80 83       	st	Z, r24
    6ff2:	ce 01       	movw	r24, r28
    6ff4:	8f 5b       	subi	r24, 0xBF	; 191
    6ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ff8:	dc 01       	movw	r26, r24
    6ffa:	8d 91       	ld	r24, X+
    6ffc:	9c 91       	ld	r25, X
    6ffe:	fc 01       	movw	r30, r24
    7000:	24 91       	lpm	r18, Z
    7002:	ce 01       	movw	r24, r28
    7004:	8d 5b       	subi	r24, 0xBD	; 189
    7006:	9f 4f       	sbci	r25, 0xFF	; 255
    7008:	dc 01       	movw	r26, r24
    700a:	2c 93       	st	X, r18
    700c:	ce 01       	movw	r24, r28
    700e:	8d 5b       	subi	r24, 0xBD	; 189
    7010:	9f 4f       	sbci	r25, 0xFF	; 255
    7012:	fc 01       	movw	r30, r24
    7014:	80 81       	ld	r24, Z
    7016:	8b 87       	std	Y+11, r24	; 0x0b
        if (line & 0x80) {
    7018:	8b 85       	ldd	r24, Y+11	; 0x0b
    701a:	88 23       	and	r24, r24
    701c:	0c f0       	brlt	.+2      	; 0x7020 <_ZN11TFT_ILI93418drawCharEjiii+0x1446>
    701e:	59 c0       	rjmp	.+178    	; 0x70d2 <_ZN11TFT_ILI93418drawCharEjiii+0x14f8>
          line &= 0x7F;
    7020:	8b 85       	ldd	r24, Y+11	; 0x0b
    7022:	8f 77       	andi	r24, 0x7F	; 127
    7024:	8b 87       	std	Y+11, r24	; 0x0b
          line++; w -= line;
    7026:	8b 85       	ldd	r24, Y+11	; 0x0b
    7028:	8f 5f       	subi	r24, 0xFF	; 255
    702a:	8b 87       	std	Y+11, r24	; 0x0b
    702c:	8b 85       	ldd	r24, Y+11	; 0x0b
    702e:	88 2f       	mov	r24, r24
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	2f 81       	ldd	r18, Y+7	; 0x07
    7034:	38 85       	ldd	r19, Y+8	; 0x08
    7036:	a9 01       	movw	r20, r18
    7038:	48 1b       	sub	r20, r24
    703a:	59 0b       	sbc	r21, r25
    703c:	ca 01       	movw	r24, r20
    703e:	98 87       	std	Y+8, r25	; 0x08
    7040:	8f 83       	std	Y+7, r24	; 0x07
          spiWrite16(textcolor, line);
    7042:	8b 85       	ldd	r24, Y+11	; 0x0b
    7044:	28 2f       	mov	r18, r24
    7046:	30 e0       	ldi	r19, 0x00	; 0
    7048:	ce 01       	movw	r24, r28
    704a:	8d 5a       	subi	r24, 0xAD	; 173
    704c:	9f 4f       	sbci	r25, 0xFF	; 255
    704e:	dc 01       	movw	r26, r24
    7050:	8d 91       	ld	r24, X+
    7052:	9c 91       	ld	r25, X
    7054:	fc 01       	movw	r30, r24
    7056:	46 89       	ldd	r20, Z+22	; 0x16
    7058:	57 89       	ldd	r21, Z+23	; 0x17
    705a:	ce 01       	movw	r24, r28
    705c:	85 5b       	subi	r24, 0xB5	; 181
    705e:	9f 4f       	sbci	r25, 0xFF	; 255
    7060:	dc 01       	movw	r26, r24
    7062:	4d 93       	st	X+, r20
    7064:	5c 93       	st	X, r21
    7066:	ce 01       	movw	r24, r28
    7068:	83 5b       	subi	r24, 0xB3	; 179
    706a:	9f 4f       	sbci	r25, 0xFF	; 255
    706c:	fc 01       	movw	r30, r24
    706e:	31 83       	std	Z+1, r19	; 0x01
    7070:	20 83       	st	Z, r18
    "2:\n"

    : [temp] "=d" (temp), [count] "+w" (count)
    : [spi] "i" (_SFR_IO_ADDR(SPDR)), [lo] "r" ((uint8_t)data), [hi] "r" ((uint8_t)(data>>8))
    :
  );
    7072:	ce 01       	movw	r24, r28
    7074:	85 5b       	subi	r24, 0xB5	; 181
    7076:	9f 4f       	sbci	r25, 0xFF	; 255
    7078:	dc 01       	movw	r26, r24
    707a:	2c 91       	ld	r18, X
    "	brne	1b         \n" // 17 if != 0 then loop

    "2:\n"

    : [temp] "=d" (temp), [count] "+w" (count)
    : [spi] "i" (_SFR_IO_ADDR(SPDR)), [lo] "r" ((uint8_t)data), [hi] "r" ((uint8_t)(data>>8))
    707c:	ce 01       	movw	r24, r28
    707e:	85 5b       	subi	r24, 0xB5	; 181
    7080:	9f 4f       	sbci	r25, 0xFF	; 255
    7082:	fc 01       	movw	r30, r24
    7084:	80 81       	ld	r24, Z
    7086:	91 81       	ldd	r25, Z+1	; 0x01
    7088:	89 2f       	mov	r24, r25
    708a:	99 27       	eor	r25, r25
    :
  );
    708c:	38 2f       	mov	r19, r24
    708e:	ce 01       	movw	r24, r28
    7090:	83 5b       	subi	r24, 0xB3	; 179
    7092:	9f 4f       	sbci	r25, 0xFF	; 255
    7094:	dc 01       	movw	r26, r24
    7096:	8d 91       	ld	r24, X+
    7098:	9c 91       	ld	r25, X
    709a:	00 97       	sbiw	r24, 0x00	; 0
    709c:	71 f0       	breq	.+28     	; 0x70ba <_ZN11TFT_ILI93418drawCharEjiii+0x14e0>
    709e:	3e bd       	out	0x2e, r19	; 46
    70a0:	02 d0       	rcall	.+4      	; 0x70a6 <_ZN11TFT_ILI93418drawCharEjiii+0x14cc>
    70a2:	01 d0       	rcall	.+2      	; 0x70a6 <_ZN11TFT_ILI93418drawCharEjiii+0x14cc>
    70a4:	01 c0       	rjmp	.+2      	; 0x70a8 <_ZN11TFT_ILI93418drawCharEjiii+0x14ce>
    70a6:	08 95       	ret
    70a8:	00 00       	nop
    70aa:	2e bd       	out	0x2e, r18	; 46
    70ac:	00 96       	adiw	r24, 0x00	; 0
    70ae:	00 96       	adiw	r24, 0x00	; 0
    70b0:	01 d0       	rcall	.+2      	; 0x70b4 <_ZN11TFT_ILI93418drawCharEjiii+0x14da>
    70b2:	01 c0       	rjmp	.+2      	; 0x70b6 <_ZN11TFT_ILI93418drawCharEjiii+0x14dc>
    70b4:	08 95       	ret
    70b6:	01 97       	sbiw	r24, 0x01	; 1
    70b8:	91 f7       	brne	.-28     	; 0x709e <_ZN11TFT_ILI93418drawCharEjiii+0x14c4>
    70ba:	9e 01       	movw	r18, r28
    70bc:	21 5b       	subi	r18, 0xB1	; 177
    70be:	3f 4f       	sbci	r19, 0xFF	; 255
    70c0:	f9 01       	movw	r30, r18
    70c2:	40 83       	st	Z, r20
    70c4:	9e 01       	movw	r18, r28
    70c6:	23 5b       	subi	r18, 0xB3	; 179
    70c8:	3f 4f       	sbci	r19, 0xFF	; 255
    70ca:	d9 01       	movw	r26, r18
    70cc:	8d 93       	st	X+, r24
    70ce:	9c 93       	st	X, r25
    70d0:	7d cf       	rjmp	.-262    	; 0x6fcc <_ZN11TFT_ILI93418drawCharEjiii+0x13f2>
          line &= 0x7F;
          line++; w -= line;
          spiWrite16(textcolor, line);
        }
        else {
          line++; w -= line;
    70d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    70d4:	8f 5f       	subi	r24, 0xFF	; 255
    70d6:	8b 87       	std	Y+11, r24	; 0x0b
    70d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    70da:	88 2f       	mov	r24, r24
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	2f 81       	ldd	r18, Y+7	; 0x07
    70e0:	38 85       	ldd	r19, Y+8	; 0x08
    70e2:	f9 01       	movw	r30, r18
    70e4:	e8 1b       	sub	r30, r24
    70e6:	f9 0b       	sbc	r31, r25
    70e8:	cf 01       	movw	r24, r30
    70ea:	98 87       	std	Y+8, r25	; 0x08
    70ec:	8f 83       	std	Y+7, r24	; 0x07
          spiWrite16(textbgcolor, line);
    70ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    70f0:	28 2f       	mov	r18, r24
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	ce 01       	movw	r24, r28
    70f6:	8d 5a       	subi	r24, 0xAD	; 173
    70f8:	9f 4f       	sbci	r25, 0xFF	; 255
    70fa:	dc 01       	movw	r26, r24
    70fc:	8d 91       	ld	r24, X+
    70fe:	9c 91       	ld	r25, X
    7100:	fc 01       	movw	r30, r24
    7102:	40 8d       	ldd	r20, Z+24	; 0x18
    7104:	51 8d       	ldd	r21, Z+25	; 0x19
    7106:	ce 01       	movw	r24, r28
    7108:	8c 5b       	subi	r24, 0xBC	; 188
    710a:	9f 4f       	sbci	r25, 0xFF	; 255
    710c:	dc 01       	movw	r26, r24
    710e:	4d 93       	st	X+, r20
    7110:	5c 93       	st	X, r21
    7112:	ce 01       	movw	r24, r28
    7114:	80 5b       	subi	r24, 0xB0	; 176
    7116:	9f 4f       	sbci	r25, 0xFF	; 255
    7118:	fc 01       	movw	r30, r24
    711a:	31 83       	std	Z+1, r19	; 0x01
    711c:	20 83       	st	Z, r18
    "2:\n"

    : [temp] "=d" (temp), [count] "+w" (count)
    : [spi] "i" (_SFR_IO_ADDR(SPDR)), [lo] "r" ((uint8_t)data), [hi] "r" ((uint8_t)(data>>8))
    :
  );
    711e:	ce 01       	movw	r24, r28
    7120:	8c 5b       	subi	r24, 0xBC	; 188
    7122:	9f 4f       	sbci	r25, 0xFF	; 255
    7124:	dc 01       	movw	r26, r24
    7126:	2c 91       	ld	r18, X
    "	brne	1b         \n" // 17 if != 0 then loop

    "2:\n"

    : [temp] "=d" (temp), [count] "+w" (count)
    : [spi] "i" (_SFR_IO_ADDR(SPDR)), [lo] "r" ((uint8_t)data), [hi] "r" ((uint8_t)(data>>8))
    7128:	ce 01       	movw	r24, r28
    712a:	8c 5b       	subi	r24, 0xBC	; 188
    712c:	9f 4f       	sbci	r25, 0xFF	; 255
    712e:	fc 01       	movw	r30, r24
    7130:	80 81       	ld	r24, Z
    7132:	91 81       	ldd	r25, Z+1	; 0x01
    7134:	89 2f       	mov	r24, r25
    7136:	99 27       	eor	r25, r25
    :
  );
    7138:	38 2f       	mov	r19, r24
    713a:	ce 01       	movw	r24, r28
    713c:	80 5b       	subi	r24, 0xB0	; 176
    713e:	9f 4f       	sbci	r25, 0xFF	; 255
    7140:	dc 01       	movw	r26, r24
    7142:	8d 91       	ld	r24, X+
    7144:	9c 91       	ld	r25, X
    7146:	00 97       	sbiw	r24, 0x00	; 0
    7148:	71 f0       	breq	.+28     	; 0x7166 <_ZN11TFT_ILI93418drawCharEjiii+0x158c>
    714a:	3e bd       	out	0x2e, r19	; 46
    714c:	02 d0       	rcall	.+4      	; 0x7152 <_ZN11TFT_ILI93418drawCharEjiii+0x1578>
    714e:	01 d0       	rcall	.+2      	; 0x7152 <_ZN11TFT_ILI93418drawCharEjiii+0x1578>
    7150:	01 c0       	rjmp	.+2      	; 0x7154 <_ZN11TFT_ILI93418drawCharEjiii+0x157a>
    7152:	08 95       	ret
    7154:	00 00       	nop
    7156:	2e bd       	out	0x2e, r18	; 46
    7158:	00 96       	adiw	r24, 0x00	; 0
    715a:	00 96       	adiw	r24, 0x00	; 0
    715c:	01 d0       	rcall	.+2      	; 0x7160 <_ZN11TFT_ILI93418drawCharEjiii+0x1586>
    715e:	01 c0       	rjmp	.+2      	; 0x7162 <_ZN11TFT_ILI93418drawCharEjiii+0x1588>
    7160:	08 95       	ret
    7162:	01 97       	sbiw	r24, 0x01	; 1
    7164:	91 f7       	brne	.-28     	; 0x714a <_ZN11TFT_ILI93418drawCharEjiii+0x1570>
    7166:	9e 01       	movw	r18, r28
    7168:	2e 5a       	subi	r18, 0xAE	; 174
    716a:	3f 4f       	sbci	r19, 0xFF	; 255
    716c:	f9 01       	movw	r30, r18
    716e:	40 83       	st	Z, r20
    7170:	9e 01       	movw	r18, r28
    7172:	20 5b       	subi	r18, 0xB0	; 176
    7174:	3f 4f       	sbci	r19, 0xFF	; 255
    7176:	d9 01       	movw	r26, r18
    7178:	8d 93       	st	X+, r24
    717a:	9c 93       	st	X, r25
    {
      spi_begin();
      setAddrWindow(x, y, x + width - 1, y + height - 1);

      // Maximum font size is equivalent to 180x180 pixels in area
      while (w > 0)
    717c:	27 cf       	rjmp	.-434    	; 0x6fcc <_ZN11TFT_ILI93418drawCharEjiii+0x13f2>
        else {
          line++; w -= line;
          spiWrite16(textbgcolor, line);
        }
      }
      while (!(SPSR & _BV(SPIF)));
    717e:	8d e4       	ldi	r24, 0x4D	; 77
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	fc 01       	movw	r30, r24
    7184:	80 81       	ld	r24, Z
    7186:	80 95       	com	r24
    7188:	88 1f       	adc	r24, r24
    718a:	88 27       	eor	r24, r24
    718c:	88 1f       	adc	r24, r24
    718e:	88 23       	and	r24, r24
    7190:	09 f0       	breq	.+2      	; 0x7194 <_ZN11TFT_ILI93418drawCharEjiii+0x15ba>
    7192:	f5 cf       	rjmp	.-22     	; 0x717e <_ZN11TFT_ILI93418drawCharEjiii+0x15a4>
    7194:	0e 94 b2 22 	call	0x4564	; 0x4564 <_ZN18__gen_struct_PORTL1rEv>
    7198:	dc 01       	movw	r26, r24
    719a:	2c 91       	ld	r18, X
    719c:	24 60       	ori	r18, 0x04	; 4
    719e:	fc 01       	movw	r30, r24
    71a0:	20 83       	st	Z, r18
    71a2:	01 c0       	rjmp	.+2      	; 0x71a6 <_ZN11TFT_ILI93418drawCharEjiii+0x15cc>
              if (line & 0x01) fillRect(pX + 7 * textsize, pY, textsize, textsize, textcolor);
            }
          }
        }
        pY += textsize;
      }
    71a4:	00 00       	nop
      spi_end();
    }
  }
  // End of RLE font rendering
#endif
  return width * textsize;    // x +
    71a6:	ce 01       	movw	r24, r28
    71a8:	8d 5a       	subi	r24, 0xAD	; 173
    71aa:	9f 4f       	sbci	r25, 0xFF	; 255
    71ac:	dc 01       	movw	r26, r24
    71ae:	8d 91       	ld	r24, X+
    71b0:	9c 91       	ld	r25, X
    71b2:	fc 01       	movw	r30, r24
    71b4:	81 a1       	ldd	r24, Z+33	; 0x21
    71b6:	48 2f       	mov	r20, r24
    71b8:	50 e0       	ldi	r21, 0x00	; 0
    71ba:	29 81       	ldd	r18, Y+1	; 0x01
    71bc:	3a 81       	ldd	r19, Y+2	; 0x02
    71be:	42 9f       	mul	r20, r18
    71c0:	c0 01       	movw	r24, r0
    71c2:	43 9f       	mul	r20, r19
    71c4:	90 0d       	add	r25, r0
    71c6:	52 9f       	mul	r21, r18
    71c8:	90 0d       	add	r25, r0
    71ca:	11 24       	eor	r1, r1
}
    71cc:	c2 5a       	subi	r28, 0xA2	; 162
    71ce:	df 4f       	sbci	r29, 0xFF	; 255
    71d0:	0f b6       	in	r0, 0x3f	; 63
    71d2:	f8 94       	cli
    71d4:	de bf       	out	0x3e, r29	; 62
    71d6:	0f be       	out	0x3f, r0	; 63
    71d8:	cd bf       	out	0x3d, r28	; 61
    71da:	df 91       	pop	r29
    71dc:	cf 91       	pop	r28
    71de:	1f 91       	pop	r17
    71e0:	0f 91       	pop	r16
    71e2:	ff 90       	pop	r15
    71e4:	ef 90       	pop	r14
    71e6:	cf 90       	pop	r12
    71e8:	08 95       	ret

000071ea <__fixunssfsi>:
    71ea:	5b d0       	rcall	.+182    	; 0x72a2 <__fp_splitA>
    71ec:	88 f0       	brcs	.+34     	; 0x7210 <__fixunssfsi+0x26>
    71ee:	9f 57       	subi	r25, 0x7F	; 127
    71f0:	90 f0       	brcs	.+36     	; 0x7216 <__fixunssfsi+0x2c>
    71f2:	b9 2f       	mov	r27, r25
    71f4:	99 27       	eor	r25, r25
    71f6:	b7 51       	subi	r27, 0x17	; 23
    71f8:	a0 f0       	brcs	.+40     	; 0x7222 <__fixunssfsi+0x38>
    71fa:	d1 f0       	breq	.+52     	; 0x7230 <__fixunssfsi+0x46>
    71fc:	66 0f       	add	r22, r22
    71fe:	77 1f       	adc	r23, r23
    7200:	88 1f       	adc	r24, r24
    7202:	99 1f       	adc	r25, r25
    7204:	1a f0       	brmi	.+6      	; 0x720c <__fixunssfsi+0x22>
    7206:	ba 95       	dec	r27
    7208:	c9 f7       	brne	.-14     	; 0x71fc <__fixunssfsi+0x12>
    720a:	12 c0       	rjmp	.+36     	; 0x7230 <__fixunssfsi+0x46>
    720c:	b1 30       	cpi	r27, 0x01	; 1
    720e:	81 f0       	breq	.+32     	; 0x7230 <__fixunssfsi+0x46>
    7210:	62 d0       	rcall	.+196    	; 0x72d6 <__fp_zero>
    7212:	b1 e0       	ldi	r27, 0x01	; 1
    7214:	08 95       	ret
    7216:	5f c0       	rjmp	.+190    	; 0x72d6 <__fp_zero>
    7218:	67 2f       	mov	r22, r23
    721a:	78 2f       	mov	r23, r24
    721c:	88 27       	eor	r24, r24
    721e:	b8 5f       	subi	r27, 0xF8	; 248
    7220:	39 f0       	breq	.+14     	; 0x7230 <__fixunssfsi+0x46>
    7222:	b9 3f       	cpi	r27, 0xF9	; 249
    7224:	cc f3       	brlt	.-14     	; 0x7218 <__fixunssfsi+0x2e>
    7226:	86 95       	lsr	r24
    7228:	77 95       	ror	r23
    722a:	67 95       	ror	r22
    722c:	b3 95       	inc	r27
    722e:	d9 f7       	brne	.-10     	; 0x7226 <__fixunssfsi+0x3c>
    7230:	3e f4       	brtc	.+14     	; 0x7240 <__fixunssfsi+0x56>
    7232:	90 95       	com	r25
    7234:	80 95       	com	r24
    7236:	70 95       	com	r23
    7238:	61 95       	neg	r22
    723a:	7f 4f       	sbci	r23, 0xFF	; 255
    723c:	8f 4f       	sbci	r24, 0xFF	; 255
    723e:	9f 4f       	sbci	r25, 0xFF	; 255
    7240:	08 95       	ret

00007242 <__fp_inf>:
    7242:	97 f9       	bld	r25, 7
    7244:	9f 67       	ori	r25, 0x7F	; 127
    7246:	80 e8       	ldi	r24, 0x80	; 128
    7248:	70 e0       	ldi	r23, 0x00	; 0
    724a:	60 e0       	ldi	r22, 0x00	; 0
    724c:	08 95       	ret

0000724e <__fp_nan>:
    724e:	9f ef       	ldi	r25, 0xFF	; 255
    7250:	80 ec       	ldi	r24, 0xC0	; 192
    7252:	08 95       	ret

00007254 <__fp_pscA>:
    7254:	00 24       	eor	r0, r0
    7256:	0a 94       	dec	r0
    7258:	16 16       	cp	r1, r22
    725a:	17 06       	cpc	r1, r23
    725c:	18 06       	cpc	r1, r24
    725e:	09 06       	cpc	r0, r25
    7260:	08 95       	ret

00007262 <__fp_pscB>:
    7262:	00 24       	eor	r0, r0
    7264:	0a 94       	dec	r0
    7266:	12 16       	cp	r1, r18
    7268:	13 06       	cpc	r1, r19
    726a:	14 06       	cpc	r1, r20
    726c:	05 06       	cpc	r0, r21
    726e:	08 95       	ret

00007270 <__fp_round>:
    7270:	09 2e       	mov	r0, r25
    7272:	03 94       	inc	r0
    7274:	00 0c       	add	r0, r0
    7276:	11 f4       	brne	.+4      	; 0x727c <__fp_round+0xc>
    7278:	88 23       	and	r24, r24
    727a:	52 f0       	brmi	.+20     	; 0x7290 <__fp_round+0x20>
    727c:	bb 0f       	add	r27, r27
    727e:	40 f4       	brcc	.+16     	; 0x7290 <__fp_round+0x20>
    7280:	bf 2b       	or	r27, r31
    7282:	11 f4       	brne	.+4      	; 0x7288 <__fp_round+0x18>
    7284:	60 ff       	sbrs	r22, 0
    7286:	04 c0       	rjmp	.+8      	; 0x7290 <__fp_round+0x20>
    7288:	6f 5f       	subi	r22, 0xFF	; 255
    728a:	7f 4f       	sbci	r23, 0xFF	; 255
    728c:	8f 4f       	sbci	r24, 0xFF	; 255
    728e:	9f 4f       	sbci	r25, 0xFF	; 255
    7290:	08 95       	ret

00007292 <__fp_split3>:
    7292:	57 fd       	sbrc	r21, 7
    7294:	90 58       	subi	r25, 0x80	; 128
    7296:	44 0f       	add	r20, r20
    7298:	55 1f       	adc	r21, r21
    729a:	59 f0       	breq	.+22     	; 0x72b2 <__fp_splitA+0x10>
    729c:	5f 3f       	cpi	r21, 0xFF	; 255
    729e:	71 f0       	breq	.+28     	; 0x72bc <__fp_splitA+0x1a>
    72a0:	47 95       	ror	r20

000072a2 <__fp_splitA>:
    72a2:	88 0f       	add	r24, r24
    72a4:	97 fb       	bst	r25, 7
    72a6:	99 1f       	adc	r25, r25
    72a8:	61 f0       	breq	.+24     	; 0x72c2 <__fp_splitA+0x20>
    72aa:	9f 3f       	cpi	r25, 0xFF	; 255
    72ac:	79 f0       	breq	.+30     	; 0x72cc <__fp_splitA+0x2a>
    72ae:	87 95       	ror	r24
    72b0:	08 95       	ret
    72b2:	12 16       	cp	r1, r18
    72b4:	13 06       	cpc	r1, r19
    72b6:	14 06       	cpc	r1, r20
    72b8:	55 1f       	adc	r21, r21
    72ba:	f2 cf       	rjmp	.-28     	; 0x72a0 <__fp_split3+0xe>
    72bc:	46 95       	lsr	r20
    72be:	f1 df       	rcall	.-30     	; 0x72a2 <__fp_splitA>
    72c0:	08 c0       	rjmp	.+16     	; 0x72d2 <__fp_splitA+0x30>
    72c2:	16 16       	cp	r1, r22
    72c4:	17 06       	cpc	r1, r23
    72c6:	18 06       	cpc	r1, r24
    72c8:	99 1f       	adc	r25, r25
    72ca:	f1 cf       	rjmp	.-30     	; 0x72ae <__fp_splitA+0xc>
    72cc:	86 95       	lsr	r24
    72ce:	71 05       	cpc	r23, r1
    72d0:	61 05       	cpc	r22, r1
    72d2:	08 94       	sec
    72d4:	08 95       	ret

000072d6 <__fp_zero>:
    72d6:	e8 94       	clt

000072d8 <__fp_szero>:
    72d8:	bb 27       	eor	r27, r27
    72da:	66 27       	eor	r22, r22
    72dc:	77 27       	eor	r23, r23
    72de:	cb 01       	movw	r24, r22
    72e0:	97 f9       	bld	r25, 7
    72e2:	08 95       	ret

000072e4 <__gesf2>:
    72e4:	66 d0       	rcall	.+204    	; 0x73b2 <__fp_cmp>
    72e6:	08 f4       	brcc	.+2      	; 0x72ea <__gesf2+0x6>
    72e8:	8f ef       	ldi	r24, 0xFF	; 255
    72ea:	08 95       	ret

000072ec <__mulsf3>:
    72ec:	0b d0       	rcall	.+22     	; 0x7304 <__mulsf3x>
    72ee:	c0 cf       	rjmp	.-128    	; 0x7270 <__fp_round>
    72f0:	b1 df       	rcall	.-158    	; 0x7254 <__fp_pscA>
    72f2:	28 f0       	brcs	.+10     	; 0x72fe <__mulsf3+0x12>
    72f4:	b6 df       	rcall	.-148    	; 0x7262 <__fp_pscB>
    72f6:	18 f0       	brcs	.+6      	; 0x72fe <__mulsf3+0x12>
    72f8:	95 23       	and	r25, r21
    72fa:	09 f0       	breq	.+2      	; 0x72fe <__mulsf3+0x12>
    72fc:	a2 cf       	rjmp	.-188    	; 0x7242 <__fp_inf>
    72fe:	a7 cf       	rjmp	.-178    	; 0x724e <__fp_nan>
    7300:	11 24       	eor	r1, r1
    7302:	ea cf       	rjmp	.-44     	; 0x72d8 <__fp_szero>

00007304 <__mulsf3x>:
    7304:	c6 df       	rcall	.-116    	; 0x7292 <__fp_split3>
    7306:	a0 f3       	brcs	.-24     	; 0x72f0 <__mulsf3+0x4>

00007308 <__mulsf3_pse>:
    7308:	95 9f       	mul	r25, r21
    730a:	d1 f3       	breq	.-12     	; 0x7300 <__mulsf3+0x14>
    730c:	95 0f       	add	r25, r21
    730e:	50 e0       	ldi	r21, 0x00	; 0
    7310:	55 1f       	adc	r21, r21
    7312:	62 9f       	mul	r22, r18
    7314:	f0 01       	movw	r30, r0
    7316:	72 9f       	mul	r23, r18
    7318:	bb 27       	eor	r27, r27
    731a:	f0 0d       	add	r31, r0
    731c:	b1 1d       	adc	r27, r1
    731e:	63 9f       	mul	r22, r19
    7320:	aa 27       	eor	r26, r26
    7322:	f0 0d       	add	r31, r0
    7324:	b1 1d       	adc	r27, r1
    7326:	aa 1f       	adc	r26, r26
    7328:	64 9f       	mul	r22, r20
    732a:	66 27       	eor	r22, r22
    732c:	b0 0d       	add	r27, r0
    732e:	a1 1d       	adc	r26, r1
    7330:	66 1f       	adc	r22, r22
    7332:	82 9f       	mul	r24, r18
    7334:	22 27       	eor	r18, r18
    7336:	b0 0d       	add	r27, r0
    7338:	a1 1d       	adc	r26, r1
    733a:	62 1f       	adc	r22, r18
    733c:	73 9f       	mul	r23, r19
    733e:	b0 0d       	add	r27, r0
    7340:	a1 1d       	adc	r26, r1
    7342:	62 1f       	adc	r22, r18
    7344:	83 9f       	mul	r24, r19
    7346:	a0 0d       	add	r26, r0
    7348:	61 1d       	adc	r22, r1
    734a:	22 1f       	adc	r18, r18
    734c:	74 9f       	mul	r23, r20
    734e:	33 27       	eor	r19, r19
    7350:	a0 0d       	add	r26, r0
    7352:	61 1d       	adc	r22, r1
    7354:	23 1f       	adc	r18, r19
    7356:	84 9f       	mul	r24, r20
    7358:	60 0d       	add	r22, r0
    735a:	21 1d       	adc	r18, r1
    735c:	82 2f       	mov	r24, r18
    735e:	76 2f       	mov	r23, r22
    7360:	6a 2f       	mov	r22, r26
    7362:	11 24       	eor	r1, r1
    7364:	9f 57       	subi	r25, 0x7F	; 127
    7366:	50 40       	sbci	r21, 0x00	; 0
    7368:	8a f0       	brmi	.+34     	; 0x738c <__mulsf3_pse+0x84>
    736a:	e1 f0       	breq	.+56     	; 0x73a4 <__mulsf3_pse+0x9c>
    736c:	88 23       	and	r24, r24
    736e:	4a f0       	brmi	.+18     	; 0x7382 <__mulsf3_pse+0x7a>
    7370:	ee 0f       	add	r30, r30
    7372:	ff 1f       	adc	r31, r31
    7374:	bb 1f       	adc	r27, r27
    7376:	66 1f       	adc	r22, r22
    7378:	77 1f       	adc	r23, r23
    737a:	88 1f       	adc	r24, r24
    737c:	91 50       	subi	r25, 0x01	; 1
    737e:	50 40       	sbci	r21, 0x00	; 0
    7380:	a9 f7       	brne	.-22     	; 0x736c <__mulsf3_pse+0x64>
    7382:	9e 3f       	cpi	r25, 0xFE	; 254
    7384:	51 05       	cpc	r21, r1
    7386:	70 f0       	brcs	.+28     	; 0x73a4 <__mulsf3_pse+0x9c>
    7388:	5c cf       	rjmp	.-328    	; 0x7242 <__fp_inf>
    738a:	a6 cf       	rjmp	.-180    	; 0x72d8 <__fp_szero>
    738c:	5f 3f       	cpi	r21, 0xFF	; 255
    738e:	ec f3       	brlt	.-6      	; 0x738a <__mulsf3_pse+0x82>
    7390:	98 3e       	cpi	r25, 0xE8	; 232
    7392:	dc f3       	brlt	.-10     	; 0x738a <__mulsf3_pse+0x82>
    7394:	86 95       	lsr	r24
    7396:	77 95       	ror	r23
    7398:	67 95       	ror	r22
    739a:	b7 95       	ror	r27
    739c:	f7 95       	ror	r31
    739e:	e7 95       	ror	r30
    73a0:	9f 5f       	subi	r25, 0xFF	; 255
    73a2:	c1 f7       	brne	.-16     	; 0x7394 <__mulsf3_pse+0x8c>
    73a4:	fe 2b       	or	r31, r30
    73a6:	88 0f       	add	r24, r24
    73a8:	91 1d       	adc	r25, r1
    73aa:	96 95       	lsr	r25
    73ac:	87 95       	ror	r24
    73ae:	97 f9       	bld	r25, 7
    73b0:	08 95       	ret

000073b2 <__fp_cmp>:
    73b2:	99 0f       	add	r25, r25
    73b4:	00 08       	sbc	r0, r0
    73b6:	55 0f       	add	r21, r21
    73b8:	aa 0b       	sbc	r26, r26
    73ba:	e0 e8       	ldi	r30, 0x80	; 128
    73bc:	fe ef       	ldi	r31, 0xFE	; 254
    73be:	16 16       	cp	r1, r22
    73c0:	17 06       	cpc	r1, r23
    73c2:	e8 07       	cpc	r30, r24
    73c4:	f9 07       	cpc	r31, r25
    73c6:	c0 f0       	brcs	.+48     	; 0x73f8 <__fp_cmp+0x46>
    73c8:	12 16       	cp	r1, r18
    73ca:	13 06       	cpc	r1, r19
    73cc:	e4 07       	cpc	r30, r20
    73ce:	f5 07       	cpc	r31, r21
    73d0:	98 f0       	brcs	.+38     	; 0x73f8 <__fp_cmp+0x46>
    73d2:	62 1b       	sub	r22, r18
    73d4:	73 0b       	sbc	r23, r19
    73d6:	84 0b       	sbc	r24, r20
    73d8:	95 0b       	sbc	r25, r21
    73da:	39 f4       	brne	.+14     	; 0x73ea <__fp_cmp+0x38>
    73dc:	0a 26       	eor	r0, r26
    73de:	61 f0       	breq	.+24     	; 0x73f8 <__fp_cmp+0x46>
    73e0:	23 2b       	or	r18, r19
    73e2:	24 2b       	or	r18, r20
    73e4:	25 2b       	or	r18, r21
    73e6:	21 f4       	brne	.+8      	; 0x73f0 <__fp_cmp+0x3e>
    73e8:	08 95       	ret
    73ea:	0a 26       	eor	r0, r26
    73ec:	09 f4       	brne	.+2      	; 0x73f0 <__fp_cmp+0x3e>
    73ee:	a1 40       	sbci	r26, 0x01	; 1
    73f0:	a6 95       	lsr	r26
    73f2:	8f ef       	ldi	r24, 0xFF	; 255
    73f4:	81 1d       	adc	r24, r1
    73f6:	81 1d       	adc	r24, r1
    73f8:	08 95       	ret

000073fa <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    73fa:	cf 93       	push	r28
    73fc:	df 93       	push	r29
    73fe:	cd b7       	in	r28, 0x3d	; 61
    7400:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    7402:	0e 94 3e 64 	call	0xc87c	; 0xc87c <abort>

00007406 <_ZL12__iCliRetValv>:
  cbi(*_ucsrb, RXCIE0);
  cbi(*_ucsrb, UDRIE0);
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}
    7406:	cf 93       	push	r28
    7408:	df 93       	push	r29
    740a:	cd b7       	in	r28, 0x3d	; 61
    740c:	de b7       	in	r29, 0x3e	; 62
    740e:	f8 94       	cli
    7410:	81 e0       	ldi	r24, 0x01	; 1
    7412:	df 91       	pop	r29
    7414:	cf 91       	pop	r28
    7416:	08 95       	ret

00007418 <_ZL10__iRestorePKh>:
    7418:	cf 93       	push	r28
    741a:	df 93       	push	r29
    741c:	1f 92       	push	r1
    741e:	1f 92       	push	r1
    7420:	cd b7       	in	r28, 0x3d	; 61
    7422:	de b7       	in	r29, 0x3e	; 62
    7424:	9a 83       	std	Y+2, r25	; 0x02
    7426:	89 83       	std	Y+1, r24	; 0x01
    7428:	8f e5       	ldi	r24, 0x5F	; 95
    742a:	90 e0       	ldi	r25, 0x00	; 0
    742c:	29 81       	ldd	r18, Y+1	; 0x01
    742e:	3a 81       	ldd	r19, Y+2	; 0x02
    7430:	f9 01       	movw	r30, r18
    7432:	20 81       	ld	r18, Z
    7434:	fc 01       	movw	r30, r24
    7436:	20 83       	st	Z, r18
    7438:	00 00       	nop
    743a:	0f 90       	pop	r0
    743c:	0f 90       	pop	r0
    743e:	df 91       	pop	r29
    7440:	cf 91       	pop	r28
    7442:	08 95       	ret

00007444 <_Z14serialEventRunv>:
    7444:	cf 93       	push	r28
    7446:	df 93       	push	r29
    7448:	cd b7       	in	r28, 0x3d	; 61
    744a:	de b7       	in	r29, 0x3e	; 62
    744c:	80 ee       	ldi	r24, 0xE0	; 224
    744e:	9e e3       	ldi	r25, 0x3E	; 62
    7450:	89 2b       	or	r24, r25
    7452:	49 f0       	breq	.+18     	; 0x7466 <_Z14serialEventRunv+0x22>
    7454:	80 e0       	ldi	r24, 0x00	; 0
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	89 2b       	or	r24, r25
    745a:	29 f0       	breq	.+10     	; 0x7466 <_Z14serialEventRunv+0x22>
    745c:	b1 d4       	rcall	.+2402   	; 0x7dc0 <_Z17Serial0_availablev>
    745e:	88 23       	and	r24, r24
    7460:	11 f0       	breq	.+4      	; 0x7466 <_Z14serialEventRunv+0x22>
    7462:	81 e0       	ldi	r24, 0x01	; 1
    7464:	01 c0       	rjmp	.+2      	; 0x7468 <_Z14serialEventRunv+0x24>
    7466:	80 e0       	ldi	r24, 0x00	; 0
    7468:	88 23       	and	r24, r24
    746a:	11 f0       	breq	.+4      	; 0x7470 <_Z14serialEventRunv+0x2c>
    746c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    7470:	8e e9       	ldi	r24, 0x9E	; 158
    7472:	9f e3       	ldi	r25, 0x3F	; 63
    7474:	89 2b       	or	r24, r25
    7476:	49 f0       	breq	.+18     	; 0x748a <_Z14serialEventRunv+0x46>
    7478:	80 e0       	ldi	r24, 0x00	; 0
    747a:	90 e0       	ldi	r25, 0x00	; 0
    747c:	89 2b       	or	r24, r25
    747e:	29 f0       	breq	.+10     	; 0x748a <_Z14serialEventRunv+0x46>
    7480:	5d d5       	rcall	.+2746   	; 0x7f3c <_Z17Serial1_availablev>
    7482:	88 23       	and	r24, r24
    7484:	11 f0       	breq	.+4      	; 0x748a <_Z14serialEventRunv+0x46>
    7486:	81 e0       	ldi	r24, 0x01	; 1
    7488:	01 c0       	rjmp	.+2      	; 0x748c <_Z14serialEventRunv+0x48>
    748a:	80 e0       	ldi	r24, 0x00	; 0
    748c:	88 23       	and	r24, r24
    748e:	11 f0       	breq	.+4      	; 0x7494 <_Z14serialEventRunv+0x50>
    7490:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    7494:	80 e0       	ldi	r24, 0x00	; 0
    7496:	90 e0       	ldi	r25, 0x00	; 0
    7498:	89 2b       	or	r24, r25
    749a:	51 f0       	breq	.+20     	; 0x74b0 <_Z14serialEventRunv+0x6c>
    749c:	80 e0       	ldi	r24, 0x00	; 0
    749e:	90 e0       	ldi	r25, 0x00	; 0
    74a0:	89 2b       	or	r24, r25
    74a2:	31 f0       	breq	.+12     	; 0x74b0 <_Z14serialEventRunv+0x6c>
    74a4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    74a8:	88 23       	and	r24, r24
    74aa:	11 f0       	breq	.+4      	; 0x74b0 <_Z14serialEventRunv+0x6c>
    74ac:	81 e0       	ldi	r24, 0x01	; 1
    74ae:	01 c0       	rjmp	.+2      	; 0x74b2 <_Z14serialEventRunv+0x6e>
    74b0:	80 e0       	ldi	r24, 0x00	; 0
    74b2:	88 23       	and	r24, r24
    74b4:	11 f0       	breq	.+4      	; 0x74ba <_Z14serialEventRunv+0x76>
    74b6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    74ba:	80 e0       	ldi	r24, 0x00	; 0
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	89 2b       	or	r24, r25
    74c0:	51 f0       	breq	.+20     	; 0x74d6 <_Z14serialEventRunv+0x92>
    74c2:	80 e0       	ldi	r24, 0x00	; 0
    74c4:	90 e0       	ldi	r25, 0x00	; 0
    74c6:	89 2b       	or	r24, r25
    74c8:	31 f0       	breq	.+12     	; 0x74d6 <_Z14serialEventRunv+0x92>
    74ca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    74ce:	88 23       	and	r24, r24
    74d0:	11 f0       	breq	.+4      	; 0x74d6 <_Z14serialEventRunv+0x92>
    74d2:	81 e0       	ldi	r24, 0x01	; 1
    74d4:	01 c0       	rjmp	.+2      	; 0x74d8 <_Z14serialEventRunv+0x94>
    74d6:	80 e0       	ldi	r24, 0x00	; 0
    74d8:	88 23       	and	r24, r24
    74da:	11 f0       	breq	.+4      	; 0x74e0 <_Z14serialEventRunv+0x9c>
    74dc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    74e0:	00 00       	nop
    74e2:	df 91       	pop	r29
    74e4:	cf 91       	pop	r28
    74e6:	08 95       	ret

000074e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    74e8:	cf 93       	push	r28
    74ea:	df 93       	push	r29
    74ec:	00 d0       	rcall	.+0      	; 0x74ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
    74ee:	cd b7       	in	r28, 0x3d	; 61
    74f0:	de b7       	in	r29, 0x3e	; 62
    74f2:	9b 83       	std	Y+3, r25	; 0x03
    74f4:	8a 83       	std	Y+2, r24	; 0x02
    74f6:	8a 81       	ldd	r24, Y+2	; 0x02
    74f8:	9b 81       	ldd	r25, Y+3	; 0x03
    74fa:	fc 01       	movw	r30, r24
    74fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    74fe:	88 2f       	mov	r24, r24
    7500:	90 e0       	ldi	r25, 0x00	; 0
    7502:	2a 81       	ldd	r18, Y+2	; 0x02
    7504:	3b 81       	ldd	r19, Y+3	; 0x03
    7506:	82 0f       	add	r24, r18
    7508:	93 1f       	adc	r25, r19
    750a:	83 5a       	subi	r24, 0xA3	; 163
    750c:	9f 4f       	sbci	r25, 0xFF	; 255
    750e:	fc 01       	movw	r30, r24
    7510:	80 81       	ld	r24, Z
    7512:	89 83       	std	Y+1, r24	; 0x01
    7514:	8a 81       	ldd	r24, Y+2	; 0x02
    7516:	9b 81       	ldd	r25, Y+3	; 0x03
    7518:	fc 01       	movw	r30, r24
    751a:	84 8d       	ldd	r24, Z+28	; 0x1c
    751c:	88 2f       	mov	r24, r24
    751e:	90 e0       	ldi	r25, 0x00	; 0
    7520:	01 96       	adiw	r24, 0x01	; 1
    7522:	8f 73       	andi	r24, 0x3F	; 63
    7524:	90 78       	andi	r25, 0x80	; 128
    7526:	99 23       	and	r25, r25
    7528:	24 f4       	brge	.+8      	; 0x7532 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4a>
    752a:	01 97       	sbiw	r24, 0x01	; 1
    752c:	80 6c       	ori	r24, 0xC0	; 192
    752e:	9f 6f       	ori	r25, 0xFF	; 255
    7530:	01 96       	adiw	r24, 0x01	; 1
    7532:	28 2f       	mov	r18, r24
    7534:	8a 81       	ldd	r24, Y+2	; 0x02
    7536:	9b 81       	ldd	r25, Y+3	; 0x03
    7538:	fc 01       	movw	r30, r24
    753a:	24 8f       	std	Z+28, r18	; 0x1c
    753c:	8a 81       	ldd	r24, Y+2	; 0x02
    753e:	9b 81       	ldd	r25, Y+3	; 0x03
    7540:	fc 01       	movw	r30, r24
    7542:	86 89       	ldd	r24, Z+22	; 0x16
    7544:	97 89       	ldd	r25, Z+23	; 0x17
    7546:	29 81       	ldd	r18, Y+1	; 0x01
    7548:	fc 01       	movw	r30, r24
    754a:	20 83       	st	Z, r18
    754c:	8a 81       	ldd	r24, Y+2	; 0x02
    754e:	9b 81       	ldd	r25, Y+3	; 0x03
    7550:	fc 01       	movw	r30, r24
    7552:	80 89       	ldd	r24, Z+16	; 0x10
    7554:	91 89       	ldd	r25, Z+17	; 0x11
    7556:	2a 81       	ldd	r18, Y+2	; 0x02
    7558:	3b 81       	ldd	r19, Y+3	; 0x03
    755a:	f9 01       	movw	r30, r18
    755c:	20 89       	ldd	r18, Z+16	; 0x10
    755e:	31 89       	ldd	r19, Z+17	; 0x11
    7560:	f9 01       	movw	r30, r18
    7562:	20 81       	ld	r18, Z
    7564:	23 70       	andi	r18, 0x03	; 3
    7566:	20 64       	ori	r18, 0x40	; 64
    7568:	fc 01       	movw	r30, r24
    756a:	20 83       	st	Z, r18
    756c:	8a 81       	ldd	r24, Y+2	; 0x02
    756e:	9b 81       	ldd	r25, Y+3	; 0x03
    7570:	fc 01       	movw	r30, r24
    7572:	23 8d       	ldd	r18, Z+27	; 0x1b
    7574:	8a 81       	ldd	r24, Y+2	; 0x02
    7576:	9b 81       	ldd	r25, Y+3	; 0x03
    7578:	fc 01       	movw	r30, r24
    757a:	94 8d       	ldd	r25, Z+28	; 0x1c
    757c:	81 e0       	ldi	r24, 0x01	; 1
    757e:	29 17       	cp	r18, r25
    7580:	09 f0       	breq	.+2      	; 0x7584 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9c>
    7582:	80 e0       	ldi	r24, 0x00	; 0
    7584:	88 23       	and	r24, r24
    7586:	79 f0       	breq	.+30     	; 0x75a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbe>
    7588:	8a 81       	ldd	r24, Y+2	; 0x02
    758a:	9b 81       	ldd	r25, Y+3	; 0x03
    758c:	fc 01       	movw	r30, r24
    758e:	82 89       	ldd	r24, Z+18	; 0x12
    7590:	93 89       	ldd	r25, Z+19	; 0x13
    7592:	2a 81       	ldd	r18, Y+2	; 0x02
    7594:	3b 81       	ldd	r19, Y+3	; 0x03
    7596:	f9 01       	movw	r30, r18
    7598:	22 89       	ldd	r18, Z+18	; 0x12
    759a:	33 89       	ldd	r19, Z+19	; 0x13
    759c:	f9 01       	movw	r30, r18
    759e:	20 81       	ld	r18, Z
    75a0:	2f 7d       	andi	r18, 0xDF	; 223
    75a2:	fc 01       	movw	r30, r24
    75a4:	20 83       	st	Z, r18
    75a6:	00 00       	nop
    75a8:	0f 90       	pop	r0
    75aa:	0f 90       	pop	r0
    75ac:	0f 90       	pop	r0
    75ae:	df 91       	pop	r29
    75b0:	cf 91       	pop	r28
    75b2:	08 95       	ret

000075b4 <_ZN14HardwareSerial5beginEmh>:
    75b4:	cf 93       	push	r28
    75b6:	df 93       	push	r29
    75b8:	cd b7       	in	r28, 0x3d	; 61
    75ba:	de b7       	in	r29, 0x3e	; 62
    75bc:	29 97       	sbiw	r28, 0x09	; 9
    75be:	0f b6       	in	r0, 0x3f	; 63
    75c0:	f8 94       	cli
    75c2:	de bf       	out	0x3e, r29	; 62
    75c4:	0f be       	out	0x3f, r0	; 63
    75c6:	cd bf       	out	0x3d, r28	; 61
    75c8:	9c 83       	std	Y+4, r25	; 0x04
    75ca:	8b 83       	std	Y+3, r24	; 0x03
    75cc:	4d 83       	std	Y+5, r20	; 0x05
    75ce:	5e 83       	std	Y+6, r21	; 0x06
    75d0:	6f 83       	std	Y+7, r22	; 0x07
    75d2:	78 87       	std	Y+8, r23	; 0x08
    75d4:	29 87       	std	Y+9, r18	; 0x09
    75d6:	80 e0       	ldi	r24, 0x00	; 0
    75d8:	99 e0       	ldi	r25, 0x09	; 9
    75da:	ad e3       	ldi	r26, 0x3D	; 61
    75dc:	b0 e0       	ldi	r27, 0x00	; 0
    75de:	2d 81       	ldd	r18, Y+5	; 0x05
    75e0:	3e 81       	ldd	r19, Y+6	; 0x06
    75e2:	4f 81       	ldd	r20, Y+7	; 0x07
    75e4:	58 85       	ldd	r21, Y+8	; 0x08
    75e6:	bc 01       	movw	r22, r24
    75e8:	cd 01       	movw	r24, r26
    75ea:	0e 94 2e 61 	call	0xc25c	; 0xc25c <__udivmodsi4>
    75ee:	da 01       	movw	r26, r20
    75f0:	c9 01       	movw	r24, r18
    75f2:	01 97       	sbiw	r24, 0x01	; 1
    75f4:	a1 09       	sbc	r26, r1
    75f6:	b1 09       	sbc	r27, r1
    75f8:	b6 95       	lsr	r27
    75fa:	a7 95       	ror	r26
    75fc:	97 95       	ror	r25
    75fe:	87 95       	ror	r24
    7600:	9a 83       	std	Y+2, r25	; 0x02
    7602:	89 83       	std	Y+1, r24	; 0x01
    7604:	8b 81       	ldd	r24, Y+3	; 0x03
    7606:	9c 81       	ldd	r25, Y+4	; 0x04
    7608:	fc 01       	movw	r30, r24
    760a:	80 89       	ldd	r24, Z+16	; 0x10
    760c:	91 89       	ldd	r25, Z+17	; 0x11
    760e:	22 e0       	ldi	r18, 0x02	; 2
    7610:	fc 01       	movw	r30, r24
    7612:	20 83       	st	Z, r18
    7614:	8d 81       	ldd	r24, Y+5	; 0x05
    7616:	9e 81       	ldd	r25, Y+6	; 0x06
    7618:	af 81       	ldd	r26, Y+7	; 0x07
    761a:	b8 85       	ldd	r27, Y+8	; 0x08
    761c:	81 15       	cp	r24, r1
    761e:	91 4e       	sbci	r25, 0xE1	; 225
    7620:	a1 05       	cpc	r26, r1
    7622:	b1 05       	cpc	r27, r1
    7624:	29 f0       	breq	.+10     	; 0x7630 <_ZN14HardwareSerial5beginEmh+0x7c>
    7626:	89 81       	ldd	r24, Y+1	; 0x01
    7628:	9a 81       	ldd	r25, Y+2	; 0x02
    762a:	81 15       	cp	r24, r1
    762c:	90 41       	sbci	r25, 0x10	; 16
    762e:	f0 f0       	brcs	.+60     	; 0x766c <_ZN14HardwareSerial5beginEmh+0xb8>
    7630:	8b 81       	ldd	r24, Y+3	; 0x03
    7632:	9c 81       	ldd	r25, Y+4	; 0x04
    7634:	fc 01       	movw	r30, r24
    7636:	80 89       	ldd	r24, Z+16	; 0x10
    7638:	91 89       	ldd	r25, Z+17	; 0x11
    763a:	fc 01       	movw	r30, r24
    763c:	10 82       	st	Z, r1
    763e:	80 e8       	ldi	r24, 0x80	; 128
    7640:	94 e8       	ldi	r25, 0x84	; 132
    7642:	ae e1       	ldi	r26, 0x1E	; 30
    7644:	b0 e0       	ldi	r27, 0x00	; 0
    7646:	2d 81       	ldd	r18, Y+5	; 0x05
    7648:	3e 81       	ldd	r19, Y+6	; 0x06
    764a:	4f 81       	ldd	r20, Y+7	; 0x07
    764c:	58 85       	ldd	r21, Y+8	; 0x08
    764e:	bc 01       	movw	r22, r24
    7650:	cd 01       	movw	r24, r26
    7652:	0e 94 2e 61 	call	0xc25c	; 0xc25c <__udivmodsi4>
    7656:	da 01       	movw	r26, r20
    7658:	c9 01       	movw	r24, r18
    765a:	01 97       	sbiw	r24, 0x01	; 1
    765c:	a1 09       	sbc	r26, r1
    765e:	b1 09       	sbc	r27, r1
    7660:	b6 95       	lsr	r27
    7662:	a7 95       	ror	r26
    7664:	97 95       	ror	r25
    7666:	87 95       	ror	r24
    7668:	9a 83       	std	Y+2, r25	; 0x02
    766a:	89 83       	std	Y+1, r24	; 0x01
    766c:	8b 81       	ldd	r24, Y+3	; 0x03
    766e:	9c 81       	ldd	r25, Y+4	; 0x04
    7670:	fc 01       	movw	r30, r24
    7672:	84 85       	ldd	r24, Z+12	; 0x0c
    7674:	95 85       	ldd	r25, Z+13	; 0x0d
    7676:	29 81       	ldd	r18, Y+1	; 0x01
    7678:	3a 81       	ldd	r19, Y+2	; 0x02
    767a:	23 2f       	mov	r18, r19
    767c:	33 27       	eor	r19, r19
    767e:	fc 01       	movw	r30, r24
    7680:	20 83       	st	Z, r18
    7682:	8b 81       	ldd	r24, Y+3	; 0x03
    7684:	9c 81       	ldd	r25, Y+4	; 0x04
    7686:	fc 01       	movw	r30, r24
    7688:	86 85       	ldd	r24, Z+14	; 0x0e
    768a:	97 85       	ldd	r25, Z+15	; 0x0f
    768c:	29 81       	ldd	r18, Y+1	; 0x01
    768e:	fc 01       	movw	r30, r24
    7690:	20 83       	st	Z, r18
    7692:	8b 81       	ldd	r24, Y+3	; 0x03
    7694:	9c 81       	ldd	r25, Y+4	; 0x04
    7696:	fc 01       	movw	r30, r24
    7698:	10 8e       	std	Z+24, r1	; 0x18
    769a:	8b 81       	ldd	r24, Y+3	; 0x03
    769c:	9c 81       	ldd	r25, Y+4	; 0x04
    769e:	fc 01       	movw	r30, r24
    76a0:	84 89       	ldd	r24, Z+20	; 0x14
    76a2:	95 89       	ldd	r25, Z+21	; 0x15
    76a4:	29 85       	ldd	r18, Y+9	; 0x09
    76a6:	fc 01       	movw	r30, r24
    76a8:	20 83       	st	Z, r18
    76aa:	8b 81       	ldd	r24, Y+3	; 0x03
    76ac:	9c 81       	ldd	r25, Y+4	; 0x04
    76ae:	fc 01       	movw	r30, r24
    76b0:	82 89       	ldd	r24, Z+18	; 0x12
    76b2:	93 89       	ldd	r25, Z+19	; 0x13
    76b4:	2b 81       	ldd	r18, Y+3	; 0x03
    76b6:	3c 81       	ldd	r19, Y+4	; 0x04
    76b8:	f9 01       	movw	r30, r18
    76ba:	22 89       	ldd	r18, Z+18	; 0x12
    76bc:	33 89       	ldd	r19, Z+19	; 0x13
    76be:	f9 01       	movw	r30, r18
    76c0:	20 81       	ld	r18, Z
    76c2:	20 61       	ori	r18, 0x10	; 16
    76c4:	fc 01       	movw	r30, r24
    76c6:	20 83       	st	Z, r18
    76c8:	8b 81       	ldd	r24, Y+3	; 0x03
    76ca:	9c 81       	ldd	r25, Y+4	; 0x04
    76cc:	fc 01       	movw	r30, r24
    76ce:	82 89       	ldd	r24, Z+18	; 0x12
    76d0:	93 89       	ldd	r25, Z+19	; 0x13
    76d2:	2b 81       	ldd	r18, Y+3	; 0x03
    76d4:	3c 81       	ldd	r19, Y+4	; 0x04
    76d6:	f9 01       	movw	r30, r18
    76d8:	22 89       	ldd	r18, Z+18	; 0x12
    76da:	33 89       	ldd	r19, Z+19	; 0x13
    76dc:	f9 01       	movw	r30, r18
    76de:	20 81       	ld	r18, Z
    76e0:	28 60       	ori	r18, 0x08	; 8
    76e2:	fc 01       	movw	r30, r24
    76e4:	20 83       	st	Z, r18
    76e6:	8b 81       	ldd	r24, Y+3	; 0x03
    76e8:	9c 81       	ldd	r25, Y+4	; 0x04
    76ea:	fc 01       	movw	r30, r24
    76ec:	82 89       	ldd	r24, Z+18	; 0x12
    76ee:	93 89       	ldd	r25, Z+19	; 0x13
    76f0:	2b 81       	ldd	r18, Y+3	; 0x03
    76f2:	3c 81       	ldd	r19, Y+4	; 0x04
    76f4:	f9 01       	movw	r30, r18
    76f6:	22 89       	ldd	r18, Z+18	; 0x12
    76f8:	33 89       	ldd	r19, Z+19	; 0x13
    76fa:	f9 01       	movw	r30, r18
    76fc:	20 81       	ld	r18, Z
    76fe:	20 68       	ori	r18, 0x80	; 128
    7700:	fc 01       	movw	r30, r24
    7702:	20 83       	st	Z, r18
    7704:	8b 81       	ldd	r24, Y+3	; 0x03
    7706:	9c 81       	ldd	r25, Y+4	; 0x04
    7708:	fc 01       	movw	r30, r24
    770a:	82 89       	ldd	r24, Z+18	; 0x12
    770c:	93 89       	ldd	r25, Z+19	; 0x13
    770e:	2b 81       	ldd	r18, Y+3	; 0x03
    7710:	3c 81       	ldd	r19, Y+4	; 0x04
    7712:	f9 01       	movw	r30, r18
    7714:	22 89       	ldd	r18, Z+18	; 0x12
    7716:	33 89       	ldd	r19, Z+19	; 0x13
    7718:	f9 01       	movw	r30, r18
    771a:	20 81       	ld	r18, Z
    771c:	2f 7d       	andi	r18, 0xDF	; 223
    771e:	fc 01       	movw	r30, r24
    7720:	20 83       	st	Z, r18
    7722:	00 00       	nop
    7724:	29 96       	adiw	r28, 0x09	; 9
    7726:	0f b6       	in	r0, 0x3f	; 63
    7728:	f8 94       	cli
    772a:	de bf       	out	0x3e, r29	; 62
    772c:	0f be       	out	0x3f, r0	; 63
    772e:	cd bf       	out	0x3d, r28	; 61
    7730:	df 91       	pop	r29
    7732:	cf 91       	pop	r28
    7734:	08 95       	ret

00007736 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
    7736:	cf 93       	push	r28
    7738:	df 93       	push	r29
    773a:	1f 92       	push	r1
    773c:	1f 92       	push	r1
    773e:	cd b7       	in	r28, 0x3d	; 61
    7740:	de b7       	in	r29, 0x3e	; 62
    7742:	9a 83       	std	Y+2, r25	; 0x02
    7744:	89 83       	std	Y+1, r24	; 0x01
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7746:	89 81       	ldd	r24, Y+1	; 0x01
    7748:	9a 81       	ldd	r25, Y+2	; 0x02
    774a:	fc 01       	movw	r30, r24
    774c:	81 8d       	ldd	r24, Z+25	; 0x19
    774e:	88 2f       	mov	r24, r24
    7750:	90 e0       	ldi	r25, 0x00	; 0
    7752:	9c 01       	movw	r18, r24
    7754:	20 5c       	subi	r18, 0xC0	; 192
    7756:	3f 4f       	sbci	r19, 0xFF	; 255
    7758:	89 81       	ldd	r24, Y+1	; 0x01
    775a:	9a 81       	ldd	r25, Y+2	; 0x02
    775c:	fc 01       	movw	r30, r24
    775e:	82 8d       	ldd	r24, Z+26	; 0x1a
    7760:	88 2f       	mov	r24, r24
    7762:	90 e0       	ldi	r25, 0x00	; 0
    7764:	a9 01       	movw	r20, r18
    7766:	48 1b       	sub	r20, r24
    7768:	59 0b       	sbc	r21, r25
    776a:	ca 01       	movw	r24, r20
    776c:	8f 73       	andi	r24, 0x3F	; 63
    776e:	99 27       	eor	r25, r25
}
    7770:	0f 90       	pop	r0
    7772:	0f 90       	pop	r0
    7774:	df 91       	pop	r29
    7776:	cf 91       	pop	r28
    7778:	08 95       	ret

0000777a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    777a:	cf 93       	push	r28
    777c:	df 93       	push	r29
    777e:	1f 92       	push	r1
    7780:	1f 92       	push	r1
    7782:	cd b7       	in	r28, 0x3d	; 61
    7784:	de b7       	in	r29, 0x3e	; 62
    7786:	9a 83       	std	Y+2, r25	; 0x02
    7788:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer_head == _rx_buffer_tail) {
    778a:	89 81       	ldd	r24, Y+1	; 0x01
    778c:	9a 81       	ldd	r25, Y+2	; 0x02
    778e:	fc 01       	movw	r30, r24
    7790:	21 8d       	ldd	r18, Z+25	; 0x19
    7792:	89 81       	ldd	r24, Y+1	; 0x01
    7794:	9a 81       	ldd	r25, Y+2	; 0x02
    7796:	fc 01       	movw	r30, r24
    7798:	92 8d       	ldd	r25, Z+26	; 0x1a
    779a:	81 e0       	ldi	r24, 0x01	; 1
    779c:	29 17       	cp	r18, r25
    779e:	09 f0       	breq	.+2      	; 0x77a2 <_ZN14HardwareSerial4peekEv+0x28>
    77a0:	80 e0       	ldi	r24, 0x00	; 0
    77a2:	88 23       	and	r24, r24
    77a4:	19 f0       	breq	.+6      	; 0x77ac <_ZN14HardwareSerial4peekEv+0x32>
    return -1;
    77a6:	8f ef       	ldi	r24, 0xFF	; 255
    77a8:	9f ef       	ldi	r25, 0xFF	; 255
    77aa:	0f c0       	rjmp	.+30     	; 0x77ca <_ZN14HardwareSerial4peekEv+0x50>
  } else {
    return _rx_buffer[_rx_buffer_tail];
    77ac:	89 81       	ldd	r24, Y+1	; 0x01
    77ae:	9a 81       	ldd	r25, Y+2	; 0x02
    77b0:	fc 01       	movw	r30, r24
    77b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    77b4:	88 2f       	mov	r24, r24
    77b6:	90 e0       	ldi	r25, 0x00	; 0
    77b8:	29 81       	ldd	r18, Y+1	; 0x01
    77ba:	3a 81       	ldd	r19, Y+2	; 0x02
    77bc:	82 0f       	add	r24, r18
    77be:	93 1f       	adc	r25, r19
    77c0:	4d 96       	adiw	r24, 0x1d	; 29
    77c2:	fc 01       	movw	r30, r24
    77c4:	80 81       	ld	r24, Z
    77c6:	88 2f       	mov	r24, r24
    77c8:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    77ca:	0f 90       	pop	r0
    77cc:	0f 90       	pop	r0
    77ce:	df 91       	pop	r29
    77d0:	cf 91       	pop	r28
    77d2:	08 95       	ret

000077d4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    77d4:	cf 93       	push	r28
    77d6:	df 93       	push	r29
    77d8:	00 d0       	rcall	.+0      	; 0x77da <_ZN14HardwareSerial4readEv+0x6>
    77da:	cd b7       	in	r28, 0x3d	; 61
    77dc:	de b7       	in	r29, 0x3e	; 62
    77de:	9b 83       	std	Y+3, r25	; 0x03
    77e0:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    77e2:	8a 81       	ldd	r24, Y+2	; 0x02
    77e4:	9b 81       	ldd	r25, Y+3	; 0x03
    77e6:	fc 01       	movw	r30, r24
    77e8:	21 8d       	ldd	r18, Z+25	; 0x19
    77ea:	8a 81       	ldd	r24, Y+2	; 0x02
    77ec:	9b 81       	ldd	r25, Y+3	; 0x03
    77ee:	fc 01       	movw	r30, r24
    77f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    77f2:	81 e0       	ldi	r24, 0x01	; 1
    77f4:	29 17       	cp	r18, r25
    77f6:	09 f0       	breq	.+2      	; 0x77fa <_ZN14HardwareSerial4readEv+0x26>
    77f8:	80 e0       	ldi	r24, 0x00	; 0
    77fa:	88 23       	and	r24, r24
    77fc:	19 f0       	breq	.+6      	; 0x7804 <_ZN14HardwareSerial4readEv+0x30>
    return -1;
    77fe:	8f ef       	ldi	r24, 0xFF	; 255
    7800:	9f ef       	ldi	r25, 0xFF	; 255
    7802:	1c c0       	rjmp	.+56     	; 0x783c <_ZN14HardwareSerial4readEv+0x68>
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7804:	8a 81       	ldd	r24, Y+2	; 0x02
    7806:	9b 81       	ldd	r25, Y+3	; 0x03
    7808:	fc 01       	movw	r30, r24
    780a:	82 8d       	ldd	r24, Z+26	; 0x1a
    780c:	88 2f       	mov	r24, r24
    780e:	90 e0       	ldi	r25, 0x00	; 0
    7810:	2a 81       	ldd	r18, Y+2	; 0x02
    7812:	3b 81       	ldd	r19, Y+3	; 0x03
    7814:	82 0f       	add	r24, r18
    7816:	93 1f       	adc	r25, r19
    7818:	4d 96       	adiw	r24, 0x1d	; 29
    781a:	fc 01       	movw	r30, r24
    781c:	80 81       	ld	r24, Z
    781e:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7820:	8a 81       	ldd	r24, Y+2	; 0x02
    7822:	9b 81       	ldd	r25, Y+3	; 0x03
    7824:	fc 01       	movw	r30, r24
    7826:	82 8d       	ldd	r24, Z+26	; 0x1a
    7828:	8f 5f       	subi	r24, 0xFF	; 255
    782a:	28 2f       	mov	r18, r24
    782c:	2f 73       	andi	r18, 0x3F	; 63
    782e:	8a 81       	ldd	r24, Y+2	; 0x02
    7830:	9b 81       	ldd	r25, Y+3	; 0x03
    7832:	fc 01       	movw	r30, r24
    7834:	22 8f       	std	Z+26, r18	; 0x1a
    return c;
    7836:	89 81       	ldd	r24, Y+1	; 0x01
    7838:	88 2f       	mov	r24, r24
    783a:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    783c:	0f 90       	pop	r0
    783e:	0f 90       	pop	r0
    7840:	0f 90       	pop	r0
    7842:	df 91       	pop	r29
    7844:	cf 91       	pop	r28
    7846:	08 95       	ret

00007848 <_ZN14HardwareSerial17availableForWriteEv>:

int HardwareSerial::availableForWrite(void)
{
    7848:	cf 93       	push	r28
    784a:	df 93       	push	r29
    784c:	00 d0       	rcall	.+0      	; 0x784e <_ZN14HardwareSerial17availableForWriteEv+0x6>
    784e:	1f 92       	push	r1
    7850:	cd b7       	in	r28, 0x3d	; 61
    7852:	de b7       	in	r29, 0x3e	; 62
    7854:	9c 83       	std	Y+4, r25	; 0x04
    7856:	8b 83       	std	Y+3, r24	; 0x03
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7858:	8b 81       	ldd	r24, Y+3	; 0x03
    785a:	9c 81       	ldd	r25, Y+4	; 0x04
    785c:	fc 01       	movw	r30, r24
    785e:	83 8d       	ldd	r24, Z+27	; 0x1b
    7860:	89 83       	std	Y+1, r24	; 0x01
    tail = _tx_buffer_tail;
    7862:	8b 81       	ldd	r24, Y+3	; 0x03
    7864:	9c 81       	ldd	r25, Y+4	; 0x04
    7866:	fc 01       	movw	r30, r24
    7868:	84 8d       	ldd	r24, Z+28	; 0x1c
    786a:	8a 83       	std	Y+2, r24	; 0x02
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    786c:	99 81       	ldd	r25, Y+1	; 0x01
    786e:	8a 81       	ldd	r24, Y+2	; 0x02
    7870:	98 17       	cp	r25, r24
    7872:	68 f0       	brcs	.+26     	; 0x788e <_ZN14HardwareSerial17availableForWriteEv+0x46>
    7874:	89 81       	ldd	r24, Y+1	; 0x01
    7876:	88 2f       	mov	r24, r24
    7878:	90 e0       	ldi	r25, 0x00	; 0
    787a:	2f e3       	ldi	r18, 0x3F	; 63
    787c:	30 e0       	ldi	r19, 0x00	; 0
    787e:	28 1b       	sub	r18, r24
    7880:	39 0b       	sbc	r19, r25
    7882:	8a 81       	ldd	r24, Y+2	; 0x02
    7884:	88 2f       	mov	r24, r24
    7886:	90 e0       	ldi	r25, 0x00	; 0
    7888:	82 0f       	add	r24, r18
    788a:	93 1f       	adc	r25, r19
    788c:	0b c0       	rjmp	.+22     	; 0x78a4 <_ZN14HardwareSerial17availableForWriteEv+0x5c>
  return tail - head - 1;
    788e:	8a 81       	ldd	r24, Y+2	; 0x02
    7890:	28 2f       	mov	r18, r24
    7892:	30 e0       	ldi	r19, 0x00	; 0
    7894:	89 81       	ldd	r24, Y+1	; 0x01
    7896:	88 2f       	mov	r24, r24
    7898:	90 e0       	ldi	r25, 0x00	; 0
    789a:	a9 01       	movw	r20, r18
    789c:	48 1b       	sub	r20, r24
    789e:	59 0b       	sbc	r21, r25
    78a0:	ca 01       	movw	r24, r20
    78a2:	01 97       	sbiw	r24, 0x01	; 1
}
    78a4:	0f 90       	pop	r0
    78a6:	0f 90       	pop	r0
    78a8:	0f 90       	pop	r0
    78aa:	0f 90       	pop	r0
    78ac:	df 91       	pop	r29
    78ae:	cf 91       	pop	r28
    78b0:	08 95       	ret

000078b2 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
    78b2:	cf 93       	push	r28
    78b4:	df 93       	push	r29
    78b6:	1f 92       	push	r1
    78b8:	1f 92       	push	r1
    78ba:	cd b7       	in	r28, 0x3d	; 61
    78bc:	de b7       	in	r29, 0x3e	; 62
    78be:	9a 83       	std	Y+2, r25	; 0x02
    78c0:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    78c2:	89 81       	ldd	r24, Y+1	; 0x01
    78c4:	9a 81       	ldd	r25, Y+2	; 0x02
    78c6:	fc 01       	movw	r30, r24
    78c8:	90 8d       	ldd	r25, Z+24	; 0x18
    78ca:	81 e0       	ldi	r24, 0x01	; 1
    78cc:	89 27       	eor	r24, r25
    78ce:	88 23       	and	r24, r24
    78d0:	09 f0       	breq	.+2      	; 0x78d4 <_ZN14HardwareSerial5flushEv+0x22>
    78d2:	4d c0       	rjmp	.+154    	; 0x796e <_ZN14HardwareSerial5flushEv+0xbc>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    78d4:	89 81       	ldd	r24, Y+1	; 0x01
    78d6:	9a 81       	ldd	r25, Y+2	; 0x02
    78d8:	fc 01       	movw	r30, r24
    78da:	82 89       	ldd	r24, Z+18	; 0x12
    78dc:	93 89       	ldd	r25, Z+19	; 0x13
    78de:	fc 01       	movw	r30, r24
    78e0:	80 81       	ld	r24, Z
    78e2:	88 2f       	mov	r24, r24
    78e4:	90 e0       	ldi	r25, 0x00	; 0
    78e6:	80 72       	andi	r24, 0x20	; 32
    78e8:	99 27       	eor	r25, r25
    78ea:	89 2b       	or	r24, r25
    78ec:	69 f4       	brne	.+26     	; 0x7908 <_ZN14HardwareSerial5flushEv+0x56>
    78ee:	89 81       	ldd	r24, Y+1	; 0x01
    78f0:	9a 81       	ldd	r25, Y+2	; 0x02
    78f2:	fc 01       	movw	r30, r24
    78f4:	80 89       	ldd	r24, Z+16	; 0x10
    78f6:	91 89       	ldd	r25, Z+17	; 0x11
    78f8:	fc 01       	movw	r30, r24
    78fa:	80 81       	ld	r24, Z
    78fc:	88 2f       	mov	r24, r24
    78fe:	90 e0       	ldi	r25, 0x00	; 0
    7900:	80 74       	andi	r24, 0x40	; 64
    7902:	99 27       	eor	r25, r25
    7904:	89 2b       	or	r24, r25
    7906:	11 f4       	brne	.+4      	; 0x790c <_ZN14HardwareSerial5flushEv+0x5a>
    7908:	81 e0       	ldi	r24, 0x01	; 1
    790a:	01 c0       	rjmp	.+2      	; 0x790e <_ZN14HardwareSerial5flushEv+0x5c>
    790c:	80 e0       	ldi	r24, 0x00	; 0
    790e:	88 23       	and	r24, r24
    7910:	79 f1       	breq	.+94     	; 0x7970 <_ZN14HardwareSerial5flushEv+0xbe>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7912:	8f e5       	ldi	r24, 0x5F	; 95
    7914:	90 e0       	ldi	r25, 0x00	; 0
    7916:	fc 01       	movw	r30, r24
    7918:	80 81       	ld	r24, Z
    791a:	88 23       	and	r24, r24
    791c:	7c f0       	brlt	.+30     	; 0x793c <_ZN14HardwareSerial5flushEv+0x8a>
    791e:	89 81       	ldd	r24, Y+1	; 0x01
    7920:	9a 81       	ldd	r25, Y+2	; 0x02
    7922:	fc 01       	movw	r30, r24
    7924:	82 89       	ldd	r24, Z+18	; 0x12
    7926:	93 89       	ldd	r25, Z+19	; 0x13
    7928:	fc 01       	movw	r30, r24
    792a:	80 81       	ld	r24, Z
    792c:	88 2f       	mov	r24, r24
    792e:	90 e0       	ldi	r25, 0x00	; 0
    7930:	80 72       	andi	r24, 0x20	; 32
    7932:	99 27       	eor	r25, r25
    7934:	89 2b       	or	r24, r25
    7936:	11 f0       	breq	.+4      	; 0x793c <_ZN14HardwareSerial5flushEv+0x8a>
    7938:	81 e0       	ldi	r24, 0x01	; 1
    793a:	01 c0       	rjmp	.+2      	; 0x793e <_ZN14HardwareSerial5flushEv+0x8c>
    793c:	80 e0       	ldi	r24, 0x00	; 0
    793e:	88 23       	and	r24, r24
    7940:	49 f2       	breq	.-110    	; 0x78d4 <_ZN14HardwareSerial5flushEv+0x22>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7942:	89 81       	ldd	r24, Y+1	; 0x01
    7944:	9a 81       	ldd	r25, Y+2	; 0x02
    7946:	fc 01       	movw	r30, r24
    7948:	80 89       	ldd	r24, Z+16	; 0x10
    794a:	91 89       	ldd	r25, Z+17	; 0x11
    794c:	fc 01       	movw	r30, r24
    794e:	80 81       	ld	r24, Z
    7950:	88 2f       	mov	r24, r24
    7952:	90 e0       	ldi	r25, 0x00	; 0
    7954:	80 72       	andi	r24, 0x20	; 32
    7956:	99 27       	eor	r25, r25
    7958:	21 e0       	ldi	r18, 0x01	; 1
    795a:	89 2b       	or	r24, r25
    795c:	09 f4       	brne	.+2      	; 0x7960 <_ZN14HardwareSerial5flushEv+0xae>
    795e:	20 e0       	ldi	r18, 0x00	; 0
    7960:	22 23       	and	r18, r18
    7962:	09 f4       	brne	.+2      	; 0x7966 <_ZN14HardwareSerial5flushEv+0xb4>
    7964:	b7 cf       	rjmp	.-146    	; 0x78d4 <_ZN14HardwareSerial5flushEv+0x22>
	  _tx_udr_empty_irq();
    7966:	89 81       	ldd	r24, Y+1	; 0x01
    7968:	9a 81       	ldd	r25, Y+2	; 0x02
    796a:	be dd       	rcall	.-1156   	; 0x74e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    796c:	b3 cf       	rjmp	.-154    	; 0x78d4 <_ZN14HardwareSerial5flushEv+0x22>
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;
    796e:	00 00       	nop
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7970:	0f 90       	pop	r0
    7972:	0f 90       	pop	r0
    7974:	df 91       	pop	r29
    7976:	cf 91       	pop	r28
    7978:	08 95       	ret

0000797a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    797a:	cf 93       	push	r28
    797c:	df 93       	push	r29
    797e:	cd b7       	in	r28, 0x3d	; 61
    7980:	de b7       	in	r29, 0x3e	; 62
    7982:	28 97       	sbiw	r28, 0x08	; 8
    7984:	0f b6       	in	r0, 0x3f	; 63
    7986:	f8 94       	cli
    7988:	de bf       	out	0x3e, r29	; 62
    798a:	0f be       	out	0x3f, r0	; 63
    798c:	cd bf       	out	0x3d, r28	; 61
    798e:	9f 83       	std	Y+7, r25	; 0x07
    7990:	8e 83       	std	Y+6, r24	; 0x06
    7992:	68 87       	std	Y+8, r22	; 0x08
  _written = true;
    7994:	8e 81       	ldd	r24, Y+6	; 0x06
    7996:	9f 81       	ldd	r25, Y+7	; 0x07
    7998:	21 e0       	ldi	r18, 0x01	; 1
    799a:	fc 01       	movw	r30, r24
    799c:	20 8f       	std	Z+24, r18	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    799e:	8e 81       	ldd	r24, Y+6	; 0x06
    79a0:	9f 81       	ldd	r25, Y+7	; 0x07
    79a2:	fc 01       	movw	r30, r24
    79a4:	23 8d       	ldd	r18, Z+27	; 0x1b
    79a6:	8e 81       	ldd	r24, Y+6	; 0x06
    79a8:	9f 81       	ldd	r25, Y+7	; 0x07
    79aa:	fc 01       	movw	r30, r24
    79ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    79ae:	28 17       	cp	r18, r24
    79b0:	79 f4       	brne	.+30     	; 0x79d0 <_ZN14HardwareSerial5writeEh+0x56>
    79b2:	8e 81       	ldd	r24, Y+6	; 0x06
    79b4:	9f 81       	ldd	r25, Y+7	; 0x07
    79b6:	fc 01       	movw	r30, r24
    79b8:	80 89       	ldd	r24, Z+16	; 0x10
    79ba:	91 89       	ldd	r25, Z+17	; 0x11
    79bc:	fc 01       	movw	r30, r24
    79be:	80 81       	ld	r24, Z
    79c0:	88 2f       	mov	r24, r24
    79c2:	90 e0       	ldi	r25, 0x00	; 0
    79c4:	80 72       	andi	r24, 0x20	; 32
    79c6:	99 27       	eor	r25, r25
    79c8:	89 2b       	or	r24, r25
    79ca:	11 f0       	breq	.+4      	; 0x79d0 <_ZN14HardwareSerial5writeEh+0x56>
    79cc:	81 e0       	ldi	r24, 0x01	; 1
    79ce:	01 c0       	rjmp	.+2      	; 0x79d2 <_ZN14HardwareSerial5writeEh+0x58>
    79d0:	80 e0       	ldi	r24, 0x00	; 0
    79d2:	88 23       	and	r24, r24
    79d4:	51 f1       	breq	.+84     	; 0x7a2a <_ZN14HardwareSerial5writeEh+0xb0>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    79d6:	8f e5       	ldi	r24, 0x5F	; 95
    79d8:	90 e0       	ldi	r25, 0x00	; 0
    79da:	fc 01       	movw	r30, r24
    79dc:	80 81       	ld	r24, Z
    79de:	8c 83       	std	Y+4, r24	; 0x04
    79e0:	12 dd       	rcall	.-1500   	; 0x7406 <_ZL12__iCliRetValv>
    79e2:	89 83       	std	Y+1, r24	; 0x01
    79e4:	89 81       	ldd	r24, Y+1	; 0x01
    79e6:	88 23       	and	r24, r24
    79e8:	d1 f0       	breq	.+52     	; 0x7a1e <_ZN14HardwareSerial5writeEh+0xa4>
      *_udr = c;
    79ea:	8e 81       	ldd	r24, Y+6	; 0x06
    79ec:	9f 81       	ldd	r25, Y+7	; 0x07
    79ee:	fc 01       	movw	r30, r24
    79f0:	86 89       	ldd	r24, Z+22	; 0x16
    79f2:	97 89       	ldd	r25, Z+23	; 0x17
    79f4:	28 85       	ldd	r18, Y+8	; 0x08
    79f6:	fc 01       	movw	r30, r24
    79f8:	20 83       	st	Z, r18
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    79fa:	8e 81       	ldd	r24, Y+6	; 0x06
    79fc:	9f 81       	ldd	r25, Y+7	; 0x07
    79fe:	fc 01       	movw	r30, r24
    7a00:	80 89       	ldd	r24, Z+16	; 0x10
    7a02:	91 89       	ldd	r25, Z+17	; 0x11
    7a04:	2e 81       	ldd	r18, Y+6	; 0x06
    7a06:	3f 81       	ldd	r19, Y+7	; 0x07
    7a08:	f9 01       	movw	r30, r18
    7a0a:	20 89       	ldd	r18, Z+16	; 0x10
    7a0c:	31 89       	ldd	r19, Z+17	; 0x11
    7a0e:	f9 01       	movw	r30, r18
    7a10:	20 81       	ld	r18, Z
    7a12:	23 70       	andi	r18, 0x03	; 3
    7a14:	20 64       	ori	r18, 0x40	; 64
    7a16:	fc 01       	movw	r30, r24
    7a18:	20 83       	st	Z, r18
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7a1a:	19 82       	std	Y+1, r1	; 0x01
    7a1c:	e3 cf       	rjmp	.-58     	; 0x79e4 <_ZN14HardwareSerial5writeEh+0x6a>
    7a1e:	ce 01       	movw	r24, r28
    7a20:	04 96       	adiw	r24, 0x04	; 4
    7a22:	fa dc       	rcall	.-1548   	; 0x7418 <_ZL10__iRestorePKh>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
    7a24:	81 e0       	ldi	r24, 0x01	; 1
    7a26:	90 e0       	ldi	r25, 0x00	; 0
    7a28:	6e c0       	rjmp	.+220    	; 0x7b06 <_ZN14HardwareSerial5writeEh+0x18c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    7a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    7a2e:	fc 01       	movw	r30, r24
    7a30:	83 8d       	ldd	r24, Z+27	; 0x1b
    7a32:	88 2f       	mov	r24, r24
    7a34:	90 e0       	ldi	r25, 0x00	; 0
    7a36:	01 96       	adiw	r24, 0x01	; 1
    7a38:	8f 73       	andi	r24, 0x3F	; 63
    7a3a:	90 78       	andi	r25, 0x80	; 128
    7a3c:	99 23       	and	r25, r25
    7a3e:	24 f4       	brge	.+8      	; 0x7a48 <_ZN14HardwareSerial5writeEh+0xce>
    7a40:	01 97       	sbiw	r24, 0x01	; 1
    7a42:	80 6c       	ori	r24, 0xC0	; 192
    7a44:	9f 6f       	ori	r25, 0xFF	; 255
    7a46:	01 96       	adiw	r24, 0x01	; 1
    7a48:	8b 83       	std	Y+3, r24	; 0x03
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    7a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    7a4e:	fc 01       	movw	r30, r24
    7a50:	24 8d       	ldd	r18, Z+28	; 0x1c
    7a52:	81 e0       	ldi	r24, 0x01	; 1
    7a54:	9b 81       	ldd	r25, Y+3	; 0x03
    7a56:	29 17       	cp	r18, r25
    7a58:	09 f0       	breq	.+2      	; 0x7a5c <_ZN14HardwareSerial5writeEh+0xe2>
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	88 23       	and	r24, r24
    7a5e:	f9 f0       	breq	.+62     	; 0x7a9e <_ZN14HardwareSerial5writeEh+0x124>
    if (bit_is_clear(SREG, SREG_I)) {
    7a60:	8f e5       	ldi	r24, 0x5F	; 95
    7a62:	90 e0       	ldi	r25, 0x00	; 0
    7a64:	fc 01       	movw	r30, r24
    7a66:	80 81       	ld	r24, Z
    7a68:	80 95       	com	r24
    7a6a:	88 1f       	adc	r24, r24
    7a6c:	88 27       	eor	r24, r24
    7a6e:	88 1f       	adc	r24, r24
    7a70:	88 23       	and	r24, r24
    7a72:	59 f3       	breq	.-42     	; 0x7a4a <_ZN14HardwareSerial5writeEh+0xd0>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7a74:	8e 81       	ldd	r24, Y+6	; 0x06
    7a76:	9f 81       	ldd	r25, Y+7	; 0x07
    7a78:	fc 01       	movw	r30, r24
    7a7a:	80 89       	ldd	r24, Z+16	; 0x10
    7a7c:	91 89       	ldd	r25, Z+17	; 0x11
    7a7e:	fc 01       	movw	r30, r24
    7a80:	80 81       	ld	r24, Z
    7a82:	88 2f       	mov	r24, r24
    7a84:	90 e0       	ldi	r25, 0x00	; 0
    7a86:	80 72       	andi	r24, 0x20	; 32
    7a88:	99 27       	eor	r25, r25
    7a8a:	21 e0       	ldi	r18, 0x01	; 1
    7a8c:	89 2b       	or	r24, r25
    7a8e:	09 f4       	brne	.+2      	; 0x7a92 <_ZN14HardwareSerial5writeEh+0x118>
    7a90:	20 e0       	ldi	r18, 0x00	; 0
    7a92:	22 23       	and	r18, r18
    7a94:	d1 f2       	breq	.-76     	; 0x7a4a <_ZN14HardwareSerial5writeEh+0xd0>
	_tx_udr_empty_irq();
    7a96:	8e 81       	ldd	r24, Y+6	; 0x06
    7a98:	9f 81       	ldd	r25, Y+7	; 0x07
    7a9a:	26 dd       	rcall	.-1460   	; 0x74e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7a9c:	d6 cf       	rjmp	.-84     	; 0x7a4a <_ZN14HardwareSerial5writeEh+0xd0>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    7aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    7aa2:	fc 01       	movw	r30, r24
    7aa4:	83 8d       	ldd	r24, Z+27	; 0x1b
    7aa6:	88 2f       	mov	r24, r24
    7aa8:	90 e0       	ldi	r25, 0x00	; 0
    7aaa:	2e 81       	ldd	r18, Y+6	; 0x06
    7aac:	3f 81       	ldd	r19, Y+7	; 0x07
    7aae:	82 0f       	add	r24, r18
    7ab0:	93 1f       	adc	r25, r19
    7ab2:	83 5a       	subi	r24, 0xA3	; 163
    7ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ab6:	28 85       	ldd	r18, Y+8	; 0x08
    7ab8:	fc 01       	movw	r30, r24
    7aba:	20 83       	st	Z, r18

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7abc:	8f e5       	ldi	r24, 0x5F	; 95
    7abe:	90 e0       	ldi	r25, 0x00	; 0
    7ac0:	fc 01       	movw	r30, r24
    7ac2:	80 81       	ld	r24, Z
    7ac4:	8d 83       	std	Y+5, r24	; 0x05
    7ac6:	9f dc       	rcall	.-1730   	; 0x7406 <_ZL12__iCliRetValv>
    7ac8:	8a 83       	std	Y+2, r24	; 0x02
    7aca:	8a 81       	ldd	r24, Y+2	; 0x02
    7acc:	88 23       	and	r24, r24
    7ace:	b1 f0       	breq	.+44     	; 0x7afc <_ZN14HardwareSerial5writeEh+0x182>
    _tx_buffer_head = i;
    7ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ad2:	9f 81       	ldd	r25, Y+7	; 0x07
    7ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    7ad6:	fc 01       	movw	r30, r24
    7ad8:	23 8f       	std	Z+27, r18	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7ada:	8e 81       	ldd	r24, Y+6	; 0x06
    7adc:	9f 81       	ldd	r25, Y+7	; 0x07
    7ade:	fc 01       	movw	r30, r24
    7ae0:	82 89       	ldd	r24, Z+18	; 0x12
    7ae2:	93 89       	ldd	r25, Z+19	; 0x13
    7ae4:	2e 81       	ldd	r18, Y+6	; 0x06
    7ae6:	3f 81       	ldd	r19, Y+7	; 0x07
    7ae8:	f9 01       	movw	r30, r18
    7aea:	22 89       	ldd	r18, Z+18	; 0x12
    7aec:	33 89       	ldd	r19, Z+19	; 0x13
    7aee:	f9 01       	movw	r30, r18
    7af0:	20 81       	ld	r18, Z
    7af2:	20 62       	ori	r18, 0x20	; 32
    7af4:	fc 01       	movw	r30, r24
    7af6:	20 83       	st	Z, r18
  _tx_buffer[_tx_buffer_head] = c;

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7af8:	1a 82       	std	Y+2, r1	; 0x02
    7afa:	e7 cf       	rjmp	.-50     	; 0x7aca <_ZN14HardwareSerial5writeEh+0x150>
    7afc:	ce 01       	movw	r24, r28
    7afe:	05 96       	adiw	r24, 0x05	; 5
    7b00:	8b dc       	rcall	.-1770   	; 0x7418 <_ZL10__iRestorePKh>
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
    7b02:	81 e0       	ldi	r24, 0x01	; 1
    7b04:	90 e0       	ldi	r25, 0x00	; 0
}
    7b06:	28 96       	adiw	r28, 0x08	; 8
    7b08:	0f b6       	in	r0, 0x3f	; 63
    7b0a:	f8 94       	cli
    7b0c:	de bf       	out	0x3e, r29	; 62
    7b0e:	0f be       	out	0x3f, r0	; 63
    7b10:	cd bf       	out	0x3d, r28	; 61
    7b12:	df 91       	pop	r29
    7b14:	cf 91       	pop	r28
    7b16:	08 95       	ret

00007b18 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    7b18:	cf 93       	push	r28
    7b1a:	df 93       	push	r29
    7b1c:	1f 92       	push	r1
    7b1e:	1f 92       	push	r1
    7b20:	cd b7       	in	r28, 0x3d	; 61
    7b22:	de b7       	in	r29, 0x3e	; 62
    7b24:	9a 83       	std	Y+2, r25	; 0x02
    7b26:	89 83       	std	Y+1, r24	; 0x01
    7b28:	89 81       	ldd	r24, Y+1	; 0x01
    7b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    7b2c:	0e 94 98 22 	call	0x4530	; 0x4530 <_ZN5PrintC1Ev>
    7b30:	28 ed       	ldi	r18, 0xD8	; 216
    7b32:	32 e0       	ldi	r19, 0x02	; 2
    7b34:	89 81       	ldd	r24, Y+1	; 0x01
    7b36:	9a 81       	ldd	r25, Y+2	; 0x02
    7b38:	fc 01       	movw	r30, r24
    7b3a:	31 83       	std	Z+1, r19	; 0x01
    7b3c:	20 83       	st	Z, r18
    7b3e:	29 81       	ldd	r18, Y+1	; 0x01
    7b40:	3a 81       	ldd	r19, Y+2	; 0x02
    7b42:	88 ee       	ldi	r24, 0xE8	; 232
    7b44:	93 e0       	ldi	r25, 0x03	; 3
    7b46:	a0 e0       	ldi	r26, 0x00	; 0
    7b48:	b0 e0       	ldi	r27, 0x00	; 0
    7b4a:	f9 01       	movw	r30, r18
    7b4c:	84 83       	std	Z+4, r24	; 0x04
    7b4e:	95 83       	std	Z+5, r25	; 0x05
    7b50:	a6 83       	std	Z+6, r26	; 0x06
    7b52:	b7 83       	std	Z+7, r27	; 0x07
    7b54:	00 00       	nop
    7b56:	0f 90       	pop	r0
    7b58:	0f 90       	pop	r0
    7b5a:	df 91       	pop	r29
    7b5c:	cf 91       	pop	r28
    7b5e:	08 95       	ret

00007b60 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
    7b60:	cf 92       	push	r12
    7b62:	df 92       	push	r13
    7b64:	ef 92       	push	r14
    7b66:	ff 92       	push	r15
    7b68:	0f 93       	push	r16
    7b6a:	1f 93       	push	r17
    7b6c:	cf 93       	push	r28
    7b6e:	df 93       	push	r29
    7b70:	cd b7       	in	r28, 0x3d	; 61
    7b72:	de b7       	in	r29, 0x3e	; 62
    7b74:	2e 97       	sbiw	r28, 0x0e	; 14
    7b76:	0f b6       	in	r0, 0x3f	; 63
    7b78:	f8 94       	cli
    7b7a:	de bf       	out	0x3e, r29	; 62
    7b7c:	0f be       	out	0x3f, r0	; 63
    7b7e:	cd bf       	out	0x3d, r28	; 61
    7b80:	9a 83       	std	Y+2, r25	; 0x02
    7b82:	89 83       	std	Y+1, r24	; 0x01
    7b84:	7c 83       	std	Y+4, r23	; 0x04
    7b86:	6b 83       	std	Y+3, r22	; 0x03
    7b88:	5e 83       	std	Y+6, r21	; 0x06
    7b8a:	4d 83       	std	Y+5, r20	; 0x05
    7b8c:	38 87       	std	Y+8, r19	; 0x08
    7b8e:	2f 83       	std	Y+7, r18	; 0x07
    7b90:	1a 87       	std	Y+10, r17	; 0x0a
    7b92:	09 87       	std	Y+9, r16	; 0x09
    7b94:	fc 86       	std	Y+12, r15	; 0x0c
    7b96:	eb 86       	std	Y+11, r14	; 0x0b
    7b98:	de 86       	std	Y+14, r13	; 0x0e
    7b9a:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    7b9c:	89 81       	ldd	r24, Y+1	; 0x01
    7b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    7ba0:	bb df       	rcall	.-138    	; 0x7b18 <_ZN6StreamC1Ev>
    7ba2:	26 ef       	ldi	r18, 0xF6	; 246
    7ba4:	32 e0       	ldi	r19, 0x02	; 2
    7ba6:	89 81       	ldd	r24, Y+1	; 0x01
    7ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    7baa:	fc 01       	movw	r30, r24
    7bac:	31 83       	std	Z+1, r19	; 0x01
    7bae:	20 83       	st	Z, r18
    7bb0:	89 81       	ldd	r24, Y+1	; 0x01
    7bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    7bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    7bb8:	fc 01       	movw	r30, r24
    7bba:	35 87       	std	Z+13, r19	; 0x0d
    7bbc:	24 87       	std	Z+12, r18	; 0x0c
    7bbe:	89 81       	ldd	r24, Y+1	; 0x01
    7bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    7bc2:	2d 81       	ldd	r18, Y+5	; 0x05
    7bc4:	3e 81       	ldd	r19, Y+6	; 0x06
    7bc6:	fc 01       	movw	r30, r24
    7bc8:	37 87       	std	Z+15, r19	; 0x0f
    7bca:	26 87       	std	Z+14, r18	; 0x0e
    7bcc:	89 81       	ldd	r24, Y+1	; 0x01
    7bce:	9a 81       	ldd	r25, Y+2	; 0x02
    7bd0:	2f 81       	ldd	r18, Y+7	; 0x07
    7bd2:	38 85       	ldd	r19, Y+8	; 0x08
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	31 8b       	std	Z+17, r19	; 0x11
    7bd8:	20 8b       	std	Z+16, r18	; 0x10
    7bda:	89 81       	ldd	r24, Y+1	; 0x01
    7bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    7bde:	29 85       	ldd	r18, Y+9	; 0x09
    7be0:	3a 85       	ldd	r19, Y+10	; 0x0a
    7be2:	fc 01       	movw	r30, r24
    7be4:	33 8b       	std	Z+19, r19	; 0x13
    7be6:	22 8b       	std	Z+18, r18	; 0x12
    7be8:	89 81       	ldd	r24, Y+1	; 0x01
    7bea:	9a 81       	ldd	r25, Y+2	; 0x02
    7bec:	2b 85       	ldd	r18, Y+11	; 0x0b
    7bee:	3c 85       	ldd	r19, Y+12	; 0x0c
    7bf0:	fc 01       	movw	r30, r24
    7bf2:	35 8b       	std	Z+21, r19	; 0x15
    7bf4:	24 8b       	std	Z+20, r18	; 0x14
    7bf6:	89 81       	ldd	r24, Y+1	; 0x01
    7bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    7bfa:	2d 85       	ldd	r18, Y+13	; 0x0d
    7bfc:	3e 85       	ldd	r19, Y+14	; 0x0e
    7bfe:	fc 01       	movw	r30, r24
    7c00:	37 8b       	std	Z+23, r19	; 0x17
    7c02:	26 8b       	std	Z+22, r18	; 0x16
    7c04:	89 81       	ldd	r24, Y+1	; 0x01
    7c06:	9a 81       	ldd	r25, Y+2	; 0x02
    7c08:	fc 01       	movw	r30, r24
    7c0a:	11 8e       	std	Z+25, r1	; 0x19
    7c0c:	89 81       	ldd	r24, Y+1	; 0x01
    7c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c10:	fc 01       	movw	r30, r24
    7c12:	12 8e       	std	Z+26, r1	; 0x1a
    7c14:	89 81       	ldd	r24, Y+1	; 0x01
    7c16:	9a 81       	ldd	r25, Y+2	; 0x02
    7c18:	fc 01       	movw	r30, r24
    7c1a:	13 8e       	std	Z+27, r1	; 0x1b
    7c1c:	89 81       	ldd	r24, Y+1	; 0x01
    7c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c20:	fc 01       	movw	r30, r24
    7c22:	14 8e       	std	Z+28, r1	; 0x1c
{
}
    7c24:	00 00       	nop
    7c26:	2e 96       	adiw	r28, 0x0e	; 14
    7c28:	0f b6       	in	r0, 0x3f	; 63
    7c2a:	f8 94       	cli
    7c2c:	de bf       	out	0x3e, r29	; 62
    7c2e:	0f be       	out	0x3f, r0	; 63
    7c30:	cd bf       	out	0x3d, r28	; 61
    7c32:	df 91       	pop	r29
    7c34:	cf 91       	pop	r28
    7c36:	1f 91       	pop	r17
    7c38:	0f 91       	pop	r16
    7c3a:	ff 90       	pop	r15
    7c3c:	ef 90       	pop	r14
    7c3e:	df 90       	pop	r13
    7c40:	cf 90       	pop	r12
    7c42:	08 95       	ret

00007c44 <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
    7c44:	cf 93       	push	r28
    7c46:	df 93       	push	r29
    7c48:	00 d0       	rcall	.+0      	; 0x7c4a <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
    7c4a:	1f 92       	push	r1
    7c4c:	cd b7       	in	r28, 0x3d	; 61
    7c4e:	de b7       	in	r29, 0x3e	; 62
    7c50:	9c 83       	std	Y+4, r25	; 0x04
    7c52:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
    7c54:	8b 81       	ldd	r24, Y+3	; 0x03
    7c56:	9c 81       	ldd	r25, Y+4	; 0x04
    7c58:	fc 01       	movw	r30, r24
    7c5a:	80 89       	ldd	r24, Z+16	; 0x10
    7c5c:	91 89       	ldd	r25, Z+17	; 0x11
    7c5e:	fc 01       	movw	r30, r24
    7c60:	80 81       	ld	r24, Z
    7c62:	88 2f       	mov	r24, r24
    7c64:	90 e0       	ldi	r25, 0x00	; 0
    7c66:	84 70       	andi	r24, 0x04	; 4
    7c68:	99 27       	eor	r25, r25
    7c6a:	21 e0       	ldi	r18, 0x01	; 1
    7c6c:	89 2b       	or	r24, r25
    7c6e:	09 f0       	breq	.+2      	; 0x7c72 <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
    7c70:	20 e0       	ldi	r18, 0x00	; 0
    7c72:	22 23       	and	r18, r18
    7c74:	71 f1       	breq	.+92     	; 0x7cd2 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    7c76:	8b 81       	ldd	r24, Y+3	; 0x03
    7c78:	9c 81       	ldd	r25, Y+4	; 0x04
    7c7a:	fc 01       	movw	r30, r24
    7c7c:	86 89       	ldd	r24, Z+22	; 0x16
    7c7e:	97 89       	ldd	r25, Z+23	; 0x17
    7c80:	fc 01       	movw	r30, r24
    7c82:	80 81       	ld	r24, Z
    7c84:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    7c86:	8b 81       	ldd	r24, Y+3	; 0x03
    7c88:	9c 81       	ldd	r25, Y+4	; 0x04
    7c8a:	fc 01       	movw	r30, r24
    7c8c:	81 8d       	ldd	r24, Z+25	; 0x19
    7c8e:	8f 5f       	subi	r24, 0xFF	; 255
    7c90:	8f 73       	andi	r24, 0x3F	; 63
    7c92:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7c94:	8b 81       	ldd	r24, Y+3	; 0x03
    7c96:	9c 81       	ldd	r25, Y+4	; 0x04
    7c98:	fc 01       	movw	r30, r24
    7c9a:	22 8d       	ldd	r18, Z+26	; 0x1a
    7c9c:	81 e0       	ldi	r24, 0x01	; 1
    7c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    7ca0:	29 17       	cp	r18, r25
    7ca2:	09 f4       	brne	.+2      	; 0x7ca6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
    7ca4:	80 e0       	ldi	r24, 0x00	; 0
    7ca6:	88 23       	and	r24, r24
    7ca8:	d9 f0       	breq	.+54     	; 0x7ce0 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
    7caa:	8b 81       	ldd	r24, Y+3	; 0x03
    7cac:	9c 81       	ldd	r25, Y+4	; 0x04
    7cae:	fc 01       	movw	r30, r24
    7cb0:	81 8d       	ldd	r24, Z+25	; 0x19
    7cb2:	88 2f       	mov	r24, r24
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    7cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    7cba:	82 0f       	add	r24, r18
    7cbc:	93 1f       	adc	r25, r19
    7cbe:	4d 96       	adiw	r24, 0x1d	; 29
    7cc0:	29 81       	ldd	r18, Y+1	; 0x01
    7cc2:	fc 01       	movw	r30, r24
    7cc4:	20 83       	st	Z, r18
      _rx_buffer_head = i;
    7cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    7cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    7cca:	2a 81       	ldd	r18, Y+2	; 0x02
    7ccc:	fc 01       	movw	r30, r24
    7cce:	21 8f       	std	Z+25, r18	; 0x19
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
  };
}
    7cd0:	07 c0       	rjmp	.+14     	; 0x7ce0 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
      _rx_buffer_head = i;
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    7cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    7cd6:	fc 01       	movw	r30, r24
    7cd8:	86 89       	ldd	r24, Z+22	; 0x16
    7cda:	97 89       	ldd	r25, Z+23	; 0x17
    7cdc:	fc 01       	movw	r30, r24
    7cde:	80 81       	ld	r24, Z
  };
}
    7ce0:	00 00       	nop
    7ce2:	0f 90       	pop	r0
    7ce4:	0f 90       	pop	r0
    7ce6:	0f 90       	pop	r0
    7ce8:	0f 90       	pop	r0
    7cea:	df 91       	pop	r29
    7cec:	cf 91       	pop	r28
    7cee:	08 95       	ret

00007cf0 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7cf0:	1f 92       	push	r1
    7cf2:	0f 92       	push	r0
    7cf4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7cf8:	0f 92       	push	r0
    7cfa:	11 24       	eor	r1, r1
    7cfc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7d00:	0f 92       	push	r0
    7d02:	2f 93       	push	r18
    7d04:	3f 93       	push	r19
    7d06:	4f 93       	push	r20
    7d08:	5f 93       	push	r21
    7d0a:	6f 93       	push	r22
    7d0c:	7f 93       	push	r23
    7d0e:	8f 93       	push	r24
    7d10:	9f 93       	push	r25
    7d12:	af 93       	push	r26
    7d14:	bf 93       	push	r27
    7d16:	ef 93       	push	r30
    7d18:	ff 93       	push	r31
    7d1a:	cf 93       	push	r28
    7d1c:	df 93       	push	r29
    7d1e:	cd b7       	in	r28, 0x3d	; 61
    7d20:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
    7d22:	8f ec       	ldi	r24, 0xCF	; 207
    7d24:	93 e0       	ldi	r25, 0x03	; 3
    7d26:	8e df       	rcall	.-228    	; 0x7c44 <_ZN14HardwareSerial16_rx_complete_irqEv>
  }
    7d28:	00 00       	nop
    7d2a:	df 91       	pop	r29
    7d2c:	cf 91       	pop	r28
    7d2e:	ff 91       	pop	r31
    7d30:	ef 91       	pop	r30
    7d32:	bf 91       	pop	r27
    7d34:	af 91       	pop	r26
    7d36:	9f 91       	pop	r25
    7d38:	8f 91       	pop	r24
    7d3a:	7f 91       	pop	r23
    7d3c:	6f 91       	pop	r22
    7d3e:	5f 91       	pop	r21
    7d40:	4f 91       	pop	r20
    7d42:	3f 91       	pop	r19
    7d44:	2f 91       	pop	r18
    7d46:	0f 90       	pop	r0
    7d48:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7d4c:	0f 90       	pop	r0
    7d4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7d52:	0f 90       	pop	r0
    7d54:	1f 90       	pop	r1
    7d56:	18 95       	reti

00007d58 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    7d58:	1f 92       	push	r1
    7d5a:	0f 92       	push	r0
    7d5c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7d60:	0f 92       	push	r0
    7d62:	11 24       	eor	r1, r1
    7d64:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7d68:	0f 92       	push	r0
    7d6a:	2f 93       	push	r18
    7d6c:	3f 93       	push	r19
    7d6e:	4f 93       	push	r20
    7d70:	5f 93       	push	r21
    7d72:	6f 93       	push	r22
    7d74:	7f 93       	push	r23
    7d76:	8f 93       	push	r24
    7d78:	9f 93       	push	r25
    7d7a:	af 93       	push	r26
    7d7c:	bf 93       	push	r27
    7d7e:	ef 93       	push	r30
    7d80:	ff 93       	push	r31
    7d82:	cf 93       	push	r28
    7d84:	df 93       	push	r29
    7d86:	cd b7       	in	r28, 0x3d	; 61
    7d88:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
    7d8a:	8f ec       	ldi	r24, 0xCF	; 207
    7d8c:	93 e0       	ldi	r25, 0x03	; 3
    7d8e:	ac db       	rcall	.-2216   	; 0x74e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    7d90:	00 00       	nop
    7d92:	df 91       	pop	r29
    7d94:	cf 91       	pop	r28
    7d96:	ff 91       	pop	r31
    7d98:	ef 91       	pop	r30
    7d9a:	bf 91       	pop	r27
    7d9c:	af 91       	pop	r26
    7d9e:	9f 91       	pop	r25
    7da0:	8f 91       	pop	r24
    7da2:	7f 91       	pop	r23
    7da4:	6f 91       	pop	r22
    7da6:	5f 91       	pop	r21
    7da8:	4f 91       	pop	r20
    7daa:	3f 91       	pop	r19
    7dac:	2f 91       	pop	r18
    7dae:	0f 90       	pop	r0
    7db0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7db4:	0f 90       	pop	r0
    7db6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7dba:	0f 90       	pop	r0
    7dbc:	1f 90       	pop	r1
    7dbe:	18 95       	reti

00007dc0 <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
    7dc0:	cf 93       	push	r28
    7dc2:	df 93       	push	r29
    7dc4:	cd b7       	in	r28, 0x3d	; 61
    7dc6:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
    7dc8:	8f ec       	ldi	r24, 0xCF	; 207
    7dca:	93 e0       	ldi	r25, 0x03	; 3
    7dcc:	b4 dc       	rcall	.-1688   	; 0x7736 <_ZN14HardwareSerial9availableEv>
    7dce:	21 e0       	ldi	r18, 0x01	; 1
    7dd0:	89 2b       	or	r24, r25
    7dd2:	09 f4       	brne	.+2      	; 0x7dd6 <_Z17Serial0_availablev+0x16>
    7dd4:	20 e0       	ldi	r18, 0x00	; 0
    7dd6:	82 2f       	mov	r24, r18
}
    7dd8:	df 91       	pop	r29
    7dda:	cf 91       	pop	r28
    7ddc:	08 95       	ret

00007dde <_Z41__static_initialization_and_destruction_0ii>:
    7dde:	cf 92       	push	r12
    7de0:	df 92       	push	r13
    7de2:	ef 92       	push	r14
    7de4:	ff 92       	push	r15
    7de6:	0f 93       	push	r16
    7de8:	1f 93       	push	r17
    7dea:	cf 93       	push	r28
    7dec:	df 93       	push	r29
    7dee:	00 d0       	rcall	.+0      	; 0x7df0 <_Z41__static_initialization_and_destruction_0ii+0x12>
    7df0:	1f 92       	push	r1
    7df2:	cd b7       	in	r28, 0x3d	; 61
    7df4:	de b7       	in	r29, 0x3e	; 62
    7df6:	9a 83       	std	Y+2, r25	; 0x02
    7df8:	89 83       	std	Y+1, r24	; 0x01
    7dfa:	7c 83       	std	Y+4, r23	; 0x04
    7dfc:	6b 83       	std	Y+3, r22	; 0x03
    7dfe:	89 81       	ldd	r24, Y+1	; 0x01
    7e00:	9a 81       	ldd	r25, Y+2	; 0x02
    7e02:	01 97       	sbiw	r24, 0x01	; 1
    7e04:	c9 f4       	brne	.+50     	; 0x7e38 <_Z41__static_initialization_and_destruction_0ii+0x5a>
    7e06:	8b 81       	ldd	r24, Y+3	; 0x03
    7e08:	9c 81       	ldd	r25, Y+4	; 0x04
    7e0a:	01 96       	adiw	r24, 0x01	; 1
    7e0c:	a9 f4       	brne	.+42     	; 0x7e38 <_Z41__static_initialization_and_destruction_0ii+0x5a>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
    7e0e:	0f 2e       	mov	r0, r31
    7e10:	f6 ec       	ldi	r31, 0xC6	; 198
    7e12:	cf 2e       	mov	r12, r31
    7e14:	d1 2c       	mov	r13, r1
    7e16:	f0 2d       	mov	r31, r0
    7e18:	0f 2e       	mov	r0, r31
    7e1a:	f2 ec       	ldi	r31, 0xC2	; 194
    7e1c:	ef 2e       	mov	r14, r31
    7e1e:	f1 2c       	mov	r15, r1
    7e20:	f0 2d       	mov	r31, r0
    7e22:	01 ec       	ldi	r16, 0xC1	; 193
    7e24:	10 e0       	ldi	r17, 0x00	; 0
    7e26:	20 ec       	ldi	r18, 0xC0	; 192
    7e28:	30 e0       	ldi	r19, 0x00	; 0
    7e2a:	44 ec       	ldi	r20, 0xC4	; 196
    7e2c:	50 e0       	ldi	r21, 0x00	; 0
    7e2e:	65 ec       	ldi	r22, 0xC5	; 197
    7e30:	70 e0       	ldi	r23, 0x00	; 0
    7e32:	8f ec       	ldi	r24, 0xCF	; 207
    7e34:	93 e0       	ldi	r25, 0x03	; 3
    7e36:	94 de       	rcall	.-728    	; 0x7b60 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    7e38:	00 00       	nop
    7e3a:	0f 90       	pop	r0
    7e3c:	0f 90       	pop	r0
    7e3e:	0f 90       	pop	r0
    7e40:	0f 90       	pop	r0
    7e42:	df 91       	pop	r29
    7e44:	cf 91       	pop	r28
    7e46:	1f 91       	pop	r17
    7e48:	0f 91       	pop	r16
    7e4a:	ff 90       	pop	r15
    7e4c:	ef 90       	pop	r14
    7e4e:	df 90       	pop	r13
    7e50:	cf 90       	pop	r12
    7e52:	08 95       	ret

00007e54 <_GLOBAL__sub_I___vector_25>:
    7e54:	cf 93       	push	r28
    7e56:	df 93       	push	r29
    7e58:	cd b7       	in	r28, 0x3d	; 61
    7e5a:	de b7       	in	r29, 0x3e	; 62
    7e5c:	6f ef       	ldi	r22, 0xFF	; 255
    7e5e:	7f ef       	ldi	r23, 0xFF	; 255
    7e60:	81 e0       	ldi	r24, 0x01	; 1
    7e62:	90 e0       	ldi	r25, 0x00	; 0
    7e64:	bc df       	rcall	.-136    	; 0x7dde <_Z41__static_initialization_and_destruction_0ii>
    7e66:	df 91       	pop	r29
    7e68:	cf 91       	pop	r28
    7e6a:	08 95       	ret

00007e6c <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    7e6c:	1f 92       	push	r1
    7e6e:	0f 92       	push	r0
    7e70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7e74:	0f 92       	push	r0
    7e76:	11 24       	eor	r1, r1
    7e78:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7e7c:	0f 92       	push	r0
    7e7e:	2f 93       	push	r18
    7e80:	3f 93       	push	r19
    7e82:	4f 93       	push	r20
    7e84:	5f 93       	push	r21
    7e86:	6f 93       	push	r22
    7e88:	7f 93       	push	r23
    7e8a:	8f 93       	push	r24
    7e8c:	9f 93       	push	r25
    7e8e:	af 93       	push	r26
    7e90:	bf 93       	push	r27
    7e92:	ef 93       	push	r30
    7e94:	ff 93       	push	r31
    7e96:	cf 93       	push	r28
    7e98:	df 93       	push	r29
    7e9a:	cd b7       	in	r28, 0x3d	; 61
    7e9c:	de b7       	in	r29, 0x3e	; 62
  Serial1._rx_complete_irq();
    7e9e:	8c e6       	ldi	r24, 0x6C	; 108
    7ea0:	94 e0       	ldi	r25, 0x04	; 4
    7ea2:	d0 de       	rcall	.-608    	; 0x7c44 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
    7ea4:	00 00       	nop
    7ea6:	df 91       	pop	r29
    7ea8:	cf 91       	pop	r28
    7eaa:	ff 91       	pop	r31
    7eac:	ef 91       	pop	r30
    7eae:	bf 91       	pop	r27
    7eb0:	af 91       	pop	r26
    7eb2:	9f 91       	pop	r25
    7eb4:	8f 91       	pop	r24
    7eb6:	7f 91       	pop	r23
    7eb8:	6f 91       	pop	r22
    7eba:	5f 91       	pop	r21
    7ebc:	4f 91       	pop	r20
    7ebe:	3f 91       	pop	r19
    7ec0:	2f 91       	pop	r18
    7ec2:	0f 90       	pop	r0
    7ec4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7ec8:	0f 90       	pop	r0
    7eca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7ece:	0f 90       	pop	r0
    7ed0:	1f 90       	pop	r1
    7ed2:	18 95       	reti

00007ed4 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    7ed4:	1f 92       	push	r1
    7ed6:	0f 92       	push	r0
    7ed8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7edc:	0f 92       	push	r0
    7ede:	11 24       	eor	r1, r1
    7ee0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7ee4:	0f 92       	push	r0
    7ee6:	2f 93       	push	r18
    7ee8:	3f 93       	push	r19
    7eea:	4f 93       	push	r20
    7eec:	5f 93       	push	r21
    7eee:	6f 93       	push	r22
    7ef0:	7f 93       	push	r23
    7ef2:	8f 93       	push	r24
    7ef4:	9f 93       	push	r25
    7ef6:	af 93       	push	r26
    7ef8:	bf 93       	push	r27
    7efa:	ef 93       	push	r30
    7efc:	ff 93       	push	r31
    7efe:	cf 93       	push	r28
    7f00:	df 93       	push	r29
    7f02:	cd b7       	in	r28, 0x3d	; 61
    7f04:	de b7       	in	r29, 0x3e	; 62
  Serial1._tx_udr_empty_irq();
    7f06:	8c e6       	ldi	r24, 0x6C	; 108
    7f08:	94 e0       	ldi	r25, 0x04	; 4
    7f0a:	ee da       	rcall	.-2596   	; 0x74e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    7f0c:	00 00       	nop
    7f0e:	df 91       	pop	r29
    7f10:	cf 91       	pop	r28
    7f12:	ff 91       	pop	r31
    7f14:	ef 91       	pop	r30
    7f16:	bf 91       	pop	r27
    7f18:	af 91       	pop	r26
    7f1a:	9f 91       	pop	r25
    7f1c:	8f 91       	pop	r24
    7f1e:	7f 91       	pop	r23
    7f20:	6f 91       	pop	r22
    7f22:	5f 91       	pop	r21
    7f24:	4f 91       	pop	r20
    7f26:	3f 91       	pop	r19
    7f28:	2f 91       	pop	r18
    7f2a:	0f 90       	pop	r0
    7f2c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7f30:	0f 90       	pop	r0
    7f32:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7f36:	0f 90       	pop	r0
    7f38:	1f 90       	pop	r1
    7f3a:	18 95       	reti

00007f3c <_Z17Serial1_availablev>:

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
    7f3c:	cf 93       	push	r28
    7f3e:	df 93       	push	r29
    7f40:	cd b7       	in	r28, 0x3d	; 61
    7f42:	de b7       	in	r29, 0x3e	; 62
  return Serial1.available();
    7f44:	8c e6       	ldi	r24, 0x6C	; 108
    7f46:	94 e0       	ldi	r25, 0x04	; 4
    7f48:	f6 db       	rcall	.-2068   	; 0x7736 <_ZN14HardwareSerial9availableEv>
    7f4a:	21 e0       	ldi	r18, 0x01	; 1
    7f4c:	89 2b       	or	r24, r25
    7f4e:	09 f4       	brne	.+2      	; 0x7f52 <_Z17Serial1_availablev+0x16>
    7f50:	20 e0       	ldi	r18, 0x00	; 0
    7f52:	82 2f       	mov	r24, r18
}
    7f54:	df 91       	pop	r29
    7f56:	cf 91       	pop	r28
    7f58:	08 95       	ret

00007f5a <_Z41__static_initialization_and_destruction_0ii>:
    7f5a:	cf 92       	push	r12
    7f5c:	df 92       	push	r13
    7f5e:	ef 92       	push	r14
    7f60:	ff 92       	push	r15
    7f62:	0f 93       	push	r16
    7f64:	1f 93       	push	r17
    7f66:	cf 93       	push	r28
    7f68:	df 93       	push	r29
    7f6a:	00 d0       	rcall	.+0      	; 0x7f6c <_Z41__static_initialization_and_destruction_0ii+0x12>
    7f6c:	1f 92       	push	r1
    7f6e:	cd b7       	in	r28, 0x3d	; 61
    7f70:	de b7       	in	r29, 0x3e	; 62
    7f72:	9a 83       	std	Y+2, r25	; 0x02
    7f74:	89 83       	std	Y+1, r24	; 0x01
    7f76:	7c 83       	std	Y+4, r23	; 0x04
    7f78:	6b 83       	std	Y+3, r22	; 0x03
    7f7a:	89 81       	ldd	r24, Y+1	; 0x01
    7f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f7e:	01 97       	sbiw	r24, 0x01	; 1
    7f80:	c9 f4       	brne	.+50     	; 0x7fb4 <_Z41__static_initialization_and_destruction_0ii+0x5a>
    7f82:	8b 81       	ldd	r24, Y+3	; 0x03
    7f84:	9c 81       	ldd	r25, Y+4	; 0x04
    7f86:	01 96       	adiw	r24, 0x01	; 1
    7f88:	a9 f4       	brne	.+42     	; 0x7fb4 <_Z41__static_initialization_and_destruction_0ii+0x5a>
#endif
{
  Serial1._tx_udr_empty_irq();
}

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);
    7f8a:	0f 2e       	mov	r0, r31
    7f8c:	fe ec       	ldi	r31, 0xCE	; 206
    7f8e:	cf 2e       	mov	r12, r31
    7f90:	d1 2c       	mov	r13, r1
    7f92:	f0 2d       	mov	r31, r0
    7f94:	0f 2e       	mov	r0, r31
    7f96:	fa ec       	ldi	r31, 0xCA	; 202
    7f98:	ef 2e       	mov	r14, r31
    7f9a:	f1 2c       	mov	r15, r1
    7f9c:	f0 2d       	mov	r31, r0
    7f9e:	09 ec       	ldi	r16, 0xC9	; 201
    7fa0:	10 e0       	ldi	r17, 0x00	; 0
    7fa2:	28 ec       	ldi	r18, 0xC8	; 200
    7fa4:	30 e0       	ldi	r19, 0x00	; 0
    7fa6:	4c ec       	ldi	r20, 0xCC	; 204
    7fa8:	50 e0       	ldi	r21, 0x00	; 0
    7faa:	6d ec       	ldi	r22, 0xCD	; 205
    7fac:	70 e0       	ldi	r23, 0x00	; 0
    7fae:	8c e6       	ldi	r24, 0x6C	; 108
    7fb0:	94 e0       	ldi	r25, 0x04	; 4
    7fb2:	d6 dd       	rcall	.-1108   	; 0x7b60 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    7fb4:	00 00       	nop
    7fb6:	0f 90       	pop	r0
    7fb8:	0f 90       	pop	r0
    7fba:	0f 90       	pop	r0
    7fbc:	0f 90       	pop	r0
    7fbe:	df 91       	pop	r29
    7fc0:	cf 91       	pop	r28
    7fc2:	1f 91       	pop	r17
    7fc4:	0f 91       	pop	r16
    7fc6:	ff 90       	pop	r15
    7fc8:	ef 90       	pop	r14
    7fca:	df 90       	pop	r13
    7fcc:	cf 90       	pop	r12
    7fce:	08 95       	ret

00007fd0 <_GLOBAL__sub_I___vector_36>:
    7fd0:	cf 93       	push	r28
    7fd2:	df 93       	push	r29
    7fd4:	cd b7       	in	r28, 0x3d	; 61
    7fd6:	de b7       	in	r29, 0x3e	; 62
    7fd8:	6f ef       	ldi	r22, 0xFF	; 255
    7fda:	7f ef       	ldi	r23, 0xFF	; 255
    7fdc:	81 e0       	ldi	r24, 0x01	; 1
    7fde:	90 e0       	ldi	r25, 0x00	; 0
    7fe0:	bc df       	rcall	.-136    	; 0x7f5a <_Z41__static_initialization_and_destruction_0ii>
    7fe2:	df 91       	pop	r29
    7fe4:	cf 91       	pop	r28
    7fe6:	08 95       	ret

00007fe8 <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
    7fe8:	cf 93       	push	r28
    7fea:	df 93       	push	r29
    7fec:	cd b7       	in	r28, 0x3d	; 61
    7fee:	de b7       	in	r29, 0x3e	; 62
	init();
    7ff0:	5a d4       	rcall	.+2228   	; 0x88a6 <init>

	initVariant();
    7ff2:	0e 94 e6 55 	call	0xabcc	; 0xabcc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    7ff6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <setup>
    
	for (;;) {
		loop();
    7ffa:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <loop>
		if (serialEventRun) serialEventRun();
    7ffe:	82 e2       	ldi	r24, 0x22	; 34
    8000:	9a e3       	ldi	r25, 0x3A	; 58
    8002:	89 2b       	or	r24, r25
    8004:	d1 f3       	breq	.-12     	; 0x7ffa <main+0x12>
    8006:	1e da       	rcall	.-3012   	; 0x7444 <_Z14serialEventRunv>
	USBDevice.attach();
#endif
	
	setup();
    
	for (;;) {
    8008:	f8 cf       	rjmp	.-16     	; 0x7ffa <main+0x12>

0000800a <_ZN5Print5writeEPKc>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    800a:	0f 93       	push	r16
    800c:	1f 93       	push	r17
    800e:	cf 93       	push	r28
    8010:	df 93       	push	r29
    8012:	00 d0       	rcall	.+0      	; 0x8014 <_ZN5Print5writeEPKc+0xa>
    8014:	1f 92       	push	r1
    8016:	cd b7       	in	r28, 0x3d	; 61
    8018:	de b7       	in	r29, 0x3e	; 62
    801a:	9a 83       	std	Y+2, r25	; 0x02
    801c:	89 83       	std	Y+1, r24	; 0x01
    801e:	7c 83       	std	Y+4, r23	; 0x04
    8020:	6b 83       	std	Y+3, r22	; 0x03
    8022:	8b 81       	ldd	r24, Y+3	; 0x03
    8024:	9c 81       	ldd	r25, Y+4	; 0x04
    8026:	89 2b       	or	r24, r25
    8028:	19 f4       	brne	.+6      	; 0x8030 <_ZN5Print5writeEPKc+0x26>
    802a:	80 e0       	ldi	r24, 0x00	; 0
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	15 c0       	rjmp	.+42     	; 0x805a <_ZN5Print5writeEPKc+0x50>
    8030:	89 81       	ldd	r24, Y+1	; 0x01
    8032:	9a 81       	ldd	r25, Y+2	; 0x02
    8034:	fc 01       	movw	r30, r24
    8036:	80 81       	ld	r24, Z
    8038:	91 81       	ldd	r25, Z+1	; 0x01
    803a:	02 96       	adiw	r24, 0x02	; 2
    803c:	fc 01       	movw	r30, r24
    803e:	00 81       	ld	r16, Z
    8040:	11 81       	ldd	r17, Z+1	; 0x01
    8042:	8b 81       	ldd	r24, Y+3	; 0x03
    8044:	9c 81       	ldd	r25, Y+4	; 0x04
    8046:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    804a:	ac 01       	movw	r20, r24
    804c:	2b 81       	ldd	r18, Y+3	; 0x03
    804e:	3c 81       	ldd	r19, Y+4	; 0x04
    8050:	89 81       	ldd	r24, Y+1	; 0x01
    8052:	9a 81       	ldd	r25, Y+2	; 0x02
    8054:	b9 01       	movw	r22, r18
    8056:	f8 01       	movw	r30, r16
    8058:	19 95       	eicall
    805a:	0f 90       	pop	r0
    805c:	0f 90       	pop	r0
    805e:	0f 90       	pop	r0
    8060:	0f 90       	pop	r0
    8062:	df 91       	pop	r29
    8064:	cf 91       	pop	r28
    8066:	1f 91       	pop	r17
    8068:	0f 91       	pop	r16
    806a:	08 95       	ret

0000806c <_ZN5Print5writeEPKhj>:
    806c:	cf 93       	push	r28
    806e:	df 93       	push	r29
    8070:	cd b7       	in	r28, 0x3d	; 61
    8072:	de b7       	in	r29, 0x3e	; 62
    8074:	28 97       	sbiw	r28, 0x08	; 8
    8076:	0f b6       	in	r0, 0x3f	; 63
    8078:	f8 94       	cli
    807a:	de bf       	out	0x3e, r29	; 62
    807c:	0f be       	out	0x3f, r0	; 63
    807e:	cd bf       	out	0x3d, r28	; 61
    8080:	9c 83       	std	Y+4, r25	; 0x04
    8082:	8b 83       	std	Y+3, r24	; 0x03
    8084:	7e 83       	std	Y+6, r23	; 0x06
    8086:	6d 83       	std	Y+5, r22	; 0x05
    8088:	58 87       	std	Y+8, r21	; 0x08
    808a:	4f 83       	std	Y+7, r20	; 0x07
    808c:	1a 82       	std	Y+2, r1	; 0x02
    808e:	19 82       	std	Y+1, r1	; 0x01
    8090:	8f 81       	ldd	r24, Y+7	; 0x07
    8092:	98 85       	ldd	r25, Y+8	; 0x08
    8094:	9c 01       	movw	r18, r24
    8096:	21 50       	subi	r18, 0x01	; 1
    8098:	31 09       	sbc	r19, r1
    809a:	38 87       	std	Y+8, r19	; 0x08
    809c:	2f 83       	std	Y+7, r18	; 0x07
    809e:	21 e0       	ldi	r18, 0x01	; 1
    80a0:	89 2b       	or	r24, r25
    80a2:	09 f4       	brne	.+2      	; 0x80a6 <_ZN5Print5writeEPKhj+0x3a>
    80a4:	20 e0       	ldi	r18, 0x00	; 0
    80a6:	22 23       	and	r18, r18
    80a8:	19 f1       	breq	.+70     	; 0x80f0 <_ZN5Print5writeEPKhj+0x84>
    80aa:	8b 81       	ldd	r24, Y+3	; 0x03
    80ac:	9c 81       	ldd	r25, Y+4	; 0x04
    80ae:	fc 01       	movw	r30, r24
    80b0:	80 81       	ld	r24, Z
    80b2:	91 81       	ldd	r25, Z+1	; 0x01
    80b4:	fc 01       	movw	r30, r24
    80b6:	20 81       	ld	r18, Z
    80b8:	31 81       	ldd	r19, Z+1	; 0x01
    80ba:	8d 81       	ldd	r24, Y+5	; 0x05
    80bc:	9e 81       	ldd	r25, Y+6	; 0x06
    80be:	ac 01       	movw	r20, r24
    80c0:	4f 5f       	subi	r20, 0xFF	; 255
    80c2:	5f 4f       	sbci	r21, 0xFF	; 255
    80c4:	5e 83       	std	Y+6, r21	; 0x06
    80c6:	4d 83       	std	Y+5, r20	; 0x05
    80c8:	fc 01       	movw	r30, r24
    80ca:	40 81       	ld	r20, Z
    80cc:	8b 81       	ldd	r24, Y+3	; 0x03
    80ce:	9c 81       	ldd	r25, Y+4	; 0x04
    80d0:	64 2f       	mov	r22, r20
    80d2:	f9 01       	movw	r30, r18
    80d4:	19 95       	eicall
    80d6:	21 e0       	ldi	r18, 0x01	; 1
    80d8:	89 2b       	or	r24, r25
    80da:	09 f4       	brne	.+2      	; 0x80de <_ZN5Print5writeEPKhj+0x72>
    80dc:	20 e0       	ldi	r18, 0x00	; 0
    80de:	22 23       	and	r18, r18
    80e0:	31 f0       	breq	.+12     	; 0x80ee <_ZN5Print5writeEPKhj+0x82>
    80e2:	89 81       	ldd	r24, Y+1	; 0x01
    80e4:	9a 81       	ldd	r25, Y+2	; 0x02
    80e6:	01 96       	adiw	r24, 0x01	; 1
    80e8:	9a 83       	std	Y+2, r25	; 0x02
    80ea:	89 83       	std	Y+1, r24	; 0x01
    80ec:	d1 cf       	rjmp	.-94     	; 0x8090 <_ZN5Print5writeEPKhj+0x24>
    80ee:	00 00       	nop
    80f0:	89 81       	ldd	r24, Y+1	; 0x01
    80f2:	9a 81       	ldd	r25, Y+2	; 0x02
    80f4:	28 96       	adiw	r28, 0x08	; 8
    80f6:	0f b6       	in	r0, 0x3f	; 63
    80f8:	f8 94       	cli
    80fa:	de bf       	out	0x3e, r29	; 62
    80fc:	0f be       	out	0x3f, r0	; 63
    80fe:	cd bf       	out	0x3d, r28	; 61
    8100:	df 91       	pop	r29
    8102:	cf 91       	pop	r28
    8104:	08 95       	ret

00008106 <_ZN5Print5printEPK19__FlashStringHelper>:
    8106:	cf 93       	push	r28
    8108:	df 93       	push	r29
    810a:	cd b7       	in	r28, 0x3d	; 61
    810c:	de b7       	in	r29, 0x3e	; 62
    810e:	2c 97       	sbiw	r28, 0x0c	; 12
    8110:	0f b6       	in	r0, 0x3f	; 63
    8112:	f8 94       	cli
    8114:	de bf       	out	0x3e, r29	; 62
    8116:	0f be       	out	0x3f, r0	; 63
    8118:	cd bf       	out	0x3d, r28	; 61
    811a:	9a 87       	std	Y+10, r25	; 0x0a
    811c:	89 87       	std	Y+9, r24	; 0x09
    811e:	7c 87       	std	Y+12, r23	; 0x0c
    8120:	6b 87       	std	Y+11, r22	; 0x0b
    8122:	8b 85       	ldd	r24, Y+11	; 0x0b
    8124:	9c 85       	ldd	r25, Y+12	; 0x0c
    8126:	9a 83       	std	Y+2, r25	; 0x02
    8128:	89 83       	std	Y+1, r24	; 0x01
    812a:	1c 82       	std	Y+4, r1	; 0x04
    812c:	1b 82       	std	Y+3, r1	; 0x03
    812e:	89 81       	ldd	r24, Y+1	; 0x01
    8130:	9a 81       	ldd	r25, Y+2	; 0x02
    8132:	9c 01       	movw	r18, r24
    8134:	2f 5f       	subi	r18, 0xFF	; 255
    8136:	3f 4f       	sbci	r19, 0xFF	; 255
    8138:	3a 83       	std	Y+2, r19	; 0x02
    813a:	29 83       	std	Y+1, r18	; 0x01
    813c:	9e 83       	std	Y+6, r25	; 0x06
    813e:	8d 83       	std	Y+5, r24	; 0x05
    8140:	8d 81       	ldd	r24, Y+5	; 0x05
    8142:	9e 81       	ldd	r25, Y+6	; 0x06
    8144:	fc 01       	movw	r30, r24
    8146:	84 91       	lpm	r24, Z
    8148:	8f 83       	std	Y+7, r24	; 0x07
    814a:	8f 81       	ldd	r24, Y+7	; 0x07
    814c:	88 87       	std	Y+8, r24	; 0x08
    814e:	88 85       	ldd	r24, Y+8	; 0x08
    8150:	88 23       	and	r24, r24
    8152:	c9 f0       	breq	.+50     	; 0x8186 <_ZN5Print5printEPK19__FlashStringHelper+0x80>
    8154:	89 85       	ldd	r24, Y+9	; 0x09
    8156:	9a 85       	ldd	r25, Y+10	; 0x0a
    8158:	fc 01       	movw	r30, r24
    815a:	80 81       	ld	r24, Z
    815c:	91 81       	ldd	r25, Z+1	; 0x01
    815e:	fc 01       	movw	r30, r24
    8160:	20 81       	ld	r18, Z
    8162:	31 81       	ldd	r19, Z+1	; 0x01
    8164:	89 85       	ldd	r24, Y+9	; 0x09
    8166:	9a 85       	ldd	r25, Y+10	; 0x0a
    8168:	68 85       	ldd	r22, Y+8	; 0x08
    816a:	f9 01       	movw	r30, r18
    816c:	19 95       	eicall
    816e:	21 e0       	ldi	r18, 0x01	; 1
    8170:	89 2b       	or	r24, r25
    8172:	09 f4       	brne	.+2      	; 0x8176 <_ZN5Print5printEPK19__FlashStringHelper+0x70>
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	22 23       	and	r18, r18
    8178:	41 f0       	breq	.+16     	; 0x818a <_ZN5Print5printEPK19__FlashStringHelper+0x84>
    817a:	8b 81       	ldd	r24, Y+3	; 0x03
    817c:	9c 81       	ldd	r25, Y+4	; 0x04
    817e:	01 96       	adiw	r24, 0x01	; 1
    8180:	9c 83       	std	Y+4, r25	; 0x04
    8182:	8b 83       	std	Y+3, r24	; 0x03
    8184:	d4 cf       	rjmp	.-88     	; 0x812e <_ZN5Print5printEPK19__FlashStringHelper+0x28>
    8186:	00 00       	nop
    8188:	01 c0       	rjmp	.+2      	; 0x818c <_ZN5Print5printEPK19__FlashStringHelper+0x86>
    818a:	00 00       	nop
    818c:	8b 81       	ldd	r24, Y+3	; 0x03
    818e:	9c 81       	ldd	r25, Y+4	; 0x04
    8190:	2c 96       	adiw	r28, 0x0c	; 12
    8192:	0f b6       	in	r0, 0x3f	; 63
    8194:	f8 94       	cli
    8196:	de bf       	out	0x3e, r29	; 62
    8198:	0f be       	out	0x3f, r0	; 63
    819a:	cd bf       	out	0x3d, r28	; 61
    819c:	df 91       	pop	r29
    819e:	cf 91       	pop	r28
    81a0:	08 95       	ret

000081a2 <_ZN5Print5printEPKc>:
    81a2:	cf 93       	push	r28
    81a4:	df 93       	push	r29
    81a6:	00 d0       	rcall	.+0      	; 0x81a8 <_ZN5Print5printEPKc+0x6>
    81a8:	1f 92       	push	r1
    81aa:	cd b7       	in	r28, 0x3d	; 61
    81ac:	de b7       	in	r29, 0x3e	; 62
    81ae:	9a 83       	std	Y+2, r25	; 0x02
    81b0:	89 83       	std	Y+1, r24	; 0x01
    81b2:	7c 83       	std	Y+4, r23	; 0x04
    81b4:	6b 83       	std	Y+3, r22	; 0x03
    81b6:	2b 81       	ldd	r18, Y+3	; 0x03
    81b8:	3c 81       	ldd	r19, Y+4	; 0x04
    81ba:	89 81       	ldd	r24, Y+1	; 0x01
    81bc:	9a 81       	ldd	r25, Y+2	; 0x02
    81be:	b9 01       	movw	r22, r18
    81c0:	24 df       	rcall	.-440    	; 0x800a <_ZN5Print5writeEPKc>
    81c2:	0f 90       	pop	r0
    81c4:	0f 90       	pop	r0
    81c6:	0f 90       	pop	r0
    81c8:	0f 90       	pop	r0
    81ca:	df 91       	pop	r29
    81cc:	cf 91       	pop	r28
    81ce:	08 95       	ret

000081d0 <_ZN5Print5printEc>:
    81d0:	cf 93       	push	r28
    81d2:	df 93       	push	r29
    81d4:	00 d0       	rcall	.+0      	; 0x81d6 <_ZN5Print5printEc+0x6>
    81d6:	cd b7       	in	r28, 0x3d	; 61
    81d8:	de b7       	in	r29, 0x3e	; 62
    81da:	9a 83       	std	Y+2, r25	; 0x02
    81dc:	89 83       	std	Y+1, r24	; 0x01
    81de:	6b 83       	std	Y+3, r22	; 0x03
    81e0:	89 81       	ldd	r24, Y+1	; 0x01
    81e2:	9a 81       	ldd	r25, Y+2	; 0x02
    81e4:	fc 01       	movw	r30, r24
    81e6:	80 81       	ld	r24, Z
    81e8:	91 81       	ldd	r25, Z+1	; 0x01
    81ea:	fc 01       	movw	r30, r24
    81ec:	20 81       	ld	r18, Z
    81ee:	31 81       	ldd	r19, Z+1	; 0x01
    81f0:	89 81       	ldd	r24, Y+1	; 0x01
    81f2:	9a 81       	ldd	r25, Y+2	; 0x02
    81f4:	6b 81       	ldd	r22, Y+3	; 0x03
    81f6:	f9 01       	movw	r30, r18
    81f8:	19 95       	eicall
    81fa:	0f 90       	pop	r0
    81fc:	0f 90       	pop	r0
    81fe:	0f 90       	pop	r0
    8200:	df 91       	pop	r29
    8202:	cf 91       	pop	r28
    8204:	08 95       	ret

00008206 <_ZN5Print5printEii>:
    8206:	cf 93       	push	r28
    8208:	df 93       	push	r29
    820a:	00 d0       	rcall	.+0      	; 0x820c <_ZN5Print5printEii+0x6>
    820c:	00 d0       	rcall	.+0      	; 0x820e <_ZN5Print5printEii+0x8>
    820e:	cd b7       	in	r28, 0x3d	; 61
    8210:	de b7       	in	r29, 0x3e	; 62
    8212:	9a 83       	std	Y+2, r25	; 0x02
    8214:	89 83       	std	Y+1, r24	; 0x01
    8216:	7c 83       	std	Y+4, r23	; 0x04
    8218:	6b 83       	std	Y+3, r22	; 0x03
    821a:	5e 83       	std	Y+6, r21	; 0x06
    821c:	4d 83       	std	Y+5, r20	; 0x05
    821e:	8b 81       	ldd	r24, Y+3	; 0x03
    8220:	9c 81       	ldd	r25, Y+4	; 0x04
    8222:	09 2e       	mov	r0, r25
    8224:	00 0c       	add	r0, r0
    8226:	aa 0b       	sbc	r26, r26
    8228:	bb 0b       	sbc	r27, r27
    822a:	2d 81       	ldd	r18, Y+5	; 0x05
    822c:	3e 81       	ldd	r19, Y+6	; 0x06
    822e:	e9 81       	ldd	r30, Y+1	; 0x01
    8230:	fa 81       	ldd	r31, Y+2	; 0x02
    8232:	ac 01       	movw	r20, r24
    8234:	bd 01       	movw	r22, r26
    8236:	cf 01       	movw	r24, r30
    8238:	2b d0       	rcall	.+86     	; 0x8290 <_ZN5Print5printEli>
    823a:	26 96       	adiw	r28, 0x06	; 6
    823c:	0f b6       	in	r0, 0x3f	; 63
    823e:	f8 94       	cli
    8240:	de bf       	out	0x3e, r29	; 62
    8242:	0f be       	out	0x3f, r0	; 63
    8244:	cd bf       	out	0x3d, r28	; 61
    8246:	df 91       	pop	r29
    8248:	cf 91       	pop	r28
    824a:	08 95       	ret

0000824c <_ZN5Print5printEji>:
    824c:	cf 93       	push	r28
    824e:	df 93       	push	r29
    8250:	00 d0       	rcall	.+0      	; 0x8252 <_ZN5Print5printEji+0x6>
    8252:	00 d0       	rcall	.+0      	; 0x8254 <_ZN5Print5printEji+0x8>
    8254:	cd b7       	in	r28, 0x3d	; 61
    8256:	de b7       	in	r29, 0x3e	; 62
    8258:	9a 83       	std	Y+2, r25	; 0x02
    825a:	89 83       	std	Y+1, r24	; 0x01
    825c:	7c 83       	std	Y+4, r23	; 0x04
    825e:	6b 83       	std	Y+3, r22	; 0x03
    8260:	5e 83       	std	Y+6, r21	; 0x06
    8262:	4d 83       	std	Y+5, r20	; 0x05
    8264:	8b 81       	ldd	r24, Y+3	; 0x03
    8266:	9c 81       	ldd	r25, Y+4	; 0x04
    8268:	cc 01       	movw	r24, r24
    826a:	a0 e0       	ldi	r26, 0x00	; 0
    826c:	b0 e0       	ldi	r27, 0x00	; 0
    826e:	2d 81       	ldd	r18, Y+5	; 0x05
    8270:	3e 81       	ldd	r19, Y+6	; 0x06
    8272:	e9 81       	ldd	r30, Y+1	; 0x01
    8274:	fa 81       	ldd	r31, Y+2	; 0x02
    8276:	ac 01       	movw	r20, r24
    8278:	bd 01       	movw	r22, r26
    827a:	cf 01       	movw	r24, r30
    827c:	7e d0       	rcall	.+252    	; 0x837a <_ZN5Print5printEmi>
    827e:	26 96       	adiw	r28, 0x06	; 6
    8280:	0f b6       	in	r0, 0x3f	; 63
    8282:	f8 94       	cli
    8284:	de bf       	out	0x3e, r29	; 62
    8286:	0f be       	out	0x3f, r0	; 63
    8288:	cd bf       	out	0x3d, r28	; 61
    828a:	df 91       	pop	r29
    828c:	cf 91       	pop	r28
    828e:	08 95       	ret

00008290 <_ZN5Print5printEli>:
    8290:	cf 93       	push	r28
    8292:	df 93       	push	r29
    8294:	cd b7       	in	r28, 0x3d	; 61
    8296:	de b7       	in	r29, 0x3e	; 62
    8298:	2a 97       	sbiw	r28, 0x0a	; 10
    829a:	0f b6       	in	r0, 0x3f	; 63
    829c:	f8 94       	cli
    829e:	de bf       	out	0x3e, r29	; 62
    82a0:	0f be       	out	0x3f, r0	; 63
    82a2:	cd bf       	out	0x3d, r28	; 61
    82a4:	9c 83       	std	Y+4, r25	; 0x04
    82a6:	8b 83       	std	Y+3, r24	; 0x03
    82a8:	4d 83       	std	Y+5, r20	; 0x05
    82aa:	5e 83       	std	Y+6, r21	; 0x06
    82ac:	6f 83       	std	Y+7, r22	; 0x07
    82ae:	78 87       	std	Y+8, r23	; 0x08
    82b0:	3a 87       	std	Y+10, r19	; 0x0a
    82b2:	29 87       	std	Y+9, r18	; 0x09
    82b4:	89 85       	ldd	r24, Y+9	; 0x09
    82b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    82b8:	89 2b       	or	r24, r25
    82ba:	79 f4       	brne	.+30     	; 0x82da <_ZN5Print5printEli+0x4a>
    82bc:	8b 81       	ldd	r24, Y+3	; 0x03
    82be:	9c 81       	ldd	r25, Y+4	; 0x04
    82c0:	fc 01       	movw	r30, r24
    82c2:	80 81       	ld	r24, Z
    82c4:	91 81       	ldd	r25, Z+1	; 0x01
    82c6:	fc 01       	movw	r30, r24
    82c8:	20 81       	ld	r18, Z
    82ca:	31 81       	ldd	r19, Z+1	; 0x01
    82cc:	4d 81       	ldd	r20, Y+5	; 0x05
    82ce:	8b 81       	ldd	r24, Y+3	; 0x03
    82d0:	9c 81       	ldd	r25, Y+4	; 0x04
    82d2:	64 2f       	mov	r22, r20
    82d4:	f9 01       	movw	r30, r18
    82d6:	19 95       	eicall
    82d8:	47 c0       	rjmp	.+142    	; 0x8368 <_ZN5Print5printEli+0xd8>
    82da:	89 85       	ldd	r24, Y+9	; 0x09
    82dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    82de:	0a 97       	sbiw	r24, 0x0a	; 10
    82e0:	c1 f5       	brne	.+112    	; 0x8352 <_ZN5Print5printEli+0xc2>
    82e2:	8d 81       	ldd	r24, Y+5	; 0x05
    82e4:	9e 81       	ldd	r25, Y+6	; 0x06
    82e6:	af 81       	ldd	r26, Y+7	; 0x07
    82e8:	b8 85       	ldd	r27, Y+8	; 0x08
    82ea:	bb 23       	and	r27, r27
    82ec:	34 f5       	brge	.+76     	; 0x833a <_ZN5Print5printEli+0xaa>
    82ee:	8b 81       	ldd	r24, Y+3	; 0x03
    82f0:	9c 81       	ldd	r25, Y+4	; 0x04
    82f2:	6d e2       	ldi	r22, 0x2D	; 45
    82f4:	6d df       	rcall	.-294    	; 0x81d0 <_ZN5Print5printEc>
    82f6:	9a 83       	std	Y+2, r25	; 0x02
    82f8:	89 83       	std	Y+1, r24	; 0x01
    82fa:	8d 81       	ldd	r24, Y+5	; 0x05
    82fc:	9e 81       	ldd	r25, Y+6	; 0x06
    82fe:	af 81       	ldd	r26, Y+7	; 0x07
    8300:	b8 85       	ldd	r27, Y+8	; 0x08
    8302:	b0 95       	com	r27
    8304:	a0 95       	com	r26
    8306:	90 95       	com	r25
    8308:	81 95       	neg	r24
    830a:	9f 4f       	sbci	r25, 0xFF	; 255
    830c:	af 4f       	sbci	r26, 0xFF	; 255
    830e:	bf 4f       	sbci	r27, 0xFF	; 255
    8310:	8d 83       	std	Y+5, r24	; 0x05
    8312:	9e 83       	std	Y+6, r25	; 0x06
    8314:	af 83       	std	Y+7, r26	; 0x07
    8316:	b8 87       	std	Y+8, r27	; 0x08
    8318:	8d 81       	ldd	r24, Y+5	; 0x05
    831a:	9e 81       	ldd	r25, Y+6	; 0x06
    831c:	af 81       	ldd	r26, Y+7	; 0x07
    831e:	b8 85       	ldd	r27, Y+8	; 0x08
    8320:	eb 81       	ldd	r30, Y+3	; 0x03
    8322:	fc 81       	ldd	r31, Y+4	; 0x04
    8324:	2a e0       	ldi	r18, 0x0A	; 10
    8326:	ac 01       	movw	r20, r24
    8328:	bd 01       	movw	r22, r26
    832a:	cf 01       	movw	r24, r30
    832c:	c7 d0       	rcall	.+398    	; 0x84bc <_ZN5Print11printNumberEmh>
    832e:	9c 01       	movw	r18, r24
    8330:	89 81       	ldd	r24, Y+1	; 0x01
    8332:	9a 81       	ldd	r25, Y+2	; 0x02
    8334:	82 0f       	add	r24, r18
    8336:	93 1f       	adc	r25, r19
    8338:	17 c0       	rjmp	.+46     	; 0x8368 <_ZN5Print5printEli+0xd8>
    833a:	8d 81       	ldd	r24, Y+5	; 0x05
    833c:	9e 81       	ldd	r25, Y+6	; 0x06
    833e:	af 81       	ldd	r26, Y+7	; 0x07
    8340:	b8 85       	ldd	r27, Y+8	; 0x08
    8342:	eb 81       	ldd	r30, Y+3	; 0x03
    8344:	fc 81       	ldd	r31, Y+4	; 0x04
    8346:	2a e0       	ldi	r18, 0x0A	; 10
    8348:	ac 01       	movw	r20, r24
    834a:	bd 01       	movw	r22, r26
    834c:	cf 01       	movw	r24, r30
    834e:	b6 d0       	rcall	.+364    	; 0x84bc <_ZN5Print11printNumberEmh>
    8350:	0b c0       	rjmp	.+22     	; 0x8368 <_ZN5Print5printEli+0xd8>
    8352:	29 85       	ldd	r18, Y+9	; 0x09
    8354:	8d 81       	ldd	r24, Y+5	; 0x05
    8356:	9e 81       	ldd	r25, Y+6	; 0x06
    8358:	af 81       	ldd	r26, Y+7	; 0x07
    835a:	b8 85       	ldd	r27, Y+8	; 0x08
    835c:	eb 81       	ldd	r30, Y+3	; 0x03
    835e:	fc 81       	ldd	r31, Y+4	; 0x04
    8360:	ac 01       	movw	r20, r24
    8362:	bd 01       	movw	r22, r26
    8364:	cf 01       	movw	r24, r30
    8366:	aa d0       	rcall	.+340    	; 0x84bc <_ZN5Print11printNumberEmh>
    8368:	2a 96       	adiw	r28, 0x0a	; 10
    836a:	0f b6       	in	r0, 0x3f	; 63
    836c:	f8 94       	cli
    836e:	de bf       	out	0x3e, r29	; 62
    8370:	0f be       	out	0x3f, r0	; 63
    8372:	cd bf       	out	0x3d, r28	; 61
    8374:	df 91       	pop	r29
    8376:	cf 91       	pop	r28
    8378:	08 95       	ret

0000837a <_ZN5Print5printEmi>:
    837a:	cf 93       	push	r28
    837c:	df 93       	push	r29
    837e:	cd b7       	in	r28, 0x3d	; 61
    8380:	de b7       	in	r29, 0x3e	; 62
    8382:	28 97       	sbiw	r28, 0x08	; 8
    8384:	0f b6       	in	r0, 0x3f	; 63
    8386:	f8 94       	cli
    8388:	de bf       	out	0x3e, r29	; 62
    838a:	0f be       	out	0x3f, r0	; 63
    838c:	cd bf       	out	0x3d, r28	; 61
    838e:	9a 83       	std	Y+2, r25	; 0x02
    8390:	89 83       	std	Y+1, r24	; 0x01
    8392:	4b 83       	std	Y+3, r20	; 0x03
    8394:	5c 83       	std	Y+4, r21	; 0x04
    8396:	6d 83       	std	Y+5, r22	; 0x05
    8398:	7e 83       	std	Y+6, r23	; 0x06
    839a:	38 87       	std	Y+8, r19	; 0x08
    839c:	2f 83       	std	Y+7, r18	; 0x07
    839e:	8f 81       	ldd	r24, Y+7	; 0x07
    83a0:	98 85       	ldd	r25, Y+8	; 0x08
    83a2:	89 2b       	or	r24, r25
    83a4:	79 f4       	brne	.+30     	; 0x83c4 <_ZN5Print5printEmi+0x4a>
    83a6:	89 81       	ldd	r24, Y+1	; 0x01
    83a8:	9a 81       	ldd	r25, Y+2	; 0x02
    83aa:	fc 01       	movw	r30, r24
    83ac:	80 81       	ld	r24, Z
    83ae:	91 81       	ldd	r25, Z+1	; 0x01
    83b0:	fc 01       	movw	r30, r24
    83b2:	20 81       	ld	r18, Z
    83b4:	31 81       	ldd	r19, Z+1	; 0x01
    83b6:	4b 81       	ldd	r20, Y+3	; 0x03
    83b8:	89 81       	ldd	r24, Y+1	; 0x01
    83ba:	9a 81       	ldd	r25, Y+2	; 0x02
    83bc:	64 2f       	mov	r22, r20
    83be:	f9 01       	movw	r30, r18
    83c0:	19 95       	eicall
    83c2:	0b c0       	rjmp	.+22     	; 0x83da <_ZN5Print5printEmi+0x60>
    83c4:	2f 81       	ldd	r18, Y+7	; 0x07
    83c6:	8b 81       	ldd	r24, Y+3	; 0x03
    83c8:	9c 81       	ldd	r25, Y+4	; 0x04
    83ca:	ad 81       	ldd	r26, Y+5	; 0x05
    83cc:	be 81       	ldd	r27, Y+6	; 0x06
    83ce:	e9 81       	ldd	r30, Y+1	; 0x01
    83d0:	fa 81       	ldd	r31, Y+2	; 0x02
    83d2:	ac 01       	movw	r20, r24
    83d4:	bd 01       	movw	r22, r26
    83d6:	cf 01       	movw	r24, r30
    83d8:	71 d0       	rcall	.+226    	; 0x84bc <_ZN5Print11printNumberEmh>
    83da:	28 96       	adiw	r28, 0x08	; 8
    83dc:	0f b6       	in	r0, 0x3f	; 63
    83de:	f8 94       	cli
    83e0:	de bf       	out	0x3e, r29	; 62
    83e2:	0f be       	out	0x3f, r0	; 63
    83e4:	cd bf       	out	0x3d, r28	; 61
    83e6:	df 91       	pop	r29
    83e8:	cf 91       	pop	r28
    83ea:	08 95       	ret

000083ec <_ZN5Print7printlnEv>:
    83ec:	cf 93       	push	r28
    83ee:	df 93       	push	r29
    83f0:	1f 92       	push	r1
    83f2:	1f 92       	push	r1
    83f4:	cd b7       	in	r28, 0x3d	; 61
    83f6:	de b7       	in	r29, 0x3e	; 62
    83f8:	9a 83       	std	Y+2, r25	; 0x02
    83fa:	89 83       	std	Y+1, r24	; 0x01
    83fc:	89 81       	ldd	r24, Y+1	; 0x01
    83fe:	9a 81       	ldd	r25, Y+2	; 0x02
    8400:	68 eb       	ldi	r22, 0xB8	; 184
    8402:	72 e0       	ldi	r23, 0x02	; 2
    8404:	02 de       	rcall	.-1020   	; 0x800a <_ZN5Print5writeEPKc>
    8406:	0f 90       	pop	r0
    8408:	0f 90       	pop	r0
    840a:	df 91       	pop	r29
    840c:	cf 91       	pop	r28
    840e:	08 95       	ret

00008410 <_ZN5Print7printlnEPKc>:
    8410:	cf 93       	push	r28
    8412:	df 93       	push	r29
    8414:	00 d0       	rcall	.+0      	; 0x8416 <_ZN5Print7printlnEPKc+0x6>
    8416:	00 d0       	rcall	.+0      	; 0x8418 <_ZN5Print7printlnEPKc+0x8>
    8418:	cd b7       	in	r28, 0x3d	; 61
    841a:	de b7       	in	r29, 0x3e	; 62
    841c:	9c 83       	std	Y+4, r25	; 0x04
    841e:	8b 83       	std	Y+3, r24	; 0x03
    8420:	7e 83       	std	Y+6, r23	; 0x06
    8422:	6d 83       	std	Y+5, r22	; 0x05
    8424:	2d 81       	ldd	r18, Y+5	; 0x05
    8426:	3e 81       	ldd	r19, Y+6	; 0x06
    8428:	8b 81       	ldd	r24, Y+3	; 0x03
    842a:	9c 81       	ldd	r25, Y+4	; 0x04
    842c:	b9 01       	movw	r22, r18
    842e:	b9 de       	rcall	.-654    	; 0x81a2 <_ZN5Print5printEPKc>
    8430:	9a 83       	std	Y+2, r25	; 0x02
    8432:	89 83       	std	Y+1, r24	; 0x01
    8434:	8b 81       	ldd	r24, Y+3	; 0x03
    8436:	9c 81       	ldd	r25, Y+4	; 0x04
    8438:	d9 df       	rcall	.-78     	; 0x83ec <_ZN5Print7printlnEv>
    843a:	9c 01       	movw	r18, r24
    843c:	89 81       	ldd	r24, Y+1	; 0x01
    843e:	9a 81       	ldd	r25, Y+2	; 0x02
    8440:	82 0f       	add	r24, r18
    8442:	93 1f       	adc	r25, r19
    8444:	9a 83       	std	Y+2, r25	; 0x02
    8446:	89 83       	std	Y+1, r24	; 0x01
    8448:	89 81       	ldd	r24, Y+1	; 0x01
    844a:	9a 81       	ldd	r25, Y+2	; 0x02
    844c:	26 96       	adiw	r28, 0x06	; 6
    844e:	0f b6       	in	r0, 0x3f	; 63
    8450:	f8 94       	cli
    8452:	de bf       	out	0x3e, r29	; 62
    8454:	0f be       	out	0x3f, r0	; 63
    8456:	cd bf       	out	0x3d, r28	; 61
    8458:	df 91       	pop	r29
    845a:	cf 91       	pop	r28
    845c:	08 95       	ret

0000845e <_ZN5Print7printlnEii>:
    845e:	cf 93       	push	r28
    8460:	df 93       	push	r29
    8462:	cd b7       	in	r28, 0x3d	; 61
    8464:	de b7       	in	r29, 0x3e	; 62
    8466:	28 97       	sbiw	r28, 0x08	; 8
    8468:	0f b6       	in	r0, 0x3f	; 63
    846a:	f8 94       	cli
    846c:	de bf       	out	0x3e, r29	; 62
    846e:	0f be       	out	0x3f, r0	; 63
    8470:	cd bf       	out	0x3d, r28	; 61
    8472:	9c 83       	std	Y+4, r25	; 0x04
    8474:	8b 83       	std	Y+3, r24	; 0x03
    8476:	7e 83       	std	Y+6, r23	; 0x06
    8478:	6d 83       	std	Y+5, r22	; 0x05
    847a:	58 87       	std	Y+8, r21	; 0x08
    847c:	4f 83       	std	Y+7, r20	; 0x07
    847e:	4f 81       	ldd	r20, Y+7	; 0x07
    8480:	58 85       	ldd	r21, Y+8	; 0x08
    8482:	2d 81       	ldd	r18, Y+5	; 0x05
    8484:	3e 81       	ldd	r19, Y+6	; 0x06
    8486:	8b 81       	ldd	r24, Y+3	; 0x03
    8488:	9c 81       	ldd	r25, Y+4	; 0x04
    848a:	b9 01       	movw	r22, r18
    848c:	bc de       	rcall	.-648    	; 0x8206 <_ZN5Print5printEii>
    848e:	9a 83       	std	Y+2, r25	; 0x02
    8490:	89 83       	std	Y+1, r24	; 0x01
    8492:	8b 81       	ldd	r24, Y+3	; 0x03
    8494:	9c 81       	ldd	r25, Y+4	; 0x04
    8496:	aa df       	rcall	.-172    	; 0x83ec <_ZN5Print7printlnEv>
    8498:	9c 01       	movw	r18, r24
    849a:	89 81       	ldd	r24, Y+1	; 0x01
    849c:	9a 81       	ldd	r25, Y+2	; 0x02
    849e:	82 0f       	add	r24, r18
    84a0:	93 1f       	adc	r25, r19
    84a2:	9a 83       	std	Y+2, r25	; 0x02
    84a4:	89 83       	std	Y+1, r24	; 0x01
    84a6:	89 81       	ldd	r24, Y+1	; 0x01
    84a8:	9a 81       	ldd	r25, Y+2	; 0x02
    84aa:	28 96       	adiw	r28, 0x08	; 8
    84ac:	0f b6       	in	r0, 0x3f	; 63
    84ae:	f8 94       	cli
    84b0:	de bf       	out	0x3e, r29	; 62
    84b2:	0f be       	out	0x3f, r0	; 63
    84b4:	cd bf       	out	0x3d, r28	; 61
    84b6:	df 91       	pop	r29
    84b8:	cf 91       	pop	r28
    84ba:	08 95       	ret

000084bc <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    84bc:	cf 93       	push	r28
    84be:	df 93       	push	r29
    84c0:	cd b7       	in	r28, 0x3d	; 61
    84c2:	de b7       	in	r29, 0x3e	; 62
    84c4:	ab 97       	sbiw	r28, 0x2b	; 43
    84c6:	0f b6       	in	r0, 0x3f	; 63
    84c8:	f8 94       	cli
    84ca:	de bf       	out	0x3e, r29	; 62
    84cc:	0f be       	out	0x3f, r0	; 63
    84ce:	cd bf       	out	0x3d, r28	; 61
    84d0:	9e a3       	std	Y+38, r25	; 0x26
    84d2:	8d a3       	std	Y+37, r24	; 0x25
    84d4:	4f a3       	std	Y+39, r20	; 0x27
    84d6:	58 a7       	std	Y+40, r21	; 0x28
    84d8:	69 a7       	std	Y+41, r22	; 0x29
    84da:	7a a7       	std	Y+42, r23	; 0x2a
    84dc:	2b a7       	std	Y+43, r18	; 0x2b
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    84de:	80 e2       	ldi	r24, 0x20	; 32
    84e0:	90 e0       	ldi	r25, 0x00	; 0
    84e2:	9e 01       	movw	r18, r28
    84e4:	2c 5f       	subi	r18, 0xFC	; 252
    84e6:	3f 4f       	sbci	r19, 0xFF	; 255
    84e8:	82 0f       	add	r24, r18
    84ea:	93 1f       	adc	r25, r19
    84ec:	9a 83       	std	Y+2, r25	; 0x02
    84ee:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
    84f0:	89 81       	ldd	r24, Y+1	; 0x01
    84f2:	9a 81       	ldd	r25, Y+2	; 0x02
    84f4:	fc 01       	movw	r30, r24
    84f6:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    84f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    84fa:	82 30       	cpi	r24, 0x02	; 2
    84fc:	10 f4       	brcc	.+4      	; 0x8502 <_ZN5Print11printNumberEmh+0x46>
    84fe:	8a e0       	ldi	r24, 0x0A	; 10
    8500:	8b a7       	std	Y+43, r24	; 0x2b

  do {
    char c = n % base;
    8502:	8b a5       	ldd	r24, Y+43	; 0x2b
    8504:	28 2f       	mov	r18, r24
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 e0       	ldi	r20, 0x00	; 0
    850a:	50 e0       	ldi	r21, 0x00	; 0
    850c:	8f a1       	ldd	r24, Y+39	; 0x27
    850e:	98 a5       	ldd	r25, Y+40	; 0x28
    8510:	a9 a5       	ldd	r26, Y+41	; 0x29
    8512:	ba a5       	ldd	r27, Y+42	; 0x2a
    8514:	bc 01       	movw	r22, r24
    8516:	cd 01       	movw	r24, r26
    8518:	0e 94 2e 61 	call	0xc25c	; 0xc25c <__udivmodsi4>
    851c:	dc 01       	movw	r26, r24
    851e:	cb 01       	movw	r24, r22
    8520:	8b 83       	std	Y+3, r24	; 0x03
    n /= base;
    8522:	8b a5       	ldd	r24, Y+43	; 0x2b
    8524:	28 2f       	mov	r18, r24
    8526:	30 e0       	ldi	r19, 0x00	; 0
    8528:	40 e0       	ldi	r20, 0x00	; 0
    852a:	50 e0       	ldi	r21, 0x00	; 0
    852c:	8f a1       	ldd	r24, Y+39	; 0x27
    852e:	98 a5       	ldd	r25, Y+40	; 0x28
    8530:	a9 a5       	ldd	r26, Y+41	; 0x29
    8532:	ba a5       	ldd	r27, Y+42	; 0x2a
    8534:	bc 01       	movw	r22, r24
    8536:	cd 01       	movw	r24, r26
    8538:	0e 94 2e 61 	call	0xc25c	; 0xc25c <__udivmodsi4>
    853c:	da 01       	movw	r26, r20
    853e:	c9 01       	movw	r24, r18
    8540:	8f a3       	std	Y+39, r24	; 0x27
    8542:	98 a7       	std	Y+40, r25	; 0x28
    8544:	a9 a7       	std	Y+41, r26	; 0x29
    8546:	ba a7       	std	Y+42, r27	; 0x2a

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    8548:	89 81       	ldd	r24, Y+1	; 0x01
    854a:	9a 81       	ldd	r25, Y+2	; 0x02
    854c:	01 97       	sbiw	r24, 0x01	; 1
    854e:	9a 83       	std	Y+2, r25	; 0x02
    8550:	89 83       	std	Y+1, r24	; 0x01
    8552:	8b 81       	ldd	r24, Y+3	; 0x03
    8554:	8a 30       	cpi	r24, 0x0A	; 10
    8556:	20 f4       	brcc	.+8      	; 0x8560 <_ZN5Print11printNumberEmh+0xa4>
    8558:	8b 81       	ldd	r24, Y+3	; 0x03
    855a:	20 e3       	ldi	r18, 0x30	; 48
    855c:	28 0f       	add	r18, r24
    855e:	03 c0       	rjmp	.+6      	; 0x8566 <_ZN5Print11printNumberEmh+0xaa>
    8560:	8b 81       	ldd	r24, Y+3	; 0x03
    8562:	27 e3       	ldi	r18, 0x37	; 55
    8564:	28 0f       	add	r18, r24
    8566:	89 81       	ldd	r24, Y+1	; 0x01
    8568:	9a 81       	ldd	r25, Y+2	; 0x02
    856a:	fc 01       	movw	r30, r24
    856c:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    856e:	8f a1       	ldd	r24, Y+39	; 0x27
    8570:	98 a5       	ldd	r25, Y+40	; 0x28
    8572:	a9 a5       	ldd	r26, Y+41	; 0x29
    8574:	ba a5       	ldd	r27, Y+42	; 0x2a
    8576:	89 2b       	or	r24, r25
    8578:	8a 2b       	or	r24, r26
    857a:	8b 2b       	or	r24, r27
    857c:	09 f0       	breq	.+2      	; 0x8580 <_ZN5Print11printNumberEmh+0xc4>
    857e:	c1 cf       	rjmp	.-126    	; 0x8502 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    8580:	29 81       	ldd	r18, Y+1	; 0x01
    8582:	3a 81       	ldd	r19, Y+2	; 0x02
    8584:	8d a1       	ldd	r24, Y+37	; 0x25
    8586:	9e a1       	ldd	r25, Y+38	; 0x26
    8588:	b9 01       	movw	r22, r18
    858a:	3f dd       	rcall	.-1410   	; 0x800a <_ZN5Print5writeEPKc>
}
    858c:	ab 96       	adiw	r28, 0x2b	; 43
    858e:	0f b6       	in	r0, 0x3f	; 63
    8590:	f8 94       	cli
    8592:	de bf       	out	0x3e, r29	; 62
    8594:	0f be       	out	0x3f, r0	; 63
    8596:	cd bf       	out	0x3d, r28	; 61
    8598:	df 91       	pop	r29
    859a:	cf 91       	pop	r28
    859c:	08 95       	ret

0000859e <_ZN6Stream10setTimeoutEm>:

// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
    859e:	cf 93       	push	r28
    85a0:	df 93       	push	r29
    85a2:	00 d0       	rcall	.+0      	; 0x85a4 <_ZN6Stream10setTimeoutEm+0x6>
    85a4:	00 d0       	rcall	.+0      	; 0x85a6 <_ZN6Stream10setTimeoutEm+0x8>
    85a6:	cd b7       	in	r28, 0x3d	; 61
    85a8:	de b7       	in	r29, 0x3e	; 62
    85aa:	9a 83       	std	Y+2, r25	; 0x02
    85ac:	89 83       	std	Y+1, r24	; 0x01
    85ae:	4b 83       	std	Y+3, r20	; 0x03
    85b0:	5c 83       	std	Y+4, r21	; 0x04
    85b2:	6d 83       	std	Y+5, r22	; 0x05
    85b4:	7e 83       	std	Y+6, r23	; 0x06
  _timeout = timeout;
    85b6:	29 81       	ldd	r18, Y+1	; 0x01
    85b8:	3a 81       	ldd	r19, Y+2	; 0x02
    85ba:	8b 81       	ldd	r24, Y+3	; 0x03
    85bc:	9c 81       	ldd	r25, Y+4	; 0x04
    85be:	ad 81       	ldd	r26, Y+5	; 0x05
    85c0:	be 81       	ldd	r27, Y+6	; 0x06
    85c2:	f9 01       	movw	r30, r18
    85c4:	84 83       	std	Z+4, r24	; 0x04
    85c6:	95 83       	std	Z+5, r25	; 0x05
    85c8:	a6 83       	std	Z+6, r26	; 0x06
    85ca:	b7 83       	std	Z+7, r27	; 0x07
}
    85cc:	00 00       	nop
    85ce:	26 96       	adiw	r28, 0x06	; 6
    85d0:	0f b6       	in	r0, 0x3f	; 63
    85d2:	f8 94       	cli
    85d4:	de bf       	out	0x3e, r29	; 62
    85d6:	0f be       	out	0x3f, r0	; 63
    85d8:	cd bf       	out	0x3d, r28	; 61
    85da:	df 91       	pop	r29
    85dc:	cf 91       	pop	r28
    85de:	08 95       	ret

000085e0 <__vector_23>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    85e0:	1f 92       	push	r1
    85e2:	0f 92       	push	r0
    85e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    85e8:	0f 92       	push	r0
    85ea:	11 24       	eor	r1, r1
    85ec:	8f 93       	push	r24
    85ee:	9f 93       	push	r25
    85f0:	af 93       	push	r26
    85f2:	bf 93       	push	r27
    85f4:	cf 93       	push	r28
    85f6:	df 93       	push	r29
    85f8:	cd b7       	in	r28, 0x3d	; 61
    85fa:	de b7       	in	r29, 0x3e	; 62
    85fc:	25 97       	sbiw	r28, 0x05	; 5
    85fe:	de bf       	out	0x3e, r29	; 62
    8600:	cd bf       	out	0x3d, r28	; 61
    8602:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <timer0_millis>
    8606:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <timer0_millis+0x1>
    860a:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <timer0_millis+0x2>
    860e:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <timer0_millis+0x3>
    8612:	89 83       	std	Y+1, r24	; 0x01
    8614:	9a 83       	std	Y+2, r25	; 0x02
    8616:	ab 83       	std	Y+3, r26	; 0x03
    8618:	bc 83       	std	Y+4, r27	; 0x04
    861a:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <timer0_fract>
    861e:	8d 83       	std	Y+5, r24	; 0x05
    8620:	89 81       	ldd	r24, Y+1	; 0x01
    8622:	9a 81       	ldd	r25, Y+2	; 0x02
    8624:	ab 81       	ldd	r26, Y+3	; 0x03
    8626:	bc 81       	ldd	r27, Y+4	; 0x04
    8628:	01 96       	adiw	r24, 0x01	; 1
    862a:	a1 1d       	adc	r26, r1
    862c:	b1 1d       	adc	r27, r1
    862e:	89 83       	std	Y+1, r24	; 0x01
    8630:	9a 83       	std	Y+2, r25	; 0x02
    8632:	ab 83       	std	Y+3, r26	; 0x03
    8634:	bc 83       	std	Y+4, r27	; 0x04
    8636:	8d 81       	ldd	r24, Y+5	; 0x05
    8638:	8d 5f       	subi	r24, 0xFD	; 253
    863a:	8d 83       	std	Y+5, r24	; 0x05
    863c:	8d 81       	ldd	r24, Y+5	; 0x05
    863e:	8d 37       	cpi	r24, 0x7D	; 125
    8640:	70 f0       	brcs	.+28     	; 0x865e <__vector_23+0x7e>
    8642:	8d 81       	ldd	r24, Y+5	; 0x05
    8644:	8d 57       	subi	r24, 0x7D	; 125
    8646:	8d 83       	std	Y+5, r24	; 0x05
    8648:	89 81       	ldd	r24, Y+1	; 0x01
    864a:	9a 81       	ldd	r25, Y+2	; 0x02
    864c:	ab 81       	ldd	r26, Y+3	; 0x03
    864e:	bc 81       	ldd	r27, Y+4	; 0x04
    8650:	01 96       	adiw	r24, 0x01	; 1
    8652:	a1 1d       	adc	r26, r1
    8654:	b1 1d       	adc	r27, r1
    8656:	89 83       	std	Y+1, r24	; 0x01
    8658:	9a 83       	std	Y+2, r25	; 0x02
    865a:	ab 83       	std	Y+3, r26	; 0x03
    865c:	bc 83       	std	Y+4, r27	; 0x04
    865e:	8d 81       	ldd	r24, Y+5	; 0x05
    8660:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <timer0_fract>
    8664:	89 81       	ldd	r24, Y+1	; 0x01
    8666:	9a 81       	ldd	r25, Y+2	; 0x02
    8668:	ab 81       	ldd	r26, Y+3	; 0x03
    866a:	bc 81       	ldd	r27, Y+4	; 0x04
    866c:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <timer0_millis>
    8670:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <timer0_millis+0x1>
    8674:	a0 93 0f 05 	sts	0x050F, r26	; 0x80050f <timer0_millis+0x2>
    8678:	b0 93 10 05 	sts	0x0510, r27	; 0x800510 <timer0_millis+0x3>
    867c:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <timer0_overflow_count>
    8680:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <timer0_overflow_count+0x1>
    8684:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <timer0_overflow_count+0x2>
    8688:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <timer0_overflow_count+0x3>
    868c:	01 96       	adiw	r24, 0x01	; 1
    868e:	a1 1d       	adc	r26, r1
    8690:	b1 1d       	adc	r27, r1
    8692:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <timer0_overflow_count>
    8696:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <timer0_overflow_count+0x1>
    869a:	a0 93 0b 05 	sts	0x050B, r26	; 0x80050b <timer0_overflow_count+0x2>
    869e:	b0 93 0c 05 	sts	0x050C, r27	; 0x80050c <timer0_overflow_count+0x3>
    86a2:	00 00       	nop
    86a4:	0f 90       	pop	r0
    86a6:	0f 90       	pop	r0
    86a8:	0f 90       	pop	r0
    86aa:	0f 90       	pop	r0
    86ac:	0f 90       	pop	r0
    86ae:	df 91       	pop	r29
    86b0:	cf 91       	pop	r28
    86b2:	bf 91       	pop	r27
    86b4:	af 91       	pop	r26
    86b6:	9f 91       	pop	r25
    86b8:	8f 91       	pop	r24
    86ba:	0f 90       	pop	r0
    86bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    86c0:	0f 90       	pop	r0
    86c2:	1f 90       	pop	r1
    86c4:	18 95       	reti

000086c6 <millis>:
    86c6:	cf 93       	push	r28
    86c8:	df 93       	push	r29
    86ca:	00 d0       	rcall	.+0      	; 0x86cc <millis+0x6>
    86cc:	1f 92       	push	r1
    86ce:	1f 92       	push	r1
    86d0:	cd b7       	in	r28, 0x3d	; 61
    86d2:	de b7       	in	r29, 0x3e	; 62
    86d4:	8f e5       	ldi	r24, 0x5F	; 95
    86d6:	90 e0       	ldi	r25, 0x00	; 0
    86d8:	fc 01       	movw	r30, r24
    86da:	80 81       	ld	r24, Z
    86dc:	89 83       	std	Y+1, r24	; 0x01
    86de:	f8 94       	cli
    86e0:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <timer0_millis>
    86e4:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <timer0_millis+0x1>
    86e8:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <timer0_millis+0x2>
    86ec:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <timer0_millis+0x3>
    86f0:	8a 83       	std	Y+2, r24	; 0x02
    86f2:	9b 83       	std	Y+3, r25	; 0x03
    86f4:	ac 83       	std	Y+4, r26	; 0x04
    86f6:	bd 83       	std	Y+5, r27	; 0x05
    86f8:	8f e5       	ldi	r24, 0x5F	; 95
    86fa:	90 e0       	ldi	r25, 0x00	; 0
    86fc:	29 81       	ldd	r18, Y+1	; 0x01
    86fe:	fc 01       	movw	r30, r24
    8700:	20 83       	st	Z, r18
    8702:	8a 81       	ldd	r24, Y+2	; 0x02
    8704:	9b 81       	ldd	r25, Y+3	; 0x03
    8706:	ac 81       	ldd	r26, Y+4	; 0x04
    8708:	bd 81       	ldd	r27, Y+5	; 0x05
    870a:	bc 01       	movw	r22, r24
    870c:	cd 01       	movw	r24, r26
    870e:	0f 90       	pop	r0
    8710:	0f 90       	pop	r0
    8712:	0f 90       	pop	r0
    8714:	0f 90       	pop	r0
    8716:	0f 90       	pop	r0
    8718:	df 91       	pop	r29
    871a:	cf 91       	pop	r28
    871c:	08 95       	ret

0000871e <micros>:
    871e:	cf 93       	push	r28
    8720:	df 93       	push	r29
    8722:	00 d0       	rcall	.+0      	; 0x8724 <micros+0x6>
    8724:	00 d0       	rcall	.+0      	; 0x8726 <micros+0x8>
    8726:	cd b7       	in	r28, 0x3d	; 61
    8728:	de b7       	in	r29, 0x3e	; 62
    872a:	8f e5       	ldi	r24, 0x5F	; 95
    872c:	90 e0       	ldi	r25, 0x00	; 0
    872e:	fc 01       	movw	r30, r24
    8730:	80 81       	ld	r24, Z
    8732:	8d 83       	std	Y+5, r24	; 0x05
    8734:	f8 94       	cli
    8736:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <timer0_overflow_count>
    873a:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <timer0_overflow_count+0x1>
    873e:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <timer0_overflow_count+0x2>
    8742:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <timer0_overflow_count+0x3>
    8746:	89 83       	std	Y+1, r24	; 0x01
    8748:	9a 83       	std	Y+2, r25	; 0x02
    874a:	ab 83       	std	Y+3, r26	; 0x03
    874c:	bc 83       	std	Y+4, r27	; 0x04
    874e:	86 e4       	ldi	r24, 0x46	; 70
    8750:	90 e0       	ldi	r25, 0x00	; 0
    8752:	fc 01       	movw	r30, r24
    8754:	80 81       	ld	r24, Z
    8756:	8e 83       	std	Y+6, r24	; 0x06
    8758:	85 e3       	ldi	r24, 0x35	; 53
    875a:	90 e0       	ldi	r25, 0x00	; 0
    875c:	fc 01       	movw	r30, r24
    875e:	80 81       	ld	r24, Z
    8760:	88 2f       	mov	r24, r24
    8762:	90 e0       	ldi	r25, 0x00	; 0
    8764:	81 70       	andi	r24, 0x01	; 1
    8766:	99 27       	eor	r25, r25
    8768:	89 2b       	or	r24, r25
    876a:	71 f0       	breq	.+28     	; 0x8788 <micros+0x6a>
    876c:	8e 81       	ldd	r24, Y+6	; 0x06
    876e:	8f 3f       	cpi	r24, 0xFF	; 255
    8770:	59 f0       	breq	.+22     	; 0x8788 <micros+0x6a>
    8772:	89 81       	ldd	r24, Y+1	; 0x01
    8774:	9a 81       	ldd	r25, Y+2	; 0x02
    8776:	ab 81       	ldd	r26, Y+3	; 0x03
    8778:	bc 81       	ldd	r27, Y+4	; 0x04
    877a:	01 96       	adiw	r24, 0x01	; 1
    877c:	a1 1d       	adc	r26, r1
    877e:	b1 1d       	adc	r27, r1
    8780:	89 83       	std	Y+1, r24	; 0x01
    8782:	9a 83       	std	Y+2, r25	; 0x02
    8784:	ab 83       	std	Y+3, r26	; 0x03
    8786:	bc 83       	std	Y+4, r27	; 0x04
    8788:	8f e5       	ldi	r24, 0x5F	; 95
    878a:	90 e0       	ldi	r25, 0x00	; 0
    878c:	2d 81       	ldd	r18, Y+5	; 0x05
    878e:	fc 01       	movw	r30, r24
    8790:	20 83       	st	Z, r18
    8792:	89 81       	ldd	r24, Y+1	; 0x01
    8794:	9a 81       	ldd	r25, Y+2	; 0x02
    8796:	ab 81       	ldd	r26, Y+3	; 0x03
    8798:	bc 81       	ldd	r27, Y+4	; 0x04
    879a:	22 27       	eor	r18, r18
    879c:	38 2f       	mov	r19, r24
    879e:	49 2f       	mov	r20, r25
    87a0:	5a 2f       	mov	r21, r26
    87a2:	8e 81       	ldd	r24, Y+6	; 0x06
    87a4:	88 2f       	mov	r24, r24
    87a6:	90 e0       	ldi	r25, 0x00	; 0
    87a8:	a0 e0       	ldi	r26, 0x00	; 0
    87aa:	b0 e0       	ldi	r27, 0x00	; 0
    87ac:	82 0f       	add	r24, r18
    87ae:	93 1f       	adc	r25, r19
    87b0:	a4 1f       	adc	r26, r20
    87b2:	b5 1f       	adc	r27, r21
    87b4:	88 0f       	add	r24, r24
    87b6:	99 1f       	adc	r25, r25
    87b8:	aa 1f       	adc	r26, r26
    87ba:	bb 1f       	adc	r27, r27
    87bc:	88 0f       	add	r24, r24
    87be:	99 1f       	adc	r25, r25
    87c0:	aa 1f       	adc	r26, r26
    87c2:	bb 1f       	adc	r27, r27
    87c4:	bc 01       	movw	r22, r24
    87c6:	cd 01       	movw	r24, r26
    87c8:	26 96       	adiw	r28, 0x06	; 6
    87ca:	0f b6       	in	r0, 0x3f	; 63
    87cc:	f8 94       	cli
    87ce:	de bf       	out	0x3e, r29	; 62
    87d0:	0f be       	out	0x3f, r0	; 63
    87d2:	cd bf       	out	0x3d, r28	; 61
    87d4:	df 91       	pop	r29
    87d6:	cf 91       	pop	r28
    87d8:	08 95       	ret

000087da <delay>:
    87da:	ef 92       	push	r14
    87dc:	ff 92       	push	r15
    87de:	0f 93       	push	r16
    87e0:	1f 93       	push	r17
    87e2:	cf 93       	push	r28
    87e4:	df 93       	push	r29
    87e6:	cd b7       	in	r28, 0x3d	; 61
    87e8:	de b7       	in	r29, 0x3e	; 62
    87ea:	28 97       	sbiw	r28, 0x08	; 8
    87ec:	0f b6       	in	r0, 0x3f	; 63
    87ee:	f8 94       	cli
    87f0:	de bf       	out	0x3e, r29	; 62
    87f2:	0f be       	out	0x3f, r0	; 63
    87f4:	cd bf       	out	0x3d, r28	; 61
    87f6:	6d 83       	std	Y+5, r22	; 0x05
    87f8:	7e 83       	std	Y+6, r23	; 0x06
    87fa:	8f 83       	std	Y+7, r24	; 0x07
    87fc:	98 87       	std	Y+8, r25	; 0x08
    87fe:	8f df       	rcall	.-226    	; 0x871e <micros>
    8800:	dc 01       	movw	r26, r24
    8802:	cb 01       	movw	r24, r22
    8804:	89 83       	std	Y+1, r24	; 0x01
    8806:	9a 83       	std	Y+2, r25	; 0x02
    8808:	ab 83       	std	Y+3, r26	; 0x03
    880a:	bc 83       	std	Y+4, r27	; 0x04
    880c:	36 c0       	rjmp	.+108    	; 0x887a <delay+0xa0>
    880e:	0e 94 b4 57 	call	0xaf68	; 0xaf68 <yield>
    8812:	17 c0       	rjmp	.+46     	; 0x8842 <delay+0x68>
    8814:	8d 81       	ldd	r24, Y+5	; 0x05
    8816:	9e 81       	ldd	r25, Y+6	; 0x06
    8818:	af 81       	ldd	r26, Y+7	; 0x07
    881a:	b8 85       	ldd	r27, Y+8	; 0x08
    881c:	01 97       	sbiw	r24, 0x01	; 1
    881e:	a1 09       	sbc	r26, r1
    8820:	b1 09       	sbc	r27, r1
    8822:	8d 83       	std	Y+5, r24	; 0x05
    8824:	9e 83       	std	Y+6, r25	; 0x06
    8826:	af 83       	std	Y+7, r26	; 0x07
    8828:	b8 87       	std	Y+8, r27	; 0x08
    882a:	89 81       	ldd	r24, Y+1	; 0x01
    882c:	9a 81       	ldd	r25, Y+2	; 0x02
    882e:	ab 81       	ldd	r26, Y+3	; 0x03
    8830:	bc 81       	ldd	r27, Y+4	; 0x04
    8832:	88 51       	subi	r24, 0x18	; 24
    8834:	9c 4f       	sbci	r25, 0xFC	; 252
    8836:	af 4f       	sbci	r26, 0xFF	; 255
    8838:	bf 4f       	sbci	r27, 0xFF	; 255
    883a:	89 83       	std	Y+1, r24	; 0x01
    883c:	9a 83       	std	Y+2, r25	; 0x02
    883e:	ab 83       	std	Y+3, r26	; 0x03
    8840:	bc 83       	std	Y+4, r27	; 0x04
    8842:	8d 81       	ldd	r24, Y+5	; 0x05
    8844:	9e 81       	ldd	r25, Y+6	; 0x06
    8846:	af 81       	ldd	r26, Y+7	; 0x07
    8848:	b8 85       	ldd	r27, Y+8	; 0x08
    884a:	89 2b       	or	r24, r25
    884c:	8a 2b       	or	r24, r26
    884e:	8b 2b       	or	r24, r27
    8850:	a1 f0       	breq	.+40     	; 0x887a <delay+0xa0>
    8852:	65 df       	rcall	.-310    	; 0x871e <micros>
    8854:	9b 01       	movw	r18, r22
    8856:	ac 01       	movw	r20, r24
    8858:	89 81       	ldd	r24, Y+1	; 0x01
    885a:	9a 81       	ldd	r25, Y+2	; 0x02
    885c:	ab 81       	ldd	r26, Y+3	; 0x03
    885e:	bc 81       	ldd	r27, Y+4	; 0x04
    8860:	79 01       	movw	r14, r18
    8862:	8a 01       	movw	r16, r20
    8864:	e8 1a       	sub	r14, r24
    8866:	f9 0a       	sbc	r15, r25
    8868:	0a 0b       	sbc	r16, r26
    886a:	1b 0b       	sbc	r17, r27
    886c:	d8 01       	movw	r26, r16
    886e:	c7 01       	movw	r24, r14
    8870:	88 3e       	cpi	r24, 0xE8	; 232
    8872:	93 40       	sbci	r25, 0x03	; 3
    8874:	a1 05       	cpc	r26, r1
    8876:	b1 05       	cpc	r27, r1
    8878:	68 f6       	brcc	.-102    	; 0x8814 <delay+0x3a>
    887a:	8d 81       	ldd	r24, Y+5	; 0x05
    887c:	9e 81       	ldd	r25, Y+6	; 0x06
    887e:	af 81       	ldd	r26, Y+7	; 0x07
    8880:	b8 85       	ldd	r27, Y+8	; 0x08
    8882:	89 2b       	or	r24, r25
    8884:	8a 2b       	or	r24, r26
    8886:	8b 2b       	or	r24, r27
    8888:	11 f6       	brne	.-124    	; 0x880e <delay+0x34>
    888a:	00 00       	nop
    888c:	28 96       	adiw	r28, 0x08	; 8
    888e:	0f b6       	in	r0, 0x3f	; 63
    8890:	f8 94       	cli
    8892:	de bf       	out	0x3e, r29	; 62
    8894:	0f be       	out	0x3f, r0	; 63
    8896:	cd bf       	out	0x3d, r28	; 61
    8898:	df 91       	pop	r29
    889a:	cf 91       	pop	r28
    889c:	1f 91       	pop	r17
    889e:	0f 91       	pop	r16
    88a0:	ff 90       	pop	r15
    88a2:	ef 90       	pop	r14
    88a4:	08 95       	ret

000088a6 <init>:

void init()
{
    88a6:	cf 93       	push	r28
    88a8:	df 93       	push	r29
    88aa:	cd b7       	in	r28, 0x3d	; 61
    88ac:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    88ae:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    88b0:	84 e4       	ldi	r24, 0x44	; 68
    88b2:	90 e0       	ldi	r25, 0x00	; 0
    88b4:	24 e4       	ldi	r18, 0x44	; 68
    88b6:	30 e0       	ldi	r19, 0x00	; 0
    88b8:	f9 01       	movw	r30, r18
    88ba:	20 81       	ld	r18, Z
    88bc:	22 60       	ori	r18, 0x02	; 2
    88be:	fc 01       	movw	r30, r24
    88c0:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    88c2:	84 e4       	ldi	r24, 0x44	; 68
    88c4:	90 e0       	ldi	r25, 0x00	; 0
    88c6:	24 e4       	ldi	r18, 0x44	; 68
    88c8:	30 e0       	ldi	r19, 0x00	; 0
    88ca:	f9 01       	movw	r30, r18
    88cc:	20 81       	ld	r18, Z
    88ce:	21 60       	ori	r18, 0x01	; 1
    88d0:	fc 01       	movw	r30, r24
    88d2:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    88d4:	85 e4       	ldi	r24, 0x45	; 69
    88d6:	90 e0       	ldi	r25, 0x00	; 0
    88d8:	25 e4       	ldi	r18, 0x45	; 69
    88da:	30 e0       	ldi	r19, 0x00	; 0
    88dc:	f9 01       	movw	r30, r18
    88de:	20 81       	ld	r18, Z
    88e0:	22 60       	ori	r18, 0x02	; 2
    88e2:	fc 01       	movw	r30, r24
    88e4:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    88e6:	85 e4       	ldi	r24, 0x45	; 69
    88e8:	90 e0       	ldi	r25, 0x00	; 0
    88ea:	25 e4       	ldi	r18, 0x45	; 69
    88ec:	30 e0       	ldi	r19, 0x00	; 0
    88ee:	f9 01       	movw	r30, r18
    88f0:	20 81       	ld	r18, Z
    88f2:	21 60       	ori	r18, 0x01	; 1
    88f4:	fc 01       	movw	r30, r24
    88f6:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    88f8:	8e e6       	ldi	r24, 0x6E	; 110
    88fa:	90 e0       	ldi	r25, 0x00	; 0
    88fc:	2e e6       	ldi	r18, 0x6E	; 110
    88fe:	30 e0       	ldi	r19, 0x00	; 0
    8900:	f9 01       	movw	r30, r18
    8902:	20 81       	ld	r18, Z
    8904:	21 60       	ori	r18, 0x01	; 1
    8906:	fc 01       	movw	r30, r24
    8908:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    890a:	81 e8       	ldi	r24, 0x81	; 129
    890c:	90 e0       	ldi	r25, 0x00	; 0
    890e:	fc 01       	movw	r30, r24
    8910:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    8912:	81 e8       	ldi	r24, 0x81	; 129
    8914:	90 e0       	ldi	r25, 0x00	; 0
    8916:	21 e8       	ldi	r18, 0x81	; 129
    8918:	30 e0       	ldi	r19, 0x00	; 0
    891a:	f9 01       	movw	r30, r18
    891c:	20 81       	ld	r18, Z
    891e:	22 60       	ori	r18, 0x02	; 2
    8920:	fc 01       	movw	r30, r24
    8922:	20 83       	st	Z, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    8924:	81 e8       	ldi	r24, 0x81	; 129
    8926:	90 e0       	ldi	r25, 0x00	; 0
    8928:	21 e8       	ldi	r18, 0x81	; 129
    892a:	30 e0       	ldi	r19, 0x00	; 0
    892c:	f9 01       	movw	r30, r18
    892e:	20 81       	ld	r18, Z
    8930:	21 60       	ori	r18, 0x01	; 1
    8932:	fc 01       	movw	r30, r24
    8934:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    8936:	80 e8       	ldi	r24, 0x80	; 128
    8938:	90 e0       	ldi	r25, 0x00	; 0
    893a:	20 e8       	ldi	r18, 0x80	; 128
    893c:	30 e0       	ldi	r19, 0x00	; 0
    893e:	f9 01       	movw	r30, r18
    8940:	20 81       	ld	r18, Z
    8942:	21 60       	ori	r18, 0x01	; 1
    8944:	fc 01       	movw	r30, r24
    8946:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    8948:	81 eb       	ldi	r24, 0xB1	; 177
    894a:	90 e0       	ldi	r25, 0x00	; 0
    894c:	21 eb       	ldi	r18, 0xB1	; 177
    894e:	30 e0       	ldi	r19, 0x00	; 0
    8950:	f9 01       	movw	r30, r18
    8952:	20 81       	ld	r18, Z
    8954:	24 60       	ori	r18, 0x04	; 4
    8956:	fc 01       	movw	r30, r24
    8958:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    895a:	80 eb       	ldi	r24, 0xB0	; 176
    895c:	90 e0       	ldi	r25, 0x00	; 0
    895e:	20 eb       	ldi	r18, 0xB0	; 176
    8960:	30 e0       	ldi	r19, 0x00	; 0
    8962:	f9 01       	movw	r30, r18
    8964:	20 81       	ld	r18, Z
    8966:	21 60       	ori	r18, 0x01	; 1
    8968:	fc 01       	movw	r30, r24
    896a:	20 83       	st	Z, r18
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    896c:	81 e9       	ldi	r24, 0x91	; 145
    896e:	90 e0       	ldi	r25, 0x00	; 0
    8970:	21 e9       	ldi	r18, 0x91	; 145
    8972:	30 e0       	ldi	r19, 0x00	; 0
    8974:	f9 01       	movw	r30, r18
    8976:	20 81       	ld	r18, Z
    8978:	22 60       	ori	r18, 0x02	; 2
    897a:	fc 01       	movw	r30, r24
    897c:	20 83       	st	Z, r18
	sbi(TCCR3B, CS30);
    897e:	81 e9       	ldi	r24, 0x91	; 145
    8980:	90 e0       	ldi	r25, 0x00	; 0
    8982:	21 e9       	ldi	r18, 0x91	; 145
    8984:	30 e0       	ldi	r19, 0x00	; 0
    8986:	f9 01       	movw	r30, r18
    8988:	20 81       	ld	r18, Z
    898a:	21 60       	ori	r18, 0x01	; 1
    898c:	fc 01       	movw	r30, r24
    898e:	20 83       	st	Z, r18
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    8990:	80 e9       	ldi	r24, 0x90	; 144
    8992:	90 e0       	ldi	r25, 0x00	; 0
    8994:	20 e9       	ldi	r18, 0x90	; 144
    8996:	30 e0       	ldi	r19, 0x00	; 0
    8998:	f9 01       	movw	r30, r18
    899a:	20 81       	ld	r18, Z
    899c:	21 60       	ori	r18, 0x01	; 1
    899e:	fc 01       	movw	r30, r24
    89a0:	20 83       	st	Z, r18
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    89a2:	81 ea       	ldi	r24, 0xA1	; 161
    89a4:	90 e0       	ldi	r25, 0x00	; 0
    89a6:	21 ea       	ldi	r18, 0xA1	; 161
    89a8:	30 e0       	ldi	r19, 0x00	; 0
    89aa:	f9 01       	movw	r30, r18
    89ac:	20 81       	ld	r18, Z
    89ae:	22 60       	ori	r18, 0x02	; 2
    89b0:	fc 01       	movw	r30, r24
    89b2:	20 83       	st	Z, r18
	sbi(TCCR4B, CS40);
    89b4:	81 ea       	ldi	r24, 0xA1	; 161
    89b6:	90 e0       	ldi	r25, 0x00	; 0
    89b8:	21 ea       	ldi	r18, 0xA1	; 161
    89ba:	30 e0       	ldi	r19, 0x00	; 0
    89bc:	f9 01       	movw	r30, r18
    89be:	20 81       	ld	r18, Z
    89c0:	21 60       	ori	r18, 0x01	; 1
    89c2:	fc 01       	movw	r30, r24
    89c4:	20 83       	st	Z, r18
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    89c6:	80 ea       	ldi	r24, 0xA0	; 160
    89c8:	90 e0       	ldi	r25, 0x00	; 0
    89ca:	20 ea       	ldi	r18, 0xA0	; 160
    89cc:	30 e0       	ldi	r19, 0x00	; 0
    89ce:	f9 01       	movw	r30, r18
    89d0:	20 81       	ld	r18, Z
    89d2:	21 60       	ori	r18, 0x01	; 1
    89d4:	fc 01       	movw	r30, r24
    89d6:	20 83       	st	Z, r18
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    89d8:	81 e2       	ldi	r24, 0x21	; 33
    89da:	91 e0       	ldi	r25, 0x01	; 1
    89dc:	21 e2       	ldi	r18, 0x21	; 33
    89de:	31 e0       	ldi	r19, 0x01	; 1
    89e0:	f9 01       	movw	r30, r18
    89e2:	20 81       	ld	r18, Z
    89e4:	22 60       	ori	r18, 0x02	; 2
    89e6:	fc 01       	movw	r30, r24
    89e8:	20 83       	st	Z, r18
	sbi(TCCR5B, CS50);
    89ea:	81 e2       	ldi	r24, 0x21	; 33
    89ec:	91 e0       	ldi	r25, 0x01	; 1
    89ee:	21 e2       	ldi	r18, 0x21	; 33
    89f0:	31 e0       	ldi	r19, 0x01	; 1
    89f2:	f9 01       	movw	r30, r18
    89f4:	20 81       	ld	r18, Z
    89f6:	21 60       	ori	r18, 0x01	; 1
    89f8:	fc 01       	movw	r30, r24
    89fa:	20 83       	st	Z, r18
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    89fc:	80 e2       	ldi	r24, 0x20	; 32
    89fe:	91 e0       	ldi	r25, 0x01	; 1
    8a00:	20 e2       	ldi	r18, 0x20	; 32
    8a02:	31 e0       	ldi	r19, 0x01	; 1
    8a04:	f9 01       	movw	r30, r18
    8a06:	20 81       	ld	r18, Z
    8a08:	21 60       	ori	r18, 0x01	; 1
    8a0a:	fc 01       	movw	r30, r24
    8a0c:	20 83       	st	Z, r18
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    8a0e:	8a e7       	ldi	r24, 0x7A	; 122
    8a10:	90 e0       	ldi	r25, 0x00	; 0
    8a12:	2a e7       	ldi	r18, 0x7A	; 122
    8a14:	30 e0       	ldi	r19, 0x00	; 0
    8a16:	f9 01       	movw	r30, r18
    8a18:	20 81       	ld	r18, Z
    8a1a:	24 60       	ori	r18, 0x04	; 4
    8a1c:	fc 01       	movw	r30, r24
    8a1e:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS1);
    8a20:	8a e7       	ldi	r24, 0x7A	; 122
    8a22:	90 e0       	ldi	r25, 0x00	; 0
    8a24:	2a e7       	ldi	r18, 0x7A	; 122
    8a26:	30 e0       	ldi	r19, 0x00	; 0
    8a28:	f9 01       	movw	r30, r18
    8a2a:	20 81       	ld	r18, Z
    8a2c:	22 60       	ori	r18, 0x02	; 2
    8a2e:	fc 01       	movw	r30, r24
    8a30:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS0);
    8a32:	8a e7       	ldi	r24, 0x7A	; 122
    8a34:	90 e0       	ldi	r25, 0x00	; 0
    8a36:	2a e7       	ldi	r18, 0x7A	; 122
    8a38:	30 e0       	ldi	r19, 0x00	; 0
    8a3a:	f9 01       	movw	r30, r18
    8a3c:	20 81       	ld	r18, Z
    8a3e:	21 60       	ori	r18, 0x01	; 1
    8a40:	fc 01       	movw	r30, r24
    8a42:	20 83       	st	Z, r18
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    8a44:	8a e7       	ldi	r24, 0x7A	; 122
    8a46:	90 e0       	ldi	r25, 0x00	; 0
    8a48:	2a e7       	ldi	r18, 0x7A	; 122
    8a4a:	30 e0       	ldi	r19, 0x00	; 0
    8a4c:	f9 01       	movw	r30, r18
    8a4e:	20 81       	ld	r18, Z
    8a50:	20 68       	ori	r18, 0x80	; 128
    8a52:	fc 01       	movw	r30, r24
    8a54:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    8a56:	81 ec       	ldi	r24, 0xC1	; 193
    8a58:	90 e0       	ldi	r25, 0x00	; 0
    8a5a:	fc 01       	movw	r30, r24
    8a5c:	10 82       	st	Z, r1
#endif
}
    8a5e:	00 00       	nop
    8a60:	df 91       	pop	r29
    8a62:	cf 91       	pop	r28
    8a64:	08 95       	ret

00008a66 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    8a66:	cf 93       	push	r28
    8a68:	df 93       	push	r29
    8a6a:	cd b7       	in	r28, 0x3d	; 61
    8a6c:	de b7       	in	r29, 0x3e	; 62
    8a6e:	69 97       	sbiw	r28, 0x19	; 25
    8a70:	0f b6       	in	r0, 0x3f	; 63
    8a72:	f8 94       	cli
    8a74:	de bf       	out	0x3e, r29	; 62
    8a76:	0f be       	out	0x3f, r0	; 63
    8a78:	cd bf       	out	0x3d, r28	; 61
    8a7a:	88 8f       	std	Y+24, r24	; 0x18
    8a7c:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
    8a7e:	88 8d       	ldd	r24, Y+24	; 0x18
    8a80:	88 2f       	mov	r24, r24
    8a82:	90 e0       	ldi	r25, 0x00	; 0
    8a84:	8a 50       	subi	r24, 0x0A	; 10
    8a86:	91 4d       	sbci	r25, 0xD1	; 209
    8a88:	9a 83       	std	Y+2, r25	; 0x02
    8a8a:	89 83       	std	Y+1, r24	; 0x01
    8a8c:	89 81       	ldd	r24, Y+1	; 0x01
    8a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    8a90:	fc 01       	movw	r30, r24
    8a92:	84 91       	lpm	r24, Z
    8a94:	8b 83       	std	Y+3, r24	; 0x03
    8a96:	8b 81       	ldd	r24, Y+3	; 0x03
    8a98:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    8a9a:	88 8d       	ldd	r24, Y+24	; 0x18
    8a9c:	88 2f       	mov	r24, r24
    8a9e:	90 e0       	ldi	r25, 0x00	; 0
    8aa0:	80 55       	subi	r24, 0x50	; 80
    8aa2:	91 4d       	sbci	r25, 0xD1	; 209
    8aa4:	9e 83       	std	Y+6, r25	; 0x06
    8aa6:	8d 83       	std	Y+5, r24	; 0x05
    8aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    8aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    8aac:	fc 01       	movw	r30, r24
    8aae:	84 91       	lpm	r24, Z
    8ab0:	8f 83       	std	Y+7, r24	; 0x07
    8ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    8ab4:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    8ab6:	88 85       	ldd	r24, Y+8	; 0x08
    8ab8:	88 23       	and	r24, r24
    8aba:	09 f4       	brne	.+2      	; 0x8abe <pinMode+0x58>
    8abc:	95 c0       	rjmp	.+298    	; 0x8be8 <pinMode+0x182>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    8abe:	88 85       	ldd	r24, Y+8	; 0x08
    8ac0:	88 2f       	mov	r24, r24
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	88 0f       	add	r24, r24
    8ac6:	99 1f       	adc	r25, r25
    8ac8:	8e 59       	subi	r24, 0x9E	; 158
    8aca:	91 4d       	sbci	r25, 0xD1	; 209
    8acc:	9a 87       	std	Y+10, r25	; 0x0a
    8ace:	89 87       	std	Y+9, r24	; 0x09
    8ad0:	89 85       	ldd	r24, Y+9	; 0x09
    8ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ad4:	fc 01       	movw	r30, r24
    8ad6:	25 91       	lpm	r18, Z+
    8ad8:	34 91       	lpm	r19, Z
    8ada:	cf 01       	movw	r24, r30
    8adc:	3c 87       	std	Y+12, r19	; 0x0c
    8ade:	2b 87       	std	Y+11, r18	; 0x0b
    8ae0:	9a 87       	std	Y+10, r25	; 0x0a
    8ae2:	89 87       	std	Y+9, r24	; 0x09
    8ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    8ae6:	9c 85       	ldd	r25, Y+12	; 0x0c
    8ae8:	9e 87       	std	Y+14, r25	; 0x0e
    8aea:	8d 87       	std	Y+13, r24	; 0x0d
	out = portOutputRegister(port);
    8aec:	88 85       	ldd	r24, Y+8	; 0x08
    8aee:	88 2f       	mov	r24, r24
    8af0:	90 e0       	ldi	r25, 0x00	; 0
    8af2:	88 0f       	add	r24, r24
    8af4:	99 1f       	adc	r25, r25
    8af6:	84 58       	subi	r24, 0x84	; 132
    8af8:	91 4d       	sbci	r25, 0xD1	; 209
    8afa:	98 8b       	std	Y+16, r25	; 0x10
    8afc:	8f 87       	std	Y+15, r24	; 0x0f
    8afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    8b00:	98 89       	ldd	r25, Y+16	; 0x10
    8b02:	fc 01       	movw	r30, r24
    8b04:	25 91       	lpm	r18, Z+
    8b06:	34 91       	lpm	r19, Z
    8b08:	cf 01       	movw	r24, r30
    8b0a:	3a 8b       	std	Y+18, r19	; 0x12
    8b0c:	29 8b       	std	Y+17, r18	; 0x11
    8b0e:	98 8b       	std	Y+16, r25	; 0x10
    8b10:	8f 87       	std	Y+15, r24	; 0x0f
    8b12:	89 89       	ldd	r24, Y+17	; 0x11
    8b14:	9a 89       	ldd	r25, Y+18	; 0x12
    8b16:	9c 8b       	std	Y+20, r25	; 0x14
    8b18:	8b 8b       	std	Y+19, r24	; 0x13

	if (mode == INPUT) { 
    8b1a:	89 8d       	ldd	r24, Y+25	; 0x19
    8b1c:	88 23       	and	r24, r24
    8b1e:	31 f5       	brne	.+76     	; 0x8b6c <pinMode+0x106>
		uint8_t oldSREG = SREG;
    8b20:	8f e5       	ldi	r24, 0x5F	; 95
    8b22:	90 e0       	ldi	r25, 0x00	; 0
    8b24:	fc 01       	movw	r30, r24
    8b26:	80 81       	ld	r24, Z
    8b28:	8d 8b       	std	Y+21, r24	; 0x15
                cli();
    8b2a:	f8 94       	cli
		*reg &= ~bit;
    8b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b30:	fc 01       	movw	r30, r24
    8b32:	80 81       	ld	r24, Z
    8b34:	98 2f       	mov	r25, r24
    8b36:	8c 81       	ldd	r24, Y+4	; 0x04
    8b38:	80 95       	com	r24
    8b3a:	89 23       	and	r24, r25
    8b3c:	28 2f       	mov	r18, r24
    8b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b42:	fc 01       	movw	r30, r24
    8b44:	20 83       	st	Z, r18
		*out &= ~bit;
    8b46:	8b 89       	ldd	r24, Y+19	; 0x13
    8b48:	9c 89       	ldd	r25, Y+20	; 0x14
    8b4a:	fc 01       	movw	r30, r24
    8b4c:	80 81       	ld	r24, Z
    8b4e:	98 2f       	mov	r25, r24
    8b50:	8c 81       	ldd	r24, Y+4	; 0x04
    8b52:	80 95       	com	r24
    8b54:	89 23       	and	r24, r25
    8b56:	28 2f       	mov	r18, r24
    8b58:	8b 89       	ldd	r24, Y+19	; 0x13
    8b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    8b5c:	fc 01       	movw	r30, r24
    8b5e:	20 83       	st	Z, r18
		SREG = oldSREG;
    8b60:	8f e5       	ldi	r24, 0x5F	; 95
    8b62:	90 e0       	ldi	r25, 0x00	; 0
    8b64:	2d 89       	ldd	r18, Y+21	; 0x15
    8b66:	fc 01       	movw	r30, r24
    8b68:	20 83       	st	Z, r18
    8b6a:	3f c0       	rjmp	.+126    	; 0x8bea <pinMode+0x184>
	} else if (mode == INPUT_PULLUP) {
    8b6c:	89 8d       	ldd	r24, Y+25	; 0x19
    8b6e:	82 30       	cpi	r24, 0x02	; 2
    8b70:	21 f5       	brne	.+72     	; 0x8bba <pinMode+0x154>
		uint8_t oldSREG = SREG;
    8b72:	8f e5       	ldi	r24, 0x5F	; 95
    8b74:	90 e0       	ldi	r25, 0x00	; 0
    8b76:	fc 01       	movw	r30, r24
    8b78:	80 81       	ld	r24, Z
    8b7a:	8e 8b       	std	Y+22, r24	; 0x16
                cli();
    8b7c:	f8 94       	cli
		*reg &= ~bit;
    8b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b82:	fc 01       	movw	r30, r24
    8b84:	80 81       	ld	r24, Z
    8b86:	98 2f       	mov	r25, r24
    8b88:	8c 81       	ldd	r24, Y+4	; 0x04
    8b8a:	80 95       	com	r24
    8b8c:	89 23       	and	r24, r25
    8b8e:	28 2f       	mov	r18, r24
    8b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b94:	fc 01       	movw	r30, r24
    8b96:	20 83       	st	Z, r18
		*out |= bit;
    8b98:	8b 89       	ldd	r24, Y+19	; 0x13
    8b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    8b9c:	fc 01       	movw	r30, r24
    8b9e:	90 81       	ld	r25, Z
    8ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    8ba2:	29 2f       	mov	r18, r25
    8ba4:	28 2b       	or	r18, r24
    8ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    8ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    8baa:	fc 01       	movw	r30, r24
    8bac:	20 83       	st	Z, r18
		SREG = oldSREG;
    8bae:	8f e5       	ldi	r24, 0x5F	; 95
    8bb0:	90 e0       	ldi	r25, 0x00	; 0
    8bb2:	2e 89       	ldd	r18, Y+22	; 0x16
    8bb4:	fc 01       	movw	r30, r24
    8bb6:	20 83       	st	Z, r18
    8bb8:	18 c0       	rjmp	.+48     	; 0x8bea <pinMode+0x184>
	} else {
		uint8_t oldSREG = SREG;
    8bba:	8f e5       	ldi	r24, 0x5F	; 95
    8bbc:	90 e0       	ldi	r25, 0x00	; 0
    8bbe:	fc 01       	movw	r30, r24
    8bc0:	80 81       	ld	r24, Z
    8bc2:	8f 8b       	std	Y+23, r24	; 0x17
                cli();
    8bc4:	f8 94       	cli
		*reg |= bit;
    8bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    8bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    8bca:	fc 01       	movw	r30, r24
    8bcc:	90 81       	ld	r25, Z
    8bce:	8c 81       	ldd	r24, Y+4	; 0x04
    8bd0:	29 2f       	mov	r18, r25
    8bd2:	28 2b       	or	r18, r24
    8bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    8bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    8bd8:	fc 01       	movw	r30, r24
    8bda:	20 83       	st	Z, r18
		SREG = oldSREG;
    8bdc:	8f e5       	ldi	r24, 0x5F	; 95
    8bde:	90 e0       	ldi	r25, 0x00	; 0
    8be0:	2f 89       	ldd	r18, Y+23	; 0x17
    8be2:	fc 01       	movw	r30, r24
    8be4:	20 83       	st	Z, r18
    8be6:	01 c0       	rjmp	.+2      	; 0x8bea <pinMode+0x184>
{
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    8be8:	00 00       	nop
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    8bea:	69 96       	adiw	r28, 0x19	; 25
    8bec:	0f b6       	in	r0, 0x3f	; 63
    8bee:	f8 94       	cli
    8bf0:	de bf       	out	0x3e, r29	; 62
    8bf2:	0f be       	out	0x3f, r0	; 63
    8bf4:	cd bf       	out	0x3d, r28	; 61
    8bf6:	df 91       	pop	r29
    8bf8:	cf 91       	pop	r28
    8bfa:	08 95       	ret

00008bfc <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    8bfc:	cf 93       	push	r28
    8bfe:	df 93       	push	r29
    8c00:	1f 92       	push	r1
    8c02:	cd b7       	in	r28, 0x3d	; 61
    8c04:	de b7       	in	r29, 0x3e	; 62
    8c06:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    8c08:	89 81       	ldd	r24, Y+1	; 0x01
    8c0a:	88 2f       	mov	r24, r24
    8c0c:	90 e0       	ldi	r25, 0x00	; 0
    8c0e:	09 2e       	mov	r0, r25
    8c10:	00 0c       	add	r0, r0
    8c12:	aa 0b       	sbc	r26, r26
    8c14:	bb 0b       	sbc	r27, r27
    8c16:	41 e0       	ldi	r20, 0x01	; 1
    8c18:	50 e0       	ldi	r21, 0x00	; 0
    8c1a:	21 e1       	ldi	r18, 0x11	; 17
    8c1c:	30 e0       	ldi	r19, 0x00	; 0
    8c1e:	84 1b       	sub	r24, r20
    8c20:	95 0b       	sbc	r25, r21
    8c22:	28 17       	cp	r18, r24
    8c24:	39 07       	cpc	r19, r25
    8c26:	08 f4       	brcc	.+2      	; 0x8c2a <turnOffPWM+0x2e>
    8c28:	a7 c0       	rjmp	.+334    	; 0x8d78 <turnOffPWM+0x17c>
    8c2a:	fc 01       	movw	r30, r24
    8c2c:	88 27       	eor	r24, r24
    8c2e:	e6 58       	subi	r30, 0x86	; 134
    8c30:	ff 4f       	sbci	r31, 0xFF	; 255
    8c32:	8f 4f       	sbci	r24, 0xFF	; 255
    8c34:	0c 94 6c 61 	jmp	0xc2d8	; 0xc2d8 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    8c38:	80 e8       	ldi	r24, 0x80	; 128
    8c3a:	90 e0       	ldi	r25, 0x00	; 0
    8c3c:	20 e8       	ldi	r18, 0x80	; 128
    8c3e:	30 e0       	ldi	r19, 0x00	; 0
    8c40:	f9 01       	movw	r30, r18
    8c42:	20 81       	ld	r18, Z
    8c44:	2f 77       	andi	r18, 0x7F	; 127
    8c46:	fc 01       	movw	r30, r24
    8c48:	20 83       	st	Z, r18
    8c4a:	96 c0       	rjmp	.+300    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    8c4c:	80 e8       	ldi	r24, 0x80	; 128
    8c4e:	90 e0       	ldi	r25, 0x00	; 0
    8c50:	20 e8       	ldi	r18, 0x80	; 128
    8c52:	30 e0       	ldi	r19, 0x00	; 0
    8c54:	f9 01       	movw	r30, r18
    8c56:	20 81       	ld	r18, Z
    8c58:	2f 7d       	andi	r18, 0xDF	; 223
    8c5a:	fc 01       	movw	r30, r24
    8c5c:	20 83       	st	Z, r18
    8c5e:	8c c0       	rjmp	.+280    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    8c60:	80 e8       	ldi	r24, 0x80	; 128
    8c62:	90 e0       	ldi	r25, 0x00	; 0
    8c64:	20 e8       	ldi	r18, 0x80	; 128
    8c66:	30 e0       	ldi	r19, 0x00	; 0
    8c68:	f9 01       	movw	r30, r18
    8c6a:	20 81       	ld	r18, Z
    8c6c:	27 7f       	andi	r18, 0xF7	; 247
    8c6e:	fc 01       	movw	r30, r24
    8c70:	20 83       	st	Z, r18
    8c72:	82 c0       	rjmp	.+260    	; 0x8d78 <turnOffPWM+0x17c>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    8c74:	84 e4       	ldi	r24, 0x44	; 68
    8c76:	90 e0       	ldi	r25, 0x00	; 0
    8c78:	24 e4       	ldi	r18, 0x44	; 68
    8c7a:	30 e0       	ldi	r19, 0x00	; 0
    8c7c:	f9 01       	movw	r30, r18
    8c7e:	20 81       	ld	r18, Z
    8c80:	2f 77       	andi	r18, 0x7F	; 127
    8c82:	fc 01       	movw	r30, r24
    8c84:	20 83       	st	Z, r18
    8c86:	78 c0       	rjmp	.+240    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    8c88:	84 e4       	ldi	r24, 0x44	; 68
    8c8a:	90 e0       	ldi	r25, 0x00	; 0
    8c8c:	24 e4       	ldi	r18, 0x44	; 68
    8c8e:	30 e0       	ldi	r19, 0x00	; 0
    8c90:	f9 01       	movw	r30, r18
    8c92:	20 81       	ld	r18, Z
    8c94:	2f 7d       	andi	r18, 0xDF	; 223
    8c96:	fc 01       	movw	r30, r24
    8c98:	20 83       	st	Z, r18
    8c9a:	6e c0       	rjmp	.+220    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    8c9c:	80 eb       	ldi	r24, 0xB0	; 176
    8c9e:	90 e0       	ldi	r25, 0x00	; 0
    8ca0:	20 eb       	ldi	r18, 0xB0	; 176
    8ca2:	30 e0       	ldi	r19, 0x00	; 0
    8ca4:	f9 01       	movw	r30, r18
    8ca6:	20 81       	ld	r18, Z
    8ca8:	2f 77       	andi	r18, 0x7F	; 127
    8caa:	fc 01       	movw	r30, r24
    8cac:	20 83       	st	Z, r18
    8cae:	64 c0       	rjmp	.+200    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    8cb0:	80 eb       	ldi	r24, 0xB0	; 176
    8cb2:	90 e0       	ldi	r25, 0x00	; 0
    8cb4:	20 eb       	ldi	r18, 0xB0	; 176
    8cb6:	30 e0       	ldi	r19, 0x00	; 0
    8cb8:	f9 01       	movw	r30, r18
    8cba:	20 81       	ld	r18, Z
    8cbc:	2f 7d       	andi	r18, 0xDF	; 223
    8cbe:	fc 01       	movw	r30, r24
    8cc0:	20 83       	st	Z, r18
    8cc2:	5a c0       	rjmp	.+180    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    8cc4:	80 e9       	ldi	r24, 0x90	; 144
    8cc6:	90 e0       	ldi	r25, 0x00	; 0
    8cc8:	20 e9       	ldi	r18, 0x90	; 144
    8cca:	30 e0       	ldi	r19, 0x00	; 0
    8ccc:	f9 01       	movw	r30, r18
    8cce:	20 81       	ld	r18, Z
    8cd0:	2f 77       	andi	r18, 0x7F	; 127
    8cd2:	fc 01       	movw	r30, r24
    8cd4:	20 83       	st	Z, r18
    8cd6:	50 c0       	rjmp	.+160    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    8cd8:	80 e9       	ldi	r24, 0x90	; 144
    8cda:	90 e0       	ldi	r25, 0x00	; 0
    8cdc:	20 e9       	ldi	r18, 0x90	; 144
    8cde:	30 e0       	ldi	r19, 0x00	; 0
    8ce0:	f9 01       	movw	r30, r18
    8ce2:	20 81       	ld	r18, Z
    8ce4:	2f 7d       	andi	r18, 0xDF	; 223
    8ce6:	fc 01       	movw	r30, r24
    8ce8:	20 83       	st	Z, r18
    8cea:	46 c0       	rjmp	.+140    	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    8cec:	80 e9       	ldi	r24, 0x90	; 144
    8cee:	90 e0       	ldi	r25, 0x00	; 0
    8cf0:	20 e9       	ldi	r18, 0x90	; 144
    8cf2:	30 e0       	ldi	r19, 0x00	; 0
    8cf4:	f9 01       	movw	r30, r18
    8cf6:	20 81       	ld	r18, Z
    8cf8:	27 7f       	andi	r18, 0xF7	; 247
    8cfa:	fc 01       	movw	r30, r24
    8cfc:	20 83       	st	Z, r18
    8cfe:	3c c0       	rjmp	.+120    	; 0x8d78 <turnOffPWM+0x17c>
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    8d00:	80 ea       	ldi	r24, 0xA0	; 160
    8d02:	90 e0       	ldi	r25, 0x00	; 0
    8d04:	20 ea       	ldi	r18, 0xA0	; 160
    8d06:	30 e0       	ldi	r19, 0x00	; 0
    8d08:	f9 01       	movw	r30, r18
    8d0a:	20 81       	ld	r18, Z
    8d0c:	2f 77       	andi	r18, 0x7F	; 127
    8d0e:	fc 01       	movw	r30, r24
    8d10:	20 83       	st	Z, r18
    8d12:	32 c0       	rjmp	.+100    	; 0x8d78 <turnOffPWM+0x17c>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    8d14:	80 ea       	ldi	r24, 0xA0	; 160
    8d16:	90 e0       	ldi	r25, 0x00	; 0
    8d18:	20 ea       	ldi	r18, 0xA0	; 160
    8d1a:	30 e0       	ldi	r19, 0x00	; 0
    8d1c:	f9 01       	movw	r30, r18
    8d1e:	20 81       	ld	r18, Z
    8d20:	2f 7d       	andi	r18, 0xDF	; 223
    8d22:	fc 01       	movw	r30, r24
    8d24:	20 83       	st	Z, r18
    8d26:	28 c0       	rjmp	.+80     	; 0x8d78 <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    8d28:	80 ea       	ldi	r24, 0xA0	; 160
    8d2a:	90 e0       	ldi	r25, 0x00	; 0
    8d2c:	20 ea       	ldi	r18, 0xA0	; 160
    8d2e:	30 e0       	ldi	r19, 0x00	; 0
    8d30:	f9 01       	movw	r30, r18
    8d32:	20 81       	ld	r18, Z
    8d34:	27 7f       	andi	r18, 0xF7	; 247
    8d36:	fc 01       	movw	r30, r24
    8d38:	20 83       	st	Z, r18
    8d3a:	1e c0       	rjmp	.+60     	; 0x8d78 <turnOffPWM+0x17c>
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    8d3c:	80 e2       	ldi	r24, 0x20	; 32
    8d3e:	91 e0       	ldi	r25, 0x01	; 1
    8d40:	20 e2       	ldi	r18, 0x20	; 32
    8d42:	31 e0       	ldi	r19, 0x01	; 1
    8d44:	f9 01       	movw	r30, r18
    8d46:	20 81       	ld	r18, Z
    8d48:	2f 77       	andi	r18, 0x7F	; 127
    8d4a:	fc 01       	movw	r30, r24
    8d4c:	20 83       	st	Z, r18
    8d4e:	14 c0       	rjmp	.+40     	; 0x8d78 <turnOffPWM+0x17c>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    8d50:	80 e2       	ldi	r24, 0x20	; 32
    8d52:	91 e0       	ldi	r25, 0x01	; 1
    8d54:	20 e2       	ldi	r18, 0x20	; 32
    8d56:	31 e0       	ldi	r19, 0x01	; 1
    8d58:	f9 01       	movw	r30, r18
    8d5a:	20 81       	ld	r18, Z
    8d5c:	2f 7d       	andi	r18, 0xDF	; 223
    8d5e:	fc 01       	movw	r30, r24
    8d60:	20 83       	st	Z, r18
    8d62:	0a c0       	rjmp	.+20     	; 0x8d78 <turnOffPWM+0x17c>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    8d64:	80 e2       	ldi	r24, 0x20	; 32
    8d66:	91 e0       	ldi	r25, 0x01	; 1
    8d68:	20 e2       	ldi	r18, 0x20	; 32
    8d6a:	31 e0       	ldi	r19, 0x01	; 1
    8d6c:	f9 01       	movw	r30, r18
    8d6e:	20 81       	ld	r18, Z
    8d70:	27 7f       	andi	r18, 0xF7	; 247
    8d72:	fc 01       	movw	r30, r24
    8d74:	20 83       	st	Z, r18
    8d76:	00 00       	nop
		#endif
	}
}
    8d78:	00 00       	nop
    8d7a:	0f 90       	pop	r0
    8d7c:	df 91       	pop	r29
    8d7e:	cf 91       	pop	r28
    8d80:	08 95       	ret

00008d82 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    8d82:	cf 93       	push	r28
    8d84:	df 93       	push	r29
    8d86:	cd b7       	in	r28, 0x3d	; 61
    8d88:	de b7       	in	r29, 0x3e	; 62
    8d8a:	65 97       	sbiw	r28, 0x15	; 21
    8d8c:	0f b6       	in	r0, 0x3f	; 63
    8d8e:	f8 94       	cli
    8d90:	de bf       	out	0x3e, r29	; 62
    8d92:	0f be       	out	0x3f, r0	; 63
    8d94:	cd bf       	out	0x3d, r28	; 61
    8d96:	8c 8b       	std	Y+20, r24	; 0x14
    8d98:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    8d9a:	8c 89       	ldd	r24, Y+20	; 0x14
    8d9c:	88 2f       	mov	r24, r24
    8d9e:	90 e0       	ldi	r25, 0x00	; 0
    8da0:	84 5c       	subi	r24, 0xC4	; 196
    8da2:	90 4d       	sbci	r25, 0xD0	; 208
    8da4:	9a 83       	std	Y+2, r25	; 0x02
    8da6:	89 83       	std	Y+1, r24	; 0x01
    8da8:	89 81       	ldd	r24, Y+1	; 0x01
    8daa:	9a 81       	ldd	r25, Y+2	; 0x02
    8dac:	fc 01       	movw	r30, r24
    8dae:	84 91       	lpm	r24, Z
    8db0:	8b 83       	std	Y+3, r24	; 0x03
    8db2:	8b 81       	ldd	r24, Y+3	; 0x03
    8db4:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    8db6:	8c 89       	ldd	r24, Y+20	; 0x14
    8db8:	88 2f       	mov	r24, r24
    8dba:	90 e0       	ldi	r25, 0x00	; 0
    8dbc:	8a 50       	subi	r24, 0x0A	; 10
    8dbe:	91 4d       	sbci	r25, 0xD1	; 209
    8dc0:	9e 83       	std	Y+6, r25	; 0x06
    8dc2:	8d 83       	std	Y+5, r24	; 0x05
    8dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    8dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    8dc8:	fc 01       	movw	r30, r24
    8dca:	84 91       	lpm	r24, Z
    8dcc:	8f 83       	std	Y+7, r24	; 0x07
    8dce:	8f 81       	ldd	r24, Y+7	; 0x07
    8dd0:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    8dd2:	8c 89       	ldd	r24, Y+20	; 0x14
    8dd4:	88 2f       	mov	r24, r24
    8dd6:	90 e0       	ldi	r25, 0x00	; 0
    8dd8:	80 55       	subi	r24, 0x50	; 80
    8dda:	91 4d       	sbci	r25, 0xD1	; 209
    8ddc:	9a 87       	std	Y+10, r25	; 0x0a
    8dde:	89 87       	std	Y+9, r24	; 0x09
    8de0:	89 85       	ldd	r24, Y+9	; 0x09
    8de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    8de4:	fc 01       	movw	r30, r24
    8de6:	84 91       	lpm	r24, Z
    8de8:	8b 87       	std	Y+11, r24	; 0x0b
    8dea:	8b 85       	ldd	r24, Y+11	; 0x0b
    8dec:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    8dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    8df0:	88 23       	and	r24, r24
    8df2:	09 f4       	brne	.+2      	; 0x8df6 <digitalWrite+0x74>
    8df4:	44 c0       	rjmp	.+136    	; 0x8e7e <digitalWrite+0xfc>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    8df6:	8c 81       	ldd	r24, Y+4	; 0x04
    8df8:	88 23       	and	r24, r24
    8dfa:	11 f0       	breq	.+4      	; 0x8e00 <digitalWrite+0x7e>
    8dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    8dfe:	fe de       	rcall	.-516    	; 0x8bfc <turnOffPWM>

	out = portOutputRegister(port);
    8e00:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e02:	88 2f       	mov	r24, r24
    8e04:	90 e0       	ldi	r25, 0x00	; 0
    8e06:	88 0f       	add	r24, r24
    8e08:	99 1f       	adc	r25, r25
    8e0a:	84 58       	subi	r24, 0x84	; 132
    8e0c:	91 4d       	sbci	r25, 0xD1	; 209
    8e0e:	9e 87       	std	Y+14, r25	; 0x0e
    8e10:	8d 87       	std	Y+13, r24	; 0x0d
    8e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    8e16:	fc 01       	movw	r30, r24
    8e18:	25 91       	lpm	r18, Z+
    8e1a:	34 91       	lpm	r19, Z
    8e1c:	cf 01       	movw	r24, r30
    8e1e:	38 8b       	std	Y+16, r19	; 0x10
    8e20:	2f 87       	std	Y+15, r18	; 0x0f
    8e22:	9e 87       	std	Y+14, r25	; 0x0e
    8e24:	8d 87       	std	Y+13, r24	; 0x0d
    8e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    8e28:	98 89       	ldd	r25, Y+16	; 0x10
    8e2a:	9a 8b       	std	Y+18, r25	; 0x12
    8e2c:	89 8b       	std	Y+17, r24	; 0x11

	uint8_t oldSREG = SREG;
    8e2e:	8f e5       	ldi	r24, 0x5F	; 95
    8e30:	90 e0       	ldi	r25, 0x00	; 0
    8e32:	fc 01       	movw	r30, r24
    8e34:	80 81       	ld	r24, Z
    8e36:	8b 8b       	std	Y+19, r24	; 0x13
	cli();
    8e38:	f8 94       	cli

	if (val == LOW) {
    8e3a:	8d 89       	ldd	r24, Y+21	; 0x15
    8e3c:	88 23       	and	r24, r24
    8e3e:	71 f4       	brne	.+28     	; 0x8e5c <digitalWrite+0xda>
		*out &= ~bit;
    8e40:	89 89       	ldd	r24, Y+17	; 0x11
    8e42:	9a 89       	ldd	r25, Y+18	; 0x12
    8e44:	fc 01       	movw	r30, r24
    8e46:	80 81       	ld	r24, Z
    8e48:	98 2f       	mov	r25, r24
    8e4a:	88 85       	ldd	r24, Y+8	; 0x08
    8e4c:	80 95       	com	r24
    8e4e:	89 23       	and	r24, r25
    8e50:	28 2f       	mov	r18, r24
    8e52:	89 89       	ldd	r24, Y+17	; 0x11
    8e54:	9a 89       	ldd	r25, Y+18	; 0x12
    8e56:	fc 01       	movw	r30, r24
    8e58:	20 83       	st	Z, r18
    8e5a:	0b c0       	rjmp	.+22     	; 0x8e72 <digitalWrite+0xf0>
	} else {
		*out |= bit;
    8e5c:	89 89       	ldd	r24, Y+17	; 0x11
    8e5e:	9a 89       	ldd	r25, Y+18	; 0x12
    8e60:	fc 01       	movw	r30, r24
    8e62:	90 81       	ld	r25, Z
    8e64:	88 85       	ldd	r24, Y+8	; 0x08
    8e66:	29 2f       	mov	r18, r25
    8e68:	28 2b       	or	r18, r24
    8e6a:	89 89       	ldd	r24, Y+17	; 0x11
    8e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    8e6e:	fc 01       	movw	r30, r24
    8e70:	20 83       	st	Z, r18
	}

	SREG = oldSREG;
    8e72:	8f e5       	ldi	r24, 0x5F	; 95
    8e74:	90 e0       	ldi	r25, 0x00	; 0
    8e76:	2b 89       	ldd	r18, Y+19	; 0x13
    8e78:	fc 01       	movw	r30, r24
    8e7a:	20 83       	st	Z, r18
    8e7c:	01 c0       	rjmp	.+2      	; 0x8e80 <digitalWrite+0xfe>
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    8e7e:	00 00       	nop
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
    8e80:	65 96       	adiw	r28, 0x15	; 21
    8e82:	0f b6       	in	r0, 0x3f	; 63
    8e84:	f8 94       	cli
    8e86:	de bf       	out	0x3e, r29	; 62
    8e88:	0f be       	out	0x3f, r0	; 63
    8e8a:	cd bf       	out	0x3d, r28	; 61
    8e8c:	df 91       	pop	r29
    8e8e:	cf 91       	pop	r28
    8e90:	08 95       	ret

00008e92 <digitalRead>:

int digitalRead(uint8_t pin)
{
    8e92:	cf 93       	push	r28
    8e94:	df 93       	push	r29
    8e96:	cd b7       	in	r28, 0x3d	; 61
    8e98:	de b7       	in	r29, 0x3e	; 62
    8e9a:	61 97       	sbiw	r28, 0x11	; 17
    8e9c:	0f b6       	in	r0, 0x3f	; 63
    8e9e:	f8 94       	cli
    8ea0:	de bf       	out	0x3e, r29	; 62
    8ea2:	0f be       	out	0x3f, r0	; 63
    8ea4:	cd bf       	out	0x3d, r28	; 61
    8ea6:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
    8ea8:	89 89       	ldd	r24, Y+17	; 0x11
    8eaa:	88 2f       	mov	r24, r24
    8eac:	90 e0       	ldi	r25, 0x00	; 0
    8eae:	84 5c       	subi	r24, 0xC4	; 196
    8eb0:	90 4d       	sbci	r25, 0xD0	; 208
    8eb2:	9a 83       	std	Y+2, r25	; 0x02
    8eb4:	89 83       	std	Y+1, r24	; 0x01
    8eb6:	89 81       	ldd	r24, Y+1	; 0x01
    8eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    8eba:	fc 01       	movw	r30, r24
    8ebc:	84 91       	lpm	r24, Z
    8ebe:	8b 83       	std	Y+3, r24	; 0x03
    8ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    8ec2:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    8ec4:	89 89       	ldd	r24, Y+17	; 0x11
    8ec6:	88 2f       	mov	r24, r24
    8ec8:	90 e0       	ldi	r25, 0x00	; 0
    8eca:	8a 50       	subi	r24, 0x0A	; 10
    8ecc:	91 4d       	sbci	r25, 0xD1	; 209
    8ece:	9e 83       	std	Y+6, r25	; 0x06
    8ed0:	8d 83       	std	Y+5, r24	; 0x05
    8ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    8ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    8ed6:	fc 01       	movw	r30, r24
    8ed8:	84 91       	lpm	r24, Z
    8eda:	8f 83       	std	Y+7, r24	; 0x07
    8edc:	8f 81       	ldd	r24, Y+7	; 0x07
    8ede:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    8ee0:	89 89       	ldd	r24, Y+17	; 0x11
    8ee2:	88 2f       	mov	r24, r24
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	80 55       	subi	r24, 0x50	; 80
    8ee8:	91 4d       	sbci	r25, 0xD1	; 209
    8eea:	9a 87       	std	Y+10, r25	; 0x0a
    8eec:	89 87       	std	Y+9, r24	; 0x09
    8eee:	89 85       	ldd	r24, Y+9	; 0x09
    8ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ef2:	fc 01       	movw	r30, r24
    8ef4:	84 91       	lpm	r24, Z
    8ef6:	8b 87       	std	Y+11, r24	; 0x0b
    8ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    8efa:	8c 87       	std	Y+12, r24	; 0x0c

	if (port == NOT_A_PIN) return LOW;
    8efc:	8c 85       	ldd	r24, Y+12	; 0x0c
    8efe:	88 23       	and	r24, r24
    8f00:	19 f4       	brne	.+6      	; 0x8f08 <digitalRead+0x76>
    8f02:	80 e0       	ldi	r24, 0x00	; 0
    8f04:	90 e0       	ldi	r25, 0x00	; 0
    8f06:	25 c0       	rjmp	.+74     	; 0x8f52 <digitalRead+0xc0>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    8f08:	8c 81       	ldd	r24, Y+4	; 0x04
    8f0a:	88 23       	and	r24, r24
    8f0c:	11 f0       	breq	.+4      	; 0x8f12 <digitalRead+0x80>
    8f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    8f10:	75 de       	rcall	.-790    	; 0x8bfc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    8f12:	8c 85       	ldd	r24, Y+12	; 0x0c
    8f14:	88 2f       	mov	r24, r24
    8f16:	90 e0       	ldi	r25, 0x00	; 0
    8f18:	88 0f       	add	r24, r24
    8f1a:	99 1f       	adc	r25, r25
    8f1c:	8a 56       	subi	r24, 0x6A	; 106
    8f1e:	91 4d       	sbci	r25, 0xD1	; 209
    8f20:	9e 87       	std	Y+14, r25	; 0x0e
    8f22:	8d 87       	std	Y+13, r24	; 0x0d
    8f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    8f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    8f28:	fc 01       	movw	r30, r24
    8f2a:	25 91       	lpm	r18, Z+
    8f2c:	34 91       	lpm	r19, Z
    8f2e:	cf 01       	movw	r24, r30
    8f30:	38 8b       	std	Y+16, r19	; 0x10
    8f32:	2f 87       	std	Y+15, r18	; 0x0f
    8f34:	9e 87       	std	Y+14, r25	; 0x0e
    8f36:	8d 87       	std	Y+13, r24	; 0x0d
    8f38:	8f 85       	ldd	r24, Y+15	; 0x0f
    8f3a:	98 89       	ldd	r25, Y+16	; 0x10
    8f3c:	fc 01       	movw	r30, r24
    8f3e:	90 81       	ld	r25, Z
    8f40:	88 85       	ldd	r24, Y+8	; 0x08
    8f42:	89 23       	and	r24, r25
    8f44:	88 23       	and	r24, r24
    8f46:	19 f0       	breq	.+6      	; 0x8f4e <digitalRead+0xbc>
    8f48:	81 e0       	ldi	r24, 0x01	; 1
    8f4a:	90 e0       	ldi	r25, 0x00	; 0
    8f4c:	02 c0       	rjmp	.+4      	; 0x8f52 <digitalRead+0xc0>
	return LOW;
    8f4e:	80 e0       	ldi	r24, 0x00	; 0
    8f50:	90 e0       	ldi	r25, 0x00	; 0
}
    8f52:	61 96       	adiw	r28, 0x11	; 17
    8f54:	0f b6       	in	r0, 0x3f	; 63
    8f56:	f8 94       	cli
    8f58:	de bf       	out	0x3e, r29	; 62
    8f5a:	0f be       	out	0x3f, r0	; 63
    8f5c:	cd bf       	out	0x3d, r28	; 61
    8f5e:	df 91       	pop	r29
    8f60:	cf 91       	pop	r28
    8f62:	08 95       	ret

00008f64 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    8f64:	cf 93       	push	r28
    8f66:	df 93       	push	r29
    8f68:	00 d0       	rcall	.+0      	; 0x8f6a <_Z6randoml+0x6>
    8f6a:	1f 92       	push	r1
    8f6c:	cd b7       	in	r28, 0x3d	; 61
    8f6e:	de b7       	in	r29, 0x3e	; 62
    8f70:	69 83       	std	Y+1, r22	; 0x01
    8f72:	7a 83       	std	Y+2, r23	; 0x02
    8f74:	8b 83       	std	Y+3, r24	; 0x03
    8f76:	9c 83       	std	Y+4, r25	; 0x04
  if (howbig == 0) {
    8f78:	89 81       	ldd	r24, Y+1	; 0x01
    8f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    8f7c:	ab 81       	ldd	r26, Y+3	; 0x03
    8f7e:	bc 81       	ldd	r27, Y+4	; 0x04
    8f80:	89 2b       	or	r24, r25
    8f82:	8a 2b       	or	r24, r26
    8f84:	8b 2b       	or	r24, r27
    8f86:	21 f4       	brne	.+8      	; 0x8f90 <_Z6randoml+0x2c>
    return 0;
    8f88:	80 e0       	ldi	r24, 0x00	; 0
    8f8a:	90 e0       	ldi	r25, 0x00	; 0
    8f8c:	dc 01       	movw	r26, r24
    8f8e:	0e c0       	rjmp	.+28     	; 0x8fac <_Z6randoml+0x48>
  }
  return random() % howbig;
    8f90:	0e 94 0a 63 	call	0xc614	; 0xc614 <random>
    8f94:	dc 01       	movw	r26, r24
    8f96:	cb 01       	movw	r24, r22
    8f98:	29 81       	ldd	r18, Y+1	; 0x01
    8f9a:	3a 81       	ldd	r19, Y+2	; 0x02
    8f9c:	4b 81       	ldd	r20, Y+3	; 0x03
    8f9e:	5c 81       	ldd	r21, Y+4	; 0x04
    8fa0:	bc 01       	movw	r22, r24
    8fa2:	cd 01       	movw	r24, r26
    8fa4:	0e 94 50 61 	call	0xc2a0	; 0xc2a0 <__divmodsi4>
    8fa8:	dc 01       	movw	r26, r24
    8faa:	cb 01       	movw	r24, r22
}
    8fac:	bc 01       	movw	r22, r24
    8fae:	cd 01       	movw	r24, r26
    8fb0:	0f 90       	pop	r0
    8fb2:	0f 90       	pop	r0
    8fb4:	0f 90       	pop	r0
    8fb6:	0f 90       	pop	r0
    8fb8:	df 91       	pop	r29
    8fba:	cf 91       	pop	r28
    8fbc:	08 95       	ret

00008fbe <_Z6randomll>:

long random(long howsmall, long howbig)
{
    8fbe:	ef 92       	push	r14
    8fc0:	ff 92       	push	r15
    8fc2:	0f 93       	push	r16
    8fc4:	1f 93       	push	r17
    8fc6:	cf 93       	push	r28
    8fc8:	df 93       	push	r29
    8fca:	cd b7       	in	r28, 0x3d	; 61
    8fcc:	de b7       	in	r29, 0x3e	; 62
    8fce:	2c 97       	sbiw	r28, 0x0c	; 12
    8fd0:	0f b6       	in	r0, 0x3f	; 63
    8fd2:	f8 94       	cli
    8fd4:	de bf       	out	0x3e, r29	; 62
    8fd6:	0f be       	out	0x3f, r0	; 63
    8fd8:	cd bf       	out	0x3d, r28	; 61
    8fda:	6d 83       	std	Y+5, r22	; 0x05
    8fdc:	7e 83       	std	Y+6, r23	; 0x06
    8fde:	8f 83       	std	Y+7, r24	; 0x07
    8fe0:	98 87       	std	Y+8, r25	; 0x08
    8fe2:	29 87       	std	Y+9, r18	; 0x09
    8fe4:	3a 87       	std	Y+10, r19	; 0x0a
    8fe6:	4b 87       	std	Y+11, r20	; 0x0b
    8fe8:	5c 87       	std	Y+12, r21	; 0x0c
  if (howsmall >= howbig) {
    8fea:	2d 81       	ldd	r18, Y+5	; 0x05
    8fec:	3e 81       	ldd	r19, Y+6	; 0x06
    8fee:	4f 81       	ldd	r20, Y+7	; 0x07
    8ff0:	58 85       	ldd	r21, Y+8	; 0x08
    8ff2:	89 85       	ldd	r24, Y+9	; 0x09
    8ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ff6:	ab 85       	ldd	r26, Y+11	; 0x0b
    8ff8:	bc 85       	ldd	r27, Y+12	; 0x0c
    8ffa:	28 17       	cp	r18, r24
    8ffc:	39 07       	cpc	r19, r25
    8ffe:	4a 07       	cpc	r20, r26
    9000:	5b 07       	cpc	r21, r27
    9002:	2c f0       	brlt	.+10     	; 0x900e <_Z6randomll+0x50>
    return howsmall;
    9004:	8d 81       	ldd	r24, Y+5	; 0x05
    9006:	9e 81       	ldd	r25, Y+6	; 0x06
    9008:	af 81       	ldd	r26, Y+7	; 0x07
    900a:	b8 85       	ldd	r27, Y+8	; 0x08
    900c:	25 c0       	rjmp	.+74     	; 0x9058 <_Z6randomll+0x9a>
  }
  long diff = howbig - howsmall;
    900e:	29 85       	ldd	r18, Y+9	; 0x09
    9010:	3a 85       	ldd	r19, Y+10	; 0x0a
    9012:	4b 85       	ldd	r20, Y+11	; 0x0b
    9014:	5c 85       	ldd	r21, Y+12	; 0x0c
    9016:	8d 81       	ldd	r24, Y+5	; 0x05
    9018:	9e 81       	ldd	r25, Y+6	; 0x06
    901a:	af 81       	ldd	r26, Y+7	; 0x07
    901c:	b8 85       	ldd	r27, Y+8	; 0x08
    901e:	79 01       	movw	r14, r18
    9020:	8a 01       	movw	r16, r20
    9022:	e8 1a       	sub	r14, r24
    9024:	f9 0a       	sbc	r15, r25
    9026:	0a 0b       	sbc	r16, r26
    9028:	1b 0b       	sbc	r17, r27
    902a:	d8 01       	movw	r26, r16
    902c:	c7 01       	movw	r24, r14
    902e:	89 83       	std	Y+1, r24	; 0x01
    9030:	9a 83       	std	Y+2, r25	; 0x02
    9032:	ab 83       	std	Y+3, r26	; 0x03
    9034:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
    9036:	89 81       	ldd	r24, Y+1	; 0x01
    9038:	9a 81       	ldd	r25, Y+2	; 0x02
    903a:	ab 81       	ldd	r26, Y+3	; 0x03
    903c:	bc 81       	ldd	r27, Y+4	; 0x04
    903e:	bc 01       	movw	r22, r24
    9040:	cd 01       	movw	r24, r26
    9042:	90 df       	rcall	.-224    	; 0x8f64 <_Z6randoml>
    9044:	9b 01       	movw	r18, r22
    9046:	ac 01       	movw	r20, r24
    9048:	8d 81       	ldd	r24, Y+5	; 0x05
    904a:	9e 81       	ldd	r25, Y+6	; 0x06
    904c:	af 81       	ldd	r26, Y+7	; 0x07
    904e:	b8 85       	ldd	r27, Y+8	; 0x08
    9050:	82 0f       	add	r24, r18
    9052:	93 1f       	adc	r25, r19
    9054:	a4 1f       	adc	r26, r20
    9056:	b5 1f       	adc	r27, r21
}
    9058:	bc 01       	movw	r22, r24
    905a:	cd 01       	movw	r24, r26
    905c:	2c 96       	adiw	r28, 0x0c	; 12
    905e:	0f b6       	in	r0, 0x3f	; 63
    9060:	f8 94       	cli
    9062:	de bf       	out	0x3e, r29	; 62
    9064:	0f be       	out	0x3f, r0	; 63
    9066:	cd bf       	out	0x3d, r28	; 61
    9068:	df 91       	pop	r29
    906a:	cf 91       	pop	r28
    906c:	1f 91       	pop	r17
    906e:	0f 91       	pop	r16
    9070:	ff 90       	pop	r15
    9072:	ef 90       	pop	r14
    9074:	08 95       	ret

00009076 <_ZN6StringC1EPKc>:
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
}
    9076:	cf 93       	push	r28
    9078:	df 93       	push	r29
    907a:	00 d0       	rcall	.+0      	; 0x907c <_ZN6StringC1EPKc+0x6>
    907c:	1f 92       	push	r1
    907e:	cd b7       	in	r28, 0x3d	; 61
    9080:	de b7       	in	r29, 0x3e	; 62
    9082:	9a 83       	std	Y+2, r25	; 0x02
    9084:	89 83       	std	Y+1, r24	; 0x01
    9086:	7c 83       	std	Y+4, r23	; 0x04
    9088:	6b 83       	std	Y+3, r22	; 0x03
    908a:	89 81       	ldd	r24, Y+1	; 0x01
    908c:	9a 81       	ldd	r25, Y+2	; 0x02
    908e:	2c d0       	rcall	.+88     	; 0x90e8 <_ZN6String4initEv>
    9090:	8b 81       	ldd	r24, Y+3	; 0x03
    9092:	9c 81       	ldd	r25, Y+4	; 0x04
    9094:	89 2b       	or	r24, r25
    9096:	59 f0       	breq	.+22     	; 0x90ae <_ZN6StringC1EPKc+0x38>
    9098:	8b 81       	ldd	r24, Y+3	; 0x03
    909a:	9c 81       	ldd	r25, Y+4	; 0x04
    909c:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    90a0:	ac 01       	movw	r20, r24
    90a2:	2b 81       	ldd	r18, Y+3	; 0x03
    90a4:	3c 81       	ldd	r19, Y+4	; 0x04
    90a6:	89 81       	ldd	r24, Y+1	; 0x01
    90a8:	9a 81       	ldd	r25, Y+2	; 0x02
    90aa:	b9 01       	movw	r22, r18
    90ac:	e3 d0       	rcall	.+454    	; 0x9274 <_ZN6String4copyEPKcj>
    90ae:	00 00       	nop
    90b0:	0f 90       	pop	r0
    90b2:	0f 90       	pop	r0
    90b4:	0f 90       	pop	r0
    90b6:	0f 90       	pop	r0
    90b8:	df 91       	pop	r29
    90ba:	cf 91       	pop	r28
    90bc:	08 95       	ret

000090be <_ZN6StringD1Ev>:
    90be:	cf 93       	push	r28
    90c0:	df 93       	push	r29
    90c2:	1f 92       	push	r1
    90c4:	1f 92       	push	r1
    90c6:	cd b7       	in	r28, 0x3d	; 61
    90c8:	de b7       	in	r29, 0x3e	; 62
    90ca:	9a 83       	std	Y+2, r25	; 0x02
    90cc:	89 83       	std	Y+1, r24	; 0x01
    90ce:	89 81       	ldd	r24, Y+1	; 0x01
    90d0:	9a 81       	ldd	r25, Y+2	; 0x02
    90d2:	fc 01       	movw	r30, r24
    90d4:	80 81       	ld	r24, Z
    90d6:	91 81       	ldd	r25, Z+1	; 0x01
    90d8:	0e 94 39 62 	call	0xc472	; 0xc472 <free>
    90dc:	00 00       	nop
    90de:	0f 90       	pop	r0
    90e0:	0f 90       	pop	r0
    90e2:	df 91       	pop	r29
    90e4:	cf 91       	pop	r28
    90e6:	08 95       	ret

000090e8 <_ZN6String4initEv>:
    90e8:	cf 93       	push	r28
    90ea:	df 93       	push	r29
    90ec:	1f 92       	push	r1
    90ee:	1f 92       	push	r1
    90f0:	cd b7       	in	r28, 0x3d	; 61
    90f2:	de b7       	in	r29, 0x3e	; 62
    90f4:	9a 83       	std	Y+2, r25	; 0x02
    90f6:	89 83       	std	Y+1, r24	; 0x01
    90f8:	89 81       	ldd	r24, Y+1	; 0x01
    90fa:	9a 81       	ldd	r25, Y+2	; 0x02
    90fc:	fc 01       	movw	r30, r24
    90fe:	11 82       	std	Z+1, r1	; 0x01
    9100:	10 82       	st	Z, r1
    9102:	89 81       	ldd	r24, Y+1	; 0x01
    9104:	9a 81       	ldd	r25, Y+2	; 0x02
    9106:	fc 01       	movw	r30, r24
    9108:	13 82       	std	Z+3, r1	; 0x03
    910a:	12 82       	std	Z+2, r1	; 0x02
    910c:	89 81       	ldd	r24, Y+1	; 0x01
    910e:	9a 81       	ldd	r25, Y+2	; 0x02
    9110:	fc 01       	movw	r30, r24
    9112:	15 82       	std	Z+5, r1	; 0x05
    9114:	14 82       	std	Z+4, r1	; 0x04
    9116:	00 00       	nop
    9118:	0f 90       	pop	r0
    911a:	0f 90       	pop	r0
    911c:	df 91       	pop	r29
    911e:	cf 91       	pop	r28
    9120:	08 95       	ret

00009122 <_ZN6String10invalidateEv>:
    9122:	cf 93       	push	r28
    9124:	df 93       	push	r29
    9126:	1f 92       	push	r1
    9128:	1f 92       	push	r1
    912a:	cd b7       	in	r28, 0x3d	; 61
    912c:	de b7       	in	r29, 0x3e	; 62
    912e:	9a 83       	std	Y+2, r25	; 0x02
    9130:	89 83       	std	Y+1, r24	; 0x01
    9132:	89 81       	ldd	r24, Y+1	; 0x01
    9134:	9a 81       	ldd	r25, Y+2	; 0x02
    9136:	fc 01       	movw	r30, r24
    9138:	80 81       	ld	r24, Z
    913a:	91 81       	ldd	r25, Z+1	; 0x01
    913c:	89 2b       	or	r24, r25
    913e:	39 f0       	breq	.+14     	; 0x914e <_ZN6String10invalidateEv+0x2c>
    9140:	89 81       	ldd	r24, Y+1	; 0x01
    9142:	9a 81       	ldd	r25, Y+2	; 0x02
    9144:	fc 01       	movw	r30, r24
    9146:	80 81       	ld	r24, Z
    9148:	91 81       	ldd	r25, Z+1	; 0x01
    914a:	0e 94 39 62 	call	0xc472	; 0xc472 <free>
    914e:	89 81       	ldd	r24, Y+1	; 0x01
    9150:	9a 81       	ldd	r25, Y+2	; 0x02
    9152:	fc 01       	movw	r30, r24
    9154:	11 82       	std	Z+1, r1	; 0x01
    9156:	10 82       	st	Z, r1
    9158:	89 81       	ldd	r24, Y+1	; 0x01
    915a:	9a 81       	ldd	r25, Y+2	; 0x02
    915c:	fc 01       	movw	r30, r24
    915e:	15 82       	std	Z+5, r1	; 0x05
    9160:	14 82       	std	Z+4, r1	; 0x04
    9162:	89 81       	ldd	r24, Y+1	; 0x01
    9164:	9a 81       	ldd	r25, Y+2	; 0x02
    9166:	fc 01       	movw	r30, r24
    9168:	24 81       	ldd	r18, Z+4	; 0x04
    916a:	35 81       	ldd	r19, Z+5	; 0x05
    916c:	89 81       	ldd	r24, Y+1	; 0x01
    916e:	9a 81       	ldd	r25, Y+2	; 0x02
    9170:	fc 01       	movw	r30, r24
    9172:	33 83       	std	Z+3, r19	; 0x03
    9174:	22 83       	std	Z+2, r18	; 0x02
    9176:	00 00       	nop
    9178:	0f 90       	pop	r0
    917a:	0f 90       	pop	r0
    917c:	df 91       	pop	r29
    917e:	cf 91       	pop	r28
    9180:	08 95       	ret

00009182 <_ZN6String7reserveEj>:
    9182:	cf 93       	push	r28
    9184:	df 93       	push	r29
    9186:	00 d0       	rcall	.+0      	; 0x9188 <_ZN6String7reserveEj+0x6>
    9188:	1f 92       	push	r1
    918a:	cd b7       	in	r28, 0x3d	; 61
    918c:	de b7       	in	r29, 0x3e	; 62
    918e:	9a 83       	std	Y+2, r25	; 0x02
    9190:	89 83       	std	Y+1, r24	; 0x01
    9192:	7c 83       	std	Y+4, r23	; 0x04
    9194:	6b 83       	std	Y+3, r22	; 0x03
    9196:	89 81       	ldd	r24, Y+1	; 0x01
    9198:	9a 81       	ldd	r25, Y+2	; 0x02
    919a:	fc 01       	movw	r30, r24
    919c:	80 81       	ld	r24, Z
    919e:	91 81       	ldd	r25, Z+1	; 0x01
    91a0:	89 2b       	or	r24, r25
    91a2:	61 f0       	breq	.+24     	; 0x91bc <_ZN6String7reserveEj+0x3a>
    91a4:	89 81       	ldd	r24, Y+1	; 0x01
    91a6:	9a 81       	ldd	r25, Y+2	; 0x02
    91a8:	fc 01       	movw	r30, r24
    91aa:	22 81       	ldd	r18, Z+2	; 0x02
    91ac:	33 81       	ldd	r19, Z+3	; 0x03
    91ae:	8b 81       	ldd	r24, Y+3	; 0x03
    91b0:	9c 81       	ldd	r25, Y+4	; 0x04
    91b2:	28 17       	cp	r18, r24
    91b4:	39 07       	cpc	r19, r25
    91b6:	10 f0       	brcs	.+4      	; 0x91bc <_ZN6String7reserveEj+0x3a>
    91b8:	81 e0       	ldi	r24, 0x01	; 1
    91ba:	1e c0       	rjmp	.+60     	; 0x91f8 <_ZN6String7reserveEj+0x76>
    91bc:	2b 81       	ldd	r18, Y+3	; 0x03
    91be:	3c 81       	ldd	r19, Y+4	; 0x04
    91c0:	89 81       	ldd	r24, Y+1	; 0x01
    91c2:	9a 81       	ldd	r25, Y+2	; 0x02
    91c4:	b9 01       	movw	r22, r18
    91c6:	1f d0       	rcall	.+62     	; 0x9206 <_ZN6String12changeBufferEj>
    91c8:	98 2f       	mov	r25, r24
    91ca:	81 e0       	ldi	r24, 0x01	; 1
    91cc:	99 23       	and	r25, r25
    91ce:	09 f4       	brne	.+2      	; 0x91d2 <_ZN6String7reserveEj+0x50>
    91d0:	80 e0       	ldi	r24, 0x00	; 0
    91d2:	88 23       	and	r24, r24
    91d4:	81 f0       	breq	.+32     	; 0x91f6 <_ZN6String7reserveEj+0x74>
    91d6:	89 81       	ldd	r24, Y+1	; 0x01
    91d8:	9a 81       	ldd	r25, Y+2	; 0x02
    91da:	fc 01       	movw	r30, r24
    91dc:	84 81       	ldd	r24, Z+4	; 0x04
    91de:	95 81       	ldd	r25, Z+5	; 0x05
    91e0:	89 2b       	or	r24, r25
    91e2:	39 f4       	brne	.+14     	; 0x91f2 <_ZN6String7reserveEj+0x70>
    91e4:	89 81       	ldd	r24, Y+1	; 0x01
    91e6:	9a 81       	ldd	r25, Y+2	; 0x02
    91e8:	fc 01       	movw	r30, r24
    91ea:	80 81       	ld	r24, Z
    91ec:	91 81       	ldd	r25, Z+1	; 0x01
    91ee:	fc 01       	movw	r30, r24
    91f0:	10 82       	st	Z, r1
    91f2:	81 e0       	ldi	r24, 0x01	; 1
    91f4:	01 c0       	rjmp	.+2      	; 0x91f8 <_ZN6String7reserveEj+0x76>
    91f6:	80 e0       	ldi	r24, 0x00	; 0
    91f8:	0f 90       	pop	r0
    91fa:	0f 90       	pop	r0
    91fc:	0f 90       	pop	r0
    91fe:	0f 90       	pop	r0
    9200:	df 91       	pop	r29
    9202:	cf 91       	pop	r28
    9204:	08 95       	ret

00009206 <_ZN6String12changeBufferEj>:
    9206:	cf 93       	push	r28
    9208:	df 93       	push	r29
    920a:	00 d0       	rcall	.+0      	; 0x920c <_ZN6String12changeBufferEj+0x6>
    920c:	00 d0       	rcall	.+0      	; 0x920e <_ZN6String12changeBufferEj+0x8>
    920e:	cd b7       	in	r28, 0x3d	; 61
    9210:	de b7       	in	r29, 0x3e	; 62
    9212:	9c 83       	std	Y+4, r25	; 0x04
    9214:	8b 83       	std	Y+3, r24	; 0x03
    9216:	7e 83       	std	Y+6, r23	; 0x06
    9218:	6d 83       	std	Y+5, r22	; 0x05
    921a:	8d 81       	ldd	r24, Y+5	; 0x05
    921c:	9e 81       	ldd	r25, Y+6	; 0x06
    921e:	9c 01       	movw	r18, r24
    9220:	2f 5f       	subi	r18, 0xFF	; 255
    9222:	3f 4f       	sbci	r19, 0xFF	; 255
    9224:	8b 81       	ldd	r24, Y+3	; 0x03
    9226:	9c 81       	ldd	r25, Y+4	; 0x04
    9228:	fc 01       	movw	r30, r24
    922a:	80 81       	ld	r24, Z
    922c:	91 81       	ldd	r25, Z+1	; 0x01
    922e:	b9 01       	movw	r22, r18
    9230:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <realloc>
    9234:	9a 83       	std	Y+2, r25	; 0x02
    9236:	89 83       	std	Y+1, r24	; 0x01
    9238:	89 81       	ldd	r24, Y+1	; 0x01
    923a:	9a 81       	ldd	r25, Y+2	; 0x02
    923c:	89 2b       	or	r24, r25
    923e:	81 f0       	breq	.+32     	; 0x9260 <_ZN6String12changeBufferEj+0x5a>
    9240:	8b 81       	ldd	r24, Y+3	; 0x03
    9242:	9c 81       	ldd	r25, Y+4	; 0x04
    9244:	29 81       	ldd	r18, Y+1	; 0x01
    9246:	3a 81       	ldd	r19, Y+2	; 0x02
    9248:	fc 01       	movw	r30, r24
    924a:	31 83       	std	Z+1, r19	; 0x01
    924c:	20 83       	st	Z, r18
    924e:	8b 81       	ldd	r24, Y+3	; 0x03
    9250:	9c 81       	ldd	r25, Y+4	; 0x04
    9252:	2d 81       	ldd	r18, Y+5	; 0x05
    9254:	3e 81       	ldd	r19, Y+6	; 0x06
    9256:	fc 01       	movw	r30, r24
    9258:	33 83       	std	Z+3, r19	; 0x03
    925a:	22 83       	std	Z+2, r18	; 0x02
    925c:	81 e0       	ldi	r24, 0x01	; 1
    925e:	01 c0       	rjmp	.+2      	; 0x9262 <_ZN6String12changeBufferEj+0x5c>
    9260:	80 e0       	ldi	r24, 0x00	; 0
    9262:	26 96       	adiw	r28, 0x06	; 6
    9264:	0f b6       	in	r0, 0x3f	; 63
    9266:	f8 94       	cli
    9268:	de bf       	out	0x3e, r29	; 62
    926a:	0f be       	out	0x3f, r0	; 63
    926c:	cd bf       	out	0x3d, r28	; 61
    926e:	df 91       	pop	r29
    9270:	cf 91       	pop	r28
    9272:	08 95       	ret

00009274 <_ZN6String4copyEPKcj>:
    9274:	cf 93       	push	r28
    9276:	df 93       	push	r29
    9278:	00 d0       	rcall	.+0      	; 0x927a <_ZN6String4copyEPKcj+0x6>
    927a:	00 d0       	rcall	.+0      	; 0x927c <_ZN6String4copyEPKcj+0x8>
    927c:	cd b7       	in	r28, 0x3d	; 61
    927e:	de b7       	in	r29, 0x3e	; 62
    9280:	9a 83       	std	Y+2, r25	; 0x02
    9282:	89 83       	std	Y+1, r24	; 0x01
    9284:	7c 83       	std	Y+4, r23	; 0x04
    9286:	6b 83       	std	Y+3, r22	; 0x03
    9288:	5e 83       	std	Y+6, r21	; 0x06
    928a:	4d 83       	std	Y+5, r20	; 0x05
    928c:	2d 81       	ldd	r18, Y+5	; 0x05
    928e:	3e 81       	ldd	r19, Y+6	; 0x06
    9290:	89 81       	ldd	r24, Y+1	; 0x01
    9292:	9a 81       	ldd	r25, Y+2	; 0x02
    9294:	b9 01       	movw	r22, r18
    9296:	75 df       	rcall	.-278    	; 0x9182 <_ZN6String7reserveEj>
    9298:	98 2f       	mov	r25, r24
    929a:	81 e0       	ldi	r24, 0x01	; 1
    929c:	99 23       	and	r25, r25
    929e:	09 f0       	breq	.+2      	; 0x92a2 <_ZN6String4copyEPKcj+0x2e>
    92a0:	80 e0       	ldi	r24, 0x00	; 0
    92a2:	88 23       	and	r24, r24
    92a4:	31 f0       	breq	.+12     	; 0x92b2 <_ZN6String4copyEPKcj+0x3e>
    92a6:	89 81       	ldd	r24, Y+1	; 0x01
    92a8:	9a 81       	ldd	r25, Y+2	; 0x02
    92aa:	3b df       	rcall	.-394    	; 0x9122 <_ZN6String10invalidateEv>
    92ac:	89 81       	ldd	r24, Y+1	; 0x01
    92ae:	9a 81       	ldd	r25, Y+2	; 0x02
    92b0:	13 c0       	rjmp	.+38     	; 0x92d8 <_ZN6String4copyEPKcj+0x64>
    92b2:	89 81       	ldd	r24, Y+1	; 0x01
    92b4:	9a 81       	ldd	r25, Y+2	; 0x02
    92b6:	2d 81       	ldd	r18, Y+5	; 0x05
    92b8:	3e 81       	ldd	r19, Y+6	; 0x06
    92ba:	fc 01       	movw	r30, r24
    92bc:	35 83       	std	Z+5, r19	; 0x05
    92be:	24 83       	std	Z+4, r18	; 0x04
    92c0:	89 81       	ldd	r24, Y+1	; 0x01
    92c2:	9a 81       	ldd	r25, Y+2	; 0x02
    92c4:	fc 01       	movw	r30, r24
    92c6:	80 81       	ld	r24, Z
    92c8:	91 81       	ldd	r25, Z+1	; 0x01
    92ca:	2b 81       	ldd	r18, Y+3	; 0x03
    92cc:	3c 81       	ldd	r19, Y+4	; 0x04
    92ce:	b9 01       	movw	r22, r18
    92d0:	0e 94 7b 64 	call	0xc8f6	; 0xc8f6 <strcpy>
    92d4:	89 81       	ldd	r24, Y+1	; 0x01
    92d6:	9a 81       	ldd	r25, Y+2	; 0x02
    92d8:	26 96       	adiw	r28, 0x06	; 6
    92da:	0f b6       	in	r0, 0x3f	; 63
    92dc:	f8 94       	cli
    92de:	de bf       	out	0x3e, r29	; 62
    92e0:	0f be       	out	0x3f, r0	; 63
    92e2:	cd bf       	out	0x3d, r28	; 61
    92e4:	df 91       	pop	r29
    92e6:	cf 91       	pop	r28
    92e8:	08 95       	ret

000092ea <_ZN6StringaSEPKc>:
    92ea:	cf 93       	push	r28
    92ec:	df 93       	push	r29
    92ee:	00 d0       	rcall	.+0      	; 0x92f0 <_ZN6StringaSEPKc+0x6>
    92f0:	1f 92       	push	r1
    92f2:	cd b7       	in	r28, 0x3d	; 61
    92f4:	de b7       	in	r29, 0x3e	; 62
    92f6:	9a 83       	std	Y+2, r25	; 0x02
    92f8:	89 83       	std	Y+1, r24	; 0x01
    92fa:	7c 83       	std	Y+4, r23	; 0x04
    92fc:	6b 83       	std	Y+3, r22	; 0x03
    92fe:	8b 81       	ldd	r24, Y+3	; 0x03
    9300:	9c 81       	ldd	r25, Y+4	; 0x04
    9302:	89 2b       	or	r24, r25
    9304:	61 f0       	breq	.+24     	; 0x931e <_ZN6StringaSEPKc+0x34>
    9306:	8b 81       	ldd	r24, Y+3	; 0x03
    9308:	9c 81       	ldd	r25, Y+4	; 0x04
    930a:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    930e:	ac 01       	movw	r20, r24
    9310:	2b 81       	ldd	r18, Y+3	; 0x03
    9312:	3c 81       	ldd	r19, Y+4	; 0x04
    9314:	89 81       	ldd	r24, Y+1	; 0x01
    9316:	9a 81       	ldd	r25, Y+2	; 0x02
    9318:	b9 01       	movw	r22, r18
    931a:	ac df       	rcall	.-168    	; 0x9274 <_ZN6String4copyEPKcj>
    931c:	03 c0       	rjmp	.+6      	; 0x9324 <_ZN6StringaSEPKc+0x3a>
    931e:	89 81       	ldd	r24, Y+1	; 0x01
    9320:	9a 81       	ldd	r25, Y+2	; 0x02
    9322:	ff de       	rcall	.-514    	; 0x9122 <_ZN6String10invalidateEv>
    9324:	89 81       	ldd	r24, Y+1	; 0x01
    9326:	9a 81       	ldd	r25, Y+2	; 0x02
    9328:	0f 90       	pop	r0
    932a:	0f 90       	pop	r0
    932c:	0f 90       	pop	r0
    932e:	0f 90       	pop	r0
    9330:	df 91       	pop	r29
    9332:	cf 91       	pop	r28
    9334:	08 95       	ret

00009336 <_ZN6String6concatEPKcj>:
    9336:	cf 93       	push	r28
    9338:	df 93       	push	r29
    933a:	cd b7       	in	r28, 0x3d	; 61
    933c:	de b7       	in	r29, 0x3e	; 62
    933e:	28 97       	sbiw	r28, 0x08	; 8
    9340:	0f b6       	in	r0, 0x3f	; 63
    9342:	f8 94       	cli
    9344:	de bf       	out	0x3e, r29	; 62
    9346:	0f be       	out	0x3f, r0	; 63
    9348:	cd bf       	out	0x3d, r28	; 61
    934a:	9c 83       	std	Y+4, r25	; 0x04
    934c:	8b 83       	std	Y+3, r24	; 0x03
    934e:	7e 83       	std	Y+6, r23	; 0x06
    9350:	6d 83       	std	Y+5, r22	; 0x05
    9352:	58 87       	std	Y+8, r21	; 0x08
    9354:	4f 83       	std	Y+7, r20	; 0x07
    9356:	8b 81       	ldd	r24, Y+3	; 0x03
    9358:	9c 81       	ldd	r25, Y+4	; 0x04
    935a:	fc 01       	movw	r30, r24
    935c:	24 81       	ldd	r18, Z+4	; 0x04
    935e:	35 81       	ldd	r19, Z+5	; 0x05
    9360:	8f 81       	ldd	r24, Y+7	; 0x07
    9362:	98 85       	ldd	r25, Y+8	; 0x08
    9364:	82 0f       	add	r24, r18
    9366:	93 1f       	adc	r25, r19
    9368:	9a 83       	std	Y+2, r25	; 0x02
    936a:	89 83       	std	Y+1, r24	; 0x01
    936c:	8d 81       	ldd	r24, Y+5	; 0x05
    936e:	9e 81       	ldd	r25, Y+6	; 0x06
    9370:	89 2b       	or	r24, r25
    9372:	11 f4       	brne	.+4      	; 0x9378 <_ZN6String6concatEPKcj+0x42>
    9374:	80 e0       	ldi	r24, 0x00	; 0
    9376:	2e c0       	rjmp	.+92     	; 0x93d4 <_ZN6String6concatEPKcj+0x9e>
    9378:	8f 81       	ldd	r24, Y+7	; 0x07
    937a:	98 85       	ldd	r25, Y+8	; 0x08
    937c:	89 2b       	or	r24, r25
    937e:	11 f4       	brne	.+4      	; 0x9384 <_ZN6String6concatEPKcj+0x4e>
    9380:	81 e0       	ldi	r24, 0x01	; 1
    9382:	28 c0       	rjmp	.+80     	; 0x93d4 <_ZN6String6concatEPKcj+0x9e>
    9384:	29 81       	ldd	r18, Y+1	; 0x01
    9386:	3a 81       	ldd	r19, Y+2	; 0x02
    9388:	8b 81       	ldd	r24, Y+3	; 0x03
    938a:	9c 81       	ldd	r25, Y+4	; 0x04
    938c:	b9 01       	movw	r22, r18
    938e:	f9 de       	rcall	.-526    	; 0x9182 <_ZN6String7reserveEj>
    9390:	98 2f       	mov	r25, r24
    9392:	81 e0       	ldi	r24, 0x01	; 1
    9394:	99 23       	and	r25, r25
    9396:	09 f0       	breq	.+2      	; 0x939a <_ZN6String6concatEPKcj+0x64>
    9398:	80 e0       	ldi	r24, 0x00	; 0
    939a:	88 23       	and	r24, r24
    939c:	11 f0       	breq	.+4      	; 0x93a2 <_ZN6String6concatEPKcj+0x6c>
    939e:	80 e0       	ldi	r24, 0x00	; 0
    93a0:	19 c0       	rjmp	.+50     	; 0x93d4 <_ZN6String6concatEPKcj+0x9e>
    93a2:	8b 81       	ldd	r24, Y+3	; 0x03
    93a4:	9c 81       	ldd	r25, Y+4	; 0x04
    93a6:	fc 01       	movw	r30, r24
    93a8:	20 81       	ld	r18, Z
    93aa:	31 81       	ldd	r19, Z+1	; 0x01
    93ac:	8b 81       	ldd	r24, Y+3	; 0x03
    93ae:	9c 81       	ldd	r25, Y+4	; 0x04
    93b0:	fc 01       	movw	r30, r24
    93b2:	84 81       	ldd	r24, Z+4	; 0x04
    93b4:	95 81       	ldd	r25, Z+5	; 0x05
    93b6:	82 0f       	add	r24, r18
    93b8:	93 1f       	adc	r25, r19
    93ba:	2d 81       	ldd	r18, Y+5	; 0x05
    93bc:	3e 81       	ldd	r19, Y+6	; 0x06
    93be:	b9 01       	movw	r22, r18
    93c0:	0e 94 7b 64 	call	0xc8f6	; 0xc8f6 <strcpy>
    93c4:	8b 81       	ldd	r24, Y+3	; 0x03
    93c6:	9c 81       	ldd	r25, Y+4	; 0x04
    93c8:	29 81       	ldd	r18, Y+1	; 0x01
    93ca:	3a 81       	ldd	r19, Y+2	; 0x02
    93cc:	fc 01       	movw	r30, r24
    93ce:	35 83       	std	Z+5, r19	; 0x05
    93d0:	24 83       	std	Z+4, r18	; 0x04
    93d2:	81 e0       	ldi	r24, 0x01	; 1
    93d4:	28 96       	adiw	r28, 0x08	; 8
    93d6:	0f b6       	in	r0, 0x3f	; 63
    93d8:	f8 94       	cli
    93da:	de bf       	out	0x3e, r29	; 62
    93dc:	0f be       	out	0x3f, r0	; 63
    93de:	cd bf       	out	0x3d, r28	; 61
    93e0:	df 91       	pop	r29
    93e2:	cf 91       	pop	r28
    93e4:	08 95       	ret

000093e6 <_ZN6String6concatEi>:
    93e6:	cf 93       	push	r28
    93e8:	df 93       	push	r29
    93ea:	cd b7       	in	r28, 0x3d	; 61
    93ec:	de b7       	in	r29, 0x3e	; 62
    93ee:	2c 97       	sbiw	r28, 0x0c	; 12
    93f0:	0f b6       	in	r0, 0x3f	; 63
    93f2:	f8 94       	cli
    93f4:	de bf       	out	0x3e, r29	; 62
    93f6:	0f be       	out	0x3f, r0	; 63
    93f8:	cd bf       	out	0x3d, r28	; 61
    93fa:	9a 87       	std	Y+10, r25	; 0x0a
    93fc:	89 87       	std	Y+9, r24	; 0x09
    93fe:	7c 87       	std	Y+12, r23	; 0x0c
    9400:	6b 87       	std	Y+11, r22	; 0x0b
    9402:	8b 85       	ldd	r24, Y+11	; 0x0b
    9404:	9c 85       	ldd	r25, Y+12	; 0x0c
    9406:	4a e0       	ldi	r20, 0x0A	; 10
    9408:	50 e0       	ldi	r21, 0x00	; 0
    940a:	9e 01       	movw	r18, r28
    940c:	2f 5f       	subi	r18, 0xFF	; 255
    940e:	3f 4f       	sbci	r19, 0xFF	; 255
    9410:	b9 01       	movw	r22, r18
    9412:	0e 94 c0 64 	call	0xc980	; 0xc980 <itoa>
    9416:	ce 01       	movw	r24, r28
    9418:	01 96       	adiw	r24, 0x01	; 1
    941a:	0e 94 82 64 	call	0xc904	; 0xc904 <strlen>
    941e:	9c 01       	movw	r18, r24
    9420:	89 85       	ldd	r24, Y+9	; 0x09
    9422:	9a 85       	ldd	r25, Y+10	; 0x0a
    9424:	a9 01       	movw	r20, r18
    9426:	9e 01       	movw	r18, r28
    9428:	2f 5f       	subi	r18, 0xFF	; 255
    942a:	3f 4f       	sbci	r19, 0xFF	; 255
    942c:	b9 01       	movw	r22, r18
    942e:	83 df       	rcall	.-250    	; 0x9336 <_ZN6String6concatEPKcj>
    9430:	2c 96       	adiw	r28, 0x0c	; 12
    9432:	0f b6       	in	r0, 0x3f	; 63
    9434:	f8 94       	cli
    9436:	de bf       	out	0x3e, r29	; 62
    9438:	0f be       	out	0x3f, r0	; 63
    943a:	cd bf       	out	0x3d, r28	; 61
    943c:	df 91       	pop	r29
    943e:	cf 91       	pop	r28
    9440:	08 95       	ret

00009442 <_ZN6StringixEj>:

char & String::operator[](unsigned int index)
{
    9442:	cf 93       	push	r28
    9444:	df 93       	push	r29
    9446:	00 d0       	rcall	.+0      	; 0x9448 <_ZN6StringixEj+0x6>
    9448:	1f 92       	push	r1
    944a:	cd b7       	in	r28, 0x3d	; 61
    944c:	de b7       	in	r29, 0x3e	; 62
    944e:	9a 83       	std	Y+2, r25	; 0x02
    9450:	89 83       	std	Y+1, r24	; 0x01
    9452:	7c 83       	std	Y+4, r23	; 0x04
    9454:	6b 83       	std	Y+3, r22	; 0x03
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    9456:	89 81       	ldd	r24, Y+1	; 0x01
    9458:	9a 81       	ldd	r25, Y+2	; 0x02
    945a:	fc 01       	movw	r30, r24
    945c:	24 81       	ldd	r18, Z+4	; 0x04
    945e:	35 81       	ldd	r19, Z+5	; 0x05
    9460:	8b 81       	ldd	r24, Y+3	; 0x03
    9462:	9c 81       	ldd	r25, Y+4	; 0x04
    9464:	82 17       	cp	r24, r18
    9466:	93 07       	cpc	r25, r19
    9468:	38 f4       	brcc	.+14     	; 0x9478 <_ZN6StringixEj+0x36>
    946a:	89 81       	ldd	r24, Y+1	; 0x01
    946c:	9a 81       	ldd	r25, Y+2	; 0x02
    946e:	fc 01       	movw	r30, r24
    9470:	80 81       	ld	r24, Z
    9472:	91 81       	ldd	r25, Z+1	; 0x01
    9474:	89 2b       	or	r24, r25
    9476:	29 f4       	brne	.+10     	; 0x9482 <_ZN6StringixEj+0x40>
		dummy_writable_char = 0;
    9478:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZZN6StringixEjE19dummy_writable_char>
		return dummy_writable_char;
    947c:	82 e1       	ldi	r24, 0x12	; 18
    947e:	95 e0       	ldi	r25, 0x05	; 5
    9480:	09 c0       	rjmp	.+18     	; 0x9494 <_ZN6StringixEj+0x52>
	}
	return buffer[index];
    9482:	89 81       	ldd	r24, Y+1	; 0x01
    9484:	9a 81       	ldd	r25, Y+2	; 0x02
    9486:	fc 01       	movw	r30, r24
    9488:	20 81       	ld	r18, Z
    948a:	31 81       	ldd	r19, Z+1	; 0x01
    948c:	8b 81       	ldd	r24, Y+3	; 0x03
    948e:	9c 81       	ldd	r25, Y+4	; 0x04
    9490:	82 0f       	add	r24, r18
    9492:	93 1f       	adc	r25, r19
}
    9494:	0f 90       	pop	r0
    9496:	0f 90       	pop	r0
    9498:	0f 90       	pop	r0
    949a:	0f 90       	pop	r0
    949c:	df 91       	pop	r29
    949e:	cf 91       	pop	r28
    94a0:	08 95       	ret

000094a2 <xTaskCreate>:
    94a2:	af 92       	push	r10
    94a4:	bf 92       	push	r11
    94a6:	cf 92       	push	r12
    94a8:	df 92       	push	r13
    94aa:	ef 92       	push	r14
    94ac:	ff 92       	push	r15
    94ae:	0f 93       	push	r16
    94b0:	cf 93       	push	r28
    94b2:	df 93       	push	r29
    94b4:	cd b7       	in	r28, 0x3d	; 61
    94b6:	de b7       	in	r29, 0x3e	; 62
    94b8:	60 97       	sbiw	r28, 0x10	; 16
    94ba:	0f b6       	in	r0, 0x3f	; 63
    94bc:	f8 94       	cli
    94be:	de bf       	out	0x3e, r29	; 62
    94c0:	0f be       	out	0x3f, r0	; 63
    94c2:	cd bf       	out	0x3d, r28	; 61
    94c4:	9f 83       	std	Y+7, r25	; 0x07
    94c6:	8e 83       	std	Y+6, r24	; 0x06
    94c8:	79 87       	std	Y+9, r23	; 0x09
    94ca:	68 87       	std	Y+8, r22	; 0x08
    94cc:	5b 87       	std	Y+11, r21	; 0x0b
    94ce:	4a 87       	std	Y+10, r20	; 0x0a
    94d0:	3d 87       	std	Y+13, r19	; 0x0d
    94d2:	2c 87       	std	Y+12, r18	; 0x0c
    94d4:	0e 87       	std	Y+14, r16	; 0x0e
    94d6:	f8 8a       	std	Y+16, r15	; 0x10
    94d8:	ef 86       	std	Y+15, r14	; 0x0f
    94da:	8a 85       	ldd	r24, Y+10	; 0x0a
    94dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    94de:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <pvPortMalloc>
    94e2:	9d 83       	std	Y+5, r25	; 0x05
    94e4:	8c 83       	std	Y+4, r24	; 0x04
    94e6:	8c 81       	ldd	r24, Y+4	; 0x04
    94e8:	9d 81       	ldd	r25, Y+5	; 0x05
    94ea:	89 2b       	or	r24, r25
    94ec:	b9 f0       	breq	.+46     	; 0x951c <xTaskCreate+0x7a>
    94ee:	88 e2       	ldi	r24, 0x28	; 40
    94f0:	90 e0       	ldi	r25, 0x00	; 0
    94f2:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <pvPortMalloc>
    94f6:	9a 83       	std	Y+2, r25	; 0x02
    94f8:	89 83       	std	Y+1, r24	; 0x01
    94fa:	89 81       	ldd	r24, Y+1	; 0x01
    94fc:	9a 81       	ldd	r25, Y+2	; 0x02
    94fe:	89 2b       	or	r24, r25
    9500:	41 f0       	breq	.+16     	; 0x9512 <xTaskCreate+0x70>
    9502:	89 81       	ldd	r24, Y+1	; 0x01
    9504:	9a 81       	ldd	r25, Y+2	; 0x02
    9506:	2c 81       	ldd	r18, Y+4	; 0x04
    9508:	3d 81       	ldd	r19, Y+5	; 0x05
    950a:	fc 01       	movw	r30, r24
    950c:	30 8f       	std	Z+24, r19	; 0x18
    950e:	27 8b       	std	Z+23, r18	; 0x17
    9510:	07 c0       	rjmp	.+14     	; 0x9520 <xTaskCreate+0x7e>
    9512:	8c 81       	ldd	r24, Y+4	; 0x04
    9514:	9d 81       	ldd	r25, Y+5	; 0x05
    9516:	0e 94 dc 57 	call	0xafb8	; 0xafb8 <vPortFree>
    951a:	02 c0       	rjmp	.+4      	; 0x9520 <xTaskCreate+0x7e>
    951c:	1a 82       	std	Y+2, r1	; 0x02
    951e:	19 82       	std	Y+1, r1	; 0x01
    9520:	89 81       	ldd	r24, Y+1	; 0x01
    9522:	9a 81       	ldd	r25, Y+2	; 0x02
    9524:	89 2b       	or	r24, r25
    9526:	c1 f0       	breq	.+48     	; 0x9558 <xTaskCreate+0xb6>
    9528:	a9 81       	ldd	r26, Y+1	; 0x01
    952a:	ba 81       	ldd	r27, Y+2	; 0x02
    952c:	ef 85       	ldd	r30, Y+15	; 0x0f
    952e:	f8 89       	ldd	r31, Y+16	; 0x10
    9530:	2c 85       	ldd	r18, Y+12	; 0x0c
    9532:	3d 85       	ldd	r19, Y+13	; 0x0d
    9534:	4a 85       	ldd	r20, Y+10	; 0x0a
    9536:	5b 85       	ldd	r21, Y+11	; 0x0b
    9538:	68 85       	ldd	r22, Y+8	; 0x08
    953a:	79 85       	ldd	r23, Y+9	; 0x09
    953c:	8e 81       	ldd	r24, Y+6	; 0x06
    953e:	9f 81       	ldd	r25, Y+7	; 0x07
    9540:	a1 2c       	mov	r10, r1
    9542:	b1 2c       	mov	r11, r1
    9544:	6d 01       	movw	r12, r26
    9546:	7f 01       	movw	r14, r30
    9548:	0e 85       	ldd	r16, Y+14	; 0x0e
    954a:	19 d0       	rcall	.+50     	; 0x957e <prvInitialiseNewTask>
    954c:	89 81       	ldd	r24, Y+1	; 0x01
    954e:	9a 81       	ldd	r25, Y+2	; 0x02
    9550:	f0 d0       	rcall	.+480    	; 0x9732 <prvAddNewTaskToReadyList>
    9552:	81 e0       	ldi	r24, 0x01	; 1
    9554:	8b 83       	std	Y+3, r24	; 0x03
    9556:	02 c0       	rjmp	.+4      	; 0x955c <xTaskCreate+0xba>
    9558:	8f ef       	ldi	r24, 0xFF	; 255
    955a:	8b 83       	std	Y+3, r24	; 0x03
    955c:	8b 81       	ldd	r24, Y+3	; 0x03
    955e:	60 96       	adiw	r28, 0x10	; 16
    9560:	0f b6       	in	r0, 0x3f	; 63
    9562:	f8 94       	cli
    9564:	de bf       	out	0x3e, r29	; 62
    9566:	0f be       	out	0x3f, r0	; 63
    9568:	cd bf       	out	0x3d, r28	; 61
    956a:	df 91       	pop	r29
    956c:	cf 91       	pop	r28
    956e:	0f 91       	pop	r16
    9570:	ff 90       	pop	r15
    9572:	ef 90       	pop	r14
    9574:	df 90       	pop	r13
    9576:	cf 90       	pop	r12
    9578:	bf 90       	pop	r11
    957a:	af 90       	pop	r10
    957c:	08 95       	ret

0000957e <prvInitialiseNewTask>:
    957e:	af 92       	push	r10
    9580:	bf 92       	push	r11
    9582:	cf 92       	push	r12
    9584:	df 92       	push	r13
    9586:	ef 92       	push	r14
    9588:	ff 92       	push	r15
    958a:	0f 93       	push	r16
    958c:	cf 93       	push	r28
    958e:	df 93       	push	r29
    9590:	cd b7       	in	r28, 0x3d	; 61
    9592:	de b7       	in	r29, 0x3e	; 62
    9594:	62 97       	sbiw	r28, 0x12	; 18
    9596:	0f b6       	in	r0, 0x3f	; 63
    9598:	f8 94       	cli
    959a:	de bf       	out	0x3e, r29	; 62
    959c:	0f be       	out	0x3f, r0	; 63
    959e:	cd bf       	out	0x3d, r28	; 61
    95a0:	9d 83       	std	Y+5, r25	; 0x05
    95a2:	8c 83       	std	Y+4, r24	; 0x04
    95a4:	7f 83       	std	Y+7, r23	; 0x07
    95a6:	6e 83       	std	Y+6, r22	; 0x06
    95a8:	59 87       	std	Y+9, r21	; 0x09
    95aa:	48 87       	std	Y+8, r20	; 0x08
    95ac:	3b 87       	std	Y+11, r19	; 0x0b
    95ae:	2a 87       	std	Y+10, r18	; 0x0a
    95b0:	0c 87       	std	Y+12, r16	; 0x0c
    95b2:	fe 86       	std	Y+14, r15	; 0x0e
    95b4:	ed 86       	std	Y+13, r14	; 0x0d
    95b6:	d8 8a       	std	Y+16, r13	; 0x10
    95b8:	cf 86       	std	Y+15, r12	; 0x0f
    95ba:	ba 8a       	std	Y+18, r11	; 0x12
    95bc:	a9 8a       	std	Y+17, r10	; 0x11
    95be:	8f 85       	ldd	r24, Y+15	; 0x0f
    95c0:	98 89       	ldd	r25, Y+16	; 0x10
    95c2:	fc 01       	movw	r30, r24
    95c4:	87 89       	ldd	r24, Z+23	; 0x17
    95c6:	90 8d       	ldd	r25, Z+24	; 0x18
    95c8:	28 85       	ldd	r18, Y+8	; 0x08
    95ca:	39 85       	ldd	r19, Y+9	; 0x09
    95cc:	a9 01       	movw	r20, r18
    95ce:	65 ea       	ldi	r22, 0xA5	; 165
    95d0:	70 e0       	ldi	r23, 0x00	; 0
    95d2:	0e 94 6b 64 	call	0xc8d6	; 0xc8d6 <memset>
    95d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    95d8:	98 89       	ldd	r25, Y+16	; 0x10
    95da:	fc 01       	movw	r30, r24
    95dc:	27 89       	ldd	r18, Z+23	; 0x17
    95de:	30 8d       	ldd	r19, Z+24	; 0x18
    95e0:	88 85       	ldd	r24, Y+8	; 0x08
    95e2:	99 85       	ldd	r25, Y+9	; 0x09
    95e4:	01 97       	sbiw	r24, 0x01	; 1
    95e6:	82 0f       	add	r24, r18
    95e8:	93 1f       	adc	r25, r19
    95ea:	9b 83       	std	Y+3, r25	; 0x03
    95ec:	8a 83       	std	Y+2, r24	; 0x02
    95ee:	8e 81       	ldd	r24, Y+6	; 0x06
    95f0:	9f 81       	ldd	r25, Y+7	; 0x07
    95f2:	89 2b       	or	r24, r25
    95f4:	69 f1       	breq	.+90     	; 0x9650 <prvInitialiseNewTask+0xd2>
    95f6:	19 82       	std	Y+1, r1	; 0x01
    95f8:	21 c0       	rjmp	.+66     	; 0x963c <prvInitialiseNewTask+0xbe>
    95fa:	89 81       	ldd	r24, Y+1	; 0x01
    95fc:	88 2f       	mov	r24, r24
    95fe:	90 e0       	ldi	r25, 0x00	; 0
    9600:	29 81       	ldd	r18, Y+1	; 0x01
    9602:	22 2f       	mov	r18, r18
    9604:	30 e0       	ldi	r19, 0x00	; 0
    9606:	4e 81       	ldd	r20, Y+6	; 0x06
    9608:	5f 81       	ldd	r21, Y+7	; 0x07
    960a:	24 0f       	add	r18, r20
    960c:	35 1f       	adc	r19, r21
    960e:	f9 01       	movw	r30, r18
    9610:	40 81       	ld	r20, Z
    9612:	2f 85       	ldd	r18, Y+15	; 0x0f
    9614:	38 89       	ldd	r19, Y+16	; 0x10
    9616:	82 0f       	add	r24, r18
    9618:	93 1f       	adc	r25, r19
    961a:	49 96       	adiw	r24, 0x19	; 25
    961c:	fc 01       	movw	r30, r24
    961e:	40 83       	st	Z, r20
    9620:	89 81       	ldd	r24, Y+1	; 0x01
    9622:	88 2f       	mov	r24, r24
    9624:	90 e0       	ldi	r25, 0x00	; 0
    9626:	2e 81       	ldd	r18, Y+6	; 0x06
    9628:	3f 81       	ldd	r19, Y+7	; 0x07
    962a:	82 0f       	add	r24, r18
    962c:	93 1f       	adc	r25, r19
    962e:	fc 01       	movw	r30, r24
    9630:	80 81       	ld	r24, Z
    9632:	88 23       	and	r24, r24
    9634:	39 f0       	breq	.+14     	; 0x9644 <prvInitialiseNewTask+0xc6>
    9636:	89 81       	ldd	r24, Y+1	; 0x01
    9638:	8f 5f       	subi	r24, 0xFF	; 255
    963a:	89 83       	std	Y+1, r24	; 0x01
    963c:	89 81       	ldd	r24, Y+1	; 0x01
    963e:	88 30       	cpi	r24, 0x08	; 8
    9640:	e0 f2       	brcs	.-72     	; 0x95fa <prvInitialiseNewTask+0x7c>
    9642:	01 c0       	rjmp	.+2      	; 0x9646 <prvInitialiseNewTask+0xc8>
    9644:	00 00       	nop
    9646:	8f 85       	ldd	r24, Y+15	; 0x0f
    9648:	98 89       	ldd	r25, Y+16	; 0x10
    964a:	fc 01       	movw	r30, r24
    964c:	10 a2       	std	Z+32, r1	; 0x20
    964e:	04 c0       	rjmp	.+8      	; 0x9658 <prvInitialiseNewTask+0xda>
    9650:	8f 85       	ldd	r24, Y+15	; 0x0f
    9652:	98 89       	ldd	r25, Y+16	; 0x10
    9654:	fc 01       	movw	r30, r24
    9656:	11 8e       	std	Z+25, r1	; 0x19
    9658:	8c 85       	ldd	r24, Y+12	; 0x0c
    965a:	84 30       	cpi	r24, 0x04	; 4
    965c:	10 f0       	brcs	.+4      	; 0x9662 <prvInitialiseNewTask+0xe4>
    965e:	83 e0       	ldi	r24, 0x03	; 3
    9660:	8c 87       	std	Y+12, r24	; 0x0c
    9662:	8f 85       	ldd	r24, Y+15	; 0x0f
    9664:	98 89       	ldd	r25, Y+16	; 0x10
    9666:	2c 85       	ldd	r18, Y+12	; 0x0c
    9668:	fc 01       	movw	r30, r24
    966a:	26 8b       	std	Z+22, r18	; 0x16
    966c:	8f 85       	ldd	r24, Y+15	; 0x0f
    966e:	98 89       	ldd	r25, Y+16	; 0x10
    9670:	2c 85       	ldd	r18, Y+12	; 0x0c
    9672:	fc 01       	movw	r30, r24
    9674:	21 a3       	std	Z+33, r18	; 0x21
    9676:	8f 85       	ldd	r24, Y+15	; 0x0f
    9678:	98 89       	ldd	r25, Y+16	; 0x10
    967a:	fc 01       	movw	r30, r24
    967c:	12 a2       	std	Z+34, r1	; 0x22
    967e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9680:	98 89       	ldd	r25, Y+16	; 0x10
    9682:	02 96       	adiw	r24, 0x02	; 2
    9684:	0e 94 2d 58 	call	0xb05a	; 0xb05a <vListInitialiseItem>
    9688:	8f 85       	ldd	r24, Y+15	; 0x0f
    968a:	98 89       	ldd	r25, Y+16	; 0x10
    968c:	0c 96       	adiw	r24, 0x0c	; 12
    968e:	0e 94 2d 58 	call	0xb05a	; 0xb05a <vListInitialiseItem>
    9692:	8f 85       	ldd	r24, Y+15	; 0x0f
    9694:	98 89       	ldd	r25, Y+16	; 0x10
    9696:	2f 85       	ldd	r18, Y+15	; 0x0f
    9698:	38 89       	ldd	r19, Y+16	; 0x10
    969a:	fc 01       	movw	r30, r24
    969c:	31 87       	std	Z+9, r19	; 0x09
    969e:	20 87       	std	Z+8, r18	; 0x08
    96a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    96a2:	88 2f       	mov	r24, r24
    96a4:	90 e0       	ldi	r25, 0x00	; 0
    96a6:	24 e0       	ldi	r18, 0x04	; 4
    96a8:	30 e0       	ldi	r19, 0x00	; 0
    96aa:	28 1b       	sub	r18, r24
    96ac:	39 0b       	sbc	r19, r25
    96ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    96b0:	98 89       	ldd	r25, Y+16	; 0x10
    96b2:	fc 01       	movw	r30, r24
    96b4:	35 87       	std	Z+13, r19	; 0x0d
    96b6:	24 87       	std	Z+12, r18	; 0x0c
    96b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    96ba:	98 89       	ldd	r25, Y+16	; 0x10
    96bc:	2f 85       	ldd	r18, Y+15	; 0x0f
    96be:	38 89       	ldd	r19, Y+16	; 0x10
    96c0:	fc 01       	movw	r30, r24
    96c2:	33 8b       	std	Z+19, r19	; 0x13
    96c4:	22 8b       	std	Z+18, r18	; 0x12
    96c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    96c8:	98 89       	ldd	r25, Y+16	; 0x10
    96ca:	fc 01       	movw	r30, r24
    96cc:	13 a2       	std	Z+35, r1	; 0x23
    96ce:	14 a2       	std	Z+36, r1	; 0x24
    96d0:	15 a2       	std	Z+37, r1	; 0x25
    96d2:	16 a2       	std	Z+38, r1	; 0x26
    96d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    96d6:	98 89       	ldd	r25, Y+16	; 0x10
    96d8:	fc 01       	movw	r30, r24
    96da:	17 a2       	std	Z+39, r1	; 0x27
    96dc:	4a 85       	ldd	r20, Y+10	; 0x0a
    96de:	5b 85       	ldd	r21, Y+11	; 0x0b
    96e0:	2c 81       	ldd	r18, Y+4	; 0x04
    96e2:	3d 81       	ldd	r19, Y+5	; 0x05
    96e4:	8a 81       	ldd	r24, Y+2	; 0x02
    96e6:	9b 81       	ldd	r25, Y+3	; 0x03
    96e8:	b9 01       	movw	r22, r18
    96ea:	0e 94 5d 59 	call	0xb2ba	; 0xb2ba <pxPortInitialiseStack>
    96ee:	9c 01       	movw	r18, r24
    96f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    96f2:	98 89       	ldd	r25, Y+16	; 0x10
    96f4:	fc 01       	movw	r30, r24
    96f6:	31 83       	std	Z+1, r19	; 0x01
    96f8:	20 83       	st	Z, r18
    96fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    96fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    96fe:	89 2b       	or	r24, r25
    9700:	39 f0       	breq	.+14     	; 0x9710 <prvInitialiseNewTask+0x192>
    9702:	8d 85       	ldd	r24, Y+13	; 0x0d
    9704:	9e 85       	ldd	r25, Y+14	; 0x0e
    9706:	2f 85       	ldd	r18, Y+15	; 0x0f
    9708:	38 89       	ldd	r19, Y+16	; 0x10
    970a:	fc 01       	movw	r30, r24
    970c:	31 83       	std	Z+1, r19	; 0x01
    970e:	20 83       	st	Z, r18
    9710:	00 00       	nop
    9712:	62 96       	adiw	r28, 0x12	; 18
    9714:	0f b6       	in	r0, 0x3f	; 63
    9716:	f8 94       	cli
    9718:	de bf       	out	0x3e, r29	; 62
    971a:	0f be       	out	0x3f, r0	; 63
    971c:	cd bf       	out	0x3d, r28	; 61
    971e:	df 91       	pop	r29
    9720:	cf 91       	pop	r28
    9722:	0f 91       	pop	r16
    9724:	ff 90       	pop	r15
    9726:	ef 90       	pop	r14
    9728:	df 90       	pop	r13
    972a:	cf 90       	pop	r12
    972c:	bf 90       	pop	r11
    972e:	af 90       	pop	r10
    9730:	08 95       	ret

00009732 <prvAddNewTaskToReadyList>:
    9732:	cf 93       	push	r28
    9734:	df 93       	push	r29
    9736:	1f 92       	push	r1
    9738:	1f 92       	push	r1
    973a:	cd b7       	in	r28, 0x3d	; 61
    973c:	de b7       	in	r29, 0x3e	; 62
    973e:	9a 83       	std	Y+2, r25	; 0x02
    9740:	89 83       	std	Y+1, r24	; 0x01
    9742:	0f b6       	in	r0, 0x3f	; 63
    9744:	f8 94       	cli
    9746:	0f 92       	push	r0
    9748:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <uxCurrentNumberOfTasks>
    974c:	8f 5f       	subi	r24, 0xFF	; 255
    974e:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <uxCurrentNumberOfTasks>
    9752:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9756:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    975a:	89 2b       	or	r24, r25
    975c:	61 f4       	brne	.+24     	; 0x9776 <prvAddNewTaskToReadyList+0x44>
    975e:	89 81       	ldd	r24, Y+1	; 0x01
    9760:	9a 81       	ldd	r25, Y+2	; 0x02
    9762:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <pxCurrentTCB+0x1>
    9766:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <pxCurrentTCB>
    976a:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <uxCurrentNumberOfTasks>
    976e:	81 30       	cpi	r24, 0x01	; 1
    9770:	c1 f4       	brne	.+48     	; 0x97a2 <prvAddNewTaskToReadyList+0x70>
    9772:	42 d4       	rcall	.+2180   	; 0x9ff8 <prvInitialiseTaskLists>
    9774:	16 c0       	rjmp	.+44     	; 0x97a2 <prvAddNewTaskToReadyList+0x70>
    9776:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <xSchedulerRunning>
    977a:	88 23       	and	r24, r24
    977c:	91 f4       	brne	.+36     	; 0x97a2 <prvAddNewTaskToReadyList+0x70>
    977e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9782:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9786:	fc 01       	movw	r30, r24
    9788:	26 89       	ldd	r18, Z+22	; 0x16
    978a:	89 81       	ldd	r24, Y+1	; 0x01
    978c:	9a 81       	ldd	r25, Y+2	; 0x02
    978e:	fc 01       	movw	r30, r24
    9790:	86 89       	ldd	r24, Z+22	; 0x16
    9792:	82 17       	cp	r24, r18
    9794:	30 f0       	brcs	.+12     	; 0x97a2 <prvAddNewTaskToReadyList+0x70>
    9796:	89 81       	ldd	r24, Y+1	; 0x01
    9798:	9a 81       	ldd	r25, Y+2	; 0x02
    979a:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <pxCurrentTCB+0x1>
    979e:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <pxCurrentTCB>
    97a2:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <uxTaskNumber>
    97a6:	8f 5f       	subi	r24, 0xFF	; 255
    97a8:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <uxTaskNumber>
    97ac:	89 81       	ldd	r24, Y+1	; 0x01
    97ae:	9a 81       	ldd	r25, Y+2	; 0x02
    97b0:	fc 01       	movw	r30, r24
    97b2:	96 89       	ldd	r25, Z+22	; 0x16
    97b4:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <uxTopReadyPriority>
    97b8:	89 17       	cp	r24, r25
    97ba:	30 f4       	brcc	.+12     	; 0x97c8 <prvAddNewTaskToReadyList+0x96>
    97bc:	89 81       	ldd	r24, Y+1	; 0x01
    97be:	9a 81       	ldd	r25, Y+2	; 0x02
    97c0:	fc 01       	movw	r30, r24
    97c2:	86 89       	ldd	r24, Z+22	; 0x16
    97c4:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <uxTopReadyPriority>
    97c8:	89 81       	ldd	r24, Y+1	; 0x01
    97ca:	9a 81       	ldd	r25, Y+2	; 0x02
    97cc:	ac 01       	movw	r20, r24
    97ce:	4e 5f       	subi	r20, 0xFE	; 254
    97d0:	5f 4f       	sbci	r21, 0xFF	; 255
    97d2:	89 81       	ldd	r24, Y+1	; 0x01
    97d4:	9a 81       	ldd	r25, Y+2	; 0x02
    97d6:	fc 01       	movw	r30, r24
    97d8:	86 89       	ldd	r24, Z+22	; 0x16
    97da:	28 2f       	mov	r18, r24
    97dc:	30 e0       	ldi	r19, 0x00	; 0
    97de:	c9 01       	movw	r24, r18
    97e0:	88 0f       	add	r24, r24
    97e2:	99 1f       	adc	r25, r25
    97e4:	88 0f       	add	r24, r24
    97e6:	99 1f       	adc	r25, r25
    97e8:	88 0f       	add	r24, r24
    97ea:	99 1f       	adc	r25, r25
    97ec:	82 0f       	add	r24, r18
    97ee:	93 1f       	adc	r25, r19
    97f0:	8b 5e       	subi	r24, 0xEB	; 235
    97f2:	9a 4f       	sbci	r25, 0xFA	; 250
    97f4:	ba 01       	movw	r22, r20
    97f6:	0e 94 40 58 	call	0xb080	; 0xb080 <vListInsertEnd>
    97fa:	0f 90       	pop	r0
    97fc:	0f be       	out	0x3f, r0	; 63
    97fe:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <xSchedulerRunning>
    9802:	88 23       	and	r24, r24
    9804:	71 f0       	breq	.+28     	; 0x9822 <prvAddNewTaskToReadyList+0xf0>
    9806:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    980a:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    980e:	fc 01       	movw	r30, r24
    9810:	26 89       	ldd	r18, Z+22	; 0x16
    9812:	89 81       	ldd	r24, Y+1	; 0x01
    9814:	9a 81       	ldd	r25, Y+2	; 0x02
    9816:	fc 01       	movw	r30, r24
    9818:	86 89       	ldd	r24, Z+22	; 0x16
    981a:	28 17       	cp	r18, r24
    981c:	10 f4       	brcc	.+4      	; 0x9822 <prvAddNewTaskToReadyList+0xf0>
    981e:	0e 94 59 5b 	call	0xb6b2	; 0xb6b2 <vPortYield>
    9822:	00 00       	nop
    9824:	0f 90       	pop	r0
    9826:	0f 90       	pop	r0
    9828:	df 91       	pop	r29
    982a:	cf 91       	pop	r28
    982c:	08 95       	ret

0000982e <vTaskDelay>:
    982e:	cf 93       	push	r28
    9830:	df 93       	push	r29
    9832:	00 d0       	rcall	.+0      	; 0x9834 <vTaskDelay+0x6>
    9834:	cd b7       	in	r28, 0x3d	; 61
    9836:	de b7       	in	r29, 0x3e	; 62
    9838:	9b 83       	std	Y+3, r25	; 0x03
    983a:	8a 83       	std	Y+2, r24	; 0x02
    983c:	19 82       	std	Y+1, r1	; 0x01
    983e:	8a 81       	ldd	r24, Y+2	; 0x02
    9840:	9b 81       	ldd	r25, Y+3	; 0x03
    9842:	89 2b       	or	r24, r25
    9844:	39 f0       	breq	.+14     	; 0x9854 <vTaskDelay+0x26>
    9846:	4b d0       	rcall	.+150    	; 0x98de <vTaskSuspendAll>
    9848:	8a 81       	ldd	r24, Y+2	; 0x02
    984a:	9b 81       	ldd	r25, Y+3	; 0x03
    984c:	60 e0       	ldi	r22, 0x00	; 0
    984e:	7a d5       	rcall	.+2804   	; 0xa344 <prvAddCurrentTaskToDelayedList>
    9850:	53 d0       	rcall	.+166    	; 0x98f8 <xTaskResumeAll>
    9852:	89 83       	std	Y+1, r24	; 0x01
    9854:	89 81       	ldd	r24, Y+1	; 0x01
    9856:	88 23       	and	r24, r24
    9858:	11 f4       	brne	.+4      	; 0x985e <vTaskDelay+0x30>
    985a:	0e 94 59 5b 	call	0xb6b2	; 0xb6b2 <vPortYield>
    985e:	00 00       	nop
    9860:	0f 90       	pop	r0
    9862:	0f 90       	pop	r0
    9864:	0f 90       	pop	r0
    9866:	df 91       	pop	r29
    9868:	cf 91       	pop	r28
    986a:	08 95       	ret

0000986c <vTaskStartScheduler>:
    986c:	ef 92       	push	r14
    986e:	ff 92       	push	r15
    9870:	0f 93       	push	r16
    9872:	cf 93       	push	r28
    9874:	df 93       	push	r29
    9876:	1f 92       	push	r1
    9878:	cd b7       	in	r28, 0x3d	; 61
    987a:	de b7       	in	r29, 0x3e	; 62
    987c:	0f 2e       	mov	r0, r31
    987e:	f6 e7       	ldi	r31, 0x76	; 118
    9880:	ef 2e       	mov	r14, r31
    9882:	f5 e0       	ldi	r31, 0x05	; 5
    9884:	ff 2e       	mov	r15, r31
    9886:	f0 2d       	mov	r31, r0
    9888:	00 e0       	ldi	r16, 0x00	; 0
    988a:	20 e0       	ldi	r18, 0x00	; 0
    988c:	30 e0       	ldi	r19, 0x00	; 0
    988e:	40 ec       	ldi	r20, 0xC0	; 192
    9890:	50 e0       	ldi	r21, 0x00	; 0
    9892:	67 ec       	ldi	r22, 0xC7	; 199
    9894:	72 e0       	ldi	r23, 0x02	; 2
    9896:	81 ec       	ldi	r24, 0xC1	; 193
    9898:	97 e1       	ldi	r25, 0x17	; 23
    989a:	03 de       	rcall	.-1018   	; 0x94a2 <xTaskCreate>
    989c:	89 83       	std	Y+1, r24	; 0x01
    989e:	89 81       	ldd	r24, Y+1	; 0x01
    98a0:	81 30       	cpi	r24, 0x01	; 1
    98a2:	11 f4       	brne	.+4      	; 0x98a8 <vTaskStartScheduler+0x3c>
    98a4:	c5 d5       	rcall	.+2954   	; 0xa430 <xTimerCreateTimerTask>
    98a6:	89 83       	std	Y+1, r24	; 0x01
    98a8:	89 81       	ldd	r24, Y+1	; 0x01
    98aa:	81 30       	cpi	r24, 0x01	; 1
    98ac:	81 f4       	brne	.+32     	; 0x98ce <vTaskStartScheduler+0x62>
    98ae:	f8 94       	cli
    98b0:	8f ef       	ldi	r24, 0xFF	; 255
    98b2:	9f ef       	ldi	r25, 0xFF	; 255
    98b4:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <xNextTaskUnblockTime+0x1>
    98b8:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <xNextTaskUnblockTime>
    98bc:	81 e0       	ldi	r24, 0x01	; 1
    98be:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <xSchedulerRunning>
    98c2:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <xTickCount+0x1>
    98c6:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <xTickCount>
    98ca:	0e 94 21 5b 	call	0xb642	; 0xb642 <xPortStartScheduler>
    98ce:	00 00       	nop
    98d0:	0f 90       	pop	r0
    98d2:	df 91       	pop	r29
    98d4:	cf 91       	pop	r28
    98d6:	0f 91       	pop	r16
    98d8:	ff 90       	pop	r15
    98da:	ef 90       	pop	r14
    98dc:	08 95       	ret

000098de <vTaskSuspendAll>:
    98de:	cf 93       	push	r28
    98e0:	df 93       	push	r29
    98e2:	cd b7       	in	r28, 0x3d	; 61
    98e4:	de b7       	in	r29, 0x3e	; 62
    98e6:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    98ea:	8f 5f       	subi	r24, 0xFF	; 255
    98ec:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <uxSchedulerSuspended>
    98f0:	00 00       	nop
    98f2:	df 91       	pop	r29
    98f4:	cf 91       	pop	r28
    98f6:	08 95       	ret

000098f8 <xTaskResumeAll>:
    98f8:	cf 93       	push	r28
    98fa:	df 93       	push	r29
    98fc:	00 d0       	rcall	.+0      	; 0x98fe <xTaskResumeAll+0x6>
    98fe:	1f 92       	push	r1
    9900:	cd b7       	in	r28, 0x3d	; 61
    9902:	de b7       	in	r29, 0x3e	; 62
    9904:	1a 82       	std	Y+2, r1	; 0x02
    9906:	19 82       	std	Y+1, r1	; 0x01
    9908:	1b 82       	std	Y+3, r1	; 0x03
    990a:	0f b6       	in	r0, 0x3f	; 63
    990c:	f8 94       	cli
    990e:	0f 92       	push	r0
    9910:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    9914:	81 50       	subi	r24, 0x01	; 1
    9916:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <uxSchedulerSuspended>
    991a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    991e:	88 23       	and	r24, r24
    9920:	09 f0       	breq	.+2      	; 0x9924 <xTaskResumeAll+0x2c>
    9922:	75 c0       	rjmp	.+234    	; 0x9a0e <xTaskResumeAll+0x116>
    9924:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <uxCurrentNumberOfTasks>
    9928:	88 23       	and	r24, r24
    992a:	09 f4       	brne	.+2      	; 0x992e <xTaskResumeAll+0x36>
    992c:	70 c0       	rjmp	.+224    	; 0x9a0e <xTaskResumeAll+0x116>
    992e:	49 c0       	rjmp	.+146    	; 0x99c2 <xTaskResumeAll+0xca>
    9930:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <xPendingReadyList+0x5>
    9934:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <xPendingReadyList+0x6>
    9938:	fc 01       	movw	r30, r24
    993a:	86 81       	ldd	r24, Z+6	; 0x06
    993c:	97 81       	ldd	r25, Z+7	; 0x07
    993e:	9a 83       	std	Y+2, r25	; 0x02
    9940:	89 83       	std	Y+1, r24	; 0x01
    9942:	89 81       	ldd	r24, Y+1	; 0x01
    9944:	9a 81       	ldd	r25, Y+2	; 0x02
    9946:	0c 96       	adiw	r24, 0x0c	; 12
    9948:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    994c:	89 81       	ldd	r24, Y+1	; 0x01
    994e:	9a 81       	ldd	r25, Y+2	; 0x02
    9950:	02 96       	adiw	r24, 0x02	; 2
    9952:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    9956:	89 81       	ldd	r24, Y+1	; 0x01
    9958:	9a 81       	ldd	r25, Y+2	; 0x02
    995a:	fc 01       	movw	r30, r24
    995c:	96 89       	ldd	r25, Z+22	; 0x16
    995e:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <uxTopReadyPriority>
    9962:	89 17       	cp	r24, r25
    9964:	30 f4       	brcc	.+12     	; 0x9972 <xTaskResumeAll+0x7a>
    9966:	89 81       	ldd	r24, Y+1	; 0x01
    9968:	9a 81       	ldd	r25, Y+2	; 0x02
    996a:	fc 01       	movw	r30, r24
    996c:	86 89       	ldd	r24, Z+22	; 0x16
    996e:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <uxTopReadyPriority>
    9972:	89 81       	ldd	r24, Y+1	; 0x01
    9974:	9a 81       	ldd	r25, Y+2	; 0x02
    9976:	ac 01       	movw	r20, r24
    9978:	4e 5f       	subi	r20, 0xFE	; 254
    997a:	5f 4f       	sbci	r21, 0xFF	; 255
    997c:	89 81       	ldd	r24, Y+1	; 0x01
    997e:	9a 81       	ldd	r25, Y+2	; 0x02
    9980:	fc 01       	movw	r30, r24
    9982:	86 89       	ldd	r24, Z+22	; 0x16
    9984:	28 2f       	mov	r18, r24
    9986:	30 e0       	ldi	r19, 0x00	; 0
    9988:	c9 01       	movw	r24, r18
    998a:	88 0f       	add	r24, r24
    998c:	99 1f       	adc	r25, r25
    998e:	88 0f       	add	r24, r24
    9990:	99 1f       	adc	r25, r25
    9992:	88 0f       	add	r24, r24
    9994:	99 1f       	adc	r25, r25
    9996:	82 0f       	add	r24, r18
    9998:	93 1f       	adc	r25, r19
    999a:	8b 5e       	subi	r24, 0xEB	; 235
    999c:	9a 4f       	sbci	r25, 0xFA	; 250
    999e:	ba 01       	movw	r22, r20
    99a0:	0e 94 40 58 	call	0xb080	; 0xb080 <vListInsertEnd>
    99a4:	89 81       	ldd	r24, Y+1	; 0x01
    99a6:	9a 81       	ldd	r25, Y+2	; 0x02
    99a8:	fc 01       	movw	r30, r24
    99aa:	26 89       	ldd	r18, Z+22	; 0x16
    99ac:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    99b0:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    99b4:	fc 01       	movw	r30, r24
    99b6:	86 89       	ldd	r24, Z+22	; 0x16
    99b8:	28 17       	cp	r18, r24
    99ba:	18 f0       	brcs	.+6      	; 0x99c2 <xTaskResumeAll+0xca>
    99bc:	81 e0       	ldi	r24, 0x01	; 1
    99be:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <xYieldPending>
    99c2:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <xPendingReadyList>
    99c6:	88 23       	and	r24, r24
    99c8:	09 f0       	breq	.+2      	; 0x99cc <xTaskResumeAll+0xd4>
    99ca:	b2 cf       	rjmp	.-156    	; 0x9930 <xTaskResumeAll+0x38>
    99cc:	89 81       	ldd	r24, Y+1	; 0x01
    99ce:	9a 81       	ldd	r25, Y+2	; 0x02
    99d0:	89 2b       	or	r24, r25
    99d2:	09 f0       	breq	.+2      	; 0x99d6 <xTaskResumeAll+0xde>
    99d4:	f3 d3       	rcall	.+2022   	; 0xa1bc <prvResetNextTaskUnblockTime>
    99d6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <uxPendedTicks>
    99da:	8c 83       	std	Y+4, r24	; 0x04
    99dc:	8c 81       	ldd	r24, Y+4	; 0x04
    99de:	88 23       	and	r24, r24
    99e0:	71 f0       	breq	.+28     	; 0x99fe <xTaskResumeAll+0x106>
    99e2:	37 d0       	rcall	.+110    	; 0x9a52 <xTaskIncrementTick>
    99e4:	88 23       	and	r24, r24
    99e6:	19 f0       	breq	.+6      	; 0x99ee <xTaskResumeAll+0xf6>
    99e8:	81 e0       	ldi	r24, 0x01	; 1
    99ea:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <xYieldPending>
    99ee:	8c 81       	ldd	r24, Y+4	; 0x04
    99f0:	81 50       	subi	r24, 0x01	; 1
    99f2:	8c 83       	std	Y+4, r24	; 0x04
    99f4:	8c 81       	ldd	r24, Y+4	; 0x04
    99f6:	88 23       	and	r24, r24
    99f8:	a1 f7       	brne	.-24     	; 0x99e2 <xTaskResumeAll+0xea>
    99fa:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <uxPendedTicks>
    99fe:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <xYieldPending>
    9a02:	88 23       	and	r24, r24
    9a04:	21 f0       	breq	.+8      	; 0x9a0e <xTaskResumeAll+0x116>
    9a06:	81 e0       	ldi	r24, 0x01	; 1
    9a08:	8b 83       	std	Y+3, r24	; 0x03
    9a0a:	0e 94 59 5b 	call	0xb6b2	; 0xb6b2 <vPortYield>
    9a0e:	0f 90       	pop	r0
    9a10:	0f be       	out	0x3f, r0	; 63
    9a12:	8b 81       	ldd	r24, Y+3	; 0x03
    9a14:	0f 90       	pop	r0
    9a16:	0f 90       	pop	r0
    9a18:	0f 90       	pop	r0
    9a1a:	0f 90       	pop	r0
    9a1c:	df 91       	pop	r29
    9a1e:	cf 91       	pop	r28
    9a20:	08 95       	ret

00009a22 <xTaskGetTickCount>:
    9a22:	cf 93       	push	r28
    9a24:	df 93       	push	r29
    9a26:	1f 92       	push	r1
    9a28:	1f 92       	push	r1
    9a2a:	cd b7       	in	r28, 0x3d	; 61
    9a2c:	de b7       	in	r29, 0x3e	; 62
    9a2e:	0f b6       	in	r0, 0x3f	; 63
    9a30:	f8 94       	cli
    9a32:	0f 92       	push	r0
    9a34:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <xTickCount>
    9a38:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <xTickCount+0x1>
    9a3c:	9a 83       	std	Y+2, r25	; 0x02
    9a3e:	89 83       	std	Y+1, r24	; 0x01
    9a40:	0f 90       	pop	r0
    9a42:	0f be       	out	0x3f, r0	; 63
    9a44:	89 81       	ldd	r24, Y+1	; 0x01
    9a46:	9a 81       	ldd	r25, Y+2	; 0x02
    9a48:	0f 90       	pop	r0
    9a4a:	0f 90       	pop	r0
    9a4c:	df 91       	pop	r29
    9a4e:	cf 91       	pop	r28
    9a50:	08 95       	ret

00009a52 <xTaskIncrementTick>:
    9a52:	cf 93       	push	r28
    9a54:	df 93       	push	r29
    9a56:	cd b7       	in	r28, 0x3d	; 61
    9a58:	de b7       	in	r29, 0x3e	; 62
    9a5a:	29 97       	sbiw	r28, 0x09	; 9
    9a5c:	0f b6       	in	r0, 0x3f	; 63
    9a5e:	f8 94       	cli
    9a60:	de bf       	out	0x3e, r29	; 62
    9a62:	0f be       	out	0x3f, r0	; 63
    9a64:	cd bf       	out	0x3d, r28	; 61
    9a66:	19 82       	std	Y+1, r1	; 0x01
    9a68:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    9a6c:	88 23       	and	r24, r24
    9a6e:	09 f0       	breq	.+2      	; 0x9a72 <xTaskIncrementTick+0x20>
    9a70:	c7 c0       	rjmp	.+398    	; 0x9c00 <xTaskIncrementTick+0x1ae>
    9a72:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <xTickCount>
    9a76:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <xTickCount+0x1>
    9a7a:	01 96       	adiw	r24, 0x01	; 1
    9a7c:	9b 83       	std	Y+3, r25	; 0x03
    9a7e:	8a 83       	std	Y+2, r24	; 0x02
    9a80:	8a 81       	ldd	r24, Y+2	; 0x02
    9a82:	9b 81       	ldd	r25, Y+3	; 0x03
    9a84:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <xTickCount+0x1>
    9a88:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <xTickCount>
    9a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    9a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    9a90:	89 2b       	or	r24, r25
    9a92:	d1 f4       	brne	.+52     	; 0x9ac8 <xTaskIncrementTick+0x76>
    9a94:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    9a98:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    9a9c:	9d 83       	std	Y+5, r25	; 0x05
    9a9e:	8c 83       	std	Y+4, r24	; 0x04
    9aa0:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <pxOverflowDelayedTaskList>
    9aa4:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <pxOverflowDelayedTaskList+0x1>
    9aa8:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <pxDelayedTaskList+0x1>
    9aac:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <pxDelayedTaskList>
    9ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    9ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    9ab4:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <pxOverflowDelayedTaskList+0x1>
    9ab8:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <pxOverflowDelayedTaskList>
    9abc:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <xNumOfOverflows>
    9ac0:	8f 5f       	subi	r24, 0xFF	; 255
    9ac2:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <xNumOfOverflows>
    9ac6:	7a d3       	rcall	.+1780   	; 0xa1bc <prvResetNextTaskUnblockTime>
    9ac8:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <xNextTaskUnblockTime>
    9acc:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <xNextTaskUnblockTime+0x1>
    9ad0:	2a 81       	ldd	r18, Y+2	; 0x02
    9ad2:	3b 81       	ldd	r19, Y+3	; 0x03
    9ad4:	28 17       	cp	r18, r24
    9ad6:	39 07       	cpc	r19, r25
    9ad8:	08 f4       	brcc	.+2      	; 0x9adc <xTaskIncrementTick+0x8a>
    9ada:	78 c0       	rjmp	.+240    	; 0x9bcc <xTaskIncrementTick+0x17a>
    9adc:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    9ae0:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    9ae4:	fc 01       	movw	r30, r24
    9ae6:	80 81       	ld	r24, Z
    9ae8:	88 23       	and	r24, r24
    9aea:	39 f4       	brne	.+14     	; 0x9afa <xTaskIncrementTick+0xa8>
    9aec:	8f ef       	ldi	r24, 0xFF	; 255
    9aee:	9f ef       	ldi	r25, 0xFF	; 255
    9af0:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <xNextTaskUnblockTime+0x1>
    9af4:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <xNextTaskUnblockTime>
    9af8:	69 c0       	rjmp	.+210    	; 0x9bcc <xTaskIncrementTick+0x17a>
    9afa:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    9afe:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    9b02:	fc 01       	movw	r30, r24
    9b04:	85 81       	ldd	r24, Z+5	; 0x05
    9b06:	96 81       	ldd	r25, Z+6	; 0x06
    9b08:	fc 01       	movw	r30, r24
    9b0a:	86 81       	ldd	r24, Z+6	; 0x06
    9b0c:	97 81       	ldd	r25, Z+7	; 0x07
    9b0e:	9f 83       	std	Y+7, r25	; 0x07
    9b10:	8e 83       	std	Y+6, r24	; 0x06
    9b12:	8e 81       	ldd	r24, Y+6	; 0x06
    9b14:	9f 81       	ldd	r25, Y+7	; 0x07
    9b16:	fc 01       	movw	r30, r24
    9b18:	82 81       	ldd	r24, Z+2	; 0x02
    9b1a:	93 81       	ldd	r25, Z+3	; 0x03
    9b1c:	99 87       	std	Y+9, r25	; 0x09
    9b1e:	88 87       	std	Y+8, r24	; 0x08
    9b20:	2a 81       	ldd	r18, Y+2	; 0x02
    9b22:	3b 81       	ldd	r19, Y+3	; 0x03
    9b24:	88 85       	ldd	r24, Y+8	; 0x08
    9b26:	99 85       	ldd	r25, Y+9	; 0x09
    9b28:	28 17       	cp	r18, r24
    9b2a:	39 07       	cpc	r19, r25
    9b2c:	38 f4       	brcc	.+14     	; 0x9b3c <xTaskIncrementTick+0xea>
    9b2e:	88 85       	ldd	r24, Y+8	; 0x08
    9b30:	99 85       	ldd	r25, Y+9	; 0x09
    9b32:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <xNextTaskUnblockTime+0x1>
    9b36:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <xNextTaskUnblockTime>
    9b3a:	48 c0       	rjmp	.+144    	; 0x9bcc <xTaskIncrementTick+0x17a>
    9b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    9b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    9b40:	02 96       	adiw	r24, 0x02	; 2
    9b42:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    9b46:	8e 81       	ldd	r24, Y+6	; 0x06
    9b48:	9f 81       	ldd	r25, Y+7	; 0x07
    9b4a:	fc 01       	movw	r30, r24
    9b4c:	84 89       	ldd	r24, Z+20	; 0x14
    9b4e:	95 89       	ldd	r25, Z+21	; 0x15
    9b50:	89 2b       	or	r24, r25
    9b52:	29 f0       	breq	.+10     	; 0x9b5e <xTaskIncrementTick+0x10c>
    9b54:	8e 81       	ldd	r24, Y+6	; 0x06
    9b56:	9f 81       	ldd	r25, Y+7	; 0x07
    9b58:	0c 96       	adiw	r24, 0x0c	; 12
    9b5a:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    9b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    9b60:	9f 81       	ldd	r25, Y+7	; 0x07
    9b62:	fc 01       	movw	r30, r24
    9b64:	96 89       	ldd	r25, Z+22	; 0x16
    9b66:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <uxTopReadyPriority>
    9b6a:	89 17       	cp	r24, r25
    9b6c:	30 f4       	brcc	.+12     	; 0x9b7a <xTaskIncrementTick+0x128>
    9b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    9b70:	9f 81       	ldd	r25, Y+7	; 0x07
    9b72:	fc 01       	movw	r30, r24
    9b74:	86 89       	ldd	r24, Z+22	; 0x16
    9b76:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <uxTopReadyPriority>
    9b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    9b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    9b7e:	ac 01       	movw	r20, r24
    9b80:	4e 5f       	subi	r20, 0xFE	; 254
    9b82:	5f 4f       	sbci	r21, 0xFF	; 255
    9b84:	8e 81       	ldd	r24, Y+6	; 0x06
    9b86:	9f 81       	ldd	r25, Y+7	; 0x07
    9b88:	fc 01       	movw	r30, r24
    9b8a:	86 89       	ldd	r24, Z+22	; 0x16
    9b8c:	28 2f       	mov	r18, r24
    9b8e:	30 e0       	ldi	r19, 0x00	; 0
    9b90:	c9 01       	movw	r24, r18
    9b92:	88 0f       	add	r24, r24
    9b94:	99 1f       	adc	r25, r25
    9b96:	88 0f       	add	r24, r24
    9b98:	99 1f       	adc	r25, r25
    9b9a:	88 0f       	add	r24, r24
    9b9c:	99 1f       	adc	r25, r25
    9b9e:	82 0f       	add	r24, r18
    9ba0:	93 1f       	adc	r25, r19
    9ba2:	8b 5e       	subi	r24, 0xEB	; 235
    9ba4:	9a 4f       	sbci	r25, 0xFA	; 250
    9ba6:	ba 01       	movw	r22, r20
    9ba8:	0e 94 40 58 	call	0xb080	; 0xb080 <vListInsertEnd>
    9bac:	8e 81       	ldd	r24, Y+6	; 0x06
    9bae:	9f 81       	ldd	r25, Y+7	; 0x07
    9bb0:	fc 01       	movw	r30, r24
    9bb2:	26 89       	ldd	r18, Z+22	; 0x16
    9bb4:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9bb8:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9bbc:	fc 01       	movw	r30, r24
    9bbe:	86 89       	ldd	r24, Z+22	; 0x16
    9bc0:	28 17       	cp	r18, r24
    9bc2:	08 f4       	brcc	.+2      	; 0x9bc6 <xTaskIncrementTick+0x174>
    9bc4:	8b cf       	rjmp	.-234    	; 0x9adc <xTaskIncrementTick+0x8a>
    9bc6:	81 e0       	ldi	r24, 0x01	; 1
    9bc8:	89 83       	std	Y+1, r24	; 0x01
    9bca:	88 cf       	rjmp	.-240    	; 0x9adc <xTaskIncrementTick+0x8a>
    9bcc:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9bd0:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9bd4:	fc 01       	movw	r30, r24
    9bd6:	86 89       	ldd	r24, Z+22	; 0x16
    9bd8:	28 2f       	mov	r18, r24
    9bda:	30 e0       	ldi	r19, 0x00	; 0
    9bdc:	c9 01       	movw	r24, r18
    9bde:	88 0f       	add	r24, r24
    9be0:	99 1f       	adc	r25, r25
    9be2:	88 0f       	add	r24, r24
    9be4:	99 1f       	adc	r25, r25
    9be6:	88 0f       	add	r24, r24
    9be8:	99 1f       	adc	r25, r25
    9bea:	82 0f       	add	r24, r18
    9bec:	93 1f       	adc	r25, r19
    9bee:	8b 5e       	subi	r24, 0xEB	; 235
    9bf0:	9a 4f       	sbci	r25, 0xFA	; 250
    9bf2:	fc 01       	movw	r30, r24
    9bf4:	80 81       	ld	r24, Z
    9bf6:	82 30       	cpi	r24, 0x02	; 2
    9bf8:	40 f0       	brcs	.+16     	; 0x9c0a <xTaskIncrementTick+0x1b8>
    9bfa:	81 e0       	ldi	r24, 0x01	; 1
    9bfc:	89 83       	std	Y+1, r24	; 0x01
    9bfe:	05 c0       	rjmp	.+10     	; 0x9c0a <xTaskIncrementTick+0x1b8>
    9c00:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <uxPendedTicks>
    9c04:	8f 5f       	subi	r24, 0xFF	; 255
    9c06:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <uxPendedTicks>
    9c0a:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <xYieldPending>
    9c0e:	88 23       	and	r24, r24
    9c10:	11 f0       	breq	.+4      	; 0x9c16 <xTaskIncrementTick+0x1c4>
    9c12:	81 e0       	ldi	r24, 0x01	; 1
    9c14:	89 83       	std	Y+1, r24	; 0x01
    9c16:	89 81       	ldd	r24, Y+1	; 0x01
    9c18:	29 96       	adiw	r28, 0x09	; 9
    9c1a:	0f b6       	in	r0, 0x3f	; 63
    9c1c:	f8 94       	cli
    9c1e:	de bf       	out	0x3e, r29	; 62
    9c20:	0f be       	out	0x3f, r0	; 63
    9c22:	cd bf       	out	0x3d, r28	; 61
    9c24:	df 91       	pop	r29
    9c26:	cf 91       	pop	r28
    9c28:	08 95       	ret

00009c2a <vTaskSwitchContext>:
    9c2a:	cf 93       	push	r28
    9c2c:	df 93       	push	r29
    9c2e:	00 d0       	rcall	.+0      	; 0x9c30 <vTaskSwitchContext+0x6>
    9c30:	cd b7       	in	r28, 0x3d	; 61
    9c32:	de b7       	in	r29, 0x3e	; 62
    9c34:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    9c38:	88 23       	and	r24, r24
    9c3a:	21 f0       	breq	.+8      	; 0x9c44 <vTaskSwitchContext+0x1a>
    9c3c:	81 e0       	ldi	r24, 0x01	; 1
    9c3e:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <xYieldPending>
    9c42:	7e c0       	rjmp	.+252    	; 0x9d40 <vTaskSwitchContext+0x116>
    9c44:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <xYieldPending>
    9c48:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9c4c:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9c50:	fc 01       	movw	r30, r24
    9c52:	20 81       	ld	r18, Z
    9c54:	31 81       	ldd	r19, Z+1	; 0x01
    9c56:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9c5a:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9c5e:	fc 01       	movw	r30, r24
    9c60:	87 89       	ldd	r24, Z+23	; 0x17
    9c62:	90 8d       	ldd	r25, Z+24	; 0x18
    9c64:	82 17       	cp	r24, r18
    9c66:	93 07       	cpc	r25, r19
    9c68:	70 f0       	brcs	.+28     	; 0x9c86 <vTaskSwitchContext+0x5c>
    9c6a:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9c6e:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9c72:	9c 01       	movw	r18, r24
    9c74:	27 5e       	subi	r18, 0xE7	; 231
    9c76:	3f 4f       	sbci	r19, 0xFF	; 255
    9c78:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9c7c:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9c80:	b9 01       	movw	r22, r18
    9c82:	0e 94 95 56 	call	0xad2a	; 0xad2a <vApplicationStackOverflowHook>
    9c86:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <uxTopReadyPriority>
    9c8a:	89 83       	std	Y+1, r24	; 0x01
    9c8c:	03 c0       	rjmp	.+6      	; 0x9c94 <vTaskSwitchContext+0x6a>
    9c8e:	89 81       	ldd	r24, Y+1	; 0x01
    9c90:	81 50       	subi	r24, 0x01	; 1
    9c92:	89 83       	std	Y+1, r24	; 0x01
    9c94:	89 81       	ldd	r24, Y+1	; 0x01
    9c96:	28 2f       	mov	r18, r24
    9c98:	30 e0       	ldi	r19, 0x00	; 0
    9c9a:	c9 01       	movw	r24, r18
    9c9c:	88 0f       	add	r24, r24
    9c9e:	99 1f       	adc	r25, r25
    9ca0:	88 0f       	add	r24, r24
    9ca2:	99 1f       	adc	r25, r25
    9ca4:	88 0f       	add	r24, r24
    9ca6:	99 1f       	adc	r25, r25
    9ca8:	82 0f       	add	r24, r18
    9caa:	93 1f       	adc	r25, r19
    9cac:	8b 5e       	subi	r24, 0xEB	; 235
    9cae:	9a 4f       	sbci	r25, 0xFA	; 250
    9cb0:	fc 01       	movw	r30, r24
    9cb2:	80 81       	ld	r24, Z
    9cb4:	88 23       	and	r24, r24
    9cb6:	59 f3       	breq	.-42     	; 0x9c8e <vTaskSwitchContext+0x64>
    9cb8:	89 81       	ldd	r24, Y+1	; 0x01
    9cba:	28 2f       	mov	r18, r24
    9cbc:	30 e0       	ldi	r19, 0x00	; 0
    9cbe:	c9 01       	movw	r24, r18
    9cc0:	88 0f       	add	r24, r24
    9cc2:	99 1f       	adc	r25, r25
    9cc4:	88 0f       	add	r24, r24
    9cc6:	99 1f       	adc	r25, r25
    9cc8:	88 0f       	add	r24, r24
    9cca:	99 1f       	adc	r25, r25
    9ccc:	82 0f       	add	r24, r18
    9cce:	93 1f       	adc	r25, r19
    9cd0:	8b 5e       	subi	r24, 0xEB	; 235
    9cd2:	9a 4f       	sbci	r25, 0xFA	; 250
    9cd4:	9b 83       	std	Y+3, r25	; 0x03
    9cd6:	8a 83       	std	Y+2, r24	; 0x02
    9cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    9cda:	9b 81       	ldd	r25, Y+3	; 0x03
    9cdc:	fc 01       	movw	r30, r24
    9cde:	81 81       	ldd	r24, Z+1	; 0x01
    9ce0:	92 81       	ldd	r25, Z+2	; 0x02
    9ce2:	fc 01       	movw	r30, r24
    9ce4:	22 81       	ldd	r18, Z+2	; 0x02
    9ce6:	33 81       	ldd	r19, Z+3	; 0x03
    9ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    9cea:	9b 81       	ldd	r25, Y+3	; 0x03
    9cec:	fc 01       	movw	r30, r24
    9cee:	32 83       	std	Z+2, r19	; 0x02
    9cf0:	21 83       	std	Z+1, r18	; 0x01
    9cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    9cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    9cf6:	fc 01       	movw	r30, r24
    9cf8:	21 81       	ldd	r18, Z+1	; 0x01
    9cfa:	32 81       	ldd	r19, Z+2	; 0x02
    9cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    9cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    9d00:	03 96       	adiw	r24, 0x03	; 3
    9d02:	28 17       	cp	r18, r24
    9d04:	39 07       	cpc	r19, r25
    9d06:	69 f4       	brne	.+26     	; 0x9d22 <vTaskSwitchContext+0xf8>
    9d08:	8a 81       	ldd	r24, Y+2	; 0x02
    9d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    9d0c:	fc 01       	movw	r30, r24
    9d0e:	81 81       	ldd	r24, Z+1	; 0x01
    9d10:	92 81       	ldd	r25, Z+2	; 0x02
    9d12:	fc 01       	movw	r30, r24
    9d14:	22 81       	ldd	r18, Z+2	; 0x02
    9d16:	33 81       	ldd	r19, Z+3	; 0x03
    9d18:	8a 81       	ldd	r24, Y+2	; 0x02
    9d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    9d1c:	fc 01       	movw	r30, r24
    9d1e:	32 83       	std	Z+2, r19	; 0x02
    9d20:	21 83       	std	Z+1, r18	; 0x01
    9d22:	8a 81       	ldd	r24, Y+2	; 0x02
    9d24:	9b 81       	ldd	r25, Y+3	; 0x03
    9d26:	fc 01       	movw	r30, r24
    9d28:	81 81       	ldd	r24, Z+1	; 0x01
    9d2a:	92 81       	ldd	r25, Z+2	; 0x02
    9d2c:	fc 01       	movw	r30, r24
    9d2e:	86 81       	ldd	r24, Z+6	; 0x06
    9d30:	97 81       	ldd	r25, Z+7	; 0x07
    9d32:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <pxCurrentTCB+0x1>
    9d36:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <pxCurrentTCB>
    9d3a:	89 81       	ldd	r24, Y+1	; 0x01
    9d3c:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <uxTopReadyPriority>
    9d40:	00 00       	nop
    9d42:	0f 90       	pop	r0
    9d44:	0f 90       	pop	r0
    9d46:	0f 90       	pop	r0
    9d48:	df 91       	pop	r29
    9d4a:	cf 91       	pop	r28
    9d4c:	08 95       	ret

00009d4e <vTaskPlaceOnEventList>:
    9d4e:	cf 93       	push	r28
    9d50:	df 93       	push	r29
    9d52:	00 d0       	rcall	.+0      	; 0x9d54 <vTaskPlaceOnEventList+0x6>
    9d54:	1f 92       	push	r1
    9d56:	cd b7       	in	r28, 0x3d	; 61
    9d58:	de b7       	in	r29, 0x3e	; 62
    9d5a:	9a 83       	std	Y+2, r25	; 0x02
    9d5c:	89 83       	std	Y+1, r24	; 0x01
    9d5e:	7c 83       	std	Y+4, r23	; 0x04
    9d60:	6b 83       	std	Y+3, r22	; 0x03
    9d62:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9d66:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9d6a:	9c 01       	movw	r18, r24
    9d6c:	24 5f       	subi	r18, 0xF4	; 244
    9d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    9d70:	89 81       	ldd	r24, Y+1	; 0x01
    9d72:	9a 81       	ldd	r25, Y+2	; 0x02
    9d74:	b9 01       	movw	r22, r18
    9d76:	0e 94 8e 58 	call	0xb11c	; 0xb11c <vListInsert>
    9d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    9d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    9d7e:	61 e0       	ldi	r22, 0x01	; 1
    9d80:	e1 d2       	rcall	.+1474   	; 0xa344 <prvAddCurrentTaskToDelayedList>
    9d82:	00 00       	nop
    9d84:	0f 90       	pop	r0
    9d86:	0f 90       	pop	r0
    9d88:	0f 90       	pop	r0
    9d8a:	0f 90       	pop	r0
    9d8c:	df 91       	pop	r29
    9d8e:	cf 91       	pop	r28
    9d90:	08 95       	ret

00009d92 <vTaskPlaceOnEventListRestricted>:
    9d92:	cf 93       	push	r28
    9d94:	df 93       	push	r29
    9d96:	00 d0       	rcall	.+0      	; 0x9d98 <vTaskPlaceOnEventListRestricted+0x6>
    9d98:	1f 92       	push	r1
    9d9a:	1f 92       	push	r1
    9d9c:	cd b7       	in	r28, 0x3d	; 61
    9d9e:	de b7       	in	r29, 0x3e	; 62
    9da0:	9a 83       	std	Y+2, r25	; 0x02
    9da2:	89 83       	std	Y+1, r24	; 0x01
    9da4:	7c 83       	std	Y+4, r23	; 0x04
    9da6:	6b 83       	std	Y+3, r22	; 0x03
    9da8:	4d 83       	std	Y+5, r20	; 0x05
    9daa:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9dae:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9db2:	9c 01       	movw	r18, r24
    9db4:	24 5f       	subi	r18, 0xF4	; 244
    9db6:	3f 4f       	sbci	r19, 0xFF	; 255
    9db8:	89 81       	ldd	r24, Y+1	; 0x01
    9dba:	9a 81       	ldd	r25, Y+2	; 0x02
    9dbc:	b9 01       	movw	r22, r18
    9dbe:	0e 94 40 58 	call	0xb080	; 0xb080 <vListInsertEnd>
    9dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    9dc4:	88 23       	and	r24, r24
    9dc6:	21 f0       	breq	.+8      	; 0x9dd0 <vTaskPlaceOnEventListRestricted+0x3e>
    9dc8:	8f ef       	ldi	r24, 0xFF	; 255
    9dca:	9f ef       	ldi	r25, 0xFF	; 255
    9dcc:	9c 83       	std	Y+4, r25	; 0x04
    9dce:	8b 83       	std	Y+3, r24	; 0x03
    9dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    9dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    9dd4:	6d 81       	ldd	r22, Y+5	; 0x05
    9dd6:	b6 d2       	rcall	.+1388   	; 0xa344 <prvAddCurrentTaskToDelayedList>
    9dd8:	00 00       	nop
    9dda:	0f 90       	pop	r0
    9ddc:	0f 90       	pop	r0
    9dde:	0f 90       	pop	r0
    9de0:	0f 90       	pop	r0
    9de2:	0f 90       	pop	r0
    9de4:	df 91       	pop	r29
    9de6:	cf 91       	pop	r28
    9de8:	08 95       	ret

00009dea <xTaskRemoveFromEventList>:
    9dea:	cf 93       	push	r28
    9dec:	df 93       	push	r29
    9dee:	00 d0       	rcall	.+0      	; 0x9df0 <xTaskRemoveFromEventList+0x6>
    9df0:	1f 92       	push	r1
    9df2:	1f 92       	push	r1
    9df4:	cd b7       	in	r28, 0x3d	; 61
    9df6:	de b7       	in	r29, 0x3e	; 62
    9df8:	9d 83       	std	Y+5, r25	; 0x05
    9dfa:	8c 83       	std	Y+4, r24	; 0x04
    9dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    9dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    9e00:	fc 01       	movw	r30, r24
    9e02:	85 81       	ldd	r24, Z+5	; 0x05
    9e04:	96 81       	ldd	r25, Z+6	; 0x06
    9e06:	fc 01       	movw	r30, r24
    9e08:	86 81       	ldd	r24, Z+6	; 0x06
    9e0a:	97 81       	ldd	r25, Z+7	; 0x07
    9e0c:	9b 83       	std	Y+3, r25	; 0x03
    9e0e:	8a 83       	std	Y+2, r24	; 0x02
    9e10:	8a 81       	ldd	r24, Y+2	; 0x02
    9e12:	9b 81       	ldd	r25, Y+3	; 0x03
    9e14:	0c 96       	adiw	r24, 0x0c	; 12
    9e16:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    9e1a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    9e1e:	88 23       	and	r24, r24
    9e20:	69 f5       	brne	.+90     	; 0x9e7c <xTaskRemoveFromEventList+0x92>
    9e22:	8a 81       	ldd	r24, Y+2	; 0x02
    9e24:	9b 81       	ldd	r25, Y+3	; 0x03
    9e26:	02 96       	adiw	r24, 0x02	; 2
    9e28:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    9e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e30:	fc 01       	movw	r30, r24
    9e32:	96 89       	ldd	r25, Z+22	; 0x16
    9e34:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <uxTopReadyPriority>
    9e38:	89 17       	cp	r24, r25
    9e3a:	30 f4       	brcc	.+12     	; 0x9e48 <xTaskRemoveFromEventList+0x5e>
    9e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e40:	fc 01       	movw	r30, r24
    9e42:	86 89       	ldd	r24, Z+22	; 0x16
    9e44:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <uxTopReadyPriority>
    9e48:	8a 81       	ldd	r24, Y+2	; 0x02
    9e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    9e4c:	ac 01       	movw	r20, r24
    9e4e:	4e 5f       	subi	r20, 0xFE	; 254
    9e50:	5f 4f       	sbci	r21, 0xFF	; 255
    9e52:	8a 81       	ldd	r24, Y+2	; 0x02
    9e54:	9b 81       	ldd	r25, Y+3	; 0x03
    9e56:	fc 01       	movw	r30, r24
    9e58:	86 89       	ldd	r24, Z+22	; 0x16
    9e5a:	28 2f       	mov	r18, r24
    9e5c:	30 e0       	ldi	r19, 0x00	; 0
    9e5e:	c9 01       	movw	r24, r18
    9e60:	88 0f       	add	r24, r24
    9e62:	99 1f       	adc	r25, r25
    9e64:	88 0f       	add	r24, r24
    9e66:	99 1f       	adc	r25, r25
    9e68:	88 0f       	add	r24, r24
    9e6a:	99 1f       	adc	r25, r25
    9e6c:	82 0f       	add	r24, r18
    9e6e:	93 1f       	adc	r25, r19
    9e70:	8b 5e       	subi	r24, 0xEB	; 235
    9e72:	9a 4f       	sbci	r25, 0xFA	; 250
    9e74:	ba 01       	movw	r22, r20
    9e76:	0e 94 40 58 	call	0xb080	; 0xb080 <vListInsertEnd>
    9e7a:	08 c0       	rjmp	.+16     	; 0x9e8c <xTaskRemoveFromEventList+0xa2>
    9e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e80:	0c 96       	adiw	r24, 0x0c	; 12
    9e82:	bc 01       	movw	r22, r24
    9e84:	8f e4       	ldi	r24, 0x4F	; 79
    9e86:	95 e0       	ldi	r25, 0x05	; 5
    9e88:	0e 94 40 58 	call	0xb080	; 0xb080 <vListInsertEnd>
    9e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e90:	fc 01       	movw	r30, r24
    9e92:	26 89       	ldd	r18, Z+22	; 0x16
    9e94:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    9e98:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    9e9c:	fc 01       	movw	r30, r24
    9e9e:	86 89       	ldd	r24, Z+22	; 0x16
    9ea0:	82 17       	cp	r24, r18
    9ea2:	30 f4       	brcc	.+12     	; 0x9eb0 <xTaskRemoveFromEventList+0xc6>
    9ea4:	81 e0       	ldi	r24, 0x01	; 1
    9ea6:	89 83       	std	Y+1, r24	; 0x01
    9ea8:	81 e0       	ldi	r24, 0x01	; 1
    9eaa:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <xYieldPending>
    9eae:	01 c0       	rjmp	.+2      	; 0x9eb2 <xTaskRemoveFromEventList+0xc8>
    9eb0:	19 82       	std	Y+1, r1	; 0x01
    9eb2:	89 81       	ldd	r24, Y+1	; 0x01
    9eb4:	0f 90       	pop	r0
    9eb6:	0f 90       	pop	r0
    9eb8:	0f 90       	pop	r0
    9eba:	0f 90       	pop	r0
    9ebc:	0f 90       	pop	r0
    9ebe:	df 91       	pop	r29
    9ec0:	cf 91       	pop	r28
    9ec2:	08 95       	ret

00009ec4 <vTaskInternalSetTimeOutState>:
    9ec4:	cf 93       	push	r28
    9ec6:	df 93       	push	r29
    9ec8:	1f 92       	push	r1
    9eca:	1f 92       	push	r1
    9ecc:	cd b7       	in	r28, 0x3d	; 61
    9ece:	de b7       	in	r29, 0x3e	; 62
    9ed0:	9a 83       	std	Y+2, r25	; 0x02
    9ed2:	89 83       	std	Y+1, r24	; 0x01
    9ed4:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNumOfOverflows>
    9ed8:	89 81       	ldd	r24, Y+1	; 0x01
    9eda:	9a 81       	ldd	r25, Y+2	; 0x02
    9edc:	fc 01       	movw	r30, r24
    9ede:	20 83       	st	Z, r18
    9ee0:	20 91 6c 05 	lds	r18, 0x056C	; 0x80056c <xTickCount>
    9ee4:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <xTickCount+0x1>
    9ee8:	89 81       	ldd	r24, Y+1	; 0x01
    9eea:	9a 81       	ldd	r25, Y+2	; 0x02
    9eec:	fc 01       	movw	r30, r24
    9eee:	32 83       	std	Z+2, r19	; 0x02
    9ef0:	21 83       	std	Z+1, r18	; 0x01
    9ef2:	00 00       	nop
    9ef4:	0f 90       	pop	r0
    9ef6:	0f 90       	pop	r0
    9ef8:	df 91       	pop	r29
    9efa:	cf 91       	pop	r28
    9efc:	08 95       	ret

00009efe <xTaskCheckForTimeOut>:
    9efe:	cf 93       	push	r28
    9f00:	df 93       	push	r29
    9f02:	cd b7       	in	r28, 0x3d	; 61
    9f04:	de b7       	in	r29, 0x3e	; 62
    9f06:	29 97       	sbiw	r28, 0x09	; 9
    9f08:	0f b6       	in	r0, 0x3f	; 63
    9f0a:	f8 94       	cli
    9f0c:	de bf       	out	0x3e, r29	; 62
    9f0e:	0f be       	out	0x3f, r0	; 63
    9f10:	cd bf       	out	0x3d, r28	; 61
    9f12:	9f 83       	std	Y+7, r25	; 0x07
    9f14:	8e 83       	std	Y+6, r24	; 0x06
    9f16:	79 87       	std	Y+9, r23	; 0x09
    9f18:	68 87       	std	Y+8, r22	; 0x08
    9f1a:	0f b6       	in	r0, 0x3f	; 63
    9f1c:	f8 94       	cli
    9f1e:	0f 92       	push	r0
    9f20:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <xTickCount>
    9f24:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <xTickCount+0x1>
    9f28:	9b 83       	std	Y+3, r25	; 0x03
    9f2a:	8a 83       	std	Y+2, r24	; 0x02
    9f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    9f2e:	9f 81       	ldd	r25, Y+7	; 0x07
    9f30:	fc 01       	movw	r30, r24
    9f32:	81 81       	ldd	r24, Z+1	; 0x01
    9f34:	92 81       	ldd	r25, Z+2	; 0x02
    9f36:	2a 81       	ldd	r18, Y+2	; 0x02
    9f38:	3b 81       	ldd	r19, Y+3	; 0x03
    9f3a:	a9 01       	movw	r20, r18
    9f3c:	48 1b       	sub	r20, r24
    9f3e:	59 0b       	sbc	r21, r25
    9f40:	ca 01       	movw	r24, r20
    9f42:	9d 83       	std	Y+5, r25	; 0x05
    9f44:	8c 83       	std	Y+4, r24	; 0x04
    9f46:	88 85       	ldd	r24, Y+8	; 0x08
    9f48:	99 85       	ldd	r25, Y+9	; 0x09
    9f4a:	fc 01       	movw	r30, r24
    9f4c:	80 81       	ld	r24, Z
    9f4e:	91 81       	ldd	r25, Z+1	; 0x01
    9f50:	01 96       	adiw	r24, 0x01	; 1
    9f52:	11 f4       	brne	.+4      	; 0x9f58 <xTaskCheckForTimeOut+0x5a>
    9f54:	19 82       	std	Y+1, r1	; 0x01
    9f56:	39 c0       	rjmp	.+114    	; 0x9fca <xTaskCheckForTimeOut+0xcc>
    9f58:	8e 81       	ldd	r24, Y+6	; 0x06
    9f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    9f5c:	fc 01       	movw	r30, r24
    9f5e:	90 81       	ld	r25, Z
    9f60:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <xNumOfOverflows>
    9f64:	98 17       	cp	r25, r24
    9f66:	69 f0       	breq	.+26     	; 0x9f82 <xTaskCheckForTimeOut+0x84>
    9f68:	8e 81       	ldd	r24, Y+6	; 0x06
    9f6a:	9f 81       	ldd	r25, Y+7	; 0x07
    9f6c:	fc 01       	movw	r30, r24
    9f6e:	21 81       	ldd	r18, Z+1	; 0x01
    9f70:	32 81       	ldd	r19, Z+2	; 0x02
    9f72:	8a 81       	ldd	r24, Y+2	; 0x02
    9f74:	9b 81       	ldd	r25, Y+3	; 0x03
    9f76:	82 17       	cp	r24, r18
    9f78:	93 07       	cpc	r25, r19
    9f7a:	18 f0       	brcs	.+6      	; 0x9f82 <xTaskCheckForTimeOut+0x84>
    9f7c:	81 e0       	ldi	r24, 0x01	; 1
    9f7e:	89 83       	std	Y+1, r24	; 0x01
    9f80:	24 c0       	rjmp	.+72     	; 0x9fca <xTaskCheckForTimeOut+0xcc>
    9f82:	88 85       	ldd	r24, Y+8	; 0x08
    9f84:	99 85       	ldd	r25, Y+9	; 0x09
    9f86:	fc 01       	movw	r30, r24
    9f88:	20 81       	ld	r18, Z
    9f8a:	31 81       	ldd	r19, Z+1	; 0x01
    9f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    9f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    9f90:	82 17       	cp	r24, r18
    9f92:	93 07       	cpc	r25, r19
    9f94:	98 f4       	brcc	.+38     	; 0x9fbc <xTaskCheckForTimeOut+0xbe>
    9f96:	88 85       	ldd	r24, Y+8	; 0x08
    9f98:	99 85       	ldd	r25, Y+9	; 0x09
    9f9a:	fc 01       	movw	r30, r24
    9f9c:	20 81       	ld	r18, Z
    9f9e:	31 81       	ldd	r19, Z+1	; 0x01
    9fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    9fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    9fa4:	28 1b       	sub	r18, r24
    9fa6:	39 0b       	sbc	r19, r25
    9fa8:	88 85       	ldd	r24, Y+8	; 0x08
    9faa:	99 85       	ldd	r25, Y+9	; 0x09
    9fac:	fc 01       	movw	r30, r24
    9fae:	31 83       	std	Z+1, r19	; 0x01
    9fb0:	20 83       	st	Z, r18
    9fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    9fb4:	9f 81       	ldd	r25, Y+7	; 0x07
    9fb6:	86 df       	rcall	.-244    	; 0x9ec4 <vTaskInternalSetTimeOutState>
    9fb8:	19 82       	std	Y+1, r1	; 0x01
    9fba:	07 c0       	rjmp	.+14     	; 0x9fca <xTaskCheckForTimeOut+0xcc>
    9fbc:	88 85       	ldd	r24, Y+8	; 0x08
    9fbe:	99 85       	ldd	r25, Y+9	; 0x09
    9fc0:	fc 01       	movw	r30, r24
    9fc2:	11 82       	std	Z+1, r1	; 0x01
    9fc4:	10 82       	st	Z, r1
    9fc6:	81 e0       	ldi	r24, 0x01	; 1
    9fc8:	89 83       	std	Y+1, r24	; 0x01
    9fca:	0f 90       	pop	r0
    9fcc:	0f be       	out	0x3f, r0	; 63
    9fce:	89 81       	ldd	r24, Y+1	; 0x01
    9fd0:	29 96       	adiw	r28, 0x09	; 9
    9fd2:	0f b6       	in	r0, 0x3f	; 63
    9fd4:	f8 94       	cli
    9fd6:	de bf       	out	0x3e, r29	; 62
    9fd8:	0f be       	out	0x3f, r0	; 63
    9fda:	cd bf       	out	0x3d, r28	; 61
    9fdc:	df 91       	pop	r29
    9fde:	cf 91       	pop	r28
    9fe0:	08 95       	ret

00009fe2 <vTaskMissedYield>:
    9fe2:	cf 93       	push	r28
    9fe4:	df 93       	push	r29
    9fe6:	cd b7       	in	r28, 0x3d	; 61
    9fe8:	de b7       	in	r29, 0x3e	; 62
    9fea:	81 e0       	ldi	r24, 0x01	; 1
    9fec:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <xYieldPending>
    9ff0:	00 00       	nop
    9ff2:	df 91       	pop	r29
    9ff4:	cf 91       	pop	r28
    9ff6:	08 95       	ret

00009ff8 <prvInitialiseTaskLists>:
    9ff8:	cf 93       	push	r28
    9ffa:	df 93       	push	r29
    9ffc:	1f 92       	push	r1
    9ffe:	cd b7       	in	r28, 0x3d	; 61
    a000:	de b7       	in	r29, 0x3e	; 62
    a002:	19 82       	std	Y+1, r1	; 0x01
    a004:	12 c0       	rjmp	.+36     	; 0xa02a <prvInitialiseTaskLists+0x32>
    a006:	89 81       	ldd	r24, Y+1	; 0x01
    a008:	28 2f       	mov	r18, r24
    a00a:	30 e0       	ldi	r19, 0x00	; 0
    a00c:	c9 01       	movw	r24, r18
    a00e:	88 0f       	add	r24, r24
    a010:	99 1f       	adc	r25, r25
    a012:	88 0f       	add	r24, r24
    a014:	99 1f       	adc	r25, r25
    a016:	88 0f       	add	r24, r24
    a018:	99 1f       	adc	r25, r25
    a01a:	82 0f       	add	r24, r18
    a01c:	93 1f       	adc	r25, r19
    a01e:	8b 5e       	subi	r24, 0xEB	; 235
    a020:	9a 4f       	sbci	r25, 0xFA	; 250
    a022:	e4 d7       	rcall	.+4040   	; 0xafec <vListInitialise>
    a024:	89 81       	ldd	r24, Y+1	; 0x01
    a026:	8f 5f       	subi	r24, 0xFF	; 255
    a028:	89 83       	std	Y+1, r24	; 0x01
    a02a:	89 81       	ldd	r24, Y+1	; 0x01
    a02c:	84 30       	cpi	r24, 0x04	; 4
    a02e:	58 f3       	brcs	.-42     	; 0xa006 <prvInitialiseTaskLists+0xe>
    a030:	89 e3       	ldi	r24, 0x39	; 57
    a032:	95 e0       	ldi	r25, 0x05	; 5
    a034:	db d7       	rcall	.+4022   	; 0xafec <vListInitialise>
    a036:	82 e4       	ldi	r24, 0x42	; 66
    a038:	95 e0       	ldi	r25, 0x05	; 5
    a03a:	d8 d7       	rcall	.+4016   	; 0xafec <vListInitialise>
    a03c:	8f e4       	ldi	r24, 0x4F	; 79
    a03e:	95 e0       	ldi	r25, 0x05	; 5
    a040:	d5 d7       	rcall	.+4010   	; 0xafec <vListInitialise>
    a042:	88 e5       	ldi	r24, 0x58	; 88
    a044:	95 e0       	ldi	r25, 0x05	; 5
    a046:	d2 d7       	rcall	.+4004   	; 0xafec <vListInitialise>
    a048:	82 e6       	ldi	r24, 0x62	; 98
    a04a:	95 e0       	ldi	r25, 0x05	; 5
    a04c:	cf d7       	rcall	.+3998   	; 0xafec <vListInitialise>
    a04e:	89 e3       	ldi	r24, 0x39	; 57
    a050:	95 e0       	ldi	r25, 0x05	; 5
    a052:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <pxDelayedTaskList+0x1>
    a056:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <pxDelayedTaskList>
    a05a:	82 e4       	ldi	r24, 0x42	; 66
    a05c:	95 e0       	ldi	r25, 0x05	; 5
    a05e:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <pxOverflowDelayedTaskList+0x1>
    a062:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <pxOverflowDelayedTaskList>
    a066:	00 00       	nop
    a068:	0f 90       	pop	r0
    a06a:	df 91       	pop	r29
    a06c:	cf 91       	pop	r28
    a06e:	08 95       	ret

0000a070 <prvCheckTasksWaitingTermination>:
    a070:	cf 93       	push	r28
    a072:	df 93       	push	r29
    a074:	1f 92       	push	r1
    a076:	1f 92       	push	r1
    a078:	cd b7       	in	r28, 0x3d	; 61
    a07a:	de b7       	in	r29, 0x3e	; 62
    a07c:	20 c0       	rjmp	.+64     	; 0xa0be <prvCheckTasksWaitingTermination+0x4e>
    a07e:	0f b6       	in	r0, 0x3f	; 63
    a080:	f8 94       	cli
    a082:	0f 92       	push	r0
    a084:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <xTasksWaitingTermination+0x5>
    a088:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <xTasksWaitingTermination+0x6>
    a08c:	fc 01       	movw	r30, r24
    a08e:	86 81       	ldd	r24, Z+6	; 0x06
    a090:	97 81       	ldd	r25, Z+7	; 0x07
    a092:	9a 83       	std	Y+2, r25	; 0x02
    a094:	89 83       	std	Y+1, r24	; 0x01
    a096:	89 81       	ldd	r24, Y+1	; 0x01
    a098:	9a 81       	ldd	r25, Y+2	; 0x02
    a09a:	02 96       	adiw	r24, 0x02	; 2
    a09c:	0e 94 06 59 	call	0xb20c	; 0xb20c <uxListRemove>
    a0a0:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <uxCurrentNumberOfTasks>
    a0a4:	81 50       	subi	r24, 0x01	; 1
    a0a6:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <uxCurrentNumberOfTasks>
    a0aa:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <uxDeletedTasksWaitingCleanUp>
    a0ae:	81 50       	subi	r24, 0x01	; 1
    a0b0:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <uxDeletedTasksWaitingCleanUp>
    a0b4:	0f 90       	pop	r0
    a0b6:	0f be       	out	0x3f, r0	; 63
    a0b8:	89 81       	ldd	r24, Y+1	; 0x01
    a0ba:	9a 81       	ldd	r25, Y+2	; 0x02
    a0bc:	68 d0       	rcall	.+208    	; 0xa18e <prvDeleteTCB>
    a0be:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <uxDeletedTasksWaitingCleanUp>
    a0c2:	88 23       	and	r24, r24
    a0c4:	e1 f6       	brne	.-72     	; 0xa07e <prvCheckTasksWaitingTermination+0xe>
    a0c6:	00 00       	nop
    a0c8:	0f 90       	pop	r0
    a0ca:	0f 90       	pop	r0
    a0cc:	df 91       	pop	r29
    a0ce:	cf 91       	pop	r28
    a0d0:	08 95       	ret

0000a0d2 <prvTaskCheckFreeStackSpace>:
    a0d2:	cf 93       	push	r28
    a0d4:	df 93       	push	r29
    a0d6:	00 d0       	rcall	.+0      	; 0xa0d8 <prvTaskCheckFreeStackSpace+0x6>
    a0d8:	00 d0       	rcall	.+0      	; 0xa0da <prvTaskCheckFreeStackSpace+0x8>
    a0da:	cd b7       	in	r28, 0x3d	; 61
    a0dc:	de b7       	in	r29, 0x3e	; 62
    a0de:	9e 83       	std	Y+6, r25	; 0x06
    a0e0:	8d 83       	std	Y+5, r24	; 0x05
    a0e2:	19 82       	std	Y+1, r1	; 0x01
    a0e4:	1a 82       	std	Y+2, r1	; 0x02
    a0e6:	1b 82       	std	Y+3, r1	; 0x03
    a0e8:	1c 82       	std	Y+4, r1	; 0x04
    a0ea:	10 c0       	rjmp	.+32     	; 0xa10c <prvTaskCheckFreeStackSpace+0x3a>
    a0ec:	8d 81       	ldd	r24, Y+5	; 0x05
    a0ee:	9e 81       	ldd	r25, Y+6	; 0x06
    a0f0:	01 96       	adiw	r24, 0x01	; 1
    a0f2:	9e 83       	std	Y+6, r25	; 0x06
    a0f4:	8d 83       	std	Y+5, r24	; 0x05
    a0f6:	89 81       	ldd	r24, Y+1	; 0x01
    a0f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a0fa:	ab 81       	ldd	r26, Y+3	; 0x03
    a0fc:	bc 81       	ldd	r27, Y+4	; 0x04
    a0fe:	01 96       	adiw	r24, 0x01	; 1
    a100:	a1 1d       	adc	r26, r1
    a102:	b1 1d       	adc	r27, r1
    a104:	89 83       	std	Y+1, r24	; 0x01
    a106:	9a 83       	std	Y+2, r25	; 0x02
    a108:	ab 83       	std	Y+3, r26	; 0x03
    a10a:	bc 83       	std	Y+4, r27	; 0x04
    a10c:	8d 81       	ldd	r24, Y+5	; 0x05
    a10e:	9e 81       	ldd	r25, Y+6	; 0x06
    a110:	fc 01       	movw	r30, r24
    a112:	80 81       	ld	r24, Z
    a114:	85 3a       	cpi	r24, 0xA5	; 165
    a116:	51 f3       	breq	.-44     	; 0xa0ec <prvTaskCheckFreeStackSpace+0x1a>
    a118:	89 81       	ldd	r24, Y+1	; 0x01
    a11a:	9a 81       	ldd	r25, Y+2	; 0x02
    a11c:	26 96       	adiw	r28, 0x06	; 6
    a11e:	0f b6       	in	r0, 0x3f	; 63
    a120:	f8 94       	cli
    a122:	de bf       	out	0x3e, r29	; 62
    a124:	0f be       	out	0x3f, r0	; 63
    a126:	cd bf       	out	0x3d, r28	; 61
    a128:	df 91       	pop	r29
    a12a:	cf 91       	pop	r28
    a12c:	08 95       	ret

0000a12e <uxTaskGetStackHighWaterMark>:
    a12e:	cf 93       	push	r28
    a130:	df 93       	push	r29
    a132:	cd b7       	in	r28, 0x3d	; 61
    a134:	de b7       	in	r29, 0x3e	; 62
    a136:	28 97       	sbiw	r28, 0x08	; 8
    a138:	0f b6       	in	r0, 0x3f	; 63
    a13a:	f8 94       	cli
    a13c:	de bf       	out	0x3e, r29	; 62
    a13e:	0f be       	out	0x3f, r0	; 63
    a140:	cd bf       	out	0x3d, r28	; 61
    a142:	98 87       	std	Y+8, r25	; 0x08
    a144:	8f 83       	std	Y+7, r24	; 0x07
    a146:	8f 81       	ldd	r24, Y+7	; 0x07
    a148:	98 85       	ldd	r25, Y+8	; 0x08
    a14a:	89 2b       	or	r24, r25
    a14c:	29 f4       	brne	.+10     	; 0xa158 <uxTaskGetStackHighWaterMark+0x2a>
    a14e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    a152:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    a156:	02 c0       	rjmp	.+4      	; 0xa15c <uxTaskGetStackHighWaterMark+0x2e>
    a158:	8f 81       	ldd	r24, Y+7	; 0x07
    a15a:	98 85       	ldd	r25, Y+8	; 0x08
    a15c:	9a 83       	std	Y+2, r25	; 0x02
    a15e:	89 83       	std	Y+1, r24	; 0x01
    a160:	89 81       	ldd	r24, Y+1	; 0x01
    a162:	9a 81       	ldd	r25, Y+2	; 0x02
    a164:	fc 01       	movw	r30, r24
    a166:	87 89       	ldd	r24, Z+23	; 0x17
    a168:	90 8d       	ldd	r25, Z+24	; 0x18
    a16a:	9c 83       	std	Y+4, r25	; 0x04
    a16c:	8b 83       	std	Y+3, r24	; 0x03
    a16e:	8b 81       	ldd	r24, Y+3	; 0x03
    a170:	9c 81       	ldd	r25, Y+4	; 0x04
    a172:	af df       	rcall	.-162    	; 0xa0d2 <prvTaskCheckFreeStackSpace>
    a174:	9e 83       	std	Y+6, r25	; 0x06
    a176:	8d 83       	std	Y+5, r24	; 0x05
    a178:	8d 81       	ldd	r24, Y+5	; 0x05
    a17a:	9e 81       	ldd	r25, Y+6	; 0x06
    a17c:	28 96       	adiw	r28, 0x08	; 8
    a17e:	0f b6       	in	r0, 0x3f	; 63
    a180:	f8 94       	cli
    a182:	de bf       	out	0x3e, r29	; 62
    a184:	0f be       	out	0x3f, r0	; 63
    a186:	cd bf       	out	0x3d, r28	; 61
    a188:	df 91       	pop	r29
    a18a:	cf 91       	pop	r28
    a18c:	08 95       	ret

0000a18e <prvDeleteTCB>:
    a18e:	cf 93       	push	r28
    a190:	df 93       	push	r29
    a192:	1f 92       	push	r1
    a194:	1f 92       	push	r1
    a196:	cd b7       	in	r28, 0x3d	; 61
    a198:	de b7       	in	r29, 0x3e	; 62
    a19a:	9a 83       	std	Y+2, r25	; 0x02
    a19c:	89 83       	std	Y+1, r24	; 0x01
    a19e:	89 81       	ldd	r24, Y+1	; 0x01
    a1a0:	9a 81       	ldd	r25, Y+2	; 0x02
    a1a2:	fc 01       	movw	r30, r24
    a1a4:	87 89       	ldd	r24, Z+23	; 0x17
    a1a6:	90 8d       	ldd	r25, Z+24	; 0x18
    a1a8:	07 d7       	rcall	.+3598   	; 0xafb8 <vPortFree>
    a1aa:	89 81       	ldd	r24, Y+1	; 0x01
    a1ac:	9a 81       	ldd	r25, Y+2	; 0x02
    a1ae:	04 d7       	rcall	.+3592   	; 0xafb8 <vPortFree>
    a1b0:	00 00       	nop
    a1b2:	0f 90       	pop	r0
    a1b4:	0f 90       	pop	r0
    a1b6:	df 91       	pop	r29
    a1b8:	cf 91       	pop	r28
    a1ba:	08 95       	ret

0000a1bc <prvResetNextTaskUnblockTime>:
    a1bc:	cf 93       	push	r28
    a1be:	df 93       	push	r29
    a1c0:	1f 92       	push	r1
    a1c2:	1f 92       	push	r1
    a1c4:	cd b7       	in	r28, 0x3d	; 61
    a1c6:	de b7       	in	r29, 0x3e	; 62
    a1c8:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    a1cc:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    a1d0:	fc 01       	movw	r30, r24
    a1d2:	80 81       	ld	r24, Z
    a1d4:	88 23       	and	r24, r24
    a1d6:	39 f4       	brne	.+14     	; 0xa1e6 <prvResetNextTaskUnblockTime+0x2a>
    a1d8:	8f ef       	ldi	r24, 0xFF	; 255
    a1da:	9f ef       	ldi	r25, 0xFF	; 255
    a1dc:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <xNextTaskUnblockTime+0x1>
    a1e0:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <xNextTaskUnblockTime>
    a1e4:	15 c0       	rjmp	.+42     	; 0xa210 <prvResetNextTaskUnblockTime+0x54>
    a1e6:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    a1ea:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    a1ee:	fc 01       	movw	r30, r24
    a1f0:	85 81       	ldd	r24, Z+5	; 0x05
    a1f2:	96 81       	ldd	r25, Z+6	; 0x06
    a1f4:	fc 01       	movw	r30, r24
    a1f6:	86 81       	ldd	r24, Z+6	; 0x06
    a1f8:	97 81       	ldd	r25, Z+7	; 0x07
    a1fa:	9a 83       	std	Y+2, r25	; 0x02
    a1fc:	89 83       	std	Y+1, r24	; 0x01
    a1fe:	89 81       	ldd	r24, Y+1	; 0x01
    a200:	9a 81       	ldd	r25, Y+2	; 0x02
    a202:	fc 01       	movw	r30, r24
    a204:	82 81       	ldd	r24, Z+2	; 0x02
    a206:	93 81       	ldd	r25, Z+3	; 0x03
    a208:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <xNextTaskUnblockTime+0x1>
    a20c:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <xNextTaskUnblockTime>
    a210:	00 00       	nop
    a212:	0f 90       	pop	r0
    a214:	0f 90       	pop	r0
    a216:	df 91       	pop	r29
    a218:	cf 91       	pop	r28
    a21a:	08 95       	ret

0000a21c <xTaskGetSchedulerState>:
    a21c:	cf 93       	push	r28
    a21e:	df 93       	push	r29
    a220:	1f 92       	push	r1
    a222:	cd b7       	in	r28, 0x3d	; 61
    a224:	de b7       	in	r29, 0x3e	; 62
    a226:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <xSchedulerRunning>
    a22a:	88 23       	and	r24, r24
    a22c:	19 f4       	brne	.+6      	; 0xa234 <xTaskGetSchedulerState+0x18>
    a22e:	81 e0       	ldi	r24, 0x01	; 1
    a230:	89 83       	std	Y+1, r24	; 0x01
    a232:	08 c0       	rjmp	.+16     	; 0xa244 <xTaskGetSchedulerState+0x28>
    a234:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <uxSchedulerSuspended>
    a238:	88 23       	and	r24, r24
    a23a:	19 f4       	brne	.+6      	; 0xa242 <xTaskGetSchedulerState+0x26>
    a23c:	82 e0       	ldi	r24, 0x02	; 2
    a23e:	89 83       	std	Y+1, r24	; 0x01
    a240:	01 c0       	rjmp	.+2      	; 0xa244 <xTaskGetSchedulerState+0x28>
    a242:	19 82       	std	Y+1, r1	; 0x01
    a244:	89 81       	ldd	r24, Y+1	; 0x01
    a246:	0f 90       	pop	r0
    a248:	df 91       	pop	r29
    a24a:	cf 91       	pop	r28
    a24c:	08 95       	ret

0000a24e <xTaskPriorityDisinherit>:
    a24e:	cf 93       	push	r28
    a250:	df 93       	push	r29
    a252:	00 d0       	rcall	.+0      	; 0xa254 <xTaskPriorityDisinherit+0x6>
    a254:	1f 92       	push	r1
    a256:	1f 92       	push	r1
    a258:	cd b7       	in	r28, 0x3d	; 61
    a25a:	de b7       	in	r29, 0x3e	; 62
    a25c:	9d 83       	std	Y+5, r25	; 0x05
    a25e:	8c 83       	std	Y+4, r24	; 0x04
    a260:	8c 81       	ldd	r24, Y+4	; 0x04
    a262:	9d 81       	ldd	r25, Y+5	; 0x05
    a264:	9b 83       	std	Y+3, r25	; 0x03
    a266:	8a 83       	std	Y+2, r24	; 0x02
    a268:	19 82       	std	Y+1, r1	; 0x01
    a26a:	8c 81       	ldd	r24, Y+4	; 0x04
    a26c:	9d 81       	ldd	r25, Y+5	; 0x05
    a26e:	89 2b       	or	r24, r25
    a270:	09 f4       	brne	.+2      	; 0xa274 <xTaskPriorityDisinherit+0x26>
    a272:	5f c0       	rjmp	.+190    	; 0xa332 <xTaskPriorityDisinherit+0xe4>
    a274:	8a 81       	ldd	r24, Y+2	; 0x02
    a276:	9b 81       	ldd	r25, Y+3	; 0x03
    a278:	fc 01       	movw	r30, r24
    a27a:	82 a1       	ldd	r24, Z+34	; 0x22
    a27c:	2f ef       	ldi	r18, 0xFF	; 255
    a27e:	28 0f       	add	r18, r24
    a280:	8a 81       	ldd	r24, Y+2	; 0x02
    a282:	9b 81       	ldd	r25, Y+3	; 0x03
    a284:	fc 01       	movw	r30, r24
    a286:	22 a3       	std	Z+34, r18	; 0x22
    a288:	8a 81       	ldd	r24, Y+2	; 0x02
    a28a:	9b 81       	ldd	r25, Y+3	; 0x03
    a28c:	fc 01       	movw	r30, r24
    a28e:	26 89       	ldd	r18, Z+22	; 0x16
    a290:	8a 81       	ldd	r24, Y+2	; 0x02
    a292:	9b 81       	ldd	r25, Y+3	; 0x03
    a294:	fc 01       	movw	r30, r24
    a296:	81 a1       	ldd	r24, Z+33	; 0x21
    a298:	28 17       	cp	r18, r24
    a29a:	09 f4       	brne	.+2      	; 0xa29e <xTaskPriorityDisinherit+0x50>
    a29c:	4a c0       	rjmp	.+148    	; 0xa332 <xTaskPriorityDisinherit+0xe4>
    a29e:	8a 81       	ldd	r24, Y+2	; 0x02
    a2a0:	9b 81       	ldd	r25, Y+3	; 0x03
    a2a2:	fc 01       	movw	r30, r24
    a2a4:	82 a1       	ldd	r24, Z+34	; 0x22
    a2a6:	88 23       	and	r24, r24
    a2a8:	09 f0       	breq	.+2      	; 0xa2ac <xTaskPriorityDisinherit+0x5e>
    a2aa:	43 c0       	rjmp	.+134    	; 0xa332 <xTaskPriorityDisinherit+0xe4>
    a2ac:	8a 81       	ldd	r24, Y+2	; 0x02
    a2ae:	9b 81       	ldd	r25, Y+3	; 0x03
    a2b0:	02 96       	adiw	r24, 0x02	; 2
    a2b2:	ac d7       	rcall	.+3928   	; 0xb20c <uxListRemove>
    a2b4:	8a 81       	ldd	r24, Y+2	; 0x02
    a2b6:	9b 81       	ldd	r25, Y+3	; 0x03
    a2b8:	fc 01       	movw	r30, r24
    a2ba:	21 a1       	ldd	r18, Z+33	; 0x21
    a2bc:	8a 81       	ldd	r24, Y+2	; 0x02
    a2be:	9b 81       	ldd	r25, Y+3	; 0x03
    a2c0:	fc 01       	movw	r30, r24
    a2c2:	26 8b       	std	Z+22, r18	; 0x16
    a2c4:	8a 81       	ldd	r24, Y+2	; 0x02
    a2c6:	9b 81       	ldd	r25, Y+3	; 0x03
    a2c8:	fc 01       	movw	r30, r24
    a2ca:	86 89       	ldd	r24, Z+22	; 0x16
    a2cc:	88 2f       	mov	r24, r24
    a2ce:	90 e0       	ldi	r25, 0x00	; 0
    a2d0:	24 e0       	ldi	r18, 0x04	; 4
    a2d2:	30 e0       	ldi	r19, 0x00	; 0
    a2d4:	28 1b       	sub	r18, r24
    a2d6:	39 0b       	sbc	r19, r25
    a2d8:	8a 81       	ldd	r24, Y+2	; 0x02
    a2da:	9b 81       	ldd	r25, Y+3	; 0x03
    a2dc:	fc 01       	movw	r30, r24
    a2de:	35 87       	std	Z+13, r19	; 0x0d
    a2e0:	24 87       	std	Z+12, r18	; 0x0c
    a2e2:	8a 81       	ldd	r24, Y+2	; 0x02
    a2e4:	9b 81       	ldd	r25, Y+3	; 0x03
    a2e6:	fc 01       	movw	r30, r24
    a2e8:	96 89       	ldd	r25, Z+22	; 0x16
    a2ea:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <uxTopReadyPriority>
    a2ee:	89 17       	cp	r24, r25
    a2f0:	30 f4       	brcc	.+12     	; 0xa2fe <xTaskPriorityDisinherit+0xb0>
    a2f2:	8a 81       	ldd	r24, Y+2	; 0x02
    a2f4:	9b 81       	ldd	r25, Y+3	; 0x03
    a2f6:	fc 01       	movw	r30, r24
    a2f8:	86 89       	ldd	r24, Z+22	; 0x16
    a2fa:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <uxTopReadyPriority>
    a2fe:	8a 81       	ldd	r24, Y+2	; 0x02
    a300:	9b 81       	ldd	r25, Y+3	; 0x03
    a302:	ac 01       	movw	r20, r24
    a304:	4e 5f       	subi	r20, 0xFE	; 254
    a306:	5f 4f       	sbci	r21, 0xFF	; 255
    a308:	8a 81       	ldd	r24, Y+2	; 0x02
    a30a:	9b 81       	ldd	r25, Y+3	; 0x03
    a30c:	fc 01       	movw	r30, r24
    a30e:	86 89       	ldd	r24, Z+22	; 0x16
    a310:	28 2f       	mov	r18, r24
    a312:	30 e0       	ldi	r19, 0x00	; 0
    a314:	c9 01       	movw	r24, r18
    a316:	88 0f       	add	r24, r24
    a318:	99 1f       	adc	r25, r25
    a31a:	88 0f       	add	r24, r24
    a31c:	99 1f       	adc	r25, r25
    a31e:	88 0f       	add	r24, r24
    a320:	99 1f       	adc	r25, r25
    a322:	82 0f       	add	r24, r18
    a324:	93 1f       	adc	r25, r19
    a326:	8b 5e       	subi	r24, 0xEB	; 235
    a328:	9a 4f       	sbci	r25, 0xFA	; 250
    a32a:	ba 01       	movw	r22, r20
    a32c:	a9 d6       	rcall	.+3410   	; 0xb080 <vListInsertEnd>
    a32e:	81 e0       	ldi	r24, 0x01	; 1
    a330:	89 83       	std	Y+1, r24	; 0x01
    a332:	89 81       	ldd	r24, Y+1	; 0x01
    a334:	0f 90       	pop	r0
    a336:	0f 90       	pop	r0
    a338:	0f 90       	pop	r0
    a33a:	0f 90       	pop	r0
    a33c:	0f 90       	pop	r0
    a33e:	df 91       	pop	r29
    a340:	cf 91       	pop	r28
    a342:	08 95       	ret

0000a344 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    a344:	cf 93       	push	r28
    a346:	df 93       	push	r29
    a348:	cd b7       	in	r28, 0x3d	; 61
    a34a:	de b7       	in	r29, 0x3e	; 62
    a34c:	27 97       	sbiw	r28, 0x07	; 7
    a34e:	0f b6       	in	r0, 0x3f	; 63
    a350:	f8 94       	cli
    a352:	de bf       	out	0x3e, r29	; 62
    a354:	0f be       	out	0x3f, r0	; 63
    a356:	cd bf       	out	0x3d, r28	; 61
    a358:	9e 83       	std	Y+6, r25	; 0x06
    a35a:	8d 83       	std	Y+5, r24	; 0x05
    a35c:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    a35e:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <xTickCount>
    a362:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <xTickCount+0x1>
    a366:	9a 83       	std	Y+2, r25	; 0x02
    a368:	89 83       	std	Y+1, r24	; 0x01
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    a36a:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    a36e:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    a372:	02 96       	adiw	r24, 0x02	; 2
    a374:	4b d7       	rcall	.+3734   	; 0xb20c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    a376:	8d 81       	ldd	r24, Y+5	; 0x05
    a378:	9e 81       	ldd	r25, Y+6	; 0x06
    a37a:	01 96       	adiw	r24, 0x01	; 1
    a37c:	69 f4       	brne	.+26     	; 0xa398 <prvAddCurrentTaskToDelayedList+0x54>
    a37e:	8f 81       	ldd	r24, Y+7	; 0x07
    a380:	88 23       	and	r24, r24
    a382:	51 f0       	breq	.+20     	; 0xa398 <prvAddCurrentTaskToDelayedList+0x54>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a384:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    a388:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    a38c:	02 96       	adiw	r24, 0x02	; 2
    a38e:	bc 01       	movw	r22, r24
    a390:	82 e6       	ldi	r24, 0x62	; 98
    a392:	95 e0       	ldi	r25, 0x05	; 5
    a394:	75 d6       	rcall	.+3306   	; 0xb080 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    a396:	42 c0       	rjmp	.+132    	; 0xa41c <prvAddCurrentTaskToDelayedList+0xd8>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    a398:	29 81       	ldd	r18, Y+1	; 0x01
    a39a:	3a 81       	ldd	r19, Y+2	; 0x02
    a39c:	8d 81       	ldd	r24, Y+5	; 0x05
    a39e:	9e 81       	ldd	r25, Y+6	; 0x06
    a3a0:	82 0f       	add	r24, r18
    a3a2:	93 1f       	adc	r25, r19
    a3a4:	9c 83       	std	Y+4, r25	; 0x04
    a3a6:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    a3a8:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    a3ac:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    a3b0:	2b 81       	ldd	r18, Y+3	; 0x03
    a3b2:	3c 81       	ldd	r19, Y+4	; 0x04
    a3b4:	fc 01       	movw	r30, r24
    a3b6:	33 83       	std	Z+3, r19	; 0x03
    a3b8:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    a3ba:	2b 81       	ldd	r18, Y+3	; 0x03
    a3bc:	3c 81       	ldd	r19, Y+4	; 0x04
    a3be:	89 81       	ldd	r24, Y+1	; 0x01
    a3c0:	9a 81       	ldd	r25, Y+2	; 0x02
    a3c2:	28 17       	cp	r18, r24
    a3c4:	39 07       	cpc	r19, r25
    a3c6:	70 f4       	brcc	.+28     	; 0xa3e4 <prvAddCurrentTaskToDelayedList+0xa0>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a3c8:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    a3cc:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    a3d0:	9c 01       	movw	r18, r24
    a3d2:	2e 5f       	subi	r18, 0xFE	; 254
    a3d4:	3f 4f       	sbci	r19, 0xFF	; 255
    a3d6:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <pxOverflowDelayedTaskList>
    a3da:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <pxOverflowDelayedTaskList+0x1>
    a3de:	b9 01       	movw	r22, r18
    a3e0:	9d d6       	rcall	.+3386   	; 0xb11c <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    a3e2:	1c c0       	rjmp	.+56     	; 0xa41c <prvAddCurrentTaskToDelayedList+0xd8>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a3e4:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <pxCurrentTCB>
    a3e8:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    a3ec:	9c 01       	movw	r18, r24
    a3ee:	2e 5f       	subi	r18, 0xFE	; 254
    a3f0:	3f 4f       	sbci	r19, 0xFF	; 255
    a3f2:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    a3f6:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    a3fa:	b9 01       	movw	r22, r18
    a3fc:	8f d6       	rcall	.+3358   	; 0xb11c <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    a3fe:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <xNextTaskUnblockTime>
    a402:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <xNextTaskUnblockTime+0x1>
    a406:	2b 81       	ldd	r18, Y+3	; 0x03
    a408:	3c 81       	ldd	r19, Y+4	; 0x04
    a40a:	28 17       	cp	r18, r24
    a40c:	39 07       	cpc	r19, r25
    a40e:	30 f4       	brcc	.+12     	; 0xa41c <prvAddCurrentTaskToDelayedList+0xd8>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    a410:	8b 81       	ldd	r24, Y+3	; 0x03
    a412:	9c 81       	ldd	r25, Y+4	; 0x04
    a414:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <xNextTaskUnblockTime+0x1>
    a418:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    a41c:	00 00       	nop
    a41e:	27 96       	adiw	r28, 0x07	; 7
    a420:	0f b6       	in	r0, 0x3f	; 63
    a422:	f8 94       	cli
    a424:	de bf       	out	0x3e, r29	; 62
    a426:	0f be       	out	0x3f, r0	; 63
    a428:	cd bf       	out	0x3d, r28	; 61
    a42a:	df 91       	pop	r29
    a42c:	cf 91       	pop	r28
    a42e:	08 95       	ret

0000a430 <xTimerCreateTimerTask>:
    a430:	ef 92       	push	r14
    a432:	ff 92       	push	r15
    a434:	0f 93       	push	r16
    a436:	cf 93       	push	r28
    a438:	df 93       	push	r29
    a43a:	1f 92       	push	r1
    a43c:	cd b7       	in	r28, 0x3d	; 61
    a43e:	de b7       	in	r29, 0x3e	; 62
    a440:	19 82       	std	Y+1, r1	; 0x01
    a442:	97 d3       	rcall	.+1838   	; 0xab72 <prvCheckForValidListAndQueue>
    a444:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    a448:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    a44c:	89 2b       	or	r24, r25
    a44e:	89 f0       	breq	.+34     	; 0xa472 <xTimerCreateTimerTask+0x42>
    a450:	0f 2e       	mov	r0, r31
    a452:	f1 e9       	ldi	r31, 0x91	; 145
    a454:	ef 2e       	mov	r14, r31
    a456:	f5 e0       	ldi	r31, 0x05	; 5
    a458:	ff 2e       	mov	r15, r31
    a45a:	f0 2d       	mov	r31, r0
    a45c:	03 e0       	ldi	r16, 0x03	; 3
    a45e:	20 e0       	ldi	r18, 0x00	; 0
    a460:	30 e0       	ldi	r19, 0x00	; 0
    a462:	45 e5       	ldi	r20, 0x55	; 85
    a464:	50 e0       	ldi	r21, 0x00	; 0
    a466:	6c ec       	ldi	r22, 0xCC	; 204
    a468:	72 e0       	ldi	r23, 0x02	; 2
    a46a:	84 ed       	ldi	r24, 0xD4	; 212
    a46c:	97 e1       	ldi	r25, 0x17	; 23
    a46e:	19 d8       	rcall	.-4046   	; 0x94a2 <xTaskCreate>
    a470:	89 83       	std	Y+1, r24	; 0x01
    a472:	89 81       	ldd	r24, Y+1	; 0x01
    a474:	0f 90       	pop	r0
    a476:	df 91       	pop	r29
    a478:	cf 91       	pop	r28
    a47a:	0f 91       	pop	r16
    a47c:	ff 90       	pop	r15
    a47e:	ef 90       	pop	r14
    a480:	08 95       	ret

0000a482 <xTimerGenericCommand>:
    a482:	0f 93       	push	r16
    a484:	1f 93       	push	r17
    a486:	cf 93       	push	r28
    a488:	df 93       	push	r29
    a48a:	cd b7       	in	r28, 0x3d	; 61
    a48c:	de b7       	in	r29, 0x3e	; 62
    a48e:	2f 97       	sbiw	r28, 0x0f	; 15
    a490:	0f b6       	in	r0, 0x3f	; 63
    a492:	f8 94       	cli
    a494:	de bf       	out	0x3e, r29	; 62
    a496:	0f be       	out	0x3f, r0	; 63
    a498:	cd bf       	out	0x3d, r28	; 61
    a49a:	98 87       	std	Y+8, r25	; 0x08
    a49c:	8f 83       	std	Y+7, r24	; 0x07
    a49e:	69 87       	std	Y+9, r22	; 0x09
    a4a0:	5b 87       	std	Y+11, r21	; 0x0b
    a4a2:	4a 87       	std	Y+10, r20	; 0x0a
    a4a4:	3d 87       	std	Y+13, r19	; 0x0d
    a4a6:	2c 87       	std	Y+12, r18	; 0x0c
    a4a8:	1f 87       	std	Y+15, r17	; 0x0f
    a4aa:	0e 87       	std	Y+14, r16	; 0x0e
    a4ac:	19 82       	std	Y+1, r1	; 0x01
    a4ae:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    a4b2:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    a4b6:	89 2b       	or	r24, r25
    a4b8:	c9 f1       	breq	.+114    	; 0xa52c <xTimerGenericCommand+0xaa>
    a4ba:	89 85       	ldd	r24, Y+9	; 0x09
    a4bc:	8a 83       	std	Y+2, r24	; 0x02
    a4be:	8a 85       	ldd	r24, Y+10	; 0x0a
    a4c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    a4c2:	9c 83       	std	Y+4, r25	; 0x04
    a4c4:	8b 83       	std	Y+3, r24	; 0x03
    a4c6:	8f 81       	ldd	r24, Y+7	; 0x07
    a4c8:	98 85       	ldd	r25, Y+8	; 0x08
    a4ca:	9e 83       	std	Y+6, r25	; 0x06
    a4cc:	8d 83       	std	Y+5, r24	; 0x05
    a4ce:	89 85       	ldd	r24, Y+9	; 0x09
    a4d0:	86 30       	cpi	r24, 0x06	; 6
    a4d2:	fc f4       	brge	.+62     	; 0xa512 <xTimerGenericCommand+0x90>
    a4d4:	a3 de       	rcall	.-698    	; 0xa21c <xTaskGetSchedulerState>
    a4d6:	82 30       	cpi	r24, 0x02	; 2
    a4d8:	71 f4       	brne	.+28     	; 0xa4f6 <xTimerGenericCommand+0x74>
    a4da:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    a4de:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    a4e2:	4e 85       	ldd	r20, Y+14	; 0x0e
    a4e4:	5f 85       	ldd	r21, Y+15	; 0x0f
    a4e6:	be 01       	movw	r22, r28
    a4e8:	6e 5f       	subi	r22, 0xFE	; 254
    a4ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a4ec:	20 e0       	ldi	r18, 0x00	; 0
    a4ee:	0e 94 64 5d 	call	0xbac8	; 0xbac8 <xQueueGenericSend>
    a4f2:	89 83       	std	Y+1, r24	; 0x01
    a4f4:	1b c0       	rjmp	.+54     	; 0xa52c <xTimerGenericCommand+0xaa>
    a4f6:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    a4fa:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    a4fe:	be 01       	movw	r22, r28
    a500:	6e 5f       	subi	r22, 0xFE	; 254
    a502:	7f 4f       	sbci	r23, 0xFF	; 255
    a504:	20 e0       	ldi	r18, 0x00	; 0
    a506:	40 e0       	ldi	r20, 0x00	; 0
    a508:	50 e0       	ldi	r21, 0x00	; 0
    a50a:	0e 94 64 5d 	call	0xbac8	; 0xbac8 <xQueueGenericSend>
    a50e:	89 83       	std	Y+1, r24	; 0x01
    a510:	0d c0       	rjmp	.+26     	; 0xa52c <xTimerGenericCommand+0xaa>
    a512:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    a516:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    a51a:	4c 85       	ldd	r20, Y+12	; 0x0c
    a51c:	5d 85       	ldd	r21, Y+13	; 0x0d
    a51e:	be 01       	movw	r22, r28
    a520:	6e 5f       	subi	r22, 0xFE	; 254
    a522:	7f 4f       	sbci	r23, 0xFF	; 255
    a524:	20 e0       	ldi	r18, 0x00	; 0
    a526:	0e 94 0d 5e 	call	0xbc1a	; 0xbc1a <xQueueGenericSendFromISR>
    a52a:	89 83       	std	Y+1, r24	; 0x01
    a52c:	89 81       	ldd	r24, Y+1	; 0x01
    a52e:	2f 96       	adiw	r28, 0x0f	; 15
    a530:	0f b6       	in	r0, 0x3f	; 63
    a532:	f8 94       	cli
    a534:	de bf       	out	0x3e, r29	; 62
    a536:	0f be       	out	0x3f, r0	; 63
    a538:	cd bf       	out	0x3d, r28	; 61
    a53a:	df 91       	pop	r29
    a53c:	cf 91       	pop	r28
    a53e:	1f 91       	pop	r17
    a540:	0f 91       	pop	r16
    a542:	08 95       	ret

0000a544 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    a544:	0f 93       	push	r16
    a546:	1f 93       	push	r17
    a548:	cf 93       	push	r28
    a54a:	df 93       	push	r29
    a54c:	cd b7       	in	r28, 0x3d	; 61
    a54e:	de b7       	in	r29, 0x3e	; 62
    a550:	27 97       	sbiw	r28, 0x07	; 7
    a552:	0f b6       	in	r0, 0x3f	; 63
    a554:	f8 94       	cli
    a556:	de bf       	out	0x3e, r29	; 62
    a558:	0f be       	out	0x3f, r0	; 63
    a55a:	cd bf       	out	0x3d, r28	; 61
    a55c:	9d 83       	std	Y+5, r25	; 0x05
    a55e:	8c 83       	std	Y+4, r24	; 0x04
    a560:	7f 83       	std	Y+7, r23	; 0x07
    a562:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    a564:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    a568:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    a56c:	fc 01       	movw	r30, r24
    a56e:	85 81       	ldd	r24, Z+5	; 0x05
    a570:	96 81       	ldd	r25, Z+6	; 0x06
    a572:	fc 01       	movw	r30, r24
    a574:	86 81       	ldd	r24, Z+6	; 0x06
    a576:	97 81       	ldd	r25, Z+7	; 0x07
    a578:	9a 83       	std	Y+2, r25	; 0x02
    a57a:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a57c:	89 81       	ldd	r24, Y+1	; 0x01
    a57e:	9a 81       	ldd	r25, Y+2	; 0x02
    a580:	02 96       	adiw	r24, 0x02	; 2
    a582:	44 d6       	rcall	.+3208   	; 0xb20c <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    a584:	89 81       	ldd	r24, Y+1	; 0x01
    a586:	9a 81       	ldd	r25, Y+2	; 0x02
    a588:	fc 01       	movw	r30, r24
    a58a:	82 89       	ldd	r24, Z+18	; 0x12
    a58c:	88 2f       	mov	r24, r24
    a58e:	90 e0       	ldi	r25, 0x00	; 0
    a590:	84 70       	andi	r24, 0x04	; 4
    a592:	99 27       	eor	r25, r25
    a594:	89 2b       	or	r24, r25
    a596:	f9 f0       	breq	.+62     	; 0xa5d6 <prvProcessExpiredTimer+0x92>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    a598:	89 81       	ldd	r24, Y+1	; 0x01
    a59a:	9a 81       	ldd	r25, Y+2	; 0x02
    a59c:	fc 01       	movw	r30, r24
    a59e:	24 85       	ldd	r18, Z+12	; 0x0c
    a5a0:	35 85       	ldd	r19, Z+13	; 0x0d
    a5a2:	8c 81       	ldd	r24, Y+4	; 0x04
    a5a4:	9d 81       	ldd	r25, Y+5	; 0x05
    a5a6:	b9 01       	movw	r22, r18
    a5a8:	68 0f       	add	r22, r24
    a5aa:	79 1f       	adc	r23, r25
    a5ac:	2c 81       	ldd	r18, Y+4	; 0x04
    a5ae:	3d 81       	ldd	r19, Y+5	; 0x05
    a5b0:	4e 81       	ldd	r20, Y+6	; 0x06
    a5b2:	5f 81       	ldd	r21, Y+7	; 0x07
    a5b4:	89 81       	ldd	r24, Y+1	; 0x01
    a5b6:	9a 81       	ldd	r25, Y+2	; 0x02
    a5b8:	e1 d0       	rcall	.+450    	; 0xa77c <prvInsertTimerInActiveList>
    a5ba:	88 23       	and	r24, r24
    a5bc:	b1 f0       	breq	.+44     	; 0xa5ea <prvProcessExpiredTimer+0xa6>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    a5be:	4c 81       	ldd	r20, Y+4	; 0x04
    a5c0:	5d 81       	ldd	r21, Y+5	; 0x05
    a5c2:	89 81       	ldd	r24, Y+1	; 0x01
    a5c4:	9a 81       	ldd	r25, Y+2	; 0x02
    a5c6:	00 e0       	ldi	r16, 0x00	; 0
    a5c8:	10 e0       	ldi	r17, 0x00	; 0
    a5ca:	20 e0       	ldi	r18, 0x00	; 0
    a5cc:	30 e0       	ldi	r19, 0x00	; 0
    a5ce:	60 e0       	ldi	r22, 0x00	; 0
    a5d0:	58 df       	rcall	.-336    	; 0xa482 <xTimerGenericCommand>
    a5d2:	8b 83       	std	Y+3, r24	; 0x03
    a5d4:	0a c0       	rjmp	.+20     	; 0xa5ea <prvProcessExpiredTimer+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    a5d6:	89 81       	ldd	r24, Y+1	; 0x01
    a5d8:	9a 81       	ldd	r25, Y+2	; 0x02
    a5da:	fc 01       	movw	r30, r24
    a5dc:	82 89       	ldd	r24, Z+18	; 0x12
    a5de:	28 2f       	mov	r18, r24
    a5e0:	2e 7f       	andi	r18, 0xFE	; 254
    a5e2:	89 81       	ldd	r24, Y+1	; 0x01
    a5e4:	9a 81       	ldd	r25, Y+2	; 0x02
    a5e6:	fc 01       	movw	r30, r24
    a5e8:	22 8b       	std	Z+18, r18	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a5ea:	89 81       	ldd	r24, Y+1	; 0x01
    a5ec:	9a 81       	ldd	r25, Y+2	; 0x02
    a5ee:	fc 01       	movw	r30, r24
    a5f0:	20 89       	ldd	r18, Z+16	; 0x10
    a5f2:	31 89       	ldd	r19, Z+17	; 0x11
    a5f4:	89 81       	ldd	r24, Y+1	; 0x01
    a5f6:	9a 81       	ldd	r25, Y+2	; 0x02
    a5f8:	f9 01       	movw	r30, r18
    a5fa:	19 95       	eicall
}
    a5fc:	00 00       	nop
    a5fe:	27 96       	adiw	r28, 0x07	; 7
    a600:	0f b6       	in	r0, 0x3f	; 63
    a602:	f8 94       	cli
    a604:	de bf       	out	0x3e, r29	; 62
    a606:	0f be       	out	0x3f, r0	; 63
    a608:	cd bf       	out	0x3d, r28	; 61
    a60a:	df 91       	pop	r29
    a60c:	cf 91       	pop	r28
    a60e:	1f 91       	pop	r17
    a610:	0f 91       	pop	r16
    a612:	08 95       	ret

0000a614 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    a614:	cf 93       	push	r28
    a616:	df 93       	push	r29
    a618:	00 d0       	rcall	.+0      	; 0xa61a <prvProcessTimerOrBlockTask+0x6>
    a61a:	00 d0       	rcall	.+0      	; 0xa61c <prvProcessTimerOrBlockTask+0x8>
    a61c:	cd b7       	in	r28, 0x3d	; 61
    a61e:	de b7       	in	r29, 0x3e	; 62
    a620:	9d 83       	std	Y+5, r25	; 0x05
    a622:	8c 83       	std	Y+4, r24	; 0x04
    a624:	6e 83       	std	Y+6, r22	; 0x06
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    a626:	5b d9       	rcall	.-3402   	; 0x98de <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a628:	ce 01       	movw	r24, r28
    a62a:	03 96       	adiw	r24, 0x03	; 3
    a62c:	79 d0       	rcall	.+242    	; 0xa720 <prvSampleTimeNow>
    a62e:	9a 83       	std	Y+2, r25	; 0x02
    a630:	89 83       	std	Y+1, r24	; 0x01
        if( xTimerListsWereSwitched == pdFALSE )
    a632:	8b 81       	ldd	r24, Y+3	; 0x03
    a634:	88 23       	and	r24, r24
    a636:	a1 f5       	brne	.+104    	; 0xa6a0 <prvProcessTimerOrBlockTask+0x8c>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    a638:	8e 81       	ldd	r24, Y+6	; 0x06
    a63a:	88 23       	and	r24, r24
    a63c:	79 f4       	brne	.+30     	; 0xa65c <prvProcessTimerOrBlockTask+0x48>
    a63e:	2c 81       	ldd	r18, Y+4	; 0x04
    a640:	3d 81       	ldd	r19, Y+5	; 0x05
    a642:	89 81       	ldd	r24, Y+1	; 0x01
    a644:	9a 81       	ldd	r25, Y+2	; 0x02
    a646:	82 17       	cp	r24, r18
    a648:	93 07       	cpc	r25, r19
            {
                ( void ) xTaskResumeAll();
    a64a:	40 f0       	brcs	.+16     	; 0xa65c <prvProcessTimerOrBlockTask+0x48>
    a64c:	55 d9       	rcall	.-3414   	; 0x98f8 <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    a64e:	29 81       	ldd	r18, Y+1	; 0x01
    a650:	3a 81       	ldd	r19, Y+2	; 0x02
    a652:	8c 81       	ldd	r24, Y+4	; 0x04
    a654:	9d 81       	ldd	r25, Y+5	; 0x05
    a656:	b9 01       	movw	r22, r18
    a658:	75 df       	rcall	.-278    	; 0xa544 <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    a65a:	23 c0       	rjmp	.+70     	; 0xa6a2 <prvProcessTimerOrBlockTask+0x8e>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    a65c:	8e 81       	ldd	r24, Y+6	; 0x06
    a65e:	88 23       	and	r24, r24
    a660:	59 f0       	breq	.+22     	; 0xa678 <prvProcessTimerOrBlockTask+0x64>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    a662:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <pxOverflowTimerList>
    a666:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <pxOverflowTimerList+0x1>
    a66a:	fc 01       	movw	r30, r24
    a66c:	90 81       	ld	r25, Z
    a66e:	81 e0       	ldi	r24, 0x01	; 1
    a670:	99 23       	and	r25, r25
    a672:	09 f0       	breq	.+2      	; 0xa676 <prvProcessTimerOrBlockTask+0x62>
    a674:	80 e0       	ldi	r24, 0x00	; 0
    a676:	8e 83       	std	Y+6, r24	; 0x06
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    a678:	2c 81       	ldd	r18, Y+4	; 0x04
    a67a:	3d 81       	ldd	r19, Y+5	; 0x05
    a67c:	89 81       	ldd	r24, Y+1	; 0x01
    a67e:	9a 81       	ldd	r25, Y+2	; 0x02
    a680:	28 1b       	sub	r18, r24
    a682:	39 0b       	sbc	r19, r25
    a684:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    a688:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    a68c:	4e 81       	ldd	r20, Y+6	; 0x06
    a68e:	b9 01       	movw	r22, r18
    a690:	0e 94 ce 60 	call	0xc19c	; 0xc19c <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    a694:	31 d9       	rcall	.-3486   	; 0x98f8 <xTaskResumeAll>
    a696:	88 23       	and	r24, r24
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    a698:	21 f4       	brne	.+8      	; 0xa6a2 <prvProcessTimerOrBlockTask+0x8e>
    a69a:	0e 94 59 5b 	call	0xb6b2	; 0xb6b2 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    a69e:	01 c0       	rjmp	.+2      	; 0xa6a2 <prvProcessTimerOrBlockTask+0x8e>
    a6a0:	2b d9       	rcall	.-3498   	; 0x98f8 <xTaskResumeAll>
        }
    }
}
    a6a2:	00 00       	nop
    a6a4:	26 96       	adiw	r28, 0x06	; 6
    a6a6:	0f b6       	in	r0, 0x3f	; 63
    a6a8:	f8 94       	cli
    a6aa:	de bf       	out	0x3e, r29	; 62
    a6ac:	0f be       	out	0x3f, r0	; 63
    a6ae:	cd bf       	out	0x3d, r28	; 61
    a6b0:	df 91       	pop	r29
    a6b2:	cf 91       	pop	r28
    a6b4:	08 95       	ret

0000a6b6 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    a6b6:	cf 93       	push	r28
    a6b8:	df 93       	push	r29
    a6ba:	00 d0       	rcall	.+0      	; 0xa6bc <prvGetNextExpireTime+0x6>
    a6bc:	1f 92       	push	r1
    a6be:	cd b7       	in	r28, 0x3d	; 61
    a6c0:	de b7       	in	r29, 0x3e	; 62
    a6c2:	9c 83       	std	Y+4, r25	; 0x04
    a6c4:	8b 83       	std	Y+3, r24	; 0x03
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    a6c6:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    a6ca:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    a6ce:	fc 01       	movw	r30, r24
    a6d0:	90 81       	ld	r25, Z
    a6d2:	81 e0       	ldi	r24, 0x01	; 1
    a6d4:	99 23       	and	r25, r25
    a6d6:	09 f0       	breq	.+2      	; 0xa6da <prvGetNextExpireTime+0x24>
    a6d8:	80 e0       	ldi	r24, 0x00	; 0
    a6da:	28 2f       	mov	r18, r24
    a6dc:	8b 81       	ldd	r24, Y+3	; 0x03
    a6de:	9c 81       	ldd	r25, Y+4	; 0x04
    a6e0:	fc 01       	movw	r30, r24
    a6e2:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    a6e4:	8b 81       	ldd	r24, Y+3	; 0x03
    a6e6:	9c 81       	ldd	r25, Y+4	; 0x04
    a6e8:	fc 01       	movw	r30, r24
    a6ea:	80 81       	ld	r24, Z
    a6ec:	88 23       	and	r24, r24
    a6ee:	69 f4       	brne	.+26     	; 0xa70a <prvGetNextExpireTime+0x54>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    a6f0:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    a6f4:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    a6f8:	fc 01       	movw	r30, r24
    a6fa:	85 81       	ldd	r24, Z+5	; 0x05
    a6fc:	96 81       	ldd	r25, Z+6	; 0x06
    a6fe:	fc 01       	movw	r30, r24
    a700:	80 81       	ld	r24, Z
    a702:	91 81       	ldd	r25, Z+1	; 0x01
    a704:	9a 83       	std	Y+2, r25	; 0x02
    a706:	89 83       	std	Y+1, r24	; 0x01
    a708:	02 c0       	rjmp	.+4      	; 0xa70e <prvGetNextExpireTime+0x58>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    a70a:	1a 82       	std	Y+2, r1	; 0x02
    a70c:	19 82       	std	Y+1, r1	; 0x01
    }

    return xNextExpireTime;
    a70e:	89 81       	ldd	r24, Y+1	; 0x01
    a710:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a712:	0f 90       	pop	r0
    a714:	0f 90       	pop	r0
    a716:	0f 90       	pop	r0
    a718:	0f 90       	pop	r0
    a71a:	df 91       	pop	r29
    a71c:	cf 91       	pop	r28
    a71e:	08 95       	ret

0000a720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    a720:	cf 93       	push	r28
    a722:	df 93       	push	r29
    a724:	00 d0       	rcall	.+0      	; 0xa726 <prvSampleTimeNow+0x6>
    a726:	1f 92       	push	r1
    a728:	cd b7       	in	r28, 0x3d	; 61
    a72a:	de b7       	in	r29, 0x3e	; 62
    a72c:	9c 83       	std	Y+4, r25	; 0x04
    a72e:	8b 83       	std	Y+3, r24	; 0x03
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    a730:	78 d9       	rcall	.-3344   	; 0x9a22 <xTaskGetTickCount>
    a732:	9a 83       	std	Y+2, r25	; 0x02
    a734:	89 83       	std	Y+1, r24	; 0x01

    if( xTimeNow < xLastTime )
    a736:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <xLastTime.2412>
    a73a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <xLastTime.2412+0x1>
    a73e:	29 81       	ldd	r18, Y+1	; 0x01
    a740:	3a 81       	ldd	r19, Y+2	; 0x02
    a742:	28 17       	cp	r18, r24
    a744:	39 07       	cpc	r19, r25
    {
        prvSwitchTimerLists();
    a746:	38 f4       	brcc	.+14     	; 0xa756 <prvSampleTimeNow+0x36>
    a748:	78 d1       	rcall	.+752    	; 0xaa3a <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    a74a:	8b 81       	ldd	r24, Y+3	; 0x03
    a74c:	9c 81       	ldd	r25, Y+4	; 0x04
    a74e:	21 e0       	ldi	r18, 0x01	; 1
    a750:	fc 01       	movw	r30, r24
    a752:	20 83       	st	Z, r18
    a754:	04 c0       	rjmp	.+8      	; 0xa75e <prvSampleTimeNow+0x3e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    a756:	8b 81       	ldd	r24, Y+3	; 0x03
    a758:	9c 81       	ldd	r25, Y+4	; 0x04
    a75a:	fc 01       	movw	r30, r24
    a75c:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    a75e:	89 81       	ldd	r24, Y+1	; 0x01
    a760:	9a 81       	ldd	r25, Y+2	; 0x02
    a762:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <xLastTime.2412+0x1>
    a766:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <xLastTime.2412>

    return xTimeNow;
    a76a:	89 81       	ldd	r24, Y+1	; 0x01
    a76c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a76e:	0f 90       	pop	r0
    a770:	0f 90       	pop	r0
    a772:	0f 90       	pop	r0
    a774:	0f 90       	pop	r0
    a776:	df 91       	pop	r29
    a778:	cf 91       	pop	r28
    a77a:	08 95       	ret

0000a77c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    a77c:	cf 93       	push	r28
    a77e:	df 93       	push	r29
    a780:	cd b7       	in	r28, 0x3d	; 61
    a782:	de b7       	in	r29, 0x3e	; 62
    a784:	29 97       	sbiw	r28, 0x09	; 9
    a786:	0f b6       	in	r0, 0x3f	; 63
    a788:	f8 94       	cli
    a78a:	de bf       	out	0x3e, r29	; 62
    a78c:	0f be       	out	0x3f, r0	; 63
    a78e:	cd bf       	out	0x3d, r28	; 61
    a790:	9b 83       	std	Y+3, r25	; 0x03
    a792:	8a 83       	std	Y+2, r24	; 0x02
    a794:	7d 83       	std	Y+5, r23	; 0x05
    a796:	6c 83       	std	Y+4, r22	; 0x04
    a798:	5f 83       	std	Y+7, r21	; 0x07
    a79a:	4e 83       	std	Y+6, r20	; 0x06
    a79c:	39 87       	std	Y+9, r19	; 0x09
    a79e:	28 87       	std	Y+8, r18	; 0x08
BaseType_t xProcessTimerNow = pdFALSE;
    a7a0:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    a7a2:	8a 81       	ldd	r24, Y+2	; 0x02
    a7a4:	9b 81       	ldd	r25, Y+3	; 0x03
    a7a6:	2c 81       	ldd	r18, Y+4	; 0x04
    a7a8:	3d 81       	ldd	r19, Y+5	; 0x05
    a7aa:	fc 01       	movw	r30, r24
    a7ac:	33 83       	std	Z+3, r19	; 0x03
    a7ae:	22 83       	std	Z+2, r18	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    a7b0:	8a 81       	ldd	r24, Y+2	; 0x02
    a7b2:	9b 81       	ldd	r25, Y+3	; 0x03
    a7b4:	2a 81       	ldd	r18, Y+2	; 0x02
    a7b6:	3b 81       	ldd	r19, Y+3	; 0x03
    a7b8:	fc 01       	movw	r30, r24
    a7ba:	31 87       	std	Z+9, r19	; 0x09
    a7bc:	20 87       	std	Z+8, r18	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    a7be:	2c 81       	ldd	r18, Y+4	; 0x04
    a7c0:	3d 81       	ldd	r19, Y+5	; 0x05
    a7c2:	8e 81       	ldd	r24, Y+6	; 0x06
    a7c4:	9f 81       	ldd	r25, Y+7	; 0x07
    a7c6:	82 17       	cp	r24, r18
    a7c8:	93 07       	cpc	r25, r19
    a7ca:	e8 f0       	brcs	.+58     	; 0xa806 <prvInsertTimerInActiveList+0x8a>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a7cc:	2e 81       	ldd	r18, Y+6	; 0x06
    a7ce:	3f 81       	ldd	r19, Y+7	; 0x07
    a7d0:	88 85       	ldd	r24, Y+8	; 0x08
    a7d2:	99 85       	ldd	r25, Y+9	; 0x09
    a7d4:	28 1b       	sub	r18, r24
    a7d6:	39 0b       	sbc	r19, r25
    a7d8:	8a 81       	ldd	r24, Y+2	; 0x02
    a7da:	9b 81       	ldd	r25, Y+3	; 0x03
    a7dc:	fc 01       	movw	r30, r24
    a7de:	84 85       	ldd	r24, Z+12	; 0x0c
    a7e0:	95 85       	ldd	r25, Z+13	; 0x0d
    a7e2:	28 17       	cp	r18, r24
    a7e4:	39 07       	cpc	r19, r25
    a7e6:	18 f0       	brcs	.+6      	; 0xa7ee <prvInsertTimerInActiveList+0x72>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    a7e8:	81 e0       	ldi	r24, 0x01	; 1
    a7ea:	89 83       	std	Y+1, r24	; 0x01
    a7ec:	28 c0       	rjmp	.+80     	; 0xa83e <prvInsertTimerInActiveList+0xc2>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    a7ee:	8a 81       	ldd	r24, Y+2	; 0x02
    a7f0:	9b 81       	ldd	r25, Y+3	; 0x03
    a7f2:	9c 01       	movw	r18, r24
    a7f4:	2e 5f       	subi	r18, 0xFE	; 254
    a7f6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7f8:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <pxOverflowTimerList>
    a7fc:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <pxOverflowTimerList+0x1>
    a800:	b9 01       	movw	r22, r18
    a802:	8c d4       	rcall	.+2328   	; 0xb11c <vListInsert>
    a804:	1c c0       	rjmp	.+56     	; 0xa83e <prvInsertTimerInActiveList+0xc2>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    a806:	2e 81       	ldd	r18, Y+6	; 0x06
    a808:	3f 81       	ldd	r19, Y+7	; 0x07
    a80a:	88 85       	ldd	r24, Y+8	; 0x08
    a80c:	99 85       	ldd	r25, Y+9	; 0x09
    a80e:	28 17       	cp	r18, r24
    a810:	39 07       	cpc	r19, r25
    a812:	50 f4       	brcc	.+20     	; 0xa828 <prvInsertTimerInActiveList+0xac>
    a814:	2c 81       	ldd	r18, Y+4	; 0x04
    a816:	3d 81       	ldd	r19, Y+5	; 0x05
    a818:	88 85       	ldd	r24, Y+8	; 0x08
    a81a:	99 85       	ldd	r25, Y+9	; 0x09
    a81c:	28 17       	cp	r18, r24
    a81e:	39 07       	cpc	r19, r25
    a820:	18 f0       	brcs	.+6      	; 0xa828 <prvInsertTimerInActiveList+0xac>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    a822:	81 e0       	ldi	r24, 0x01	; 1
    a824:	89 83       	std	Y+1, r24	; 0x01
    a826:	0b c0       	rjmp	.+22     	; 0xa83e <prvInsertTimerInActiveList+0xc2>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    a828:	8a 81       	ldd	r24, Y+2	; 0x02
    a82a:	9b 81       	ldd	r25, Y+3	; 0x03
    a82c:	9c 01       	movw	r18, r24
    a82e:	2e 5f       	subi	r18, 0xFE	; 254
    a830:	3f 4f       	sbci	r19, 0xFF	; 255
    a832:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    a836:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    a83a:	b9 01       	movw	r22, r18
    a83c:	6f d4       	rcall	.+2270   	; 0xb11c <vListInsert>
        }
    }

    return xProcessTimerNow;
    a83e:	89 81       	ldd	r24, Y+1	; 0x01
}
    a840:	29 96       	adiw	r28, 0x09	; 9
    a842:	0f b6       	in	r0, 0x3f	; 63
    a844:	f8 94       	cli
    a846:	de bf       	out	0x3e, r29	; 62
    a848:	0f be       	out	0x3f, r0	; 63
    a84a:	cd bf       	out	0x3d, r28	; 61
    a84c:	df 91       	pop	r29
    a84e:	cf 91       	pop	r28
    a850:	08 95       	ret

0000a852 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    a852:	0f 93       	push	r16
    a854:	1f 93       	push	r17
    a856:	cf 93       	push	r28
    a858:	df 93       	push	r29
    a85a:	cd b7       	in	r28, 0x3d	; 61
    a85c:	de b7       	in	r29, 0x3e	; 62
    a85e:	2b 97       	sbiw	r28, 0x0b	; 11
    a860:	0f b6       	in	r0, 0x3f	; 63
    a862:	f8 94       	cli
    a864:	de bf       	out	0x3e, r29	; 62
    a866:	0f be       	out	0x3f, r0	; 63
    a868:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    a86a:	cc c0       	rjmp	.+408    	; 0xaa04 <prvProcessReceivedCommands+0x1b2>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    a86c:	8e 81       	ldd	r24, Y+6	; 0x06
    a86e:	88 23       	and	r24, r24
    a870:	0c f4       	brge	.+2      	; 0xa874 <prvProcessReceivedCommands+0x22>
    a872:	c8 c0       	rjmp	.+400    	; 0xaa04 <prvProcessReceivedCommands+0x1b2>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    a874:	89 85       	ldd	r24, Y+9	; 0x09
    a876:	9a 85       	ldd	r25, Y+10	; 0x0a
    a878:	9a 83       	std	Y+2, r25	; 0x02
    a87a:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    a87c:	89 81       	ldd	r24, Y+1	; 0x01
    a87e:	9a 81       	ldd	r25, Y+2	; 0x02
    a880:	dc 01       	movw	r26, r24
    a882:	1a 96       	adiw	r26, 0x0a	; 10
    a884:	8d 91       	ld	r24, X+
    a886:	9c 91       	ld	r25, X
    a888:	1b 97       	sbiw	r26, 0x0b	; 11
    a88a:	89 2b       	or	r24, r25
    a88c:	21 f0       	breq	.+8      	; 0xa896 <prvProcessReceivedCommands+0x44>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a88e:	89 81       	ldd	r24, Y+1	; 0x01
    a890:	9a 81       	ldd	r25, Y+2	; 0x02
    a892:	02 96       	adiw	r24, 0x02	; 2
    a894:	bb d4       	rcall	.+2422   	; 0xb20c <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a896:	ce 01       	movw	r24, r28
    a898:	0b 96       	adiw	r24, 0x0b	; 11
    a89a:	42 df       	rcall	.-380    	; 0xa720 <prvSampleTimeNow>
    a89c:	9c 83       	std	Y+4, r25	; 0x04
    a89e:	8b 83       	std	Y+3, r24	; 0x03

            switch( xMessage.xMessageID )
    a8a0:	8e 81       	ldd	r24, Y+6	; 0x06
    a8a2:	08 2e       	mov	r0, r24
    a8a4:	00 0c       	add	r0, r0
    a8a6:	99 0b       	sbc	r25, r25
    a8a8:	09 2e       	mov	r0, r25
    a8aa:	00 0c       	add	r0, r0
    a8ac:	aa 0b       	sbc	r26, r26
    a8ae:	bb 0b       	sbc	r27, r27
    a8b0:	40 e0       	ldi	r20, 0x00	; 0
    a8b2:	50 e0       	ldi	r21, 0x00	; 0
    a8b4:	29 e0       	ldi	r18, 0x09	; 9
    a8b6:	30 e0       	ldi	r19, 0x00	; 0
    a8b8:	84 1b       	sub	r24, r20
    a8ba:	95 0b       	sbc	r25, r21
    a8bc:	28 17       	cp	r18, r24
    a8be:	39 07       	cpc	r19, r25
    a8c0:	08 f4       	brcc	.+2      	; 0xa8c4 <prvProcessReceivedCommands+0x72>
    a8c2:	9f c0       	rjmp	.+318    	; 0xaa02 <prvProcessReceivedCommands+0x1b0>
    a8c4:	fc 01       	movw	r30, r24
    a8c6:	88 27       	eor	r24, r24
    a8c8:	e4 57       	subi	r30, 0x74	; 116
    a8ca:	ff 4f       	sbci	r31, 0xFF	; 255
    a8cc:	8f 4f       	sbci	r24, 0xFF	; 255
    a8ce:	0c 94 6c 61 	jmp	0xc2d8	; 0xc2d8 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    a8d2:	89 81       	ldd	r24, Y+1	; 0x01
    a8d4:	9a 81       	ldd	r25, Y+2	; 0x02
    a8d6:	fc 01       	movw	r30, r24
    a8d8:	82 89       	ldd	r24, Z+18	; 0x12
    a8da:	28 2f       	mov	r18, r24
    a8dc:	21 60       	ori	r18, 0x01	; 1
    a8de:	89 81       	ldd	r24, Y+1	; 0x01
    a8e0:	9a 81       	ldd	r25, Y+2	; 0x02
    a8e2:	dc 01       	movw	r26, r24
    a8e4:	52 96       	adiw	r26, 0x12	; 18
    a8e6:	2c 93       	st	X, r18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    a8e8:	ef 81       	ldd	r30, Y+7	; 0x07
    a8ea:	f8 85       	ldd	r31, Y+8	; 0x08
    a8ec:	2f 81       	ldd	r18, Y+7	; 0x07
    a8ee:	38 85       	ldd	r19, Y+8	; 0x08
    a8f0:	89 81       	ldd	r24, Y+1	; 0x01
    a8f2:	9a 81       	ldd	r25, Y+2	; 0x02
    a8f4:	dc 01       	movw	r26, r24
    a8f6:	1c 96       	adiw	r26, 0x0c	; 12
    a8f8:	8d 91       	ld	r24, X+
    a8fa:	9c 91       	ld	r25, X
    a8fc:	1d 97       	sbiw	r26, 0x0d	; 13
    a8fe:	b9 01       	movw	r22, r18
    a900:	68 0f       	add	r22, r24
    a902:	79 1f       	adc	r23, r25
    a904:	4b 81       	ldd	r20, Y+3	; 0x03
    a906:	5c 81       	ldd	r21, Y+4	; 0x04
    a908:	89 81       	ldd	r24, Y+1	; 0x01
    a90a:	9a 81       	ldd	r25, Y+2	; 0x02
    a90c:	9f 01       	movw	r18, r30
    a90e:	36 df       	rcall	.-404    	; 0xa77c <prvInsertTimerInActiveList>
    a910:	88 23       	and	r24, r24
    a912:	09 f4       	brne	.+2      	; 0xa916 <prvProcessReceivedCommands+0xc4>
    a914:	77 c0       	rjmp	.+238    	; 0xaa04 <prvProcessReceivedCommands+0x1b2>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a916:	89 81       	ldd	r24, Y+1	; 0x01
    a918:	9a 81       	ldd	r25, Y+2	; 0x02
    a91a:	fc 01       	movw	r30, r24
    a91c:	20 89       	ldd	r18, Z+16	; 0x10
    a91e:	31 89       	ldd	r19, Z+17	; 0x11
    a920:	89 81       	ldd	r24, Y+1	; 0x01
    a922:	9a 81       	ldd	r25, Y+2	; 0x02
    a924:	f9 01       	movw	r30, r18
    a926:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    a928:	89 81       	ldd	r24, Y+1	; 0x01
    a92a:	9a 81       	ldd	r25, Y+2	; 0x02
    a92c:	dc 01       	movw	r26, r24
    a92e:	52 96       	adiw	r26, 0x12	; 18
    a930:	8c 91       	ld	r24, X
    a932:	88 2f       	mov	r24, r24
    a934:	90 e0       	ldi	r25, 0x00	; 0
    a936:	84 70       	andi	r24, 0x04	; 4
    a938:	99 27       	eor	r25, r25
    a93a:	89 2b       	or	r24, r25
    a93c:	09 f4       	brne	.+2      	; 0xa940 <prvProcessReceivedCommands+0xee>
    a93e:	62 c0       	rjmp	.+196    	; 0xaa04 <prvProcessReceivedCommands+0x1b2>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    a940:	2f 81       	ldd	r18, Y+7	; 0x07
    a942:	38 85       	ldd	r19, Y+8	; 0x08
    a944:	89 81       	ldd	r24, Y+1	; 0x01
    a946:	9a 81       	ldd	r25, Y+2	; 0x02
    a948:	fc 01       	movw	r30, r24
    a94a:	84 85       	ldd	r24, Z+12	; 0x0c
    a94c:	95 85       	ldd	r25, Z+13	; 0x0d
    a94e:	a9 01       	movw	r20, r18
    a950:	48 0f       	add	r20, r24
    a952:	59 1f       	adc	r21, r25
    a954:	89 81       	ldd	r24, Y+1	; 0x01
    a956:	9a 81       	ldd	r25, Y+2	; 0x02
    a958:	00 e0       	ldi	r16, 0x00	; 0
    a95a:	10 e0       	ldi	r17, 0x00	; 0
    a95c:	20 e0       	ldi	r18, 0x00	; 0
    a95e:	30 e0       	ldi	r19, 0x00	; 0
    a960:	60 e0       	ldi	r22, 0x00	; 0
    a962:	8f dd       	rcall	.-1250   	; 0xa482 <xTimerGenericCommand>
    a964:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    a966:	4e c0       	rjmp	.+156    	; 0xaa04 <prvProcessReceivedCommands+0x1b2>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    a968:	89 81       	ldd	r24, Y+1	; 0x01
    a96a:	9a 81       	ldd	r25, Y+2	; 0x02
    a96c:	dc 01       	movw	r26, r24
    a96e:	52 96       	adiw	r26, 0x12	; 18
    a970:	8c 91       	ld	r24, X
    a972:	28 2f       	mov	r18, r24
    a974:	2e 7f       	andi	r18, 0xFE	; 254
    a976:	89 81       	ldd	r24, Y+1	; 0x01
    a978:	9a 81       	ldd	r25, Y+2	; 0x02
    a97a:	fc 01       	movw	r30, r24
    a97c:	22 8b       	std	Z+18, r18	; 0x12
                    break;
    a97e:	42 c0       	rjmp	.+132    	; 0xaa04 <prvProcessReceivedCommands+0x1b2>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    a980:	89 81       	ldd	r24, Y+1	; 0x01
    a982:	9a 81       	ldd	r25, Y+2	; 0x02
    a984:	dc 01       	movw	r26, r24
    a986:	52 96       	adiw	r26, 0x12	; 18
    a988:	8c 91       	ld	r24, X
    a98a:	28 2f       	mov	r18, r24
    a98c:	21 60       	ori	r18, 0x01	; 1
    a98e:	89 81       	ldd	r24, Y+1	; 0x01
    a990:	9a 81       	ldd	r25, Y+2	; 0x02
    a992:	fc 01       	movw	r30, r24
    a994:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    a996:	2f 81       	ldd	r18, Y+7	; 0x07
    a998:	38 85       	ldd	r19, Y+8	; 0x08
    a99a:	89 81       	ldd	r24, Y+1	; 0x01
    a99c:	9a 81       	ldd	r25, Y+2	; 0x02
    a99e:	dc 01       	movw	r26, r24
    a9a0:	1d 96       	adiw	r26, 0x0d	; 13
    a9a2:	3c 93       	st	X, r19
    a9a4:	2e 93       	st	-X, r18
    a9a6:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    a9a8:	89 81       	ldd	r24, Y+1	; 0x01
    a9aa:	9a 81       	ldd	r25, Y+2	; 0x02
    a9ac:	fc 01       	movw	r30, r24
    a9ae:	24 85       	ldd	r18, Z+12	; 0x0c
    a9b0:	35 85       	ldd	r19, Z+13	; 0x0d
    a9b2:	8b 81       	ldd	r24, Y+3	; 0x03
    a9b4:	9c 81       	ldd	r25, Y+4	; 0x04
    a9b6:	b9 01       	movw	r22, r18
    a9b8:	68 0f       	add	r22, r24
    a9ba:	79 1f       	adc	r23, r25
    a9bc:	2b 81       	ldd	r18, Y+3	; 0x03
    a9be:	3c 81       	ldd	r19, Y+4	; 0x04
    a9c0:	4b 81       	ldd	r20, Y+3	; 0x03
    a9c2:	5c 81       	ldd	r21, Y+4	; 0x04
    a9c4:	89 81       	ldd	r24, Y+1	; 0x01
    a9c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a9c8:	d9 de       	rcall	.-590    	; 0xa77c <prvInsertTimerInActiveList>
                    break;
    a9ca:	1c c0       	rjmp	.+56     	; 0xaa04 <prvProcessReceivedCommands+0x1b2>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    a9cc:	89 81       	ldd	r24, Y+1	; 0x01
    a9ce:	9a 81       	ldd	r25, Y+2	; 0x02
    a9d0:	dc 01       	movw	r26, r24
    a9d2:	52 96       	adiw	r26, 0x12	; 18
    a9d4:	8c 91       	ld	r24, X
    a9d6:	88 2f       	mov	r24, r24
    a9d8:	90 e0       	ldi	r25, 0x00	; 0
    a9da:	82 70       	andi	r24, 0x02	; 2
    a9dc:	99 27       	eor	r25, r25
    a9de:	89 2b       	or	r24, r25
                        {
                            vPortFree( pxTimer );
    a9e0:	21 f4       	brne	.+8      	; 0xa9ea <prvProcessReceivedCommands+0x198>
    a9e2:	89 81       	ldd	r24, Y+1	; 0x01
    a9e4:	9a 81       	ldd	r25, Y+2	; 0x02
    a9e6:	e8 d2       	rcall	.+1488   	; 0xafb8 <vPortFree>
    a9e8:	0d c0       	rjmp	.+26     	; 0xaa04 <prvProcessReceivedCommands+0x1b2>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    a9ea:	89 81       	ldd	r24, Y+1	; 0x01
    a9ec:	9a 81       	ldd	r25, Y+2	; 0x02
    a9ee:	fc 01       	movw	r30, r24
    a9f0:	82 89       	ldd	r24, Z+18	; 0x12
    a9f2:	28 2f       	mov	r18, r24
    a9f4:	2e 7f       	andi	r18, 0xFE	; 254
    a9f6:	89 81       	ldd	r24, Y+1	; 0x01
    a9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a9fa:	dc 01       	movw	r26, r24
    a9fc:	52 96       	adiw	r26, 0x12	; 18
    a9fe:	2c 93       	st	X, r18
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    aa00:	01 c0       	rjmp	.+2      	; 0xaa04 <prvProcessReceivedCommands+0x1b2>

                default    :
                    /* Don't expect to get here. */
                    break;
    aa02:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    aa04:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    aa08:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    aa0c:	9e 01       	movw	r18, r28
    aa0e:	2a 5f       	subi	r18, 0xFA	; 250
    aa10:	3f 4f       	sbci	r19, 0xFF	; 255
    aa12:	40 e0       	ldi	r20, 0x00	; 0
    aa14:	50 e0       	ldi	r21, 0x00	; 0
    aa16:	b9 01       	movw	r22, r18
    aa18:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <xQueueReceive>
    aa1c:	88 23       	and	r24, r24
    aa1e:	09 f0       	breq	.+2      	; 0xaa22 <prvProcessReceivedCommands+0x1d0>
    aa20:	25 cf       	rjmp	.-438    	; 0xa86c <prvProcessReceivedCommands+0x1a>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    aa22:	00 00       	nop
    aa24:	2b 96       	adiw	r28, 0x0b	; 11
    aa26:	0f b6       	in	r0, 0x3f	; 63
    aa28:	f8 94       	cli
    aa2a:	de bf       	out	0x3e, r29	; 62
    aa2c:	0f be       	out	0x3f, r0	; 63
    aa2e:	cd bf       	out	0x3d, r28	; 61
    aa30:	df 91       	pop	r29
    aa32:	cf 91       	pop	r28
    aa34:	1f 91       	pop	r17
    aa36:	0f 91       	pop	r16
    aa38:	08 95       	ret

0000aa3a <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    aa3a:	0f 93       	push	r16
    aa3c:	1f 93       	push	r17
    aa3e:	cf 93       	push	r28
    aa40:	df 93       	push	r29
    aa42:	cd b7       	in	r28, 0x3d	; 61
    aa44:	de b7       	in	r29, 0x3e	; 62
    aa46:	29 97       	sbiw	r28, 0x09	; 9
    aa48:	0f b6       	in	r0, 0x3f	; 63
    aa4a:	f8 94       	cli
    aa4c:	de bf       	out	0x3e, r29	; 62
    aa4e:	0f be       	out	0x3f, r0	; 63
    aa50:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    aa52:	66 c0       	rjmp	.+204    	; 0xab20 <prvSwitchTimerLists+0xe6>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    aa54:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    aa58:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    aa5c:	fc 01       	movw	r30, r24
    aa5e:	85 81       	ldd	r24, Z+5	; 0x05
    aa60:	96 81       	ldd	r25, Z+6	; 0x06
    aa62:	fc 01       	movw	r30, r24
    aa64:	80 81       	ld	r24, Z
    aa66:	91 81       	ldd	r25, Z+1	; 0x01
    aa68:	9a 83       	std	Y+2, r25	; 0x02
    aa6a:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    aa6c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    aa70:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    aa74:	fc 01       	movw	r30, r24
    aa76:	85 81       	ldd	r24, Z+5	; 0x05
    aa78:	96 81       	ldd	r25, Z+6	; 0x06
    aa7a:	fc 01       	movw	r30, r24
    aa7c:	86 81       	ldd	r24, Z+6	; 0x06
    aa7e:	97 81       	ldd	r25, Z+7	; 0x07
    aa80:	9c 83       	std	Y+4, r25	; 0x04
    aa82:	8b 83       	std	Y+3, r24	; 0x03
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    aa84:	8b 81       	ldd	r24, Y+3	; 0x03
    aa86:	9c 81       	ldd	r25, Y+4	; 0x04
    aa88:	02 96       	adiw	r24, 0x02	; 2
    aa8a:	c0 d3       	rcall	.+1920   	; 0xb20c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    aa8c:	8b 81       	ldd	r24, Y+3	; 0x03
    aa8e:	9c 81       	ldd	r25, Y+4	; 0x04
    aa90:	fc 01       	movw	r30, r24
    aa92:	20 89       	ldd	r18, Z+16	; 0x10
    aa94:	31 89       	ldd	r19, Z+17	; 0x11
    aa96:	8b 81       	ldd	r24, Y+3	; 0x03
    aa98:	9c 81       	ldd	r25, Y+4	; 0x04
    aa9a:	f9 01       	movw	r30, r18
    aa9c:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    aa9e:	8b 81       	ldd	r24, Y+3	; 0x03
    aaa0:	9c 81       	ldd	r25, Y+4	; 0x04
    aaa2:	fc 01       	movw	r30, r24
    aaa4:	82 89       	ldd	r24, Z+18	; 0x12
    aaa6:	88 2f       	mov	r24, r24
    aaa8:	90 e0       	ldi	r25, 0x00	; 0
    aaaa:	84 70       	andi	r24, 0x04	; 4
    aaac:	99 27       	eor	r25, r25
    aaae:	89 2b       	or	r24, r25
    aab0:	b9 f1       	breq	.+110    	; 0xab20 <prvSwitchTimerLists+0xe6>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    aab2:	8b 81       	ldd	r24, Y+3	; 0x03
    aab4:	9c 81       	ldd	r25, Y+4	; 0x04
    aab6:	fc 01       	movw	r30, r24
    aab8:	24 85       	ldd	r18, Z+12	; 0x0c
    aaba:	35 85       	ldd	r19, Z+13	; 0x0d
    aabc:	89 81       	ldd	r24, Y+1	; 0x01
    aabe:	9a 81       	ldd	r25, Y+2	; 0x02
    aac0:	82 0f       	add	r24, r18
    aac2:	93 1f       	adc	r25, r19
    aac4:	9e 83       	std	Y+6, r25	; 0x06
    aac6:	8d 83       	std	Y+5, r24	; 0x05
            if( xReloadTime > xNextExpireTime )
    aac8:	2d 81       	ldd	r18, Y+5	; 0x05
    aaca:	3e 81       	ldd	r19, Y+6	; 0x06
    aacc:	89 81       	ldd	r24, Y+1	; 0x01
    aace:	9a 81       	ldd	r25, Y+2	; 0x02
    aad0:	82 17       	cp	r24, r18
    aad2:	93 07       	cpc	r25, r19
    aad4:	d0 f4       	brcc	.+52     	; 0xab0a <prvSwitchTimerLists+0xd0>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    aad6:	8b 81       	ldd	r24, Y+3	; 0x03
    aad8:	9c 81       	ldd	r25, Y+4	; 0x04
    aada:	2d 81       	ldd	r18, Y+5	; 0x05
    aadc:	3e 81       	ldd	r19, Y+6	; 0x06
    aade:	fc 01       	movw	r30, r24
    aae0:	33 83       	std	Z+3, r19	; 0x03
    aae2:	22 83       	std	Z+2, r18	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    aae4:	8b 81       	ldd	r24, Y+3	; 0x03
    aae6:	9c 81       	ldd	r25, Y+4	; 0x04
    aae8:	2b 81       	ldd	r18, Y+3	; 0x03
    aaea:	3c 81       	ldd	r19, Y+4	; 0x04
    aaec:	fc 01       	movw	r30, r24
    aaee:	31 87       	std	Z+9, r19	; 0x09
    aaf0:	20 87       	std	Z+8, r18	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    aaf2:	8b 81       	ldd	r24, Y+3	; 0x03
    aaf4:	9c 81       	ldd	r25, Y+4	; 0x04
    aaf6:	9c 01       	movw	r18, r24
    aaf8:	2e 5f       	subi	r18, 0xFE	; 254
    aafa:	3f 4f       	sbci	r19, 0xFF	; 255
    aafc:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    ab00:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    ab04:	b9 01       	movw	r22, r18
    ab06:	0a d3       	rcall	.+1556   	; 0xb11c <vListInsert>
    ab08:	0b c0       	rjmp	.+22     	; 0xab20 <prvSwitchTimerLists+0xe6>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ab0a:	49 81       	ldd	r20, Y+1	; 0x01
    ab0c:	5a 81       	ldd	r21, Y+2	; 0x02
    ab0e:	8b 81       	ldd	r24, Y+3	; 0x03
    ab10:	9c 81       	ldd	r25, Y+4	; 0x04
    ab12:	00 e0       	ldi	r16, 0x00	; 0
    ab14:	10 e0       	ldi	r17, 0x00	; 0
    ab16:	20 e0       	ldi	r18, 0x00	; 0
    ab18:	30 e0       	ldi	r19, 0x00	; 0
    ab1a:	60 e0       	ldi	r22, 0x00	; 0
    ab1c:	b2 dc       	rcall	.-1692   	; 0xa482 <xTimerGenericCommand>
    ab1e:	8f 83       	std	Y+7, r24	; 0x07

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    ab20:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    ab24:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    ab28:	fc 01       	movw	r30, r24
    ab2a:	80 81       	ld	r24, Z
    ab2c:	88 23       	and	r24, r24
    ab2e:	09 f0       	breq	.+2      	; 0xab32 <prvSwitchTimerLists+0xf8>
    ab30:	91 cf       	rjmp	.-222    	; 0xaa54 <prvSwitchTimerLists+0x1a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    ab32:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <pxCurrentTimerList>
    ab36:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <pxCurrentTimerList+0x1>
    ab3a:	99 87       	std	Y+9, r25	; 0x09
    ab3c:	88 87       	std	Y+8, r24	; 0x08
    pxCurrentTimerList = pxOverflowTimerList;
    ab3e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <pxOverflowTimerList>
    ab42:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <pxOverflowTimerList+0x1>
    ab46:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <pxCurrentTimerList+0x1>
    ab4a:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    ab4e:	88 85       	ldd	r24, Y+8	; 0x08
    ab50:	99 85       	ldd	r25, Y+9	; 0x09
    ab52:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <pxOverflowTimerList+0x1>
    ab56:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <pxOverflowTimerList>
}
    ab5a:	00 00       	nop
    ab5c:	29 96       	adiw	r28, 0x09	; 9
    ab5e:	0f b6       	in	r0, 0x3f	; 63
    ab60:	f8 94       	cli
    ab62:	de bf       	out	0x3e, r29	; 62
    ab64:	0f be       	out	0x3f, r0	; 63
    ab66:	cd bf       	out	0x3d, r28	; 61
    ab68:	df 91       	pop	r29
    ab6a:	cf 91       	pop	r28
    ab6c:	1f 91       	pop	r17
    ab6e:	0f 91       	pop	r16
    ab70:	08 95       	ret

0000ab72 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    ab72:	cf 93       	push	r28
    ab74:	df 93       	push	r29
    ab76:	cd b7       	in	r28, 0x3d	; 61
    ab78:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    ab7a:	0f b6       	in	r0, 0x3f	; 63
    ab7c:	f8 94       	cli
    ab7e:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    ab80:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xTimerQueue>
    ab84:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xTimerQueue+0x1>
    ab88:	89 2b       	or	r24, r25
    ab8a:	d1 f4       	brne	.+52     	; 0xabc0 <prvCheckForValidListAndQueue+0x4e>
        {
            vListInitialise( &xActiveTimerList1 );
    ab8c:	89 e7       	ldi	r24, 0x79	; 121
    ab8e:	95 e0       	ldi	r25, 0x05	; 5
    ab90:	2d d2       	rcall	.+1114   	; 0xafec <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    ab92:	82 e8       	ldi	r24, 0x82	; 130
    ab94:	95 e0       	ldi	r25, 0x05	; 5
    ab96:	2a d2       	rcall	.+1108   	; 0xafec <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    ab98:	89 e7       	ldi	r24, 0x79	; 121
    ab9a:	95 e0       	ldi	r25, 0x05	; 5
    ab9c:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <pxCurrentTimerList+0x1>
    aba0:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    aba4:	82 e8       	ldi	r24, 0x82	; 130
    aba6:	95 e0       	ldi	r25, 0x05	; 5
    aba8:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <pxOverflowTimerList+0x1>
    abac:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    abb0:	40 e0       	ldi	r20, 0x00	; 0
    abb2:	65 e0       	ldi	r22, 0x05	; 5
    abb4:	8a e0       	ldi	r24, 0x0A	; 10
    abb6:	fb d6       	rcall	.+3574   	; 0xb9ae <xQueueGenericCreate>
    abb8:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <xTimerQueue+0x1>
    abbc:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    abc0:	0f 90       	pop	r0
    abc2:	0f be       	out	0x3f, r0	; 63
}
    abc4:	00 00       	nop
    abc6:	df 91       	pop	r29
    abc8:	cf 91       	pop	r28
    abca:	08 95       	ret

0000abcc <initVariant>:

/*-----------------------------------------------------------*/

void initVariant(void) __attribute__ ((OS_main));
void initVariant(void)
{
    abcc:	cd b7       	in	r28, 0x3d	; 61
    abce:	de b7       	in	r29, 0x3e	; 62
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    abd0:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    abd4:	0e 94 36 4c 	call	0x986c	; 0x986c <vTaskStartScheduler>
}
    abd8:	00 00       	nop
    abda:	08 95       	ret

0000abdc <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    abdc:	cf 93       	push	r28
    abde:	df 93       	push	r29
    abe0:	cd b7       	in	r28, 0x3d	; 61
    abe2:	de b7       	in	r29, 0x3e	; 62
    loop();        // the normal Arduino loop() function is run here.
    abe4:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <loop>
    if (serialEventRun) serialEventRun();
    abe8:	82 e2       	ldi	r24, 0x22	; 34
    abea:	9a e3       	ldi	r25, 0x3A	; 58
    abec:	89 2b       	or	r24, r25
    abee:	11 f0       	breq	.+4      	; 0xabf4 <vApplicationIdleHook+0x18>
    abf0:	0e 94 22 3a 	call	0x7444	; 0x7444 <_Z14serialEventRunv>
}
    abf4:	00 00       	nop
    abf6:	df 91       	pop	r29
    abf8:	cf 91       	pop	r28
    abfa:	08 95       	ret

0000abfc <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    abfc:	cf 93       	push	r28
    abfe:	df 93       	push	r29
    ac00:	cd b7       	in	r28, 0x3d	; 61
    ac02:	de b7       	in	r29, 0x3e	; 62
    ac04:	2e 97       	sbiw	r28, 0x0e	; 14
    ac06:	0f b6       	in	r0, 0x3f	; 63
    ac08:	f8 94       	cli
    ac0a:	de bf       	out	0x3e, r29	; 62
    ac0c:	0f be       	out	0x3f, r0	; 63
    ac0e:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    ac10:	84 e2       	ldi	r24, 0x24	; 36
    ac12:	90 e0       	ldi	r25, 0x00	; 0
    ac14:	24 e2       	ldi	r18, 0x24	; 36
    ac16:	30 e0       	ldi	r19, 0x00	; 0
    ac18:	f9 01       	movw	r30, r18
    ac1a:	20 81       	ld	r18, Z
    ac1c:	20 68       	ori	r18, 0x80	; 128
    ac1e:	fc 01       	movw	r30, r24
    ac20:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    ac22:	85 e2       	ldi	r24, 0x25	; 37
    ac24:	90 e0       	ldi	r25, 0x00	; 0
    ac26:	25 e2       	ldi	r18, 0x25	; 37
    ac28:	30 e0       	ldi	r19, 0x00	; 0
    ac2a:	f9 01       	movw	r30, r18
    ac2c:	20 81       	ld	r18, Z
    ac2e:	20 68       	ori	r18, 0x80	; 128
    ac30:	fc 01       	movw	r30, r24
    ac32:	20 83       	st	Z, r18
    ac34:	80 e0       	ldi	r24, 0x00	; 0
    ac36:	90 e0       	ldi	r25, 0x00	; 0
    ac38:	a8 e4       	ldi	r26, 0x48	; 72
    ac3a:	b2 e4       	ldi	r27, 0x42	; 66
    ac3c:	89 83       	std	Y+1, r24	; 0x01
    ac3e:	9a 83       	std	Y+2, r25	; 0x02
    ac40:	ab 83       	std	Y+3, r26	; 0x03
    ac42:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    ac44:	20 e0       	ldi	r18, 0x00	; 0
    ac46:	30 e0       	ldi	r19, 0x00	; 0
    ac48:	4a e7       	ldi	r20, 0x7A	; 122
    ac4a:	55 e4       	ldi	r21, 0x45	; 69
    ac4c:	69 81       	ldd	r22, Y+1	; 0x01
    ac4e:	7a 81       	ldd	r23, Y+2	; 0x02
    ac50:	8b 81       	ldd	r24, Y+3	; 0x03
    ac52:	9c 81       	ldd	r25, Y+4	; 0x04
    ac54:	0e 94 76 39 	call	0x72ec	; 0x72ec <__mulsf3>
    ac58:	dc 01       	movw	r26, r24
    ac5a:	cb 01       	movw	r24, r22
    ac5c:	8d 83       	std	Y+5, r24	; 0x05
    ac5e:	9e 83       	std	Y+6, r25	; 0x06
    ac60:	af 83       	std	Y+7, r26	; 0x07
    ac62:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    ac64:	20 e0       	ldi	r18, 0x00	; 0
    ac66:	30 e0       	ldi	r19, 0x00	; 0
    ac68:	40 e8       	ldi	r20, 0x80	; 128
    ac6a:	5f e3       	ldi	r21, 0x3F	; 63
    ac6c:	6d 81       	ldd	r22, Y+5	; 0x05
    ac6e:	7e 81       	ldd	r23, Y+6	; 0x06
    ac70:	8f 81       	ldd	r24, Y+7	; 0x07
    ac72:	98 85       	ldd	r25, Y+8	; 0x08
    ac74:	0e 94 16 61 	call	0xc22c	; 0xc22c <__cmpsf2>
    ac78:	88 23       	and	r24, r24
    ac7a:	2c f4       	brge	.+10     	; 0xac86 <vApplicationMallocFailedHook+0x8a>
		__ticks = 1;
    ac7c:	81 e0       	ldi	r24, 0x01	; 1
    ac7e:	90 e0       	ldi	r25, 0x00	; 0
    ac80:	9a 87       	std	Y+10, r25	; 0x0a
    ac82:	89 87       	std	Y+9, r24	; 0x09
    ac84:	3e c0       	rjmp	.+124    	; 0xad02 <vApplicationMallocFailedHook+0x106>
	else if (__tmp > 65535)
    ac86:	20 e0       	ldi	r18, 0x00	; 0
    ac88:	3f ef       	ldi	r19, 0xFF	; 255
    ac8a:	4f e7       	ldi	r20, 0x7F	; 127
    ac8c:	57 e4       	ldi	r21, 0x47	; 71
    ac8e:	6d 81       	ldd	r22, Y+5	; 0x05
    ac90:	7e 81       	ldd	r23, Y+6	; 0x06
    ac92:	8f 81       	ldd	r24, Y+7	; 0x07
    ac94:	98 85       	ldd	r25, Y+8	; 0x08
    ac96:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__gesf2>
    ac9a:	18 16       	cp	r1, r24
    ac9c:	44 f5       	brge	.+80     	; 0xacee <vApplicationMallocFailedHook+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ac9e:	20 e0       	ldi	r18, 0x00	; 0
    aca0:	30 e0       	ldi	r19, 0x00	; 0
    aca2:	40 e2       	ldi	r20, 0x20	; 32
    aca4:	51 e4       	ldi	r21, 0x41	; 65
    aca6:	69 81       	ldd	r22, Y+1	; 0x01
    aca8:	7a 81       	ldd	r23, Y+2	; 0x02
    acaa:	8b 81       	ldd	r24, Y+3	; 0x03
    acac:	9c 81       	ldd	r25, Y+4	; 0x04
    acae:	0e 94 76 39 	call	0x72ec	; 0x72ec <__mulsf3>
    acb2:	dc 01       	movw	r26, r24
    acb4:	cb 01       	movw	r24, r22
    acb6:	bc 01       	movw	r22, r24
    acb8:	cd 01       	movw	r24, r26
    acba:	0e 94 f5 38 	call	0x71ea	; 0x71ea <__fixunssfsi>
    acbe:	dc 01       	movw	r26, r24
    acc0:	cb 01       	movw	r24, r22
    acc2:	9a 87       	std	Y+10, r25	; 0x0a
    acc4:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    acc6:	89 85       	ldd	r24, Y+9	; 0x09
    acc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    acca:	89 2b       	or	r24, r25
    accc:	21 f1       	breq	.+72     	; 0xad16 <vApplicationMallocFailedHook+0x11a>
    acce:	80 e9       	ldi	r24, 0x90	; 144
    acd0:	91 e0       	ldi	r25, 0x01	; 1
    acd2:	9c 87       	std	Y+12, r25	; 0x0c
    acd4:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    acd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    acd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    acda:	01 97       	sbiw	r24, 0x01	; 1
    acdc:	f1 f7       	brne	.-4      	; 0xacda <vApplicationMallocFailedHook+0xde>
    acde:	9c 87       	std	Y+12, r25	; 0x0c
    ace0:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ace2:	89 85       	ldd	r24, Y+9	; 0x09
    ace4:	9a 85       	ldd	r25, Y+10	; 0x0a
    ace6:	01 97       	sbiw	r24, 0x01	; 1
    ace8:	9a 87       	std	Y+10, r25	; 0x0a
    acea:	89 87       	std	Y+9, r24	; 0x09
    acec:	ec cf       	rjmp	.-40     	; 0xacc6 <vApplicationMallocFailedHook+0xca>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    acee:	6d 81       	ldd	r22, Y+5	; 0x05
    acf0:	7e 81       	ldd	r23, Y+6	; 0x06
    acf2:	8f 81       	ldd	r24, Y+7	; 0x07
    acf4:	98 85       	ldd	r25, Y+8	; 0x08
    acf6:	0e 94 f5 38 	call	0x71ea	; 0x71ea <__fixunssfsi>
    acfa:	dc 01       	movw	r26, r24
    acfc:	cb 01       	movw	r24, r22
    acfe:	9a 87       	std	Y+10, r25	; 0x0a
    ad00:	89 87       	std	Y+9, r24	; 0x09
    ad02:	89 85       	ldd	r24, Y+9	; 0x09
    ad04:	9a 85       	ldd	r25, Y+10	; 0x0a
    ad06:	9e 87       	std	Y+14, r25	; 0x0e
    ad08:	8d 87       	std	Y+13, r24	; 0x0d
    ad0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    ad0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    ad0e:	01 97       	sbiw	r24, 0x01	; 1
    ad10:	f1 f7       	brne	.-4      	; 0xad0e <vApplicationMallocFailedHook+0x112>
    ad12:	9e 87       	std	Y+14, r25	; 0x0e
    ad14:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    ad16:	83 e2       	ldi	r24, 0x23	; 35
    ad18:	90 e0       	ldi	r25, 0x00	; 0
    ad1a:	23 e2       	ldi	r18, 0x23	; 35
    ad1c:	30 e0       	ldi	r19, 0x00	; 0
    ad1e:	f9 01       	movw	r30, r18
    ad20:	20 81       	ld	r18, Z
    ad22:	20 68       	ori	r18, 0x80	; 128
    ad24:	fc 01       	movw	r30, r24
    ad26:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

    for(;;)
    ad28:	85 cf       	rjmp	.-246    	; 0xac34 <vApplicationMallocFailedHook+0x38>

0000ad2a <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    ad2a:	cf 93       	push	r28
    ad2c:	df 93       	push	r29
    ad2e:	cd b7       	in	r28, 0x3d	; 61
    ad30:	de b7       	in	r29, 0x3e	; 62
    ad32:	62 97       	sbiw	r28, 0x12	; 18
    ad34:	0f b6       	in	r0, 0x3f	; 63
    ad36:	f8 94       	cli
    ad38:	de bf       	out	0x3e, r29	; 62
    ad3a:	0f be       	out	0x3f, r0	; 63
    ad3c:	cd bf       	out	0x3d, r28	; 61
    ad3e:	98 8b       	std	Y+16, r25	; 0x10
    ad40:	8f 87       	std	Y+15, r24	; 0x0f
    ad42:	7a 8b       	std	Y+18, r23	; 0x12
    ad44:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    ad46:	84 e2       	ldi	r24, 0x24	; 36
    ad48:	90 e0       	ldi	r25, 0x00	; 0
    ad4a:	24 e2       	ldi	r18, 0x24	; 36
    ad4c:	30 e0       	ldi	r19, 0x00	; 0
    ad4e:	f9 01       	movw	r30, r18
    ad50:	20 81       	ld	r18, Z
    ad52:	20 68       	ori	r18, 0x80	; 128
    ad54:	fc 01       	movw	r30, r24
    ad56:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    ad58:	85 e2       	ldi	r24, 0x25	; 37
    ad5a:	90 e0       	ldi	r25, 0x00	; 0
    ad5c:	25 e2       	ldi	r18, 0x25	; 37
    ad5e:	30 e0       	ldi	r19, 0x00	; 0
    ad60:	f9 01       	movw	r30, r18
    ad62:	20 81       	ld	r18, Z
    ad64:	20 68       	ori	r18, 0x80	; 128
    ad66:	fc 01       	movw	r30, r24
    ad68:	20 83       	st	Z, r18
    ad6a:	80 e0       	ldi	r24, 0x00	; 0
    ad6c:	90 e0       	ldi	r25, 0x00	; 0
    ad6e:	aa ef       	ldi	r26, 0xFA	; 250
    ad70:	b4 e4       	ldi	r27, 0x44	; 68
    ad72:	89 83       	std	Y+1, r24	; 0x01
    ad74:	9a 83       	std	Y+2, r25	; 0x02
    ad76:	ab 83       	std	Y+3, r26	; 0x03
    ad78:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    ad7a:	20 e0       	ldi	r18, 0x00	; 0
    ad7c:	30 e0       	ldi	r19, 0x00	; 0
    ad7e:	4a e7       	ldi	r20, 0x7A	; 122
    ad80:	55 e4       	ldi	r21, 0x45	; 69
    ad82:	69 81       	ldd	r22, Y+1	; 0x01
    ad84:	7a 81       	ldd	r23, Y+2	; 0x02
    ad86:	8b 81       	ldd	r24, Y+3	; 0x03
    ad88:	9c 81       	ldd	r25, Y+4	; 0x04
    ad8a:	0e 94 76 39 	call	0x72ec	; 0x72ec <__mulsf3>
    ad8e:	dc 01       	movw	r26, r24
    ad90:	cb 01       	movw	r24, r22
    ad92:	8d 83       	std	Y+5, r24	; 0x05
    ad94:	9e 83       	std	Y+6, r25	; 0x06
    ad96:	af 83       	std	Y+7, r26	; 0x07
    ad98:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    ad9a:	20 e0       	ldi	r18, 0x00	; 0
    ad9c:	30 e0       	ldi	r19, 0x00	; 0
    ad9e:	40 e8       	ldi	r20, 0x80	; 128
    ada0:	5f e3       	ldi	r21, 0x3F	; 63
    ada2:	6d 81       	ldd	r22, Y+5	; 0x05
    ada4:	7e 81       	ldd	r23, Y+6	; 0x06
    ada6:	8f 81       	ldd	r24, Y+7	; 0x07
    ada8:	98 85       	ldd	r25, Y+8	; 0x08
    adaa:	0e 94 16 61 	call	0xc22c	; 0xc22c <__cmpsf2>
    adae:	88 23       	and	r24, r24
    adb0:	2c f4       	brge	.+10     	; 0xadbc <vApplicationStackOverflowHook+0x92>
		__ticks = 1;
    adb2:	81 e0       	ldi	r24, 0x01	; 1
    adb4:	90 e0       	ldi	r25, 0x00	; 0
    adb6:	9a 87       	std	Y+10, r25	; 0x0a
    adb8:	89 87       	std	Y+9, r24	; 0x09
    adba:	3e c0       	rjmp	.+124    	; 0xae38 <vApplicationStackOverflowHook+0x10e>
	else if (__tmp > 65535)
    adbc:	20 e0       	ldi	r18, 0x00	; 0
    adbe:	3f ef       	ldi	r19, 0xFF	; 255
    adc0:	4f e7       	ldi	r20, 0x7F	; 127
    adc2:	57 e4       	ldi	r21, 0x47	; 71
    adc4:	6d 81       	ldd	r22, Y+5	; 0x05
    adc6:	7e 81       	ldd	r23, Y+6	; 0x06
    adc8:	8f 81       	ldd	r24, Y+7	; 0x07
    adca:	98 85       	ldd	r25, Y+8	; 0x08
    adcc:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__gesf2>
    add0:	18 16       	cp	r1, r24
    add2:	44 f5       	brge	.+80     	; 0xae24 <vApplicationStackOverflowHook+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    add4:	20 e0       	ldi	r18, 0x00	; 0
    add6:	30 e0       	ldi	r19, 0x00	; 0
    add8:	40 e2       	ldi	r20, 0x20	; 32
    adda:	51 e4       	ldi	r21, 0x41	; 65
    addc:	69 81       	ldd	r22, Y+1	; 0x01
    adde:	7a 81       	ldd	r23, Y+2	; 0x02
    ade0:	8b 81       	ldd	r24, Y+3	; 0x03
    ade2:	9c 81       	ldd	r25, Y+4	; 0x04
    ade4:	0e 94 76 39 	call	0x72ec	; 0x72ec <__mulsf3>
    ade8:	dc 01       	movw	r26, r24
    adea:	cb 01       	movw	r24, r22
    adec:	bc 01       	movw	r22, r24
    adee:	cd 01       	movw	r24, r26
    adf0:	0e 94 f5 38 	call	0x71ea	; 0x71ea <__fixunssfsi>
    adf4:	dc 01       	movw	r26, r24
    adf6:	cb 01       	movw	r24, r22
    adf8:	9a 87       	std	Y+10, r25	; 0x0a
    adfa:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    adfc:	89 85       	ldd	r24, Y+9	; 0x09
    adfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae00:	89 2b       	or	r24, r25
    ae02:	21 f1       	breq	.+72     	; 0xae4c <vApplicationStackOverflowHook+0x122>
    ae04:	80 e9       	ldi	r24, 0x90	; 144
    ae06:	91 e0       	ldi	r25, 0x01	; 1
    ae08:	9c 87       	std	Y+12, r25	; 0x0c
    ae0a:	8b 87       	std	Y+11, r24	; 0x0b
    ae0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae10:	01 97       	sbiw	r24, 0x01	; 1
    ae12:	f1 f7       	brne	.-4      	; 0xae10 <vApplicationStackOverflowHook+0xe6>
    ae14:	9c 87       	std	Y+12, r25	; 0x0c
    ae16:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae18:	89 85       	ldd	r24, Y+9	; 0x09
    ae1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae1c:	01 97       	sbiw	r24, 0x01	; 1
    ae1e:	9a 87       	std	Y+10, r25	; 0x0a
    ae20:	89 87       	std	Y+9, r24	; 0x09
    ae22:	ec cf       	rjmp	.-40     	; 0xadfc <vApplicationStackOverflowHook+0xd2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ae24:	6d 81       	ldd	r22, Y+5	; 0x05
    ae26:	7e 81       	ldd	r23, Y+6	; 0x06
    ae28:	8f 81       	ldd	r24, Y+7	; 0x07
    ae2a:	98 85       	ldd	r25, Y+8	; 0x08
    ae2c:	0e 94 f5 38 	call	0x71ea	; 0x71ea <__fixunssfsi>
    ae30:	dc 01       	movw	r26, r24
    ae32:	cb 01       	movw	r24, r22
    ae34:	9a 87       	std	Y+10, r25	; 0x0a
    ae36:	89 87       	std	Y+9, r24	; 0x09
    ae38:	89 85       	ldd	r24, Y+9	; 0x09
    ae3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae3c:	9e 87       	std	Y+14, r25	; 0x0e
    ae3e:	8d 87       	std	Y+13, r24	; 0x0d
    ae40:	8d 85       	ldd	r24, Y+13	; 0x0d
    ae42:	9e 85       	ldd	r25, Y+14	; 0x0e
    ae44:	01 97       	sbiw	r24, 0x01	; 1
    ae46:	f1 f7       	brne	.-4      	; 0xae44 <vApplicationStackOverflowHook+0x11a>
    ae48:	9e 87       	std	Y+14, r25	; 0x0e
    ae4a:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    ae4c:	83 e2       	ldi	r24, 0x23	; 35
    ae4e:	90 e0       	ldi	r25, 0x00	; 0
    ae50:	23 e2       	ldi	r18, 0x23	; 35
    ae52:	30 e0       	ldi	r19, 0x00	; 0
    ae54:	f9 01       	movw	r30, r18
    ae56:	20 81       	ld	r18, Z
    ae58:	20 68       	ori	r18, 0x80	; 128
    ae5a:	fc 01       	movw	r30, r24
    ae5c:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

    for(;;)
    ae5e:	85 cf       	rjmp	.-246    	; 0xad6a <vApplicationStackOverflowHook+0x40>

0000ae60 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    ae60:	cf 93       	push	r28
    ae62:	df 93       	push	r29
    ae64:	cd b7       	in	r28, 0x3d	; 61
    ae66:	de b7       	in	r29, 0x3e	; 62
    ae68:	2f 97       	sbiw	r28, 0x0f	; 15
    ae6a:	0f b6       	in	r0, 0x3f	; 63
    ae6c:	f8 94       	cli
    ae6e:	de bf       	out	0x3e, r29	; 62
    ae70:	0f be       	out	0x3f, r0	; 63
    ae72:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    ae74:	8f e5       	ldi	r24, 0x5F	; 95
    ae76:	90 e0       	ldi	r25, 0x00	; 0
    ae78:	fc 01       	movw	r30, r24
    ae7a:	80 81       	ld	r24, Z
    ae7c:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    ae7e:	f8 94       	cli
  if (!initialized) {
    ae80:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <_ZN8SPIClass11initializedE>
    ae84:	88 23       	and	r24, r24
    ae86:	09 f0       	breq	.+2      	; 0xae8a <_ZN8SPIClass5beginEv+0x2a>
    ae88:	5b c0       	rjmp	.+182    	; 0xaf40 <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    ae8a:	85 ee       	ldi	r24, 0xE5	; 229
    ae8c:	9e e2       	ldi	r25, 0x2E	; 46
    ae8e:	9b 83       	std	Y+3, r25	; 0x03
    ae90:	8a 83       	std	Y+2, r24	; 0x02
    ae92:	8a 81       	ldd	r24, Y+2	; 0x02
    ae94:	9b 81       	ldd	r25, Y+3	; 0x03
    ae96:	fc 01       	movw	r30, r24
    ae98:	84 91       	lpm	r24, Z
    ae9a:	8c 83       	std	Y+4, r24	; 0x04
    ae9c:	8c 81       	ldd	r24, Y+4	; 0x04
    ae9e:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    aea0:	8b e2       	ldi	r24, 0x2B	; 43
    aea2:	9f e2       	ldi	r25, 0x2F	; 47
    aea4:	9f 83       	std	Y+7, r25	; 0x07
    aea6:	8e 83       	std	Y+6, r24	; 0x06
    aea8:	8e 81       	ldd	r24, Y+6	; 0x06
    aeaa:	9f 81       	ldd	r25, Y+7	; 0x07
    aeac:	fc 01       	movw	r30, r24
    aeae:	84 91       	lpm	r24, Z
    aeb0:	88 87       	std	Y+8, r24	; 0x08
    aeb2:	88 85       	ldd	r24, Y+8	; 0x08
    aeb4:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    aeb6:	8d 81       	ldd	r24, Y+5	; 0x05
    aeb8:	88 2f       	mov	r24, r24
    aeba:	90 e0       	ldi	r25, 0x00	; 0
    aebc:	88 0f       	add	r24, r24
    aebe:	99 1f       	adc	r25, r25
    aec0:	8e 59       	subi	r24, 0x9E	; 158
    aec2:	91 4d       	sbci	r25, 0xD1	; 209
    aec4:	9b 87       	std	Y+11, r25	; 0x0b
    aec6:	8a 87       	std	Y+10, r24	; 0x0a
    aec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    aeca:	9b 85       	ldd	r25, Y+11	; 0x0b
    aecc:	fc 01       	movw	r30, r24
    aece:	25 91       	lpm	r18, Z+
    aed0:	34 91       	lpm	r19, Z
    aed2:	cf 01       	movw	r24, r30
    aed4:	3d 87       	std	Y+13, r19	; 0x0d
    aed6:	2c 87       	std	Y+12, r18	; 0x0c
    aed8:	9b 87       	std	Y+11, r25	; 0x0b
    aeda:	8a 87       	std	Y+10, r24	; 0x0a
    aedc:	8c 85       	ldd	r24, Y+12	; 0x0c
    aede:	9d 85       	ldd	r25, Y+13	; 0x0d
    aee0:	9f 87       	std	Y+15, r25	; 0x0f
    aee2:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    aee4:	8e 85       	ldd	r24, Y+14	; 0x0e
    aee6:	9f 85       	ldd	r25, Y+15	; 0x0f
    aee8:	fc 01       	movw	r30, r24
    aeea:	90 81       	ld	r25, Z
    aeec:	89 85       	ldd	r24, Y+9	; 0x09
    aeee:	98 23       	and	r25, r24
    aef0:	81 e0       	ldi	r24, 0x01	; 1
    aef2:	99 23       	and	r25, r25
    aef4:	09 f0       	breq	.+2      	; 0xaef8 <_ZN8SPIClass5beginEv+0x98>
    aef6:	80 e0       	ldi	r24, 0x00	; 0
    aef8:	88 23       	and	r24, r24
    aefa:	21 f0       	breq	.+8      	; 0xaf04 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    aefc:	61 e0       	ldi	r22, 0x01	; 1
    aefe:	85 e3       	ldi	r24, 0x35	; 53
    af00:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    af04:	61 e0       	ldi	r22, 0x01	; 1
    af06:	85 e3       	ldi	r24, 0x35	; 53
    af08:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    af0c:	8c e4       	ldi	r24, 0x4C	; 76
    af0e:	90 e0       	ldi	r25, 0x00	; 0
    af10:	2c e4       	ldi	r18, 0x4C	; 76
    af12:	30 e0       	ldi	r19, 0x00	; 0
    af14:	f9 01       	movw	r30, r18
    af16:	20 81       	ld	r18, Z
    af18:	20 61       	ori	r18, 0x10	; 16
    af1a:	fc 01       	movw	r30, r24
    af1c:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    af1e:	8c e4       	ldi	r24, 0x4C	; 76
    af20:	90 e0       	ldi	r25, 0x00	; 0
    af22:	2c e4       	ldi	r18, 0x4C	; 76
    af24:	30 e0       	ldi	r19, 0x00	; 0
    af26:	f9 01       	movw	r30, r18
    af28:	20 81       	ld	r18, Z
    af2a:	20 64       	ori	r18, 0x40	; 64
    af2c:	fc 01       	movw	r30, r24
    af2e:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    af30:	61 e0       	ldi	r22, 0x01	; 1
    af32:	84 e3       	ldi	r24, 0x34	; 52
    af34:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
    pinMode(MOSI, OUTPUT);
    af38:	61 e0       	ldi	r22, 0x01	; 1
    af3a:	83 e3       	ldi	r24, 0x33	; 51
    af3c:	0e 94 33 45 	call	0x8a66	; 0x8a66 <pinMode>
  }
  initialized++; // reference count
    af40:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <_ZN8SPIClass11initializedE>
    af44:	8f 5f       	subi	r24, 0xFF	; 255
    af46:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    af4a:	8f e5       	ldi	r24, 0x5F	; 95
    af4c:	90 e0       	ldi	r25, 0x00	; 0
    af4e:	29 81       	ldd	r18, Y+1	; 0x01
    af50:	fc 01       	movw	r30, r24
    af52:	20 83       	st	Z, r18
}
    af54:	00 00       	nop
    af56:	2f 96       	adiw	r28, 0x0f	; 15
    af58:	0f b6       	in	r0, 0x3f	; 63
    af5a:	f8 94       	cli
    af5c:	de bf       	out	0x3e, r29	; 62
    af5e:	0f be       	out	0x3f, r0	; 63
    af60:	cd bf       	out	0x3d, r28	; 61
    af62:	df 91       	pop	r29
    af64:	cf 91       	pop	r28
    af66:	08 95       	ret

0000af68 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    af68:	cf 93       	push	r28
    af6a:	df 93       	push	r29
    af6c:	cd b7       	in	r28, 0x3d	; 61
    af6e:	de b7       	in	r29, 0x3e	; 62
	// Empty
}
    af70:	00 00       	nop
    af72:	df 91       	pop	r29
    af74:	cf 91       	pop	r28
    af76:	08 95       	ret

0000af78 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    af78:	cf 93       	push	r28
    af7a:	df 93       	push	r29
    af7c:	00 d0       	rcall	.+0      	; 0xaf7e <pvPortMalloc+0x6>
    af7e:	1f 92       	push	r1
    af80:	cd b7       	in	r28, 0x3d	; 61
    af82:	de b7       	in	r29, 0x3e	; 62
    af84:	9c 83       	std	Y+4, r25	; 0x04
    af86:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

    vTaskSuspendAll();
    af88:	0e 94 6f 4c 	call	0x98de	; 0x98de <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    af8c:	8b 81       	ldd	r24, Y+3	; 0x03
    af8e:	9c 81       	ldd	r25, Y+4	; 0x04
    af90:	0e 94 a1 61 	call	0xc342	; 0xc342 <malloc>
    af94:	9a 83       	std	Y+2, r25	; 0x02
    af96:	89 83       	std	Y+1, r24	; 0x01
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    af98:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    af9c:	89 81       	ldd	r24, Y+1	; 0x01
    af9e:	9a 81       	ldd	r25, Y+2	; 0x02
    afa0:	89 2b       	or	r24, r25
    afa2:	09 f4       	brne	.+2      	; 0xafa6 <pvPortMalloc+0x2e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    afa4:	2b de       	rcall	.-938    	; 0xabfc <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
    afa6:	89 81       	ldd	r24, Y+1	; 0x01
    afa8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    afaa:	0f 90       	pop	r0
    afac:	0f 90       	pop	r0
    afae:	0f 90       	pop	r0
    afb0:	0f 90       	pop	r0
    afb2:	df 91       	pop	r29
    afb4:	cf 91       	pop	r28
    afb6:	08 95       	ret

0000afb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    afb8:	cf 93       	push	r28
    afba:	df 93       	push	r29
    afbc:	1f 92       	push	r1
    afbe:	1f 92       	push	r1
    afc0:	cd b7       	in	r28, 0x3d	; 61
    afc2:	de b7       	in	r29, 0x3e	; 62
    afc4:	9a 83       	std	Y+2, r25	; 0x02
    afc6:	89 83       	std	Y+1, r24	; 0x01
    if( pv )
    afc8:	89 81       	ldd	r24, Y+1	; 0x01
    afca:	9a 81       	ldd	r25, Y+2	; 0x02
    afcc:	89 2b       	or	r24, r25
    afce:	41 f0       	breq	.+16     	; 0xafe0 <vPortFree+0x28>
    {
        vTaskSuspendAll();
    afd0:	0e 94 6f 4c 	call	0x98de	; 0x98de <vTaskSuspendAll>
        {
            free( pv );
    afd4:	89 81       	ldd	r24, Y+1	; 0x01
    afd6:	9a 81       	ldd	r25, Y+2	; 0x02
    afd8:	0e 94 39 62 	call	0xc472	; 0xc472 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    afdc:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    }
}
    afe0:	00 00       	nop
    afe2:	0f 90       	pop	r0
    afe4:	0f 90       	pop	r0
    afe6:	df 91       	pop	r29
    afe8:	cf 91       	pop	r28
    afea:	08 95       	ret

0000afec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    afec:	cf 93       	push	r28
    afee:	df 93       	push	r29
    aff0:	1f 92       	push	r1
    aff2:	1f 92       	push	r1
    aff4:	cd b7       	in	r28, 0x3d	; 61
    aff6:	de b7       	in	r29, 0x3e	; 62
    aff8:	9a 83       	std	Y+2, r25	; 0x02
    affa:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    affc:	89 81       	ldd	r24, Y+1	; 0x01
    affe:	9a 81       	ldd	r25, Y+2	; 0x02
    b000:	9c 01       	movw	r18, r24
    b002:	2d 5f       	subi	r18, 0xFD	; 253
    b004:	3f 4f       	sbci	r19, 0xFF	; 255
    b006:	89 81       	ldd	r24, Y+1	; 0x01
    b008:	9a 81       	ldd	r25, Y+2	; 0x02
    b00a:	fc 01       	movw	r30, r24
    b00c:	32 83       	std	Z+2, r19	; 0x02
    b00e:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    b010:	89 81       	ldd	r24, Y+1	; 0x01
    b012:	9a 81       	ldd	r25, Y+2	; 0x02
    b014:	2f ef       	ldi	r18, 0xFF	; 255
    b016:	3f ef       	ldi	r19, 0xFF	; 255
    b018:	fc 01       	movw	r30, r24
    b01a:	34 83       	std	Z+4, r19	; 0x04
    b01c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b01e:	89 81       	ldd	r24, Y+1	; 0x01
    b020:	9a 81       	ldd	r25, Y+2	; 0x02
    b022:	9c 01       	movw	r18, r24
    b024:	2d 5f       	subi	r18, 0xFD	; 253
    b026:	3f 4f       	sbci	r19, 0xFF	; 255
    b028:	89 81       	ldd	r24, Y+1	; 0x01
    b02a:	9a 81       	ldd	r25, Y+2	; 0x02
    b02c:	fc 01       	movw	r30, r24
    b02e:	36 83       	std	Z+6, r19	; 0x06
    b030:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b032:	89 81       	ldd	r24, Y+1	; 0x01
    b034:	9a 81       	ldd	r25, Y+2	; 0x02
    b036:	9c 01       	movw	r18, r24
    b038:	2d 5f       	subi	r18, 0xFD	; 253
    b03a:	3f 4f       	sbci	r19, 0xFF	; 255
    b03c:	89 81       	ldd	r24, Y+1	; 0x01
    b03e:	9a 81       	ldd	r25, Y+2	; 0x02
    b040:	fc 01       	movw	r30, r24
    b042:	30 87       	std	Z+8, r19	; 0x08
    b044:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    b046:	89 81       	ldd	r24, Y+1	; 0x01
    b048:	9a 81       	ldd	r25, Y+2	; 0x02
    b04a:	fc 01       	movw	r30, r24
    b04c:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    b04e:	00 00       	nop
    b050:	0f 90       	pop	r0
    b052:	0f 90       	pop	r0
    b054:	df 91       	pop	r29
    b056:	cf 91       	pop	r28
    b058:	08 95       	ret

0000b05a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    b05a:	cf 93       	push	r28
    b05c:	df 93       	push	r29
    b05e:	1f 92       	push	r1
    b060:	1f 92       	push	r1
    b062:	cd b7       	in	r28, 0x3d	; 61
    b064:	de b7       	in	r29, 0x3e	; 62
    b066:	9a 83       	std	Y+2, r25	; 0x02
    b068:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    b06a:	89 81       	ldd	r24, Y+1	; 0x01
    b06c:	9a 81       	ldd	r25, Y+2	; 0x02
    b06e:	fc 01       	movw	r30, r24
    b070:	11 86       	std	Z+9, r1	; 0x09
    b072:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    b074:	00 00       	nop
    b076:	0f 90       	pop	r0
    b078:	0f 90       	pop	r0
    b07a:	df 91       	pop	r29
    b07c:	cf 91       	pop	r28
    b07e:	08 95       	ret

0000b080 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    b080:	cf 93       	push	r28
    b082:	df 93       	push	r29
    b084:	00 d0       	rcall	.+0      	; 0xb086 <vListInsertEnd+0x6>
    b086:	00 d0       	rcall	.+0      	; 0xb088 <vListInsertEnd+0x8>
    b088:	cd b7       	in	r28, 0x3d	; 61
    b08a:	de b7       	in	r29, 0x3e	; 62
    b08c:	9c 83       	std	Y+4, r25	; 0x04
    b08e:	8b 83       	std	Y+3, r24	; 0x03
    b090:	7e 83       	std	Y+6, r23	; 0x06
    b092:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    b094:	8b 81       	ldd	r24, Y+3	; 0x03
    b096:	9c 81       	ldd	r25, Y+4	; 0x04
    b098:	fc 01       	movw	r30, r24
    b09a:	81 81       	ldd	r24, Z+1	; 0x01
    b09c:	92 81       	ldd	r25, Z+2	; 0x02
    b09e:	9a 83       	std	Y+2, r25	; 0x02
    b0a0:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    b0a2:	8d 81       	ldd	r24, Y+5	; 0x05
    b0a4:	9e 81       	ldd	r25, Y+6	; 0x06
    b0a6:	29 81       	ldd	r18, Y+1	; 0x01
    b0a8:	3a 81       	ldd	r19, Y+2	; 0x02
    b0aa:	fc 01       	movw	r30, r24
    b0ac:	33 83       	std	Z+3, r19	; 0x03
    b0ae:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    b0b0:	89 81       	ldd	r24, Y+1	; 0x01
    b0b2:	9a 81       	ldd	r25, Y+2	; 0x02
    b0b4:	fc 01       	movw	r30, r24
    b0b6:	24 81       	ldd	r18, Z+4	; 0x04
    b0b8:	35 81       	ldd	r19, Z+5	; 0x05
    b0ba:	8d 81       	ldd	r24, Y+5	; 0x05
    b0bc:	9e 81       	ldd	r25, Y+6	; 0x06
    b0be:	fc 01       	movw	r30, r24
    b0c0:	35 83       	std	Z+5, r19	; 0x05
    b0c2:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    b0c4:	89 81       	ldd	r24, Y+1	; 0x01
    b0c6:	9a 81       	ldd	r25, Y+2	; 0x02
    b0c8:	fc 01       	movw	r30, r24
    b0ca:	84 81       	ldd	r24, Z+4	; 0x04
    b0cc:	95 81       	ldd	r25, Z+5	; 0x05
    b0ce:	2d 81       	ldd	r18, Y+5	; 0x05
    b0d0:	3e 81       	ldd	r19, Y+6	; 0x06
    b0d2:	fc 01       	movw	r30, r24
    b0d4:	33 83       	std	Z+3, r19	; 0x03
    b0d6:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
    b0d8:	89 81       	ldd	r24, Y+1	; 0x01
    b0da:	9a 81       	ldd	r25, Y+2	; 0x02
    b0dc:	2d 81       	ldd	r18, Y+5	; 0x05
    b0de:	3e 81       	ldd	r19, Y+6	; 0x06
    b0e0:	fc 01       	movw	r30, r24
    b0e2:	35 83       	std	Z+5, r19	; 0x05
    b0e4:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    b0e6:	8d 81       	ldd	r24, Y+5	; 0x05
    b0e8:	9e 81       	ldd	r25, Y+6	; 0x06
    b0ea:	2b 81       	ldd	r18, Y+3	; 0x03
    b0ec:	3c 81       	ldd	r19, Y+4	; 0x04
    b0ee:	fc 01       	movw	r30, r24
    b0f0:	31 87       	std	Z+9, r19	; 0x09
    b0f2:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    b0f4:	8b 81       	ldd	r24, Y+3	; 0x03
    b0f6:	9c 81       	ldd	r25, Y+4	; 0x04
    b0f8:	fc 01       	movw	r30, r24
    b0fa:	80 81       	ld	r24, Z
    b0fc:	21 e0       	ldi	r18, 0x01	; 1
    b0fe:	28 0f       	add	r18, r24
    b100:	8b 81       	ldd	r24, Y+3	; 0x03
    b102:	9c 81       	ldd	r25, Y+4	; 0x04
    b104:	fc 01       	movw	r30, r24
    b106:	20 83       	st	Z, r18
}
    b108:	00 00       	nop
    b10a:	26 96       	adiw	r28, 0x06	; 6
    b10c:	0f b6       	in	r0, 0x3f	; 63
    b10e:	f8 94       	cli
    b110:	de bf       	out	0x3e, r29	; 62
    b112:	0f be       	out	0x3f, r0	; 63
    b114:	cd bf       	out	0x3d, r28	; 61
    b116:	df 91       	pop	r29
    b118:	cf 91       	pop	r28
    b11a:	08 95       	ret

0000b11c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    b11c:	cf 93       	push	r28
    b11e:	df 93       	push	r29
    b120:	cd b7       	in	r28, 0x3d	; 61
    b122:	de b7       	in	r29, 0x3e	; 62
    b124:	28 97       	sbiw	r28, 0x08	; 8
    b126:	0f b6       	in	r0, 0x3f	; 63
    b128:	f8 94       	cli
    b12a:	de bf       	out	0x3e, r29	; 62
    b12c:	0f be       	out	0x3f, r0	; 63
    b12e:	cd bf       	out	0x3d, r28	; 61
    b130:	9e 83       	std	Y+6, r25	; 0x06
    b132:	8d 83       	std	Y+5, r24	; 0x05
    b134:	78 87       	std	Y+8, r23	; 0x08
    b136:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    b138:	8f 81       	ldd	r24, Y+7	; 0x07
    b13a:	98 85       	ldd	r25, Y+8	; 0x08
    b13c:	fc 01       	movw	r30, r24
    b13e:	80 81       	ld	r24, Z
    b140:	91 81       	ldd	r25, Z+1	; 0x01
    b142:	9c 83       	std	Y+4, r25	; 0x04
    b144:	8b 83       	std	Y+3, r24	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    b146:	8b 81       	ldd	r24, Y+3	; 0x03
    b148:	9c 81       	ldd	r25, Y+4	; 0x04
    b14a:	01 96       	adiw	r24, 0x01	; 1
    b14c:	41 f4       	brne	.+16     	; 0xb15e <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    b14e:	8d 81       	ldd	r24, Y+5	; 0x05
    b150:	9e 81       	ldd	r25, Y+6	; 0x06
    b152:	fc 01       	movw	r30, r24
    b154:	87 81       	ldd	r24, Z+7	; 0x07
    b156:	90 85       	ldd	r25, Z+8	; 0x08
    b158:	9a 83       	std	Y+2, r25	; 0x02
    b15a:	89 83       	std	Y+1, r24	; 0x01
    b15c:	1a c0       	rjmp	.+52     	; 0xb192 <vListInsert+0x76>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    b15e:	8d 81       	ldd	r24, Y+5	; 0x05
    b160:	9e 81       	ldd	r25, Y+6	; 0x06
    b162:	03 96       	adiw	r24, 0x03	; 3
    b164:	9a 83       	std	Y+2, r25	; 0x02
    b166:	89 83       	std	Y+1, r24	; 0x01
    b168:	07 c0       	rjmp	.+14     	; 0xb178 <vListInsert+0x5c>
    b16a:	89 81       	ldd	r24, Y+1	; 0x01
    b16c:	9a 81       	ldd	r25, Y+2	; 0x02
    b16e:	fc 01       	movw	r30, r24
    b170:	82 81       	ldd	r24, Z+2	; 0x02
    b172:	93 81       	ldd	r25, Z+3	; 0x03
    b174:	9a 83       	std	Y+2, r25	; 0x02
    b176:	89 83       	std	Y+1, r24	; 0x01
    b178:	89 81       	ldd	r24, Y+1	; 0x01
    b17a:	9a 81       	ldd	r25, Y+2	; 0x02
    b17c:	fc 01       	movw	r30, r24
    b17e:	82 81       	ldd	r24, Z+2	; 0x02
    b180:	93 81       	ldd	r25, Z+3	; 0x03
    b182:	fc 01       	movw	r30, r24
    b184:	20 81       	ld	r18, Z
    b186:	31 81       	ldd	r19, Z+1	; 0x01
    b188:	8b 81       	ldd	r24, Y+3	; 0x03
    b18a:	9c 81       	ldd	r25, Y+4	; 0x04
    b18c:	82 17       	cp	r24, r18
    b18e:	93 07       	cpc	r25, r19
    b190:	60 f7       	brcc	.-40     	; 0xb16a <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    b192:	89 81       	ldd	r24, Y+1	; 0x01
    b194:	9a 81       	ldd	r25, Y+2	; 0x02
    b196:	fc 01       	movw	r30, r24
    b198:	22 81       	ldd	r18, Z+2	; 0x02
    b19a:	33 81       	ldd	r19, Z+3	; 0x03
    b19c:	8f 81       	ldd	r24, Y+7	; 0x07
    b19e:	98 85       	ldd	r25, Y+8	; 0x08
    b1a0:	fc 01       	movw	r30, r24
    b1a2:	33 83       	std	Z+3, r19	; 0x03
    b1a4:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    b1a6:	8f 81       	ldd	r24, Y+7	; 0x07
    b1a8:	98 85       	ldd	r25, Y+8	; 0x08
    b1aa:	fc 01       	movw	r30, r24
    b1ac:	82 81       	ldd	r24, Z+2	; 0x02
    b1ae:	93 81       	ldd	r25, Z+3	; 0x03
    b1b0:	2f 81       	ldd	r18, Y+7	; 0x07
    b1b2:	38 85       	ldd	r19, Y+8	; 0x08
    b1b4:	fc 01       	movw	r30, r24
    b1b6:	35 83       	std	Z+5, r19	; 0x05
    b1b8:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    b1ba:	8f 81       	ldd	r24, Y+7	; 0x07
    b1bc:	98 85       	ldd	r25, Y+8	; 0x08
    b1be:	29 81       	ldd	r18, Y+1	; 0x01
    b1c0:	3a 81       	ldd	r19, Y+2	; 0x02
    b1c2:	fc 01       	movw	r30, r24
    b1c4:	35 83       	std	Z+5, r19	; 0x05
    b1c6:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
    b1c8:	89 81       	ldd	r24, Y+1	; 0x01
    b1ca:	9a 81       	ldd	r25, Y+2	; 0x02
    b1cc:	2f 81       	ldd	r18, Y+7	; 0x07
    b1ce:	38 85       	ldd	r19, Y+8	; 0x08
    b1d0:	fc 01       	movw	r30, r24
    b1d2:	33 83       	std	Z+3, r19	; 0x03
    b1d4:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    b1d6:	8f 81       	ldd	r24, Y+7	; 0x07
    b1d8:	98 85       	ldd	r25, Y+8	; 0x08
    b1da:	2d 81       	ldd	r18, Y+5	; 0x05
    b1dc:	3e 81       	ldd	r19, Y+6	; 0x06
    b1de:	fc 01       	movw	r30, r24
    b1e0:	31 87       	std	Z+9, r19	; 0x09
    b1e2:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    b1e4:	8d 81       	ldd	r24, Y+5	; 0x05
    b1e6:	9e 81       	ldd	r25, Y+6	; 0x06
    b1e8:	fc 01       	movw	r30, r24
    b1ea:	80 81       	ld	r24, Z
    b1ec:	21 e0       	ldi	r18, 0x01	; 1
    b1ee:	28 0f       	add	r18, r24
    b1f0:	8d 81       	ldd	r24, Y+5	; 0x05
    b1f2:	9e 81       	ldd	r25, Y+6	; 0x06
    b1f4:	fc 01       	movw	r30, r24
    b1f6:	20 83       	st	Z, r18
}
    b1f8:	00 00       	nop
    b1fa:	28 96       	adiw	r28, 0x08	; 8
    b1fc:	0f b6       	in	r0, 0x3f	; 63
    b1fe:	f8 94       	cli
    b200:	de bf       	out	0x3e, r29	; 62
    b202:	0f be       	out	0x3f, r0	; 63
    b204:	cd bf       	out	0x3d, r28	; 61
    b206:	df 91       	pop	r29
    b208:	cf 91       	pop	r28
    b20a:	08 95       	ret

0000b20c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    b20c:	cf 93       	push	r28
    b20e:	df 93       	push	r29
    b210:	00 d0       	rcall	.+0      	; 0xb212 <uxListRemove+0x6>
    b212:	1f 92       	push	r1
    b214:	cd b7       	in	r28, 0x3d	; 61
    b216:	de b7       	in	r29, 0x3e	; 62
    b218:	9c 83       	std	Y+4, r25	; 0x04
    b21a:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    b21c:	8b 81       	ldd	r24, Y+3	; 0x03
    b21e:	9c 81       	ldd	r25, Y+4	; 0x04
    b220:	fc 01       	movw	r30, r24
    b222:	80 85       	ldd	r24, Z+8	; 0x08
    b224:	91 85       	ldd	r25, Z+9	; 0x09
    b226:	9a 83       	std	Y+2, r25	; 0x02
    b228:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    b22a:	8b 81       	ldd	r24, Y+3	; 0x03
    b22c:	9c 81       	ldd	r25, Y+4	; 0x04
    b22e:	fc 01       	movw	r30, r24
    b230:	82 81       	ldd	r24, Z+2	; 0x02
    b232:	93 81       	ldd	r25, Z+3	; 0x03
    b234:	2b 81       	ldd	r18, Y+3	; 0x03
    b236:	3c 81       	ldd	r19, Y+4	; 0x04
    b238:	f9 01       	movw	r30, r18
    b23a:	24 81       	ldd	r18, Z+4	; 0x04
    b23c:	35 81       	ldd	r19, Z+5	; 0x05
    b23e:	fc 01       	movw	r30, r24
    b240:	35 83       	std	Z+5, r19	; 0x05
    b242:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    b244:	8b 81       	ldd	r24, Y+3	; 0x03
    b246:	9c 81       	ldd	r25, Y+4	; 0x04
    b248:	fc 01       	movw	r30, r24
    b24a:	84 81       	ldd	r24, Z+4	; 0x04
    b24c:	95 81       	ldd	r25, Z+5	; 0x05
    b24e:	2b 81       	ldd	r18, Y+3	; 0x03
    b250:	3c 81       	ldd	r19, Y+4	; 0x04
    b252:	f9 01       	movw	r30, r18
    b254:	22 81       	ldd	r18, Z+2	; 0x02
    b256:	33 81       	ldd	r19, Z+3	; 0x03
    b258:	fc 01       	movw	r30, r24
    b25a:	33 83       	std	Z+3, r19	; 0x03
    b25c:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    b25e:	89 81       	ldd	r24, Y+1	; 0x01
    b260:	9a 81       	ldd	r25, Y+2	; 0x02
    b262:	fc 01       	movw	r30, r24
    b264:	21 81       	ldd	r18, Z+1	; 0x01
    b266:	32 81       	ldd	r19, Z+2	; 0x02
    b268:	8b 81       	ldd	r24, Y+3	; 0x03
    b26a:	9c 81       	ldd	r25, Y+4	; 0x04
    b26c:	28 17       	cp	r18, r24
    b26e:	39 07       	cpc	r19, r25
    b270:	51 f4       	brne	.+20     	; 0xb286 <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    b272:	8b 81       	ldd	r24, Y+3	; 0x03
    b274:	9c 81       	ldd	r25, Y+4	; 0x04
    b276:	fc 01       	movw	r30, r24
    b278:	24 81       	ldd	r18, Z+4	; 0x04
    b27a:	35 81       	ldd	r19, Z+5	; 0x05
    b27c:	89 81       	ldd	r24, Y+1	; 0x01
    b27e:	9a 81       	ldd	r25, Y+2	; 0x02
    b280:	fc 01       	movw	r30, r24
    b282:	32 83       	std	Z+2, r19	; 0x02
    b284:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    b286:	8b 81       	ldd	r24, Y+3	; 0x03
    b288:	9c 81       	ldd	r25, Y+4	; 0x04
    b28a:	fc 01       	movw	r30, r24
    b28c:	11 86       	std	Z+9, r1	; 0x09
    b28e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    b290:	89 81       	ldd	r24, Y+1	; 0x01
    b292:	9a 81       	ldd	r25, Y+2	; 0x02
    b294:	fc 01       	movw	r30, r24
    b296:	80 81       	ld	r24, Z
    b298:	2f ef       	ldi	r18, 0xFF	; 255
    b29a:	28 0f       	add	r18, r24
    b29c:	89 81       	ldd	r24, Y+1	; 0x01
    b29e:	9a 81       	ldd	r25, Y+2	; 0x02
    b2a0:	fc 01       	movw	r30, r24
    b2a2:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    b2a4:	89 81       	ldd	r24, Y+1	; 0x01
    b2a6:	9a 81       	ldd	r25, Y+2	; 0x02
    b2a8:	fc 01       	movw	r30, r24
    b2aa:	80 81       	ld	r24, Z
}
    b2ac:	0f 90       	pop	r0
    b2ae:	0f 90       	pop	r0
    b2b0:	0f 90       	pop	r0
    b2b2:	0f 90       	pop	r0
    b2b4:	df 91       	pop	r29
    b2b6:	cf 91       	pop	r28
    b2b8:	08 95       	ret

0000b2ba <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
    b2ba:	cf 93       	push	r28
    b2bc:	df 93       	push	r29
    b2be:	cd b7       	in	r28, 0x3d	; 61
    b2c0:	de b7       	in	r29, 0x3e	; 62
    b2c2:	28 97       	sbiw	r28, 0x08	; 8
    b2c4:	0f b6       	in	r0, 0x3f	; 63
    b2c6:	f8 94       	cli
    b2c8:	de bf       	out	0x3e, r29	; 62
    b2ca:	0f be       	out	0x3f, r0	; 63
    b2cc:	cd bf       	out	0x3d, r28	; 61
    b2ce:	9c 83       	std	Y+4, r25	; 0x04
    b2d0:	8b 83       	std	Y+3, r24	; 0x03
    b2d2:	7e 83       	std	Y+6, r23	; 0x06
    b2d4:	6d 83       	std	Y+5, r22	; 0x05
    b2d6:	58 87       	std	Y+8, r21	; 0x08
    b2d8:	4f 83       	std	Y+7, r20	; 0x07
    b2da:	8b 81       	ldd	r24, Y+3	; 0x03
    b2dc:	9c 81       	ldd	r25, Y+4	; 0x04
    b2de:	21 e1       	ldi	r18, 0x11	; 17
    b2e0:	fc 01       	movw	r30, r24
    b2e2:	20 83       	st	Z, r18
    b2e4:	8b 81       	ldd	r24, Y+3	; 0x03
    b2e6:	9c 81       	ldd	r25, Y+4	; 0x04
    b2e8:	01 97       	sbiw	r24, 0x01	; 1
    b2ea:	9c 83       	std	Y+4, r25	; 0x04
    b2ec:	8b 83       	std	Y+3, r24	; 0x03
    b2ee:	8b 81       	ldd	r24, Y+3	; 0x03
    b2f0:	9c 81       	ldd	r25, Y+4	; 0x04
    b2f2:	22 e2       	ldi	r18, 0x22	; 34
    b2f4:	fc 01       	movw	r30, r24
    b2f6:	20 83       	st	Z, r18
    b2f8:	8b 81       	ldd	r24, Y+3	; 0x03
    b2fa:	9c 81       	ldd	r25, Y+4	; 0x04
    b2fc:	01 97       	sbiw	r24, 0x01	; 1
    b2fe:	9c 83       	std	Y+4, r25	; 0x04
    b300:	8b 83       	std	Y+3, r24	; 0x03
    b302:	8b 81       	ldd	r24, Y+3	; 0x03
    b304:	9c 81       	ldd	r25, Y+4	; 0x04
    b306:	23 e3       	ldi	r18, 0x33	; 51
    b308:	fc 01       	movw	r30, r24
    b30a:	20 83       	st	Z, r18
    b30c:	8b 81       	ldd	r24, Y+3	; 0x03
    b30e:	9c 81       	ldd	r25, Y+4	; 0x04
    b310:	01 97       	sbiw	r24, 0x01	; 1
    b312:	9c 83       	std	Y+4, r25	; 0x04
    b314:	8b 83       	std	Y+3, r24	; 0x03
    b316:	8d 81       	ldd	r24, Y+5	; 0x05
    b318:	9e 81       	ldd	r25, Y+6	; 0x06
    b31a:	9a 83       	std	Y+2, r25	; 0x02
    b31c:	89 83       	std	Y+1, r24	; 0x01
    b31e:	29 81       	ldd	r18, Y+1	; 0x01
    b320:	8b 81       	ldd	r24, Y+3	; 0x03
    b322:	9c 81       	ldd	r25, Y+4	; 0x04
    b324:	fc 01       	movw	r30, r24
    b326:	20 83       	st	Z, r18
    b328:	8b 81       	ldd	r24, Y+3	; 0x03
    b32a:	9c 81       	ldd	r25, Y+4	; 0x04
    b32c:	01 97       	sbiw	r24, 0x01	; 1
    b32e:	9c 83       	std	Y+4, r25	; 0x04
    b330:	8b 83       	std	Y+3, r24	; 0x03
    b332:	89 81       	ldd	r24, Y+1	; 0x01
    b334:	9a 81       	ldd	r25, Y+2	; 0x02
    b336:	89 2f       	mov	r24, r25
    b338:	99 27       	eor	r25, r25
    b33a:	9a 83       	std	Y+2, r25	; 0x02
    b33c:	89 83       	std	Y+1, r24	; 0x01
    b33e:	29 81       	ldd	r18, Y+1	; 0x01
    b340:	8b 81       	ldd	r24, Y+3	; 0x03
    b342:	9c 81       	ldd	r25, Y+4	; 0x04
    b344:	fc 01       	movw	r30, r24
    b346:	20 83       	st	Z, r18
    b348:	8b 81       	ldd	r24, Y+3	; 0x03
    b34a:	9c 81       	ldd	r25, Y+4	; 0x04
    b34c:	01 97       	sbiw	r24, 0x01	; 1
    b34e:	9c 83       	std	Y+4, r25	; 0x04
    b350:	8b 83       	std	Y+3, r24	; 0x03
    b352:	8b 81       	ldd	r24, Y+3	; 0x03
    b354:	9c 81       	ldd	r25, Y+4	; 0x04
    b356:	fc 01       	movw	r30, r24
    b358:	10 82       	st	Z, r1
    b35a:	8b 81       	ldd	r24, Y+3	; 0x03
    b35c:	9c 81       	ldd	r25, Y+4	; 0x04
    b35e:	01 97       	sbiw	r24, 0x01	; 1
    b360:	9c 83       	std	Y+4, r25	; 0x04
    b362:	8b 83       	std	Y+3, r24	; 0x03
    b364:	8b 81       	ldd	r24, Y+3	; 0x03
    b366:	9c 81       	ldd	r25, Y+4	; 0x04
    b368:	fc 01       	movw	r30, r24
    b36a:	10 82       	st	Z, r1
    b36c:	8b 81       	ldd	r24, Y+3	; 0x03
    b36e:	9c 81       	ldd	r25, Y+4	; 0x04
    b370:	01 97       	sbiw	r24, 0x01	; 1
    b372:	9c 83       	std	Y+4, r25	; 0x04
    b374:	8b 83       	std	Y+3, r24	; 0x03
    b376:	8b 81       	ldd	r24, Y+3	; 0x03
    b378:	9c 81       	ldd	r25, Y+4	; 0x04
    b37a:	20 e8       	ldi	r18, 0x80	; 128
    b37c:	fc 01       	movw	r30, r24
    b37e:	20 83       	st	Z, r18
    b380:	8b 81       	ldd	r24, Y+3	; 0x03
    b382:	9c 81       	ldd	r25, Y+4	; 0x04
    b384:	01 97       	sbiw	r24, 0x01	; 1
    b386:	9c 83       	std	Y+4, r25	; 0x04
    b388:	8b 83       	std	Y+3, r24	; 0x03
    b38a:	8b 81       	ldd	r24, Y+3	; 0x03
    b38c:	9c 81       	ldd	r25, Y+4	; 0x04
    b38e:	fc 01       	movw	r30, r24
    b390:	10 82       	st	Z, r1
    b392:	8b 81       	ldd	r24, Y+3	; 0x03
    b394:	9c 81       	ldd	r25, Y+4	; 0x04
    b396:	01 97       	sbiw	r24, 0x01	; 1
    b398:	9c 83       	std	Y+4, r25	; 0x04
    b39a:	8b 83       	std	Y+3, r24	; 0x03
    b39c:	8b 81       	ldd	r24, Y+3	; 0x03
    b39e:	9c 81       	ldd	r25, Y+4	; 0x04
    b3a0:	fc 01       	movw	r30, r24
    b3a2:	10 82       	st	Z, r1
    b3a4:	8b 81       	ldd	r24, Y+3	; 0x03
    b3a6:	9c 81       	ldd	r25, Y+4	; 0x04
    b3a8:	01 97       	sbiw	r24, 0x01	; 1
    b3aa:	9c 83       	std	Y+4, r25	; 0x04
    b3ac:	8b 83       	std	Y+3, r24	; 0x03
    b3ae:	8b 81       	ldd	r24, Y+3	; 0x03
    b3b0:	9c 81       	ldd	r25, Y+4	; 0x04
    b3b2:	fc 01       	movw	r30, r24
    b3b4:	10 82       	st	Z, r1
    b3b6:	8b 81       	ldd	r24, Y+3	; 0x03
    b3b8:	9c 81       	ldd	r25, Y+4	; 0x04
    b3ba:	01 97       	sbiw	r24, 0x01	; 1
    b3bc:	9c 83       	std	Y+4, r25	; 0x04
    b3be:	8b 83       	std	Y+3, r24	; 0x03
    b3c0:	8b 81       	ldd	r24, Y+3	; 0x03
    b3c2:	9c 81       	ldd	r25, Y+4	; 0x04
    b3c4:	22 e0       	ldi	r18, 0x02	; 2
    b3c6:	fc 01       	movw	r30, r24
    b3c8:	20 83       	st	Z, r18
    b3ca:	8b 81       	ldd	r24, Y+3	; 0x03
    b3cc:	9c 81       	ldd	r25, Y+4	; 0x04
    b3ce:	01 97       	sbiw	r24, 0x01	; 1
    b3d0:	9c 83       	std	Y+4, r25	; 0x04
    b3d2:	8b 83       	std	Y+3, r24	; 0x03
    b3d4:	8b 81       	ldd	r24, Y+3	; 0x03
    b3d6:	9c 81       	ldd	r25, Y+4	; 0x04
    b3d8:	23 e0       	ldi	r18, 0x03	; 3
    b3da:	fc 01       	movw	r30, r24
    b3dc:	20 83       	st	Z, r18
    b3de:	8b 81       	ldd	r24, Y+3	; 0x03
    b3e0:	9c 81       	ldd	r25, Y+4	; 0x04
    b3e2:	01 97       	sbiw	r24, 0x01	; 1
    b3e4:	9c 83       	std	Y+4, r25	; 0x04
    b3e6:	8b 83       	std	Y+3, r24	; 0x03
    b3e8:	8b 81       	ldd	r24, Y+3	; 0x03
    b3ea:	9c 81       	ldd	r25, Y+4	; 0x04
    b3ec:	24 e0       	ldi	r18, 0x04	; 4
    b3ee:	fc 01       	movw	r30, r24
    b3f0:	20 83       	st	Z, r18
    b3f2:	8b 81       	ldd	r24, Y+3	; 0x03
    b3f4:	9c 81       	ldd	r25, Y+4	; 0x04
    b3f6:	01 97       	sbiw	r24, 0x01	; 1
    b3f8:	9c 83       	std	Y+4, r25	; 0x04
    b3fa:	8b 83       	std	Y+3, r24	; 0x03
    b3fc:	8b 81       	ldd	r24, Y+3	; 0x03
    b3fe:	9c 81       	ldd	r25, Y+4	; 0x04
    b400:	25 e0       	ldi	r18, 0x05	; 5
    b402:	fc 01       	movw	r30, r24
    b404:	20 83       	st	Z, r18
    b406:	8b 81       	ldd	r24, Y+3	; 0x03
    b408:	9c 81       	ldd	r25, Y+4	; 0x04
    b40a:	01 97       	sbiw	r24, 0x01	; 1
    b40c:	9c 83       	std	Y+4, r25	; 0x04
    b40e:	8b 83       	std	Y+3, r24	; 0x03
    b410:	8b 81       	ldd	r24, Y+3	; 0x03
    b412:	9c 81       	ldd	r25, Y+4	; 0x04
    b414:	26 e0       	ldi	r18, 0x06	; 6
    b416:	fc 01       	movw	r30, r24
    b418:	20 83       	st	Z, r18
    b41a:	8b 81       	ldd	r24, Y+3	; 0x03
    b41c:	9c 81       	ldd	r25, Y+4	; 0x04
    b41e:	01 97       	sbiw	r24, 0x01	; 1
    b420:	9c 83       	std	Y+4, r25	; 0x04
    b422:	8b 83       	std	Y+3, r24	; 0x03
    b424:	8b 81       	ldd	r24, Y+3	; 0x03
    b426:	9c 81       	ldd	r25, Y+4	; 0x04
    b428:	27 e0       	ldi	r18, 0x07	; 7
    b42a:	fc 01       	movw	r30, r24
    b42c:	20 83       	st	Z, r18
    b42e:	8b 81       	ldd	r24, Y+3	; 0x03
    b430:	9c 81       	ldd	r25, Y+4	; 0x04
    b432:	01 97       	sbiw	r24, 0x01	; 1
    b434:	9c 83       	std	Y+4, r25	; 0x04
    b436:	8b 83       	std	Y+3, r24	; 0x03
    b438:	8b 81       	ldd	r24, Y+3	; 0x03
    b43a:	9c 81       	ldd	r25, Y+4	; 0x04
    b43c:	28 e0       	ldi	r18, 0x08	; 8
    b43e:	fc 01       	movw	r30, r24
    b440:	20 83       	st	Z, r18
    b442:	8b 81       	ldd	r24, Y+3	; 0x03
    b444:	9c 81       	ldd	r25, Y+4	; 0x04
    b446:	01 97       	sbiw	r24, 0x01	; 1
    b448:	9c 83       	std	Y+4, r25	; 0x04
    b44a:	8b 83       	std	Y+3, r24	; 0x03
    b44c:	8b 81       	ldd	r24, Y+3	; 0x03
    b44e:	9c 81       	ldd	r25, Y+4	; 0x04
    b450:	29 e0       	ldi	r18, 0x09	; 9
    b452:	fc 01       	movw	r30, r24
    b454:	20 83       	st	Z, r18
    b456:	8b 81       	ldd	r24, Y+3	; 0x03
    b458:	9c 81       	ldd	r25, Y+4	; 0x04
    b45a:	01 97       	sbiw	r24, 0x01	; 1
    b45c:	9c 83       	std	Y+4, r25	; 0x04
    b45e:	8b 83       	std	Y+3, r24	; 0x03
    b460:	8b 81       	ldd	r24, Y+3	; 0x03
    b462:	9c 81       	ldd	r25, Y+4	; 0x04
    b464:	20 e1       	ldi	r18, 0x10	; 16
    b466:	fc 01       	movw	r30, r24
    b468:	20 83       	st	Z, r18
    b46a:	8b 81       	ldd	r24, Y+3	; 0x03
    b46c:	9c 81       	ldd	r25, Y+4	; 0x04
    b46e:	01 97       	sbiw	r24, 0x01	; 1
    b470:	9c 83       	std	Y+4, r25	; 0x04
    b472:	8b 83       	std	Y+3, r24	; 0x03
    b474:	8b 81       	ldd	r24, Y+3	; 0x03
    b476:	9c 81       	ldd	r25, Y+4	; 0x04
    b478:	21 e1       	ldi	r18, 0x11	; 17
    b47a:	fc 01       	movw	r30, r24
    b47c:	20 83       	st	Z, r18
    b47e:	8b 81       	ldd	r24, Y+3	; 0x03
    b480:	9c 81       	ldd	r25, Y+4	; 0x04
    b482:	01 97       	sbiw	r24, 0x01	; 1
    b484:	9c 83       	std	Y+4, r25	; 0x04
    b486:	8b 83       	std	Y+3, r24	; 0x03
    b488:	8b 81       	ldd	r24, Y+3	; 0x03
    b48a:	9c 81       	ldd	r25, Y+4	; 0x04
    b48c:	22 e1       	ldi	r18, 0x12	; 18
    b48e:	fc 01       	movw	r30, r24
    b490:	20 83       	st	Z, r18
    b492:	8b 81       	ldd	r24, Y+3	; 0x03
    b494:	9c 81       	ldd	r25, Y+4	; 0x04
    b496:	01 97       	sbiw	r24, 0x01	; 1
    b498:	9c 83       	std	Y+4, r25	; 0x04
    b49a:	8b 83       	std	Y+3, r24	; 0x03
    b49c:	8b 81       	ldd	r24, Y+3	; 0x03
    b49e:	9c 81       	ldd	r25, Y+4	; 0x04
    b4a0:	23 e1       	ldi	r18, 0x13	; 19
    b4a2:	fc 01       	movw	r30, r24
    b4a4:	20 83       	st	Z, r18
    b4a6:	8b 81       	ldd	r24, Y+3	; 0x03
    b4a8:	9c 81       	ldd	r25, Y+4	; 0x04
    b4aa:	01 97       	sbiw	r24, 0x01	; 1
    b4ac:	9c 83       	std	Y+4, r25	; 0x04
    b4ae:	8b 83       	std	Y+3, r24	; 0x03
    b4b0:	8b 81       	ldd	r24, Y+3	; 0x03
    b4b2:	9c 81       	ldd	r25, Y+4	; 0x04
    b4b4:	24 e1       	ldi	r18, 0x14	; 20
    b4b6:	fc 01       	movw	r30, r24
    b4b8:	20 83       	st	Z, r18
    b4ba:	8b 81       	ldd	r24, Y+3	; 0x03
    b4bc:	9c 81       	ldd	r25, Y+4	; 0x04
    b4be:	01 97       	sbiw	r24, 0x01	; 1
    b4c0:	9c 83       	std	Y+4, r25	; 0x04
    b4c2:	8b 83       	std	Y+3, r24	; 0x03
    b4c4:	8b 81       	ldd	r24, Y+3	; 0x03
    b4c6:	9c 81       	ldd	r25, Y+4	; 0x04
    b4c8:	25 e1       	ldi	r18, 0x15	; 21
    b4ca:	fc 01       	movw	r30, r24
    b4cc:	20 83       	st	Z, r18
    b4ce:	8b 81       	ldd	r24, Y+3	; 0x03
    b4d0:	9c 81       	ldd	r25, Y+4	; 0x04
    b4d2:	01 97       	sbiw	r24, 0x01	; 1
    b4d4:	9c 83       	std	Y+4, r25	; 0x04
    b4d6:	8b 83       	std	Y+3, r24	; 0x03
    b4d8:	8b 81       	ldd	r24, Y+3	; 0x03
    b4da:	9c 81       	ldd	r25, Y+4	; 0x04
    b4dc:	26 e1       	ldi	r18, 0x16	; 22
    b4de:	fc 01       	movw	r30, r24
    b4e0:	20 83       	st	Z, r18
    b4e2:	8b 81       	ldd	r24, Y+3	; 0x03
    b4e4:	9c 81       	ldd	r25, Y+4	; 0x04
    b4e6:	01 97       	sbiw	r24, 0x01	; 1
    b4e8:	9c 83       	std	Y+4, r25	; 0x04
    b4ea:	8b 83       	std	Y+3, r24	; 0x03
    b4ec:	8b 81       	ldd	r24, Y+3	; 0x03
    b4ee:	9c 81       	ldd	r25, Y+4	; 0x04
    b4f0:	27 e1       	ldi	r18, 0x17	; 23
    b4f2:	fc 01       	movw	r30, r24
    b4f4:	20 83       	st	Z, r18
    b4f6:	8b 81       	ldd	r24, Y+3	; 0x03
    b4f8:	9c 81       	ldd	r25, Y+4	; 0x04
    b4fa:	01 97       	sbiw	r24, 0x01	; 1
    b4fc:	9c 83       	std	Y+4, r25	; 0x04
    b4fe:	8b 83       	std	Y+3, r24	; 0x03
    b500:	8b 81       	ldd	r24, Y+3	; 0x03
    b502:	9c 81       	ldd	r25, Y+4	; 0x04
    b504:	28 e1       	ldi	r18, 0x18	; 24
    b506:	fc 01       	movw	r30, r24
    b508:	20 83       	st	Z, r18
    b50a:	8b 81       	ldd	r24, Y+3	; 0x03
    b50c:	9c 81       	ldd	r25, Y+4	; 0x04
    b50e:	01 97       	sbiw	r24, 0x01	; 1
    b510:	9c 83       	std	Y+4, r25	; 0x04
    b512:	8b 83       	std	Y+3, r24	; 0x03
    b514:	8b 81       	ldd	r24, Y+3	; 0x03
    b516:	9c 81       	ldd	r25, Y+4	; 0x04
    b518:	29 e1       	ldi	r18, 0x19	; 25
    b51a:	fc 01       	movw	r30, r24
    b51c:	20 83       	st	Z, r18
    b51e:	8b 81       	ldd	r24, Y+3	; 0x03
    b520:	9c 81       	ldd	r25, Y+4	; 0x04
    b522:	01 97       	sbiw	r24, 0x01	; 1
    b524:	9c 83       	std	Y+4, r25	; 0x04
    b526:	8b 83       	std	Y+3, r24	; 0x03
    b528:	8b 81       	ldd	r24, Y+3	; 0x03
    b52a:	9c 81       	ldd	r25, Y+4	; 0x04
    b52c:	20 e2       	ldi	r18, 0x20	; 32
    b52e:	fc 01       	movw	r30, r24
    b530:	20 83       	st	Z, r18
    b532:	8b 81       	ldd	r24, Y+3	; 0x03
    b534:	9c 81       	ldd	r25, Y+4	; 0x04
    b536:	01 97       	sbiw	r24, 0x01	; 1
    b538:	9c 83       	std	Y+4, r25	; 0x04
    b53a:	8b 83       	std	Y+3, r24	; 0x03
    b53c:	8b 81       	ldd	r24, Y+3	; 0x03
    b53e:	9c 81       	ldd	r25, Y+4	; 0x04
    b540:	21 e2       	ldi	r18, 0x21	; 33
    b542:	fc 01       	movw	r30, r24
    b544:	20 83       	st	Z, r18
    b546:	8b 81       	ldd	r24, Y+3	; 0x03
    b548:	9c 81       	ldd	r25, Y+4	; 0x04
    b54a:	01 97       	sbiw	r24, 0x01	; 1
    b54c:	9c 83       	std	Y+4, r25	; 0x04
    b54e:	8b 83       	std	Y+3, r24	; 0x03
    b550:	8b 81       	ldd	r24, Y+3	; 0x03
    b552:	9c 81       	ldd	r25, Y+4	; 0x04
    b554:	22 e2       	ldi	r18, 0x22	; 34
    b556:	fc 01       	movw	r30, r24
    b558:	20 83       	st	Z, r18
    b55a:	8b 81       	ldd	r24, Y+3	; 0x03
    b55c:	9c 81       	ldd	r25, Y+4	; 0x04
    b55e:	01 97       	sbiw	r24, 0x01	; 1
    b560:	9c 83       	std	Y+4, r25	; 0x04
    b562:	8b 83       	std	Y+3, r24	; 0x03
    b564:	8b 81       	ldd	r24, Y+3	; 0x03
    b566:	9c 81       	ldd	r25, Y+4	; 0x04
    b568:	23 e2       	ldi	r18, 0x23	; 35
    b56a:	fc 01       	movw	r30, r24
    b56c:	20 83       	st	Z, r18
    b56e:	8b 81       	ldd	r24, Y+3	; 0x03
    b570:	9c 81       	ldd	r25, Y+4	; 0x04
    b572:	01 97       	sbiw	r24, 0x01	; 1
    b574:	9c 83       	std	Y+4, r25	; 0x04
    b576:	8b 83       	std	Y+3, r24	; 0x03
    b578:	8f 81       	ldd	r24, Y+7	; 0x07
    b57a:	98 85       	ldd	r25, Y+8	; 0x08
    b57c:	9a 83       	std	Y+2, r25	; 0x02
    b57e:	89 83       	std	Y+1, r24	; 0x01
    b580:	29 81       	ldd	r18, Y+1	; 0x01
    b582:	8b 81       	ldd	r24, Y+3	; 0x03
    b584:	9c 81       	ldd	r25, Y+4	; 0x04
    b586:	fc 01       	movw	r30, r24
    b588:	20 83       	st	Z, r18
    b58a:	8b 81       	ldd	r24, Y+3	; 0x03
    b58c:	9c 81       	ldd	r25, Y+4	; 0x04
    b58e:	01 97       	sbiw	r24, 0x01	; 1
    b590:	9c 83       	std	Y+4, r25	; 0x04
    b592:	8b 83       	std	Y+3, r24	; 0x03
    b594:	89 81       	ldd	r24, Y+1	; 0x01
    b596:	9a 81       	ldd	r25, Y+2	; 0x02
    b598:	89 2f       	mov	r24, r25
    b59a:	99 27       	eor	r25, r25
    b59c:	9a 83       	std	Y+2, r25	; 0x02
    b59e:	89 83       	std	Y+1, r24	; 0x01
    b5a0:	29 81       	ldd	r18, Y+1	; 0x01
    b5a2:	8b 81       	ldd	r24, Y+3	; 0x03
    b5a4:	9c 81       	ldd	r25, Y+4	; 0x04
    b5a6:	fc 01       	movw	r30, r24
    b5a8:	20 83       	st	Z, r18
    b5aa:	8b 81       	ldd	r24, Y+3	; 0x03
    b5ac:	9c 81       	ldd	r25, Y+4	; 0x04
    b5ae:	01 97       	sbiw	r24, 0x01	; 1
    b5b0:	9c 83       	std	Y+4, r25	; 0x04
    b5b2:	8b 83       	std	Y+3, r24	; 0x03
    b5b4:	8b 81       	ldd	r24, Y+3	; 0x03
    b5b6:	9c 81       	ldd	r25, Y+4	; 0x04
    b5b8:	26 e2       	ldi	r18, 0x26	; 38
    b5ba:	fc 01       	movw	r30, r24
    b5bc:	20 83       	st	Z, r18
    b5be:	8b 81       	ldd	r24, Y+3	; 0x03
    b5c0:	9c 81       	ldd	r25, Y+4	; 0x04
    b5c2:	01 97       	sbiw	r24, 0x01	; 1
    b5c4:	9c 83       	std	Y+4, r25	; 0x04
    b5c6:	8b 83       	std	Y+3, r24	; 0x03
    b5c8:	8b 81       	ldd	r24, Y+3	; 0x03
    b5ca:	9c 81       	ldd	r25, Y+4	; 0x04
    b5cc:	27 e2       	ldi	r18, 0x27	; 39
    b5ce:	fc 01       	movw	r30, r24
    b5d0:	20 83       	st	Z, r18
    b5d2:	8b 81       	ldd	r24, Y+3	; 0x03
    b5d4:	9c 81       	ldd	r25, Y+4	; 0x04
    b5d6:	01 97       	sbiw	r24, 0x01	; 1
    b5d8:	9c 83       	std	Y+4, r25	; 0x04
    b5da:	8b 83       	std	Y+3, r24	; 0x03
    b5dc:	8b 81       	ldd	r24, Y+3	; 0x03
    b5de:	9c 81       	ldd	r25, Y+4	; 0x04
    b5e0:	28 e2       	ldi	r18, 0x28	; 40
    b5e2:	fc 01       	movw	r30, r24
    b5e4:	20 83       	st	Z, r18
    b5e6:	8b 81       	ldd	r24, Y+3	; 0x03
    b5e8:	9c 81       	ldd	r25, Y+4	; 0x04
    b5ea:	01 97       	sbiw	r24, 0x01	; 1
    b5ec:	9c 83       	std	Y+4, r25	; 0x04
    b5ee:	8b 83       	std	Y+3, r24	; 0x03
    b5f0:	8b 81       	ldd	r24, Y+3	; 0x03
    b5f2:	9c 81       	ldd	r25, Y+4	; 0x04
    b5f4:	29 e2       	ldi	r18, 0x29	; 41
    b5f6:	fc 01       	movw	r30, r24
    b5f8:	20 83       	st	Z, r18
    b5fa:	8b 81       	ldd	r24, Y+3	; 0x03
    b5fc:	9c 81       	ldd	r25, Y+4	; 0x04
    b5fe:	01 97       	sbiw	r24, 0x01	; 1
    b600:	9c 83       	std	Y+4, r25	; 0x04
    b602:	8b 83       	std	Y+3, r24	; 0x03
    b604:	8b 81       	ldd	r24, Y+3	; 0x03
    b606:	9c 81       	ldd	r25, Y+4	; 0x04
    b608:	20 e3       	ldi	r18, 0x30	; 48
    b60a:	fc 01       	movw	r30, r24
    b60c:	20 83       	st	Z, r18
    b60e:	8b 81       	ldd	r24, Y+3	; 0x03
    b610:	9c 81       	ldd	r25, Y+4	; 0x04
    b612:	01 97       	sbiw	r24, 0x01	; 1
    b614:	9c 83       	std	Y+4, r25	; 0x04
    b616:	8b 83       	std	Y+3, r24	; 0x03
    b618:	8b 81       	ldd	r24, Y+3	; 0x03
    b61a:	9c 81       	ldd	r25, Y+4	; 0x04
    b61c:	21 e3       	ldi	r18, 0x31	; 49
    b61e:	fc 01       	movw	r30, r24
    b620:	20 83       	st	Z, r18
    b622:	8b 81       	ldd	r24, Y+3	; 0x03
    b624:	9c 81       	ldd	r25, Y+4	; 0x04
    b626:	01 97       	sbiw	r24, 0x01	; 1
    b628:	9c 83       	std	Y+4, r25	; 0x04
    b62a:	8b 83       	std	Y+3, r24	; 0x03
    b62c:	8b 81       	ldd	r24, Y+3	; 0x03
    b62e:	9c 81       	ldd	r25, Y+4	; 0x04
    b630:	28 96       	adiw	r28, 0x08	; 8
    b632:	0f b6       	in	r0, 0x3f	; 63
    b634:	f8 94       	cli
    b636:	de bf       	out	0x3e, r29	; 62
    b638:	0f be       	out	0x3f, r0	; 63
    b63a:	cd bf       	out	0x3d, r28	; 61
    b63c:	df 91       	pop	r29
    b63e:	cf 91       	pop	r28
    b640:	08 95       	ret

0000b642 <xPortStartScheduler>:
    b642:	cf 93       	push	r28
    b644:	df 93       	push	r29
    b646:	cd b7       	in	r28, 0x3d	; 61
    b648:	de b7       	in	r29, 0x3e	; 62
    b64a:	ff d0       	rcall	.+510    	; 0xb84a <prvSetupTimerInterrupt>
    b64c:	a0 91 13 05 	lds	r26, 0x0513	; 0x800513 <pxCurrentTCB>
    b650:	b0 91 14 05 	lds	r27, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    b654:	cd 91       	ld	r28, X+
    b656:	cd bf       	out	0x3d, r28	; 61
    b658:	dd 91       	ld	r29, X+
    b65a:	de bf       	out	0x3e, r29	; 62
    b65c:	ff 91       	pop	r31
    b65e:	ef 91       	pop	r30
    b660:	df 91       	pop	r29
    b662:	cf 91       	pop	r28
    b664:	bf 91       	pop	r27
    b666:	af 91       	pop	r26
    b668:	9f 91       	pop	r25
    b66a:	8f 91       	pop	r24
    b66c:	7f 91       	pop	r23
    b66e:	6f 91       	pop	r22
    b670:	5f 91       	pop	r21
    b672:	4f 91       	pop	r20
    b674:	3f 91       	pop	r19
    b676:	2f 91       	pop	r18
    b678:	1f 91       	pop	r17
    b67a:	0f 91       	pop	r16
    b67c:	ff 90       	pop	r15
    b67e:	ef 90       	pop	r14
    b680:	df 90       	pop	r13
    b682:	cf 90       	pop	r12
    b684:	bf 90       	pop	r11
    b686:	af 90       	pop	r10
    b688:	9f 90       	pop	r9
    b68a:	8f 90       	pop	r8
    b68c:	7f 90       	pop	r7
    b68e:	6f 90       	pop	r6
    b690:	5f 90       	pop	r5
    b692:	4f 90       	pop	r4
    b694:	3f 90       	pop	r3
    b696:	2f 90       	pop	r2
    b698:	1f 90       	pop	r1
    b69a:	0f 90       	pop	r0
    b69c:	0c be       	out	0x3c, r0	; 60
    b69e:	0f 90       	pop	r0
    b6a0:	0b be       	out	0x3b, r0	; 59
    b6a2:	0f 90       	pop	r0
    b6a4:	0f be       	out	0x3f, r0	; 63
    b6a6:	0f 90       	pop	r0
    b6a8:	08 95       	ret
    b6aa:	81 e0       	ldi	r24, 0x01	; 1
    b6ac:	df 91       	pop	r29
    b6ae:	cf 91       	pop	r28
    b6b0:	08 95       	ret

0000b6b2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    b6b2:	0f 92       	push	r0
    b6b4:	0f b6       	in	r0, 0x3f	; 63
    b6b6:	f8 94       	cli
    b6b8:	0f 92       	push	r0
    b6ba:	0b b6       	in	r0, 0x3b	; 59
    b6bc:	0f 92       	push	r0
    b6be:	0c b6       	in	r0, 0x3c	; 60
    b6c0:	0f 92       	push	r0
    b6c2:	1f 92       	push	r1
    b6c4:	11 24       	eor	r1, r1
    b6c6:	2f 92       	push	r2
    b6c8:	3f 92       	push	r3
    b6ca:	4f 92       	push	r4
    b6cc:	5f 92       	push	r5
    b6ce:	6f 92       	push	r6
    b6d0:	7f 92       	push	r7
    b6d2:	8f 92       	push	r8
    b6d4:	9f 92       	push	r9
    b6d6:	af 92       	push	r10
    b6d8:	bf 92       	push	r11
    b6da:	cf 92       	push	r12
    b6dc:	df 92       	push	r13
    b6de:	ef 92       	push	r14
    b6e0:	ff 92       	push	r15
    b6e2:	0f 93       	push	r16
    b6e4:	1f 93       	push	r17
    b6e6:	2f 93       	push	r18
    b6e8:	3f 93       	push	r19
    b6ea:	4f 93       	push	r20
    b6ec:	5f 93       	push	r21
    b6ee:	6f 93       	push	r22
    b6f0:	7f 93       	push	r23
    b6f2:	8f 93       	push	r24
    b6f4:	9f 93       	push	r25
    b6f6:	af 93       	push	r26
    b6f8:	bf 93       	push	r27
    b6fa:	cf 93       	push	r28
    b6fc:	df 93       	push	r29
    b6fe:	ef 93       	push	r30
    b700:	ff 93       	push	r31
    b702:	a0 91 13 05 	lds	r26, 0x0513	; 0x800513 <pxCurrentTCB>
    b706:	b0 91 14 05 	lds	r27, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    b70a:	0d b6       	in	r0, 0x3d	; 61
    b70c:	0d 92       	st	X+, r0
    b70e:	0e b6       	in	r0, 0x3e	; 62
    b710:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    b712:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    b716:	a0 91 13 05 	lds	r26, 0x0513	; 0x800513 <pxCurrentTCB>
    b71a:	b0 91 14 05 	lds	r27, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    b71e:	cd 91       	ld	r28, X+
    b720:	cd bf       	out	0x3d, r28	; 61
    b722:	dd 91       	ld	r29, X+
    b724:	de bf       	out	0x3e, r29	; 62
    b726:	ff 91       	pop	r31
    b728:	ef 91       	pop	r30
    b72a:	df 91       	pop	r29
    b72c:	cf 91       	pop	r28
    b72e:	bf 91       	pop	r27
    b730:	af 91       	pop	r26
    b732:	9f 91       	pop	r25
    b734:	8f 91       	pop	r24
    b736:	7f 91       	pop	r23
    b738:	6f 91       	pop	r22
    b73a:	5f 91       	pop	r21
    b73c:	4f 91       	pop	r20
    b73e:	3f 91       	pop	r19
    b740:	2f 91       	pop	r18
    b742:	1f 91       	pop	r17
    b744:	0f 91       	pop	r16
    b746:	ff 90       	pop	r15
    b748:	ef 90       	pop	r14
    b74a:	df 90       	pop	r13
    b74c:	cf 90       	pop	r12
    b74e:	bf 90       	pop	r11
    b750:	af 90       	pop	r10
    b752:	9f 90       	pop	r9
    b754:	8f 90       	pop	r8
    b756:	7f 90       	pop	r7
    b758:	6f 90       	pop	r6
    b75a:	5f 90       	pop	r5
    b75c:	4f 90       	pop	r4
    b75e:	3f 90       	pop	r3
    b760:	2f 90       	pop	r2
    b762:	1f 90       	pop	r1
    b764:	0f 90       	pop	r0
    b766:	0c be       	out	0x3c, r0	; 60
    b768:	0f 90       	pop	r0
    b76a:	0b be       	out	0x3b, r0	; 59
    b76c:	0f 90       	pop	r0
    b76e:	0f be       	out	0x3f, r0	; 63
    b770:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    b772:	08 95       	ret
	...

0000b776 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    b776:	0f 92       	push	r0
    b778:	0f b6       	in	r0, 0x3f	; 63
    b77a:	f8 94       	cli
    b77c:	0f 92       	push	r0
    b77e:	0b b6       	in	r0, 0x3b	; 59
    b780:	0f 92       	push	r0
    b782:	0c b6       	in	r0, 0x3c	; 60
    b784:	0f 92       	push	r0
    b786:	1f 92       	push	r1
    b788:	11 24       	eor	r1, r1
    b78a:	2f 92       	push	r2
    b78c:	3f 92       	push	r3
    b78e:	4f 92       	push	r4
    b790:	5f 92       	push	r5
    b792:	6f 92       	push	r6
    b794:	7f 92       	push	r7
    b796:	8f 92       	push	r8
    b798:	9f 92       	push	r9
    b79a:	af 92       	push	r10
    b79c:	bf 92       	push	r11
    b79e:	cf 92       	push	r12
    b7a0:	df 92       	push	r13
    b7a2:	ef 92       	push	r14
    b7a4:	ff 92       	push	r15
    b7a6:	0f 93       	push	r16
    b7a8:	1f 93       	push	r17
    b7aa:	2f 93       	push	r18
    b7ac:	3f 93       	push	r19
    b7ae:	4f 93       	push	r20
    b7b0:	5f 93       	push	r21
    b7b2:	6f 93       	push	r22
    b7b4:	7f 93       	push	r23
    b7b6:	8f 93       	push	r24
    b7b8:	9f 93       	push	r25
    b7ba:	af 93       	push	r26
    b7bc:	bf 93       	push	r27
    b7be:	cf 93       	push	r28
    b7c0:	df 93       	push	r29
    b7c2:	ef 93       	push	r30
    b7c4:	ff 93       	push	r31
    b7c6:	a0 91 13 05 	lds	r26, 0x0513	; 0x800513 <pxCurrentTCB>
    b7ca:	b0 91 14 05 	lds	r27, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    b7ce:	0d b6       	in	r0, 0x3d	; 61
    b7d0:	0d 92       	st	X+, r0
    b7d2:	0e b6       	in	r0, 0x3e	; 62
    b7d4:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    b7d6:	83 e5       	ldi	r24, 0x53	; 83
    b7d8:	90 e0       	ldi	r25, 0x00	; 0
    b7da:	fc 01       	movw	r30, r24
    b7dc:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
    b7de:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <xTaskIncrementTick>
    b7e2:	88 23       	and	r24, r24
    b7e4:	11 f0       	breq	.+4      	; 0xb7ea <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    b7e6:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    b7ea:	a0 91 13 05 	lds	r26, 0x0513	; 0x800513 <pxCurrentTCB>
    b7ee:	b0 91 14 05 	lds	r27, 0x0514	; 0x800514 <pxCurrentTCB+0x1>
    b7f2:	cd 91       	ld	r28, X+
    b7f4:	cd bf       	out	0x3d, r28	; 61
    b7f6:	dd 91       	ld	r29, X+
    b7f8:	de bf       	out	0x3e, r29	; 62
    b7fa:	ff 91       	pop	r31
    b7fc:	ef 91       	pop	r30
    b7fe:	df 91       	pop	r29
    b800:	cf 91       	pop	r28
    b802:	bf 91       	pop	r27
    b804:	af 91       	pop	r26
    b806:	9f 91       	pop	r25
    b808:	8f 91       	pop	r24
    b80a:	7f 91       	pop	r23
    b80c:	6f 91       	pop	r22
    b80e:	5f 91       	pop	r21
    b810:	4f 91       	pop	r20
    b812:	3f 91       	pop	r19
    b814:	2f 91       	pop	r18
    b816:	1f 91       	pop	r17
    b818:	0f 91       	pop	r16
    b81a:	ff 90       	pop	r15
    b81c:	ef 90       	pop	r14
    b81e:	df 90       	pop	r13
    b820:	cf 90       	pop	r12
    b822:	bf 90       	pop	r11
    b824:	af 90       	pop	r10
    b826:	9f 90       	pop	r9
    b828:	8f 90       	pop	r8
    b82a:	7f 90       	pop	r7
    b82c:	6f 90       	pop	r6
    b82e:	5f 90       	pop	r5
    b830:	4f 90       	pop	r4
    b832:	3f 90       	pop	r3
    b834:	2f 90       	pop	r2
    b836:	1f 90       	pop	r1
    b838:	0f 90       	pop	r0
    b83a:	0c be       	out	0x3c, r0	; 60
    b83c:	0f 90       	pop	r0
    b83e:	0b be       	out	0x3b, r0	; 59
    b840:	0f 90       	pop	r0
    b842:	0f be       	out	0x3f, r0	; 63
    b844:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    b846:	08 95       	ret
	...

0000b84a <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
    b84a:	cf 93       	push	r28
    b84c:	df 93       	push	r29
    b84e:	cd b7       	in	r28, 0x3d	; 61
    b850:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
    b852:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    b854:	80 e0       	ldi	r24, 0x00	; 0
    b856:	90 e0       	ldi	r25, 0x00	; 0
    b858:	88 70       	andi	r24, 0x08	; 8
    b85a:	99 27       	eor	r25, r25
    b85c:	89 2b       	or	r24, r25
    b85e:	11 f0       	breq	.+4      	; 0xb864 <prvSetupTimerInterrupt+0x1a>
    b860:	80 ee       	ldi	r24, 0xE0	; 224
    b862:	01 c0       	rjmp	.+2      	; 0xb866 <prvSetupTimerInterrupt+0x1c>
    b864:	80 ec       	ldi	r24, 0xC0	; 192
    b866:	90 e0       	ldi	r25, 0x00	; 0
    b868:	97 70       	andi	r25, 0x07	; 7
    b86a:	89 2b       	or	r24, r25
    b86c:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    b86e:	88 e1       	ldi	r24, 0x18	; 24
    b870:	0f b6       	in	r0, 0x3f	; 63
    b872:	f8 94       	cli
    b874:	a8 95       	wdr
    b876:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    b87a:	0f be       	out	0x3f, r0	; 63
    b87c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
    b880:	00 00       	nop
    b882:	df 91       	pop	r29
    b884:	cf 91       	pop	r28
    b886:	08 95       	ret

0000b888 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    b888:	76 df       	rcall	.-276    	; 0xb776 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    b88a:	18 95       	reti
	...

0000b88e <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    b88e:	cf 93       	push	r28
    b890:	df 93       	push	r29
    b892:	00 d0       	rcall	.+0      	; 0xb894 <xQueueGenericReset+0x6>
    b894:	1f 92       	push	r1
    b896:	1f 92       	push	r1
    b898:	cd b7       	in	r28, 0x3d	; 61
    b89a:	de b7       	in	r29, 0x3e	; 62
    b89c:	9c 83       	std	Y+4, r25	; 0x04
    b89e:	8b 83       	std	Y+3, r24	; 0x03
    b8a0:	6d 83       	std	Y+5, r22	; 0x05
    b8a2:	8b 81       	ldd	r24, Y+3	; 0x03
    b8a4:	9c 81       	ldd	r25, Y+4	; 0x04
    b8a6:	9a 83       	std	Y+2, r25	; 0x02
    b8a8:	89 83       	std	Y+1, r24	; 0x01
    b8aa:	0f b6       	in	r0, 0x3f	; 63
    b8ac:	f8 94       	cli
    b8ae:	0f 92       	push	r0
    b8b0:	89 81       	ldd	r24, Y+1	; 0x01
    b8b2:	9a 81       	ldd	r25, Y+2	; 0x02
    b8b4:	fc 01       	movw	r30, r24
    b8b6:	80 81       	ld	r24, Z
    b8b8:	91 81       	ldd	r25, Z+1	; 0x01
    b8ba:	29 81       	ldd	r18, Y+1	; 0x01
    b8bc:	3a 81       	ldd	r19, Y+2	; 0x02
    b8be:	f9 01       	movw	r30, r18
    b8c0:	23 8d       	ldd	r18, Z+27	; 0x1b
    b8c2:	42 2f       	mov	r20, r18
    b8c4:	50 e0       	ldi	r21, 0x00	; 0
    b8c6:	29 81       	ldd	r18, Y+1	; 0x01
    b8c8:	3a 81       	ldd	r19, Y+2	; 0x02
    b8ca:	f9 01       	movw	r30, r18
    b8cc:	24 8d       	ldd	r18, Z+28	; 0x1c
    b8ce:	22 2f       	mov	r18, r18
    b8d0:	30 e0       	ldi	r19, 0x00	; 0
    b8d2:	42 9f       	mul	r20, r18
    b8d4:	b0 01       	movw	r22, r0
    b8d6:	43 9f       	mul	r20, r19
    b8d8:	70 0d       	add	r23, r0
    b8da:	52 9f       	mul	r21, r18
    b8dc:	70 0d       	add	r23, r0
    b8de:	11 24       	eor	r1, r1
    b8e0:	9b 01       	movw	r18, r22
    b8e2:	28 0f       	add	r18, r24
    b8e4:	39 1f       	adc	r19, r25
    b8e6:	89 81       	ldd	r24, Y+1	; 0x01
    b8e8:	9a 81       	ldd	r25, Y+2	; 0x02
    b8ea:	fc 01       	movw	r30, r24
    b8ec:	35 83       	std	Z+5, r19	; 0x05
    b8ee:	24 83       	std	Z+4, r18	; 0x04
    b8f0:	89 81       	ldd	r24, Y+1	; 0x01
    b8f2:	9a 81       	ldd	r25, Y+2	; 0x02
    b8f4:	fc 01       	movw	r30, r24
    b8f6:	12 8e       	std	Z+26, r1	; 0x1a
    b8f8:	89 81       	ldd	r24, Y+1	; 0x01
    b8fa:	9a 81       	ldd	r25, Y+2	; 0x02
    b8fc:	fc 01       	movw	r30, r24
    b8fe:	20 81       	ld	r18, Z
    b900:	31 81       	ldd	r19, Z+1	; 0x01
    b902:	89 81       	ldd	r24, Y+1	; 0x01
    b904:	9a 81       	ldd	r25, Y+2	; 0x02
    b906:	fc 01       	movw	r30, r24
    b908:	33 83       	std	Z+3, r19	; 0x03
    b90a:	22 83       	std	Z+2, r18	; 0x02
    b90c:	89 81       	ldd	r24, Y+1	; 0x01
    b90e:	9a 81       	ldd	r25, Y+2	; 0x02
    b910:	fc 01       	movw	r30, r24
    b912:	20 81       	ld	r18, Z
    b914:	31 81       	ldd	r19, Z+1	; 0x01
    b916:	89 81       	ldd	r24, Y+1	; 0x01
    b918:	9a 81       	ldd	r25, Y+2	; 0x02
    b91a:	fc 01       	movw	r30, r24
    b91c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b91e:	88 2f       	mov	r24, r24
    b920:	90 e0       	ldi	r25, 0x00	; 0
    b922:	bc 01       	movw	r22, r24
    b924:	61 50       	subi	r22, 0x01	; 1
    b926:	71 09       	sbc	r23, r1
    b928:	89 81       	ldd	r24, Y+1	; 0x01
    b92a:	9a 81       	ldd	r25, Y+2	; 0x02
    b92c:	fc 01       	movw	r30, r24
    b92e:	84 8d       	ldd	r24, Z+28	; 0x1c
    b930:	48 2f       	mov	r20, r24
    b932:	50 e0       	ldi	r21, 0x00	; 0
    b934:	64 9f       	mul	r22, r20
    b936:	c0 01       	movw	r24, r0
    b938:	65 9f       	mul	r22, r21
    b93a:	90 0d       	add	r25, r0
    b93c:	74 9f       	mul	r23, r20
    b93e:	90 0d       	add	r25, r0
    b940:	11 24       	eor	r1, r1
    b942:	28 0f       	add	r18, r24
    b944:	39 1f       	adc	r19, r25
    b946:	89 81       	ldd	r24, Y+1	; 0x01
    b948:	9a 81       	ldd	r25, Y+2	; 0x02
    b94a:	fc 01       	movw	r30, r24
    b94c:	37 83       	std	Z+7, r19	; 0x07
    b94e:	26 83       	std	Z+6, r18	; 0x06
    b950:	89 81       	ldd	r24, Y+1	; 0x01
    b952:	9a 81       	ldd	r25, Y+2	; 0x02
    b954:	2f ef       	ldi	r18, 0xFF	; 255
    b956:	fc 01       	movw	r30, r24
    b958:	25 8f       	std	Z+29, r18	; 0x1d
    b95a:	89 81       	ldd	r24, Y+1	; 0x01
    b95c:	9a 81       	ldd	r25, Y+2	; 0x02
    b95e:	2f ef       	ldi	r18, 0xFF	; 255
    b960:	fc 01       	movw	r30, r24
    b962:	26 8f       	std	Z+30, r18	; 0x1e
    b964:	8d 81       	ldd	r24, Y+5	; 0x05
    b966:	88 23       	and	r24, r24
    b968:	79 f4       	brne	.+30     	; 0xb988 <xQueueGenericReset+0xfa>
    b96a:	89 81       	ldd	r24, Y+1	; 0x01
    b96c:	9a 81       	ldd	r25, Y+2	; 0x02
    b96e:	fc 01       	movw	r30, r24
    b970:	80 85       	ldd	r24, Z+8	; 0x08
    b972:	88 23       	and	r24, r24
    b974:	89 f0       	breq	.+34     	; 0xb998 <xQueueGenericReset+0x10a>
    b976:	89 81       	ldd	r24, Y+1	; 0x01
    b978:	9a 81       	ldd	r25, Y+2	; 0x02
    b97a:	08 96       	adiw	r24, 0x08	; 8
    b97c:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <xTaskRemoveFromEventList>
    b980:	88 23       	and	r24, r24
    b982:	51 f0       	breq	.+20     	; 0xb998 <xQueueGenericReset+0x10a>
    b984:	96 de       	rcall	.-724    	; 0xb6b2 <vPortYield>
    b986:	08 c0       	rjmp	.+16     	; 0xb998 <xQueueGenericReset+0x10a>
    b988:	89 81       	ldd	r24, Y+1	; 0x01
    b98a:	9a 81       	ldd	r25, Y+2	; 0x02
    b98c:	08 96       	adiw	r24, 0x08	; 8
    b98e:	2e db       	rcall	.-2468   	; 0xafec <vListInitialise>
    b990:	89 81       	ldd	r24, Y+1	; 0x01
    b992:	9a 81       	ldd	r25, Y+2	; 0x02
    b994:	41 96       	adiw	r24, 0x11	; 17
    b996:	2a db       	rcall	.-2476   	; 0xafec <vListInitialise>
    b998:	0f 90       	pop	r0
    b99a:	0f be       	out	0x3f, r0	; 63
    b99c:	81 e0       	ldi	r24, 0x01	; 1
    b99e:	0f 90       	pop	r0
    b9a0:	0f 90       	pop	r0
    b9a2:	0f 90       	pop	r0
    b9a4:	0f 90       	pop	r0
    b9a6:	0f 90       	pop	r0
    b9a8:	df 91       	pop	r29
    b9aa:	cf 91       	pop	r28
    b9ac:	08 95       	ret

0000b9ae <xQueueGenericCreate>:
    b9ae:	0f 93       	push	r16
    b9b0:	1f 93       	push	r17
    b9b2:	cf 93       	push	r28
    b9b4:	df 93       	push	r29
    b9b6:	cd b7       	in	r28, 0x3d	; 61
    b9b8:	de b7       	in	r29, 0x3e	; 62
    b9ba:	29 97       	sbiw	r28, 0x09	; 9
    b9bc:	0f b6       	in	r0, 0x3f	; 63
    b9be:	f8 94       	cli
    b9c0:	de bf       	out	0x3e, r29	; 62
    b9c2:	0f be       	out	0x3f, r0	; 63
    b9c4:	cd bf       	out	0x3d, r28	; 61
    b9c6:	8f 83       	std	Y+7, r24	; 0x07
    b9c8:	68 87       	std	Y+8, r22	; 0x08
    b9ca:	49 87       	std	Y+9, r20	; 0x09
    b9cc:	88 85       	ldd	r24, Y+8	; 0x08
    b9ce:	88 23       	and	r24, r24
    b9d0:	19 f4       	brne	.+6      	; 0xb9d8 <xQueueGenericCreate+0x2a>
    b9d2:	1a 82       	std	Y+2, r1	; 0x02
    b9d4:	19 82       	std	Y+1, r1	; 0x01
    b9d6:	0f c0       	rjmp	.+30     	; 0xb9f6 <xQueueGenericCreate+0x48>
    b9d8:	8f 81       	ldd	r24, Y+7	; 0x07
    b9da:	48 2f       	mov	r20, r24
    b9dc:	50 e0       	ldi	r21, 0x00	; 0
    b9de:	88 85       	ldd	r24, Y+8	; 0x08
    b9e0:	28 2f       	mov	r18, r24
    b9e2:	30 e0       	ldi	r19, 0x00	; 0
    b9e4:	42 9f       	mul	r20, r18
    b9e6:	c0 01       	movw	r24, r0
    b9e8:	43 9f       	mul	r20, r19
    b9ea:	90 0d       	add	r25, r0
    b9ec:	52 9f       	mul	r21, r18
    b9ee:	90 0d       	add	r25, r0
    b9f0:	11 24       	eor	r1, r1
    b9f2:	9a 83       	std	Y+2, r25	; 0x02
    b9f4:	89 83       	std	Y+1, r24	; 0x01
    b9f6:	89 81       	ldd	r24, Y+1	; 0x01
    b9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    b9fa:	4f 96       	adiw	r24, 0x1f	; 31
    b9fc:	bd da       	rcall	.-2694   	; 0xaf78 <pvPortMalloc>
    b9fe:	9c 83       	std	Y+4, r25	; 0x04
    ba00:	8b 83       	std	Y+3, r24	; 0x03
    ba02:	8b 81       	ldd	r24, Y+3	; 0x03
    ba04:	9c 81       	ldd	r25, Y+4	; 0x04
    ba06:	89 2b       	or	r24, r25
    ba08:	99 f0       	breq	.+38     	; 0xba30 <xQueueGenericCreate+0x82>
    ba0a:	8b 81       	ldd	r24, Y+3	; 0x03
    ba0c:	9c 81       	ldd	r25, Y+4	; 0x04
    ba0e:	9e 83       	std	Y+6, r25	; 0x06
    ba10:	8d 83       	std	Y+5, r24	; 0x05
    ba12:	8d 81       	ldd	r24, Y+5	; 0x05
    ba14:	9e 81       	ldd	r25, Y+6	; 0x06
    ba16:	4f 96       	adiw	r24, 0x1f	; 31
    ba18:	9e 83       	std	Y+6, r25	; 0x06
    ba1a:	8d 83       	std	Y+5, r24	; 0x05
    ba1c:	2b 81       	ldd	r18, Y+3	; 0x03
    ba1e:	3c 81       	ldd	r19, Y+4	; 0x04
    ba20:	8d 81       	ldd	r24, Y+5	; 0x05
    ba22:	9e 81       	ldd	r25, Y+6	; 0x06
    ba24:	89 01       	movw	r16, r18
    ba26:	29 85       	ldd	r18, Y+9	; 0x09
    ba28:	ac 01       	movw	r20, r24
    ba2a:	68 85       	ldd	r22, Y+8	; 0x08
    ba2c:	8f 81       	ldd	r24, Y+7	; 0x07
    ba2e:	0d d0       	rcall	.+26     	; 0xba4a <prvInitialiseNewQueue>
    ba30:	8b 81       	ldd	r24, Y+3	; 0x03
    ba32:	9c 81       	ldd	r25, Y+4	; 0x04
    ba34:	29 96       	adiw	r28, 0x09	; 9
    ba36:	0f b6       	in	r0, 0x3f	; 63
    ba38:	f8 94       	cli
    ba3a:	de bf       	out	0x3e, r29	; 62
    ba3c:	0f be       	out	0x3f, r0	; 63
    ba3e:	cd bf       	out	0x3d, r28	; 61
    ba40:	df 91       	pop	r29
    ba42:	cf 91       	pop	r28
    ba44:	1f 91       	pop	r17
    ba46:	0f 91       	pop	r16
    ba48:	08 95       	ret

0000ba4a <prvInitialiseNewQueue>:
    ba4a:	0f 93       	push	r16
    ba4c:	1f 93       	push	r17
    ba4e:	cf 93       	push	r28
    ba50:	df 93       	push	r29
    ba52:	cd b7       	in	r28, 0x3d	; 61
    ba54:	de b7       	in	r29, 0x3e	; 62
    ba56:	27 97       	sbiw	r28, 0x07	; 7
    ba58:	0f b6       	in	r0, 0x3f	; 63
    ba5a:	f8 94       	cli
    ba5c:	de bf       	out	0x3e, r29	; 62
    ba5e:	0f be       	out	0x3f, r0	; 63
    ba60:	cd bf       	out	0x3d, r28	; 61
    ba62:	89 83       	std	Y+1, r24	; 0x01
    ba64:	6a 83       	std	Y+2, r22	; 0x02
    ba66:	5c 83       	std	Y+4, r21	; 0x04
    ba68:	4b 83       	std	Y+3, r20	; 0x03
    ba6a:	2d 83       	std	Y+5, r18	; 0x05
    ba6c:	1f 83       	std	Y+7, r17	; 0x07
    ba6e:	0e 83       	std	Y+6, r16	; 0x06
    ba70:	8a 81       	ldd	r24, Y+2	; 0x02
    ba72:	88 23       	and	r24, r24
    ba74:	41 f4       	brne	.+16     	; 0xba86 <prvInitialiseNewQueue+0x3c>
    ba76:	8e 81       	ldd	r24, Y+6	; 0x06
    ba78:	9f 81       	ldd	r25, Y+7	; 0x07
    ba7a:	2e 81       	ldd	r18, Y+6	; 0x06
    ba7c:	3f 81       	ldd	r19, Y+7	; 0x07
    ba7e:	fc 01       	movw	r30, r24
    ba80:	31 83       	std	Z+1, r19	; 0x01
    ba82:	20 83       	st	Z, r18
    ba84:	07 c0       	rjmp	.+14     	; 0xba94 <prvInitialiseNewQueue+0x4a>
    ba86:	8e 81       	ldd	r24, Y+6	; 0x06
    ba88:	9f 81       	ldd	r25, Y+7	; 0x07
    ba8a:	2b 81       	ldd	r18, Y+3	; 0x03
    ba8c:	3c 81       	ldd	r19, Y+4	; 0x04
    ba8e:	fc 01       	movw	r30, r24
    ba90:	31 83       	std	Z+1, r19	; 0x01
    ba92:	20 83       	st	Z, r18
    ba94:	8e 81       	ldd	r24, Y+6	; 0x06
    ba96:	9f 81       	ldd	r25, Y+7	; 0x07
    ba98:	29 81       	ldd	r18, Y+1	; 0x01
    ba9a:	fc 01       	movw	r30, r24
    ba9c:	23 8f       	std	Z+27, r18	; 0x1b
    ba9e:	8e 81       	ldd	r24, Y+6	; 0x06
    baa0:	9f 81       	ldd	r25, Y+7	; 0x07
    baa2:	2a 81       	ldd	r18, Y+2	; 0x02
    baa4:	fc 01       	movw	r30, r24
    baa6:	24 8f       	std	Z+28, r18	; 0x1c
    baa8:	8e 81       	ldd	r24, Y+6	; 0x06
    baaa:	9f 81       	ldd	r25, Y+7	; 0x07
    baac:	61 e0       	ldi	r22, 0x01	; 1
    baae:	ef de       	rcall	.-546    	; 0xb88e <xQueueGenericReset>
    bab0:	00 00       	nop
    bab2:	27 96       	adiw	r28, 0x07	; 7
    bab4:	0f b6       	in	r0, 0x3f	; 63
    bab6:	f8 94       	cli
    bab8:	de bf       	out	0x3e, r29	; 62
    baba:	0f be       	out	0x3f, r0	; 63
    babc:	cd bf       	out	0x3d, r28	; 61
    babe:	df 91       	pop	r29
    bac0:	cf 91       	pop	r28
    bac2:	1f 91       	pop	r17
    bac4:	0f 91       	pop	r16
    bac6:	08 95       	ret

0000bac8 <xQueueGenericSend>:
    bac8:	cf 93       	push	r28
    baca:	df 93       	push	r29
    bacc:	cd b7       	in	r28, 0x3d	; 61
    bace:	de b7       	in	r29, 0x3e	; 62
    bad0:	2e 97       	sbiw	r28, 0x0e	; 14
    bad2:	0f b6       	in	r0, 0x3f	; 63
    bad4:	f8 94       	cli
    bad6:	de bf       	out	0x3e, r29	; 62
    bad8:	0f be       	out	0x3f, r0	; 63
    bada:	cd bf       	out	0x3d, r28	; 61
    badc:	99 87       	std	Y+9, r25	; 0x09
    bade:	88 87       	std	Y+8, r24	; 0x08
    bae0:	7b 87       	std	Y+11, r23	; 0x0b
    bae2:	6a 87       	std	Y+10, r22	; 0x0a
    bae4:	5d 87       	std	Y+13, r21	; 0x0d
    bae6:	4c 87       	std	Y+12, r20	; 0x0c
    bae8:	2e 87       	std	Y+14, r18	; 0x0e
    baea:	19 82       	std	Y+1, r1	; 0x01
    baec:	88 85       	ldd	r24, Y+8	; 0x08
    baee:	99 85       	ldd	r25, Y+9	; 0x09
    baf0:	9b 83       	std	Y+3, r25	; 0x03
    baf2:	8a 83       	std	Y+2, r24	; 0x02
    baf4:	0f b6       	in	r0, 0x3f	; 63
    baf6:	f8 94       	cli
    baf8:	0f 92       	push	r0
    bafa:	8a 81       	ldd	r24, Y+2	; 0x02
    bafc:	9b 81       	ldd	r25, Y+3	; 0x03
    bafe:	fc 01       	movw	r30, r24
    bb00:	22 8d       	ldd	r18, Z+26	; 0x1a
    bb02:	8a 81       	ldd	r24, Y+2	; 0x02
    bb04:	9b 81       	ldd	r25, Y+3	; 0x03
    bb06:	fc 01       	movw	r30, r24
    bb08:	83 8d       	ldd	r24, Z+27	; 0x1b
    bb0a:	28 17       	cp	r18, r24
    bb0c:	18 f0       	brcs	.+6      	; 0xbb14 <xQueueGenericSend+0x4c>
    bb0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    bb10:	82 30       	cpi	r24, 0x02	; 2
    bb12:	f9 f4       	brne	.+62     	; 0xbb52 <xQueueGenericSend+0x8a>
    bb14:	2a 85       	ldd	r18, Y+10	; 0x0a
    bb16:	3b 85       	ldd	r19, Y+11	; 0x0b
    bb18:	8a 81       	ldd	r24, Y+2	; 0x02
    bb1a:	9b 81       	ldd	r25, Y+3	; 0x03
    bb1c:	4e 85       	ldd	r20, Y+14	; 0x0e
    bb1e:	b9 01       	movw	r22, r18
    bb20:	83 d1       	rcall	.+774    	; 0xbe28 <prvCopyDataToQueue>
    bb22:	8c 83       	std	Y+4, r24	; 0x04
    bb24:	8a 81       	ldd	r24, Y+2	; 0x02
    bb26:	9b 81       	ldd	r25, Y+3	; 0x03
    bb28:	fc 01       	movw	r30, r24
    bb2a:	81 89       	ldd	r24, Z+17	; 0x11
    bb2c:	88 23       	and	r24, r24
    bb2e:	49 f0       	breq	.+18     	; 0xbb42 <xQueueGenericSend+0x7a>
    bb30:	8a 81       	ldd	r24, Y+2	; 0x02
    bb32:	9b 81       	ldd	r25, Y+3	; 0x03
    bb34:	41 96       	adiw	r24, 0x11	; 17
    bb36:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <xTaskRemoveFromEventList>
    bb3a:	88 23       	and	r24, r24
    bb3c:	31 f0       	breq	.+12     	; 0xbb4a <xQueueGenericSend+0x82>
    bb3e:	b9 dd       	rcall	.-1166   	; 0xb6b2 <vPortYield>
    bb40:	04 c0       	rjmp	.+8      	; 0xbb4a <xQueueGenericSend+0x82>
    bb42:	8c 81       	ldd	r24, Y+4	; 0x04
    bb44:	88 23       	and	r24, r24
    bb46:	09 f0       	breq	.+2      	; 0xbb4a <xQueueGenericSend+0x82>
    bb48:	b4 dd       	rcall	.-1176   	; 0xb6b2 <vPortYield>
    bb4a:	0f 90       	pop	r0
    bb4c:	0f be       	out	0x3f, r0	; 63
    bb4e:	81 e0       	ldi	r24, 0x01	; 1
    bb50:	5b c0       	rjmp	.+182    	; 0xbc08 <xQueueGenericSend+0x140>
    bb52:	8c 85       	ldd	r24, Y+12	; 0x0c
    bb54:	9d 85       	ldd	r25, Y+13	; 0x0d
    bb56:	89 2b       	or	r24, r25
    bb58:	21 f4       	brne	.+8      	; 0xbb62 <xQueueGenericSend+0x9a>
    bb5a:	0f 90       	pop	r0
    bb5c:	0f be       	out	0x3f, r0	; 63
    bb5e:	80 e0       	ldi	r24, 0x00	; 0
    bb60:	53 c0       	rjmp	.+166    	; 0xbc08 <xQueueGenericSend+0x140>
    bb62:	89 81       	ldd	r24, Y+1	; 0x01
    bb64:	88 23       	and	r24, r24
    bb66:	31 f4       	brne	.+12     	; 0xbb74 <xQueueGenericSend+0xac>
    bb68:	ce 01       	movw	r24, r28
    bb6a:	05 96       	adiw	r24, 0x05	; 5
    bb6c:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <vTaskInternalSetTimeOutState>
    bb70:	81 e0       	ldi	r24, 0x01	; 1
    bb72:	89 83       	std	Y+1, r24	; 0x01
    bb74:	0f 90       	pop	r0
    bb76:	0f be       	out	0x3f, r0	; 63
    bb78:	0e 94 6f 4c 	call	0x98de	; 0x98de <vTaskSuspendAll>
    bb7c:	0f b6       	in	r0, 0x3f	; 63
    bb7e:	f8 94       	cli
    bb80:	0f 92       	push	r0
    bb82:	8a 81       	ldd	r24, Y+2	; 0x02
    bb84:	9b 81       	ldd	r25, Y+3	; 0x03
    bb86:	fc 01       	movw	r30, r24
    bb88:	85 8d       	ldd	r24, Z+29	; 0x1d
    bb8a:	8f 3f       	cpi	r24, 0xFF	; 255
    bb8c:	21 f4       	brne	.+8      	; 0xbb96 <xQueueGenericSend+0xce>
    bb8e:	8a 81       	ldd	r24, Y+2	; 0x02
    bb90:	9b 81       	ldd	r25, Y+3	; 0x03
    bb92:	fc 01       	movw	r30, r24
    bb94:	15 8e       	std	Z+29, r1	; 0x1d
    bb96:	8a 81       	ldd	r24, Y+2	; 0x02
    bb98:	9b 81       	ldd	r25, Y+3	; 0x03
    bb9a:	fc 01       	movw	r30, r24
    bb9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    bb9e:	8f 3f       	cpi	r24, 0xFF	; 255
    bba0:	21 f4       	brne	.+8      	; 0xbbaa <xQueueGenericSend+0xe2>
    bba2:	8a 81       	ldd	r24, Y+2	; 0x02
    bba4:	9b 81       	ldd	r25, Y+3	; 0x03
    bba6:	fc 01       	movw	r30, r24
    bba8:	16 8e       	std	Z+30, r1	; 0x1e
    bbaa:	0f 90       	pop	r0
    bbac:	0f be       	out	0x3f, r0	; 63
    bbae:	9e 01       	movw	r18, r28
    bbb0:	24 5f       	subi	r18, 0xF4	; 244
    bbb2:	3f 4f       	sbci	r19, 0xFF	; 255
    bbb4:	ce 01       	movw	r24, r28
    bbb6:	05 96       	adiw	r24, 0x05	; 5
    bbb8:	b9 01       	movw	r22, r18
    bbba:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <xTaskCheckForTimeOut>
    bbbe:	88 23       	and	r24, r24
    bbc0:	e9 f4       	brne	.+58     	; 0xbbfc <xQueueGenericSend+0x134>
    bbc2:	8a 81       	ldd	r24, Y+2	; 0x02
    bbc4:	9b 81       	ldd	r25, Y+3	; 0x03
    bbc6:	c9 d2       	rcall	.+1426   	; 0xc15a <prvIsQueueFull>
    bbc8:	88 23       	and	r24, r24
    bbca:	91 f0       	breq	.+36     	; 0xbbf0 <xQueueGenericSend+0x128>
    bbcc:	2c 85       	ldd	r18, Y+12	; 0x0c
    bbce:	3d 85       	ldd	r19, Y+13	; 0x0d
    bbd0:	8a 81       	ldd	r24, Y+2	; 0x02
    bbd2:	9b 81       	ldd	r25, Y+3	; 0x03
    bbd4:	08 96       	adiw	r24, 0x08	; 8
    bbd6:	b9 01       	movw	r22, r18
    bbd8:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <vTaskPlaceOnEventList>
    bbdc:	8a 81       	ldd	r24, Y+2	; 0x02
    bbde:	9b 81       	ldd	r25, Y+3	; 0x03
    bbe0:	41 d2       	rcall	.+1154   	; 0xc064 <prvUnlockQueue>
    bbe2:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    bbe6:	88 23       	and	r24, r24
    bbe8:	09 f0       	breq	.+2      	; 0xbbec <xQueueGenericSend+0x124>
    bbea:	84 cf       	rjmp	.-248    	; 0xbaf4 <xQueueGenericSend+0x2c>
    bbec:	62 dd       	rcall	.-1340   	; 0xb6b2 <vPortYield>
    bbee:	82 cf       	rjmp	.-252    	; 0xbaf4 <xQueueGenericSend+0x2c>
    bbf0:	8a 81       	ldd	r24, Y+2	; 0x02
    bbf2:	9b 81       	ldd	r25, Y+3	; 0x03
    bbf4:	37 d2       	rcall	.+1134   	; 0xc064 <prvUnlockQueue>
    bbf6:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    bbfa:	7c cf       	rjmp	.-264    	; 0xbaf4 <xQueueGenericSend+0x2c>
    bbfc:	8a 81       	ldd	r24, Y+2	; 0x02
    bbfe:	9b 81       	ldd	r25, Y+3	; 0x03
    bc00:	31 d2       	rcall	.+1122   	; 0xc064 <prvUnlockQueue>
    bc02:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    bc06:	80 e0       	ldi	r24, 0x00	; 0
    bc08:	2e 96       	adiw	r28, 0x0e	; 14
    bc0a:	0f b6       	in	r0, 0x3f	; 63
    bc0c:	f8 94       	cli
    bc0e:	de bf       	out	0x3e, r29	; 62
    bc10:	0f be       	out	0x3f, r0	; 63
    bc12:	cd bf       	out	0x3d, r28	; 61
    bc14:	df 91       	pop	r29
    bc16:	cf 91       	pop	r28
    bc18:	08 95       	ret

0000bc1a <xQueueGenericSendFromISR>:
    bc1a:	cf 93       	push	r28
    bc1c:	df 93       	push	r29
    bc1e:	cd b7       	in	r28, 0x3d	; 61
    bc20:	de b7       	in	r29, 0x3e	; 62
    bc22:	2c 97       	sbiw	r28, 0x0c	; 12
    bc24:	0f b6       	in	r0, 0x3f	; 63
    bc26:	f8 94       	cli
    bc28:	de bf       	out	0x3e, r29	; 62
    bc2a:	0f be       	out	0x3f, r0	; 63
    bc2c:	cd bf       	out	0x3d, r28	; 61
    bc2e:	9f 83       	std	Y+7, r25	; 0x07
    bc30:	8e 83       	std	Y+6, r24	; 0x06
    bc32:	79 87       	std	Y+9, r23	; 0x09
    bc34:	68 87       	std	Y+8, r22	; 0x08
    bc36:	5b 87       	std	Y+11, r21	; 0x0b
    bc38:	4a 87       	std	Y+10, r20	; 0x0a
    bc3a:	2c 87       	std	Y+12, r18	; 0x0c
    bc3c:	8e 81       	ldd	r24, Y+6	; 0x06
    bc3e:	9f 81       	ldd	r25, Y+7	; 0x07
    bc40:	9b 83       	std	Y+3, r25	; 0x03
    bc42:	8a 83       	std	Y+2, r24	; 0x02
    bc44:	1c 82       	std	Y+4, r1	; 0x04
    bc46:	8a 81       	ldd	r24, Y+2	; 0x02
    bc48:	9b 81       	ldd	r25, Y+3	; 0x03
    bc4a:	fc 01       	movw	r30, r24
    bc4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    bc4e:	8a 81       	ldd	r24, Y+2	; 0x02
    bc50:	9b 81       	ldd	r25, Y+3	; 0x03
    bc52:	fc 01       	movw	r30, r24
    bc54:	83 8d       	ldd	r24, Z+27	; 0x1b
    bc56:	28 17       	cp	r18, r24
    bc58:	18 f0       	brcs	.+6      	; 0xbc60 <xQueueGenericSendFromISR+0x46>
    bc5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    bc5c:	82 30       	cpi	r24, 0x02	; 2
    bc5e:	81 f5       	brne	.+96     	; 0xbcc0 <xQueueGenericSendFromISR+0xa6>
    bc60:	8a 81       	ldd	r24, Y+2	; 0x02
    bc62:	9b 81       	ldd	r25, Y+3	; 0x03
    bc64:	fc 01       	movw	r30, r24
    bc66:	86 8d       	ldd	r24, Z+30	; 0x1e
    bc68:	8d 83       	std	Y+5, r24	; 0x05
    bc6a:	28 85       	ldd	r18, Y+8	; 0x08
    bc6c:	39 85       	ldd	r19, Y+9	; 0x09
    bc6e:	8a 81       	ldd	r24, Y+2	; 0x02
    bc70:	9b 81       	ldd	r25, Y+3	; 0x03
    bc72:	4c 85       	ldd	r20, Y+12	; 0x0c
    bc74:	b9 01       	movw	r22, r18
    bc76:	d8 d0       	rcall	.+432    	; 0xbe28 <prvCopyDataToQueue>
    bc78:	8d 81       	ldd	r24, Y+5	; 0x05
    bc7a:	8f 3f       	cpi	r24, 0xFF	; 255
    bc7c:	b9 f4       	brne	.+46     	; 0xbcac <xQueueGenericSendFromISR+0x92>
    bc7e:	8a 81       	ldd	r24, Y+2	; 0x02
    bc80:	9b 81       	ldd	r25, Y+3	; 0x03
    bc82:	fc 01       	movw	r30, r24
    bc84:	81 89       	ldd	r24, Z+17	; 0x11
    bc86:	88 23       	and	r24, r24
    bc88:	c1 f0       	breq	.+48     	; 0xbcba <xQueueGenericSendFromISR+0xa0>
    bc8a:	8a 81       	ldd	r24, Y+2	; 0x02
    bc8c:	9b 81       	ldd	r25, Y+3	; 0x03
    bc8e:	41 96       	adiw	r24, 0x11	; 17
    bc90:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <xTaskRemoveFromEventList>
    bc94:	88 23       	and	r24, r24
    bc96:	89 f0       	breq	.+34     	; 0xbcba <xQueueGenericSendFromISR+0xa0>
    bc98:	8a 85       	ldd	r24, Y+10	; 0x0a
    bc9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    bc9c:	89 2b       	or	r24, r25
    bc9e:	69 f0       	breq	.+26     	; 0xbcba <xQueueGenericSendFromISR+0xa0>
    bca0:	8a 85       	ldd	r24, Y+10	; 0x0a
    bca2:	9b 85       	ldd	r25, Y+11	; 0x0b
    bca4:	21 e0       	ldi	r18, 0x01	; 1
    bca6:	fc 01       	movw	r30, r24
    bca8:	20 83       	st	Z, r18
    bcaa:	07 c0       	rjmp	.+14     	; 0xbcba <xQueueGenericSendFromISR+0xa0>
    bcac:	8d 81       	ldd	r24, Y+5	; 0x05
    bcae:	8f 5f       	subi	r24, 0xFF	; 255
    bcb0:	28 2f       	mov	r18, r24
    bcb2:	8a 81       	ldd	r24, Y+2	; 0x02
    bcb4:	9b 81       	ldd	r25, Y+3	; 0x03
    bcb6:	fc 01       	movw	r30, r24
    bcb8:	26 8f       	std	Z+30, r18	; 0x1e
    bcba:	81 e0       	ldi	r24, 0x01	; 1
    bcbc:	89 83       	std	Y+1, r24	; 0x01
    bcbe:	01 c0       	rjmp	.+2      	; 0xbcc2 <xQueueGenericSendFromISR+0xa8>
    bcc0:	19 82       	std	Y+1, r1	; 0x01
    bcc2:	89 81       	ldd	r24, Y+1	; 0x01
    bcc4:	2c 96       	adiw	r28, 0x0c	; 12
    bcc6:	0f b6       	in	r0, 0x3f	; 63
    bcc8:	f8 94       	cli
    bcca:	de bf       	out	0x3e, r29	; 62
    bccc:	0f be       	out	0x3f, r0	; 63
    bcce:	cd bf       	out	0x3d, r28	; 61
    bcd0:	df 91       	pop	r29
    bcd2:	cf 91       	pop	r28
    bcd4:	08 95       	ret

0000bcd6 <xQueueReceive>:
    bcd6:	cf 93       	push	r28
    bcd8:	df 93       	push	r29
    bcda:	cd b7       	in	r28, 0x3d	; 61
    bcdc:	de b7       	in	r29, 0x3e	; 62
    bcde:	2d 97       	sbiw	r28, 0x0d	; 13
    bce0:	0f b6       	in	r0, 0x3f	; 63
    bce2:	f8 94       	cli
    bce4:	de bf       	out	0x3e, r29	; 62
    bce6:	0f be       	out	0x3f, r0	; 63
    bce8:	cd bf       	out	0x3d, r28	; 61
    bcea:	99 87       	std	Y+9, r25	; 0x09
    bcec:	88 87       	std	Y+8, r24	; 0x08
    bcee:	7b 87       	std	Y+11, r23	; 0x0b
    bcf0:	6a 87       	std	Y+10, r22	; 0x0a
    bcf2:	5d 87       	std	Y+13, r21	; 0x0d
    bcf4:	4c 87       	std	Y+12, r20	; 0x0c
    bcf6:	19 82       	std	Y+1, r1	; 0x01
    bcf8:	88 85       	ldd	r24, Y+8	; 0x08
    bcfa:	99 85       	ldd	r25, Y+9	; 0x09
    bcfc:	9b 83       	std	Y+3, r25	; 0x03
    bcfe:	8a 83       	std	Y+2, r24	; 0x02
    bd00:	0f b6       	in	r0, 0x3f	; 63
    bd02:	f8 94       	cli
    bd04:	0f 92       	push	r0
    bd06:	8a 81       	ldd	r24, Y+2	; 0x02
    bd08:	9b 81       	ldd	r25, Y+3	; 0x03
    bd0a:	fc 01       	movw	r30, r24
    bd0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    bd0e:	8c 83       	std	Y+4, r24	; 0x04
    bd10:	8c 81       	ldd	r24, Y+4	; 0x04
    bd12:	88 23       	and	r24, r24
    bd14:	f9 f0       	breq	.+62     	; 0xbd54 <xQueueReceive+0x7e>
    bd16:	2a 85       	ldd	r18, Y+10	; 0x0a
    bd18:	3b 85       	ldd	r19, Y+11	; 0x0b
    bd1a:	8a 81       	ldd	r24, Y+2	; 0x02
    bd1c:	9b 81       	ldd	r25, Y+3	; 0x03
    bd1e:	b9 01       	movw	r22, r18
    bd20:	51 d1       	rcall	.+674    	; 0xbfc4 <prvCopyDataFromQueue>
    bd22:	8c 81       	ldd	r24, Y+4	; 0x04
    bd24:	2f ef       	ldi	r18, 0xFF	; 255
    bd26:	28 0f       	add	r18, r24
    bd28:	8a 81       	ldd	r24, Y+2	; 0x02
    bd2a:	9b 81       	ldd	r25, Y+3	; 0x03
    bd2c:	fc 01       	movw	r30, r24
    bd2e:	22 8f       	std	Z+26, r18	; 0x1a
    bd30:	8a 81       	ldd	r24, Y+2	; 0x02
    bd32:	9b 81       	ldd	r25, Y+3	; 0x03
    bd34:	fc 01       	movw	r30, r24
    bd36:	80 85       	ldd	r24, Z+8	; 0x08
    bd38:	88 23       	and	r24, r24
    bd3a:	41 f0       	breq	.+16     	; 0xbd4c <xQueueReceive+0x76>
    bd3c:	8a 81       	ldd	r24, Y+2	; 0x02
    bd3e:	9b 81       	ldd	r25, Y+3	; 0x03
    bd40:	08 96       	adiw	r24, 0x08	; 8
    bd42:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <xTaskRemoveFromEventList>
    bd46:	88 23       	and	r24, r24
    bd48:	09 f0       	breq	.+2      	; 0xbd4c <xQueueReceive+0x76>
    bd4a:	b3 dc       	rcall	.-1690   	; 0xb6b2 <vPortYield>
    bd4c:	0f 90       	pop	r0
    bd4e:	0f be       	out	0x3f, r0	; 63
    bd50:	81 e0       	ldi	r24, 0x01	; 1
    bd52:	61 c0       	rjmp	.+194    	; 0xbe16 <xQueueReceive+0x140>
    bd54:	8c 85       	ldd	r24, Y+12	; 0x0c
    bd56:	9d 85       	ldd	r25, Y+13	; 0x0d
    bd58:	89 2b       	or	r24, r25
    bd5a:	21 f4       	brne	.+8      	; 0xbd64 <xQueueReceive+0x8e>
    bd5c:	0f 90       	pop	r0
    bd5e:	0f be       	out	0x3f, r0	; 63
    bd60:	80 e0       	ldi	r24, 0x00	; 0
    bd62:	59 c0       	rjmp	.+178    	; 0xbe16 <xQueueReceive+0x140>
    bd64:	89 81       	ldd	r24, Y+1	; 0x01
    bd66:	88 23       	and	r24, r24
    bd68:	31 f4       	brne	.+12     	; 0xbd76 <xQueueReceive+0xa0>
    bd6a:	ce 01       	movw	r24, r28
    bd6c:	05 96       	adiw	r24, 0x05	; 5
    bd6e:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <vTaskInternalSetTimeOutState>
    bd72:	81 e0       	ldi	r24, 0x01	; 1
    bd74:	89 83       	std	Y+1, r24	; 0x01
    bd76:	0f 90       	pop	r0
    bd78:	0f be       	out	0x3f, r0	; 63
    bd7a:	0e 94 6f 4c 	call	0x98de	; 0x98de <vTaskSuspendAll>
    bd7e:	0f b6       	in	r0, 0x3f	; 63
    bd80:	f8 94       	cli
    bd82:	0f 92       	push	r0
    bd84:	8a 81       	ldd	r24, Y+2	; 0x02
    bd86:	9b 81       	ldd	r25, Y+3	; 0x03
    bd88:	fc 01       	movw	r30, r24
    bd8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    bd8c:	8f 3f       	cpi	r24, 0xFF	; 255
    bd8e:	21 f4       	brne	.+8      	; 0xbd98 <xQueueReceive+0xc2>
    bd90:	8a 81       	ldd	r24, Y+2	; 0x02
    bd92:	9b 81       	ldd	r25, Y+3	; 0x03
    bd94:	fc 01       	movw	r30, r24
    bd96:	15 8e       	std	Z+29, r1	; 0x1d
    bd98:	8a 81       	ldd	r24, Y+2	; 0x02
    bd9a:	9b 81       	ldd	r25, Y+3	; 0x03
    bd9c:	fc 01       	movw	r30, r24
    bd9e:	86 8d       	ldd	r24, Z+30	; 0x1e
    bda0:	8f 3f       	cpi	r24, 0xFF	; 255
    bda2:	21 f4       	brne	.+8      	; 0xbdac <xQueueReceive+0xd6>
    bda4:	8a 81       	ldd	r24, Y+2	; 0x02
    bda6:	9b 81       	ldd	r25, Y+3	; 0x03
    bda8:	fc 01       	movw	r30, r24
    bdaa:	16 8e       	std	Z+30, r1	; 0x1e
    bdac:	0f 90       	pop	r0
    bdae:	0f be       	out	0x3f, r0	; 63
    bdb0:	9e 01       	movw	r18, r28
    bdb2:	24 5f       	subi	r18, 0xF4	; 244
    bdb4:	3f 4f       	sbci	r19, 0xFF	; 255
    bdb6:	ce 01       	movw	r24, r28
    bdb8:	05 96       	adiw	r24, 0x05	; 5
    bdba:	b9 01       	movw	r22, r18
    bdbc:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <xTaskCheckForTimeOut>
    bdc0:	88 23       	and	r24, r24
    bdc2:	e9 f4       	brne	.+58     	; 0xbdfe <xQueueReceive+0x128>
    bdc4:	8a 81       	ldd	r24, Y+2	; 0x02
    bdc6:	9b 81       	ldd	r25, Y+3	; 0x03
    bdc8:	ab d1       	rcall	.+854    	; 0xc120 <prvIsQueueEmpty>
    bdca:	88 23       	and	r24, r24
    bdcc:	91 f0       	breq	.+36     	; 0xbdf2 <xQueueReceive+0x11c>
    bdce:	2c 85       	ldd	r18, Y+12	; 0x0c
    bdd0:	3d 85       	ldd	r19, Y+13	; 0x0d
    bdd2:	8a 81       	ldd	r24, Y+2	; 0x02
    bdd4:	9b 81       	ldd	r25, Y+3	; 0x03
    bdd6:	41 96       	adiw	r24, 0x11	; 17
    bdd8:	b9 01       	movw	r22, r18
    bdda:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <vTaskPlaceOnEventList>
    bdde:	8a 81       	ldd	r24, Y+2	; 0x02
    bde0:	9b 81       	ldd	r25, Y+3	; 0x03
    bde2:	40 d1       	rcall	.+640    	; 0xc064 <prvUnlockQueue>
    bde4:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    bde8:	88 23       	and	r24, r24
    bdea:	09 f0       	breq	.+2      	; 0xbdee <xQueueReceive+0x118>
    bdec:	89 cf       	rjmp	.-238    	; 0xbd00 <xQueueReceive+0x2a>
    bdee:	61 dc       	rcall	.-1854   	; 0xb6b2 <vPortYield>
    bdf0:	87 cf       	rjmp	.-242    	; 0xbd00 <xQueueReceive+0x2a>
    bdf2:	8a 81       	ldd	r24, Y+2	; 0x02
    bdf4:	9b 81       	ldd	r25, Y+3	; 0x03
    bdf6:	36 d1       	rcall	.+620    	; 0xc064 <prvUnlockQueue>
    bdf8:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    bdfc:	81 cf       	rjmp	.-254    	; 0xbd00 <xQueueReceive+0x2a>
    bdfe:	8a 81       	ldd	r24, Y+2	; 0x02
    be00:	9b 81       	ldd	r25, Y+3	; 0x03
    be02:	30 d1       	rcall	.+608    	; 0xc064 <prvUnlockQueue>
    be04:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <xTaskResumeAll>
    be08:	8a 81       	ldd	r24, Y+2	; 0x02
    be0a:	9b 81       	ldd	r25, Y+3	; 0x03
    be0c:	89 d1       	rcall	.+786    	; 0xc120 <prvIsQueueEmpty>
    be0e:	88 23       	and	r24, r24
    be10:	09 f4       	brne	.+2      	; 0xbe14 <xQueueReceive+0x13e>
    be12:	76 cf       	rjmp	.-276    	; 0xbd00 <xQueueReceive+0x2a>
    be14:	80 e0       	ldi	r24, 0x00	; 0
    be16:	2d 96       	adiw	r28, 0x0d	; 13
    be18:	0f b6       	in	r0, 0x3f	; 63
    be1a:	f8 94       	cli
    be1c:	de bf       	out	0x3e, r29	; 62
    be1e:	0f be       	out	0x3f, r0	; 63
    be20:	cd bf       	out	0x3d, r28	; 61
    be22:	df 91       	pop	r29
    be24:	cf 91       	pop	r28
    be26:	08 95       	ret

0000be28 <prvCopyDataToQueue>:
    be28:	cf 93       	push	r28
    be2a:	df 93       	push	r29
    be2c:	cd b7       	in	r28, 0x3d	; 61
    be2e:	de b7       	in	r29, 0x3e	; 62
    be30:	27 97       	sbiw	r28, 0x07	; 7
    be32:	0f b6       	in	r0, 0x3f	; 63
    be34:	f8 94       	cli
    be36:	de bf       	out	0x3e, r29	; 62
    be38:	0f be       	out	0x3f, r0	; 63
    be3a:	cd bf       	out	0x3d, r28	; 61
    be3c:	9c 83       	std	Y+4, r25	; 0x04
    be3e:	8b 83       	std	Y+3, r24	; 0x03
    be40:	7e 83       	std	Y+6, r23	; 0x06
    be42:	6d 83       	std	Y+5, r22	; 0x05
    be44:	4f 83       	std	Y+7, r20	; 0x07
    be46:	19 82       	std	Y+1, r1	; 0x01
    be48:	8b 81       	ldd	r24, Y+3	; 0x03
    be4a:	9c 81       	ldd	r25, Y+4	; 0x04
    be4c:	fc 01       	movw	r30, r24
    be4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    be50:	8a 83       	std	Y+2, r24	; 0x02
    be52:	8b 81       	ldd	r24, Y+3	; 0x03
    be54:	9c 81       	ldd	r25, Y+4	; 0x04
    be56:	fc 01       	movw	r30, r24
    be58:	84 8d       	ldd	r24, Z+28	; 0x1c
    be5a:	88 23       	and	r24, r24
    be5c:	b1 f4       	brne	.+44     	; 0xbe8a <prvCopyDataToQueue+0x62>
    be5e:	8b 81       	ldd	r24, Y+3	; 0x03
    be60:	9c 81       	ldd	r25, Y+4	; 0x04
    be62:	fc 01       	movw	r30, r24
    be64:	80 81       	ld	r24, Z
    be66:	91 81       	ldd	r25, Z+1	; 0x01
    be68:	89 2b       	or	r24, r25
    be6a:	09 f0       	breq	.+2      	; 0xbe6e <prvCopyDataToQueue+0x46>
    be6c:	9a c0       	rjmp	.+308    	; 0xbfa2 <prvCopyDataToQueue+0x17a>
    be6e:	8b 81       	ldd	r24, Y+3	; 0x03
    be70:	9c 81       	ldd	r25, Y+4	; 0x04
    be72:	fc 01       	movw	r30, r24
    be74:	84 81       	ldd	r24, Z+4	; 0x04
    be76:	95 81       	ldd	r25, Z+5	; 0x05
    be78:	0e 94 27 51 	call	0xa24e	; 0xa24e <xTaskPriorityDisinherit>
    be7c:	89 83       	std	Y+1, r24	; 0x01
    be7e:	8b 81       	ldd	r24, Y+3	; 0x03
    be80:	9c 81       	ldd	r25, Y+4	; 0x04
    be82:	fc 01       	movw	r30, r24
    be84:	15 82       	std	Z+5, r1	; 0x05
    be86:	14 82       	std	Z+4, r1	; 0x04
    be88:	8c c0       	rjmp	.+280    	; 0xbfa2 <prvCopyDataToQueue+0x17a>
    be8a:	8f 81       	ldd	r24, Y+7	; 0x07
    be8c:	88 23       	and	r24, r24
    be8e:	d1 f5       	brne	.+116    	; 0xbf04 <prvCopyDataToQueue+0xdc>
    be90:	8b 81       	ldd	r24, Y+3	; 0x03
    be92:	9c 81       	ldd	r25, Y+4	; 0x04
    be94:	fc 01       	movw	r30, r24
    be96:	84 8d       	ldd	r24, Z+28	; 0x1c
    be98:	48 2f       	mov	r20, r24
    be9a:	50 e0       	ldi	r21, 0x00	; 0
    be9c:	8b 81       	ldd	r24, Y+3	; 0x03
    be9e:	9c 81       	ldd	r25, Y+4	; 0x04
    bea0:	fc 01       	movw	r30, r24
    bea2:	82 81       	ldd	r24, Z+2	; 0x02
    bea4:	93 81       	ldd	r25, Z+3	; 0x03
    bea6:	2d 81       	ldd	r18, Y+5	; 0x05
    bea8:	3e 81       	ldd	r19, Y+6	; 0x06
    beaa:	b9 01       	movw	r22, r18
    beac:	0b d5       	rcall	.+2582   	; 0xc8c4 <memcpy>
    beae:	8b 81       	ldd	r24, Y+3	; 0x03
    beb0:	9c 81       	ldd	r25, Y+4	; 0x04
    beb2:	fc 01       	movw	r30, r24
    beb4:	22 81       	ldd	r18, Z+2	; 0x02
    beb6:	33 81       	ldd	r19, Z+3	; 0x03
    beb8:	8b 81       	ldd	r24, Y+3	; 0x03
    beba:	9c 81       	ldd	r25, Y+4	; 0x04
    bebc:	fc 01       	movw	r30, r24
    bebe:	84 8d       	ldd	r24, Z+28	; 0x1c
    bec0:	88 2f       	mov	r24, r24
    bec2:	90 e0       	ldi	r25, 0x00	; 0
    bec4:	28 0f       	add	r18, r24
    bec6:	39 1f       	adc	r19, r25
    bec8:	8b 81       	ldd	r24, Y+3	; 0x03
    beca:	9c 81       	ldd	r25, Y+4	; 0x04
    becc:	fc 01       	movw	r30, r24
    bece:	33 83       	std	Z+3, r19	; 0x03
    bed0:	22 83       	std	Z+2, r18	; 0x02
    bed2:	8b 81       	ldd	r24, Y+3	; 0x03
    bed4:	9c 81       	ldd	r25, Y+4	; 0x04
    bed6:	fc 01       	movw	r30, r24
    bed8:	22 81       	ldd	r18, Z+2	; 0x02
    beda:	33 81       	ldd	r19, Z+3	; 0x03
    bedc:	8b 81       	ldd	r24, Y+3	; 0x03
    bede:	9c 81       	ldd	r25, Y+4	; 0x04
    bee0:	fc 01       	movw	r30, r24
    bee2:	84 81       	ldd	r24, Z+4	; 0x04
    bee4:	95 81       	ldd	r25, Z+5	; 0x05
    bee6:	28 17       	cp	r18, r24
    bee8:	39 07       	cpc	r19, r25
    beea:	08 f4       	brcc	.+2      	; 0xbeee <prvCopyDataToQueue+0xc6>
    beec:	5a c0       	rjmp	.+180    	; 0xbfa2 <prvCopyDataToQueue+0x17a>
    beee:	8b 81       	ldd	r24, Y+3	; 0x03
    bef0:	9c 81       	ldd	r25, Y+4	; 0x04
    bef2:	fc 01       	movw	r30, r24
    bef4:	20 81       	ld	r18, Z
    bef6:	31 81       	ldd	r19, Z+1	; 0x01
    bef8:	8b 81       	ldd	r24, Y+3	; 0x03
    befa:	9c 81       	ldd	r25, Y+4	; 0x04
    befc:	fc 01       	movw	r30, r24
    befe:	33 83       	std	Z+3, r19	; 0x03
    bf00:	22 83       	std	Z+2, r18	; 0x02
    bf02:	4f c0       	rjmp	.+158    	; 0xbfa2 <prvCopyDataToQueue+0x17a>
    bf04:	8b 81       	ldd	r24, Y+3	; 0x03
    bf06:	9c 81       	ldd	r25, Y+4	; 0x04
    bf08:	fc 01       	movw	r30, r24
    bf0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    bf0c:	48 2f       	mov	r20, r24
    bf0e:	50 e0       	ldi	r21, 0x00	; 0
    bf10:	8b 81       	ldd	r24, Y+3	; 0x03
    bf12:	9c 81       	ldd	r25, Y+4	; 0x04
    bf14:	fc 01       	movw	r30, r24
    bf16:	86 81       	ldd	r24, Z+6	; 0x06
    bf18:	97 81       	ldd	r25, Z+7	; 0x07
    bf1a:	2d 81       	ldd	r18, Y+5	; 0x05
    bf1c:	3e 81       	ldd	r19, Y+6	; 0x06
    bf1e:	b9 01       	movw	r22, r18
    bf20:	d1 d4       	rcall	.+2466   	; 0xc8c4 <memcpy>
    bf22:	8b 81       	ldd	r24, Y+3	; 0x03
    bf24:	9c 81       	ldd	r25, Y+4	; 0x04
    bf26:	fc 01       	movw	r30, r24
    bf28:	26 81       	ldd	r18, Z+6	; 0x06
    bf2a:	37 81       	ldd	r19, Z+7	; 0x07
    bf2c:	8b 81       	ldd	r24, Y+3	; 0x03
    bf2e:	9c 81       	ldd	r25, Y+4	; 0x04
    bf30:	fc 01       	movw	r30, r24
    bf32:	84 8d       	ldd	r24, Z+28	; 0x1c
    bf34:	88 2f       	mov	r24, r24
    bf36:	90 e0       	ldi	r25, 0x00	; 0
    bf38:	91 95       	neg	r25
    bf3a:	81 95       	neg	r24
    bf3c:	91 09       	sbc	r25, r1
    bf3e:	28 0f       	add	r18, r24
    bf40:	39 1f       	adc	r19, r25
    bf42:	8b 81       	ldd	r24, Y+3	; 0x03
    bf44:	9c 81       	ldd	r25, Y+4	; 0x04
    bf46:	fc 01       	movw	r30, r24
    bf48:	37 83       	std	Z+7, r19	; 0x07
    bf4a:	26 83       	std	Z+6, r18	; 0x06
    bf4c:	8b 81       	ldd	r24, Y+3	; 0x03
    bf4e:	9c 81       	ldd	r25, Y+4	; 0x04
    bf50:	fc 01       	movw	r30, r24
    bf52:	26 81       	ldd	r18, Z+6	; 0x06
    bf54:	37 81       	ldd	r19, Z+7	; 0x07
    bf56:	8b 81       	ldd	r24, Y+3	; 0x03
    bf58:	9c 81       	ldd	r25, Y+4	; 0x04
    bf5a:	fc 01       	movw	r30, r24
    bf5c:	80 81       	ld	r24, Z
    bf5e:	91 81       	ldd	r25, Z+1	; 0x01
    bf60:	28 17       	cp	r18, r24
    bf62:	39 07       	cpc	r19, r25
    bf64:	a8 f4       	brcc	.+42     	; 0xbf90 <prvCopyDataToQueue+0x168>
    bf66:	8b 81       	ldd	r24, Y+3	; 0x03
    bf68:	9c 81       	ldd	r25, Y+4	; 0x04
    bf6a:	fc 01       	movw	r30, r24
    bf6c:	24 81       	ldd	r18, Z+4	; 0x04
    bf6e:	35 81       	ldd	r19, Z+5	; 0x05
    bf70:	8b 81       	ldd	r24, Y+3	; 0x03
    bf72:	9c 81       	ldd	r25, Y+4	; 0x04
    bf74:	fc 01       	movw	r30, r24
    bf76:	84 8d       	ldd	r24, Z+28	; 0x1c
    bf78:	88 2f       	mov	r24, r24
    bf7a:	90 e0       	ldi	r25, 0x00	; 0
    bf7c:	91 95       	neg	r25
    bf7e:	81 95       	neg	r24
    bf80:	91 09       	sbc	r25, r1
    bf82:	28 0f       	add	r18, r24
    bf84:	39 1f       	adc	r19, r25
    bf86:	8b 81       	ldd	r24, Y+3	; 0x03
    bf88:	9c 81       	ldd	r25, Y+4	; 0x04
    bf8a:	fc 01       	movw	r30, r24
    bf8c:	37 83       	std	Z+7, r19	; 0x07
    bf8e:	26 83       	std	Z+6, r18	; 0x06
    bf90:	8f 81       	ldd	r24, Y+7	; 0x07
    bf92:	82 30       	cpi	r24, 0x02	; 2
    bf94:	31 f4       	brne	.+12     	; 0xbfa2 <prvCopyDataToQueue+0x17a>
    bf96:	8a 81       	ldd	r24, Y+2	; 0x02
    bf98:	88 23       	and	r24, r24
    bf9a:	19 f0       	breq	.+6      	; 0xbfa2 <prvCopyDataToQueue+0x17a>
    bf9c:	8a 81       	ldd	r24, Y+2	; 0x02
    bf9e:	81 50       	subi	r24, 0x01	; 1
    bfa0:	8a 83       	std	Y+2, r24	; 0x02
    bfa2:	8a 81       	ldd	r24, Y+2	; 0x02
    bfa4:	21 e0       	ldi	r18, 0x01	; 1
    bfa6:	28 0f       	add	r18, r24
    bfa8:	8b 81       	ldd	r24, Y+3	; 0x03
    bfaa:	9c 81       	ldd	r25, Y+4	; 0x04
    bfac:	fc 01       	movw	r30, r24
    bfae:	22 8f       	std	Z+26, r18	; 0x1a
    bfb0:	89 81       	ldd	r24, Y+1	; 0x01
    bfb2:	27 96       	adiw	r28, 0x07	; 7
    bfb4:	0f b6       	in	r0, 0x3f	; 63
    bfb6:	f8 94       	cli
    bfb8:	de bf       	out	0x3e, r29	; 62
    bfba:	0f be       	out	0x3f, r0	; 63
    bfbc:	cd bf       	out	0x3d, r28	; 61
    bfbe:	df 91       	pop	r29
    bfc0:	cf 91       	pop	r28
    bfc2:	08 95       	ret

0000bfc4 <prvCopyDataFromQueue>:
    bfc4:	cf 93       	push	r28
    bfc6:	df 93       	push	r29
    bfc8:	00 d0       	rcall	.+0      	; 0xbfca <prvCopyDataFromQueue+0x6>
    bfca:	1f 92       	push	r1
    bfcc:	cd b7       	in	r28, 0x3d	; 61
    bfce:	de b7       	in	r29, 0x3e	; 62
    bfd0:	9a 83       	std	Y+2, r25	; 0x02
    bfd2:	89 83       	std	Y+1, r24	; 0x01
    bfd4:	7c 83       	std	Y+4, r23	; 0x04
    bfd6:	6b 83       	std	Y+3, r22	; 0x03
    bfd8:	89 81       	ldd	r24, Y+1	; 0x01
    bfda:	9a 81       	ldd	r25, Y+2	; 0x02
    bfdc:	fc 01       	movw	r30, r24
    bfde:	84 8d       	ldd	r24, Z+28	; 0x1c
    bfe0:	88 23       	and	r24, r24
    bfe2:	c1 f1       	breq	.+112    	; 0xc054 <prvCopyDataFromQueue+0x90>
    bfe4:	89 81       	ldd	r24, Y+1	; 0x01
    bfe6:	9a 81       	ldd	r25, Y+2	; 0x02
    bfe8:	fc 01       	movw	r30, r24
    bfea:	26 81       	ldd	r18, Z+6	; 0x06
    bfec:	37 81       	ldd	r19, Z+7	; 0x07
    bfee:	89 81       	ldd	r24, Y+1	; 0x01
    bff0:	9a 81       	ldd	r25, Y+2	; 0x02
    bff2:	fc 01       	movw	r30, r24
    bff4:	84 8d       	ldd	r24, Z+28	; 0x1c
    bff6:	88 2f       	mov	r24, r24
    bff8:	90 e0       	ldi	r25, 0x00	; 0
    bffa:	28 0f       	add	r18, r24
    bffc:	39 1f       	adc	r19, r25
    bffe:	89 81       	ldd	r24, Y+1	; 0x01
    c000:	9a 81       	ldd	r25, Y+2	; 0x02
    c002:	fc 01       	movw	r30, r24
    c004:	37 83       	std	Z+7, r19	; 0x07
    c006:	26 83       	std	Z+6, r18	; 0x06
    c008:	89 81       	ldd	r24, Y+1	; 0x01
    c00a:	9a 81       	ldd	r25, Y+2	; 0x02
    c00c:	fc 01       	movw	r30, r24
    c00e:	26 81       	ldd	r18, Z+6	; 0x06
    c010:	37 81       	ldd	r19, Z+7	; 0x07
    c012:	89 81       	ldd	r24, Y+1	; 0x01
    c014:	9a 81       	ldd	r25, Y+2	; 0x02
    c016:	fc 01       	movw	r30, r24
    c018:	84 81       	ldd	r24, Z+4	; 0x04
    c01a:	95 81       	ldd	r25, Z+5	; 0x05
    c01c:	28 17       	cp	r18, r24
    c01e:	39 07       	cpc	r19, r25
    c020:	50 f0       	brcs	.+20     	; 0xc036 <prvCopyDataFromQueue+0x72>
    c022:	89 81       	ldd	r24, Y+1	; 0x01
    c024:	9a 81       	ldd	r25, Y+2	; 0x02
    c026:	fc 01       	movw	r30, r24
    c028:	20 81       	ld	r18, Z
    c02a:	31 81       	ldd	r19, Z+1	; 0x01
    c02c:	89 81       	ldd	r24, Y+1	; 0x01
    c02e:	9a 81       	ldd	r25, Y+2	; 0x02
    c030:	fc 01       	movw	r30, r24
    c032:	37 83       	std	Z+7, r19	; 0x07
    c034:	26 83       	std	Z+6, r18	; 0x06
    c036:	89 81       	ldd	r24, Y+1	; 0x01
    c038:	9a 81       	ldd	r25, Y+2	; 0x02
    c03a:	fc 01       	movw	r30, r24
    c03c:	84 8d       	ldd	r24, Z+28	; 0x1c
    c03e:	48 2f       	mov	r20, r24
    c040:	50 e0       	ldi	r21, 0x00	; 0
    c042:	89 81       	ldd	r24, Y+1	; 0x01
    c044:	9a 81       	ldd	r25, Y+2	; 0x02
    c046:	fc 01       	movw	r30, r24
    c048:	26 81       	ldd	r18, Z+6	; 0x06
    c04a:	37 81       	ldd	r19, Z+7	; 0x07
    c04c:	8b 81       	ldd	r24, Y+3	; 0x03
    c04e:	9c 81       	ldd	r25, Y+4	; 0x04
    c050:	b9 01       	movw	r22, r18
    c052:	38 d4       	rcall	.+2160   	; 0xc8c4 <memcpy>
    c054:	00 00       	nop
    c056:	0f 90       	pop	r0
    c058:	0f 90       	pop	r0
    c05a:	0f 90       	pop	r0
    c05c:	0f 90       	pop	r0
    c05e:	df 91       	pop	r29
    c060:	cf 91       	pop	r28
    c062:	08 95       	ret

0000c064 <prvUnlockQueue>:
    c064:	cf 93       	push	r28
    c066:	df 93       	push	r29
    c068:	00 d0       	rcall	.+0      	; 0xc06a <prvUnlockQueue+0x6>
    c06a:	1f 92       	push	r1
    c06c:	cd b7       	in	r28, 0x3d	; 61
    c06e:	de b7       	in	r29, 0x3e	; 62
    c070:	9c 83       	std	Y+4, r25	; 0x04
    c072:	8b 83       	std	Y+3, r24	; 0x03
    c074:	0f b6       	in	r0, 0x3f	; 63
    c076:	f8 94       	cli
    c078:	0f 92       	push	r0
    c07a:	8b 81       	ldd	r24, Y+3	; 0x03
    c07c:	9c 81       	ldd	r25, Y+4	; 0x04
    c07e:	fc 01       	movw	r30, r24
    c080:	86 8d       	ldd	r24, Z+30	; 0x1e
    c082:	89 83       	std	Y+1, r24	; 0x01
    c084:	12 c0       	rjmp	.+36     	; 0xc0aa <prvUnlockQueue+0x46>
    c086:	8b 81       	ldd	r24, Y+3	; 0x03
    c088:	9c 81       	ldd	r25, Y+4	; 0x04
    c08a:	fc 01       	movw	r30, r24
    c08c:	81 89       	ldd	r24, Z+17	; 0x11
    c08e:	88 23       	and	r24, r24
    c090:	81 f0       	breq	.+32     	; 0xc0b2 <prvUnlockQueue+0x4e>
    c092:	8b 81       	ldd	r24, Y+3	; 0x03
    c094:	9c 81       	ldd	r25, Y+4	; 0x04
    c096:	41 96       	adiw	r24, 0x11	; 17
    c098:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <xTaskRemoveFromEventList>
    c09c:	88 23       	and	r24, r24
    c09e:	11 f0       	breq	.+4      	; 0xc0a4 <prvUnlockQueue+0x40>
    c0a0:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <vTaskMissedYield>
    c0a4:	89 81       	ldd	r24, Y+1	; 0x01
    c0a6:	81 50       	subi	r24, 0x01	; 1
    c0a8:	89 83       	std	Y+1, r24	; 0x01
    c0aa:	89 81       	ldd	r24, Y+1	; 0x01
    c0ac:	18 16       	cp	r1, r24
    c0ae:	5c f3       	brlt	.-42     	; 0xc086 <prvUnlockQueue+0x22>
    c0b0:	01 c0       	rjmp	.+2      	; 0xc0b4 <prvUnlockQueue+0x50>
    c0b2:	00 00       	nop
    c0b4:	8b 81       	ldd	r24, Y+3	; 0x03
    c0b6:	9c 81       	ldd	r25, Y+4	; 0x04
    c0b8:	2f ef       	ldi	r18, 0xFF	; 255
    c0ba:	fc 01       	movw	r30, r24
    c0bc:	26 8f       	std	Z+30, r18	; 0x1e
    c0be:	0f 90       	pop	r0
    c0c0:	0f be       	out	0x3f, r0	; 63
    c0c2:	0f b6       	in	r0, 0x3f	; 63
    c0c4:	f8 94       	cli
    c0c6:	0f 92       	push	r0
    c0c8:	8b 81       	ldd	r24, Y+3	; 0x03
    c0ca:	9c 81       	ldd	r25, Y+4	; 0x04
    c0cc:	fc 01       	movw	r30, r24
    c0ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    c0d0:	8a 83       	std	Y+2, r24	; 0x02
    c0d2:	12 c0       	rjmp	.+36     	; 0xc0f8 <prvUnlockQueue+0x94>
    c0d4:	8b 81       	ldd	r24, Y+3	; 0x03
    c0d6:	9c 81       	ldd	r25, Y+4	; 0x04
    c0d8:	fc 01       	movw	r30, r24
    c0da:	80 85       	ldd	r24, Z+8	; 0x08
    c0dc:	88 23       	and	r24, r24
    c0de:	81 f0       	breq	.+32     	; 0xc100 <prvUnlockQueue+0x9c>
    c0e0:	8b 81       	ldd	r24, Y+3	; 0x03
    c0e2:	9c 81       	ldd	r25, Y+4	; 0x04
    c0e4:	08 96       	adiw	r24, 0x08	; 8
    c0e6:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <xTaskRemoveFromEventList>
    c0ea:	88 23       	and	r24, r24
    c0ec:	11 f0       	breq	.+4      	; 0xc0f2 <prvUnlockQueue+0x8e>
    c0ee:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <vTaskMissedYield>
    c0f2:	8a 81       	ldd	r24, Y+2	; 0x02
    c0f4:	81 50       	subi	r24, 0x01	; 1
    c0f6:	8a 83       	std	Y+2, r24	; 0x02
    c0f8:	8a 81       	ldd	r24, Y+2	; 0x02
    c0fa:	18 16       	cp	r1, r24
    c0fc:	5c f3       	brlt	.-42     	; 0xc0d4 <prvUnlockQueue+0x70>
    c0fe:	01 c0       	rjmp	.+2      	; 0xc102 <prvUnlockQueue+0x9e>
    c100:	00 00       	nop
    c102:	8b 81       	ldd	r24, Y+3	; 0x03
    c104:	9c 81       	ldd	r25, Y+4	; 0x04
    c106:	2f ef       	ldi	r18, 0xFF	; 255
    c108:	fc 01       	movw	r30, r24
    c10a:	25 8f       	std	Z+29, r18	; 0x1d
    c10c:	0f 90       	pop	r0
    c10e:	0f be       	out	0x3f, r0	; 63
    c110:	00 00       	nop
    c112:	0f 90       	pop	r0
    c114:	0f 90       	pop	r0
    c116:	0f 90       	pop	r0
    c118:	0f 90       	pop	r0
    c11a:	df 91       	pop	r29
    c11c:	cf 91       	pop	r28
    c11e:	08 95       	ret

0000c120 <prvIsQueueEmpty>:
    c120:	cf 93       	push	r28
    c122:	df 93       	push	r29
    c124:	00 d0       	rcall	.+0      	; 0xc126 <prvIsQueueEmpty+0x6>
    c126:	cd b7       	in	r28, 0x3d	; 61
    c128:	de b7       	in	r29, 0x3e	; 62
    c12a:	9b 83       	std	Y+3, r25	; 0x03
    c12c:	8a 83       	std	Y+2, r24	; 0x02
    c12e:	0f b6       	in	r0, 0x3f	; 63
    c130:	f8 94       	cli
    c132:	0f 92       	push	r0
    c134:	8a 81       	ldd	r24, Y+2	; 0x02
    c136:	9b 81       	ldd	r25, Y+3	; 0x03
    c138:	fc 01       	movw	r30, r24
    c13a:	82 8d       	ldd	r24, Z+26	; 0x1a
    c13c:	88 23       	and	r24, r24
    c13e:	19 f4       	brne	.+6      	; 0xc146 <prvIsQueueEmpty+0x26>
    c140:	81 e0       	ldi	r24, 0x01	; 1
    c142:	89 83       	std	Y+1, r24	; 0x01
    c144:	01 c0       	rjmp	.+2      	; 0xc148 <prvIsQueueEmpty+0x28>
    c146:	19 82       	std	Y+1, r1	; 0x01
    c148:	0f 90       	pop	r0
    c14a:	0f be       	out	0x3f, r0	; 63
    c14c:	89 81       	ldd	r24, Y+1	; 0x01
    c14e:	0f 90       	pop	r0
    c150:	0f 90       	pop	r0
    c152:	0f 90       	pop	r0
    c154:	df 91       	pop	r29
    c156:	cf 91       	pop	r28
    c158:	08 95       	ret

0000c15a <prvIsQueueFull>:
    c15a:	cf 93       	push	r28
    c15c:	df 93       	push	r29
    c15e:	00 d0       	rcall	.+0      	; 0xc160 <prvIsQueueFull+0x6>
    c160:	cd b7       	in	r28, 0x3d	; 61
    c162:	de b7       	in	r29, 0x3e	; 62
    c164:	9b 83       	std	Y+3, r25	; 0x03
    c166:	8a 83       	std	Y+2, r24	; 0x02
    c168:	0f b6       	in	r0, 0x3f	; 63
    c16a:	f8 94       	cli
    c16c:	0f 92       	push	r0
    c16e:	8a 81       	ldd	r24, Y+2	; 0x02
    c170:	9b 81       	ldd	r25, Y+3	; 0x03
    c172:	fc 01       	movw	r30, r24
    c174:	22 8d       	ldd	r18, Z+26	; 0x1a
    c176:	8a 81       	ldd	r24, Y+2	; 0x02
    c178:	9b 81       	ldd	r25, Y+3	; 0x03
    c17a:	fc 01       	movw	r30, r24
    c17c:	83 8d       	ldd	r24, Z+27	; 0x1b
    c17e:	28 17       	cp	r18, r24
    c180:	19 f4       	brne	.+6      	; 0xc188 <prvIsQueueFull+0x2e>
    c182:	81 e0       	ldi	r24, 0x01	; 1
    c184:	89 83       	std	Y+1, r24	; 0x01
    c186:	01 c0       	rjmp	.+2      	; 0xc18a <prvIsQueueFull+0x30>
    c188:	19 82       	std	Y+1, r1	; 0x01
    c18a:	0f 90       	pop	r0
    c18c:	0f be       	out	0x3f, r0	; 63
    c18e:	89 81       	ldd	r24, Y+1	; 0x01
    c190:	0f 90       	pop	r0
    c192:	0f 90       	pop	r0
    c194:	0f 90       	pop	r0
    c196:	df 91       	pop	r29
    c198:	cf 91       	pop	r28
    c19a:	08 95       	ret

0000c19c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    c19c:	cf 93       	push	r28
    c19e:	df 93       	push	r29
    c1a0:	cd b7       	in	r28, 0x3d	; 61
    c1a2:	de b7       	in	r29, 0x3e	; 62
    c1a4:	27 97       	sbiw	r28, 0x07	; 7
    c1a6:	0f b6       	in	r0, 0x3f	; 63
    c1a8:	f8 94       	cli
    c1aa:	de bf       	out	0x3e, r29	; 62
    c1ac:	0f be       	out	0x3f, r0	; 63
    c1ae:	cd bf       	out	0x3d, r28	; 61
    c1b0:	9c 83       	std	Y+4, r25	; 0x04
    c1b2:	8b 83       	std	Y+3, r24	; 0x03
    c1b4:	7e 83       	std	Y+6, r23	; 0x06
    c1b6:	6d 83       	std	Y+5, r22	; 0x05
    c1b8:	4f 83       	std	Y+7, r20	; 0x07
    Queue_t * const pxQueue = xQueue;
    c1ba:	8b 81       	ldd	r24, Y+3	; 0x03
    c1bc:	9c 81       	ldd	r25, Y+4	; 0x04
    c1be:	9a 83       	std	Y+2, r25	; 0x02
    c1c0:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    c1c2:	0f b6       	in	r0, 0x3f	; 63
    c1c4:	f8 94       	cli
    c1c6:	0f 92       	push	r0
    c1c8:	89 81       	ldd	r24, Y+1	; 0x01
    c1ca:	9a 81       	ldd	r25, Y+2	; 0x02
    c1cc:	fc 01       	movw	r30, r24
    c1ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    c1d0:	8f 3f       	cpi	r24, 0xFF	; 255
    c1d2:	21 f4       	brne	.+8      	; 0xc1dc <vQueueWaitForMessageRestricted+0x40>
    c1d4:	89 81       	ldd	r24, Y+1	; 0x01
    c1d6:	9a 81       	ldd	r25, Y+2	; 0x02
    c1d8:	fc 01       	movw	r30, r24
    c1da:	15 8e       	std	Z+29, r1	; 0x1d
    c1dc:	89 81       	ldd	r24, Y+1	; 0x01
    c1de:	9a 81       	ldd	r25, Y+2	; 0x02
    c1e0:	fc 01       	movw	r30, r24
    c1e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    c1e4:	8f 3f       	cpi	r24, 0xFF	; 255
    c1e6:	21 f4       	brne	.+8      	; 0xc1f0 <vQueueWaitForMessageRestricted+0x54>
    c1e8:	89 81       	ldd	r24, Y+1	; 0x01
    c1ea:	9a 81       	ldd	r25, Y+2	; 0x02
    c1ec:	fc 01       	movw	r30, r24
    c1ee:	16 8e       	std	Z+30, r1	; 0x1e
    c1f0:	0f 90       	pop	r0
    c1f2:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    c1f4:	89 81       	ldd	r24, Y+1	; 0x01
    c1f6:	9a 81       	ldd	r25, Y+2	; 0x02
    c1f8:	fc 01       	movw	r30, r24
    c1fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    c1fc:	88 23       	and	r24, r24
    c1fe:	49 f4       	brne	.+18     	; 0xc212 <vQueueWaitForMessageRestricted+0x76>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    c200:	89 81       	ldd	r24, Y+1	; 0x01
    c202:	9a 81       	ldd	r25, Y+2	; 0x02
    c204:	41 96       	adiw	r24, 0x11	; 17
    c206:	2d 81       	ldd	r18, Y+5	; 0x05
    c208:	3e 81       	ldd	r19, Y+6	; 0x06
    c20a:	4f 81       	ldd	r20, Y+7	; 0x07
    c20c:	b9 01       	movw	r22, r18
    c20e:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    c212:	89 81       	ldd	r24, Y+1	; 0x01
    c214:	9a 81       	ldd	r25, Y+2	; 0x02
    c216:	26 df       	rcall	.-436    	; 0xc064 <prvUnlockQueue>
    }
    c218:	00 00       	nop
    c21a:	27 96       	adiw	r28, 0x07	; 7
    c21c:	0f b6       	in	r0, 0x3f	; 63
    c21e:	f8 94       	cli
    c220:	de bf       	out	0x3e, r29	; 62
    c222:	0f be       	out	0x3f, r0	; 63
    c224:	cd bf       	out	0x3d, r28	; 61
    c226:	df 91       	pop	r29
    c228:	cf 91       	pop	r28
    c22a:	08 95       	ret

0000c22c <__cmpsf2>:
    c22c:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__fp_cmp>
    c230:	08 f4       	brcc	.+2      	; 0xc234 <__cmpsf2+0x8>
    c232:	81 e0       	ldi	r24, 0x01	; 1
    c234:	08 95       	ret

0000c236 <__divmodhi4>:
    c236:	97 fb       	bst	r25, 7
    c238:	07 2e       	mov	r0, r23
    c23a:	16 f4       	brtc	.+4      	; 0xc240 <__divmodhi4+0xa>
    c23c:	00 94       	com	r0
    c23e:	06 d0       	rcall	.+12     	; 0xc24c <__divmodhi4_neg1>
    c240:	77 fd       	sbrc	r23, 7
    c242:	08 d0       	rcall	.+16     	; 0xc254 <__divmodhi4_neg2>
    c244:	5b d0       	rcall	.+182    	; 0xc2fc <__udivmodhi4>
    c246:	07 fc       	sbrc	r0, 7
    c248:	05 d0       	rcall	.+10     	; 0xc254 <__divmodhi4_neg2>
    c24a:	3e f4       	brtc	.+14     	; 0xc25a <__divmodhi4_exit>

0000c24c <__divmodhi4_neg1>:
    c24c:	90 95       	com	r25
    c24e:	81 95       	neg	r24
    c250:	9f 4f       	sbci	r25, 0xFF	; 255
    c252:	08 95       	ret

0000c254 <__divmodhi4_neg2>:
    c254:	70 95       	com	r23
    c256:	61 95       	neg	r22
    c258:	7f 4f       	sbci	r23, 0xFF	; 255

0000c25a <__divmodhi4_exit>:
    c25a:	08 95       	ret

0000c25c <__udivmodsi4>:
    c25c:	a1 e2       	ldi	r26, 0x21	; 33
    c25e:	1a 2e       	mov	r1, r26
    c260:	aa 1b       	sub	r26, r26
    c262:	bb 1b       	sub	r27, r27
    c264:	fd 01       	movw	r30, r26
    c266:	0d c0       	rjmp	.+26     	; 0xc282 <__udivmodsi4_ep>

0000c268 <__udivmodsi4_loop>:
    c268:	aa 1f       	adc	r26, r26
    c26a:	bb 1f       	adc	r27, r27
    c26c:	ee 1f       	adc	r30, r30
    c26e:	ff 1f       	adc	r31, r31
    c270:	a2 17       	cp	r26, r18
    c272:	b3 07       	cpc	r27, r19
    c274:	e4 07       	cpc	r30, r20
    c276:	f5 07       	cpc	r31, r21
    c278:	20 f0       	brcs	.+8      	; 0xc282 <__udivmodsi4_ep>
    c27a:	a2 1b       	sub	r26, r18
    c27c:	b3 0b       	sbc	r27, r19
    c27e:	e4 0b       	sbc	r30, r20
    c280:	f5 0b       	sbc	r31, r21

0000c282 <__udivmodsi4_ep>:
    c282:	66 1f       	adc	r22, r22
    c284:	77 1f       	adc	r23, r23
    c286:	88 1f       	adc	r24, r24
    c288:	99 1f       	adc	r25, r25
    c28a:	1a 94       	dec	r1
    c28c:	69 f7       	brne	.-38     	; 0xc268 <__udivmodsi4_loop>
    c28e:	60 95       	com	r22
    c290:	70 95       	com	r23
    c292:	80 95       	com	r24
    c294:	90 95       	com	r25
    c296:	9b 01       	movw	r18, r22
    c298:	ac 01       	movw	r20, r24
    c29a:	bd 01       	movw	r22, r26
    c29c:	cf 01       	movw	r24, r30
    c29e:	08 95       	ret

0000c2a0 <__divmodsi4>:
    c2a0:	05 2e       	mov	r0, r21
    c2a2:	97 fb       	bst	r25, 7
    c2a4:	16 f4       	brtc	.+4      	; 0xc2aa <__divmodsi4+0xa>
    c2a6:	00 94       	com	r0
    c2a8:	0f d0       	rcall	.+30     	; 0xc2c8 <__negsi2>
    c2aa:	57 fd       	sbrc	r21, 7
    c2ac:	05 d0       	rcall	.+10     	; 0xc2b8 <__divmodsi4_neg2>
    c2ae:	d6 df       	rcall	.-84     	; 0xc25c <__udivmodsi4>
    c2b0:	07 fc       	sbrc	r0, 7
    c2b2:	02 d0       	rcall	.+4      	; 0xc2b8 <__divmodsi4_neg2>
    c2b4:	46 f4       	brtc	.+16     	; 0xc2c6 <__divmodsi4_exit>
    c2b6:	08 c0       	rjmp	.+16     	; 0xc2c8 <__negsi2>

0000c2b8 <__divmodsi4_neg2>:
    c2b8:	50 95       	com	r21
    c2ba:	40 95       	com	r20
    c2bc:	30 95       	com	r19
    c2be:	21 95       	neg	r18
    c2c0:	3f 4f       	sbci	r19, 0xFF	; 255
    c2c2:	4f 4f       	sbci	r20, 0xFF	; 255
    c2c4:	5f 4f       	sbci	r21, 0xFF	; 255

0000c2c6 <__divmodsi4_exit>:
    c2c6:	08 95       	ret

0000c2c8 <__negsi2>:
    c2c8:	90 95       	com	r25
    c2ca:	80 95       	com	r24
    c2cc:	70 95       	com	r23
    c2ce:	61 95       	neg	r22
    c2d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c2d2:	8f 4f       	sbci	r24, 0xFF	; 255
    c2d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c2d6:	08 95       	ret

0000c2d8 <__tablejump2__>:
    c2d8:	ee 0f       	add	r30, r30
    c2da:	ff 1f       	adc	r31, r31
    c2dc:	88 1f       	adc	r24, r24
    c2de:	8b bf       	out	0x3b, r24	; 59
    c2e0:	07 90       	elpm	r0, Z+
    c2e2:	f6 91       	elpm	r31, Z
    c2e4:	e0 2d       	mov	r30, r0
    c2e6:	19 94       	eijmp

0000c2e8 <__muluhisi3>:
    c2e8:	1d d0       	rcall	.+58     	; 0xc324 <__umulhisi3>
    c2ea:	a5 9f       	mul	r26, r21
    c2ec:	90 0d       	add	r25, r0
    c2ee:	b4 9f       	mul	r27, r20
    c2f0:	90 0d       	add	r25, r0
    c2f2:	a4 9f       	mul	r26, r20
    c2f4:	80 0d       	add	r24, r0
    c2f6:	91 1d       	adc	r25, r1
    c2f8:	11 24       	eor	r1, r1
    c2fa:	08 95       	ret

0000c2fc <__udivmodhi4>:
    c2fc:	aa 1b       	sub	r26, r26
    c2fe:	bb 1b       	sub	r27, r27
    c300:	51 e1       	ldi	r21, 0x11	; 17
    c302:	07 c0       	rjmp	.+14     	; 0xc312 <__udivmodhi4_ep>

0000c304 <__udivmodhi4_loop>:
    c304:	aa 1f       	adc	r26, r26
    c306:	bb 1f       	adc	r27, r27
    c308:	a6 17       	cp	r26, r22
    c30a:	b7 07       	cpc	r27, r23
    c30c:	10 f0       	brcs	.+4      	; 0xc312 <__udivmodhi4_ep>
    c30e:	a6 1b       	sub	r26, r22
    c310:	b7 0b       	sbc	r27, r23

0000c312 <__udivmodhi4_ep>:
    c312:	88 1f       	adc	r24, r24
    c314:	99 1f       	adc	r25, r25
    c316:	5a 95       	dec	r21
    c318:	a9 f7       	brne	.-22     	; 0xc304 <__udivmodhi4_loop>
    c31a:	80 95       	com	r24
    c31c:	90 95       	com	r25
    c31e:	bc 01       	movw	r22, r24
    c320:	cd 01       	movw	r24, r26
    c322:	08 95       	ret

0000c324 <__umulhisi3>:
    c324:	a2 9f       	mul	r26, r18
    c326:	b0 01       	movw	r22, r0
    c328:	b3 9f       	mul	r27, r19
    c32a:	c0 01       	movw	r24, r0
    c32c:	a3 9f       	mul	r26, r19
    c32e:	70 0d       	add	r23, r0
    c330:	81 1d       	adc	r24, r1
    c332:	11 24       	eor	r1, r1
    c334:	91 1d       	adc	r25, r1
    c336:	b2 9f       	mul	r27, r18
    c338:	70 0d       	add	r23, r0
    c33a:	81 1d       	adc	r24, r1
    c33c:	11 24       	eor	r1, r1
    c33e:	91 1d       	adc	r25, r1
    c340:	08 95       	ret

0000c342 <malloc>:
    c342:	0f 93       	push	r16
    c344:	1f 93       	push	r17
    c346:	cf 93       	push	r28
    c348:	df 93       	push	r29
    c34a:	82 30       	cpi	r24, 0x02	; 2
    c34c:	91 05       	cpc	r25, r1
    c34e:	10 f4       	brcc	.+4      	; 0xc354 <malloc+0x12>
    c350:	82 e0       	ldi	r24, 0x02	; 2
    c352:	90 e0       	ldi	r25, 0x00	; 0
    c354:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <__flp>
    c358:	f0 91 99 05 	lds	r31, 0x0599	; 0x800599 <__flp+0x1>
    c35c:	20 e0       	ldi	r18, 0x00	; 0
    c35e:	30 e0       	ldi	r19, 0x00	; 0
    c360:	a0 e0       	ldi	r26, 0x00	; 0
    c362:	b0 e0       	ldi	r27, 0x00	; 0
    c364:	30 97       	sbiw	r30, 0x00	; 0
    c366:	19 f1       	breq	.+70     	; 0xc3ae <malloc+0x6c>
    c368:	40 81       	ld	r20, Z
    c36a:	51 81       	ldd	r21, Z+1	; 0x01
    c36c:	02 81       	ldd	r16, Z+2	; 0x02
    c36e:	13 81       	ldd	r17, Z+3	; 0x03
    c370:	48 17       	cp	r20, r24
    c372:	59 07       	cpc	r21, r25
    c374:	c8 f0       	brcs	.+50     	; 0xc3a8 <malloc+0x66>
    c376:	84 17       	cp	r24, r20
    c378:	95 07       	cpc	r25, r21
    c37a:	69 f4       	brne	.+26     	; 0xc396 <malloc+0x54>
    c37c:	10 97       	sbiw	r26, 0x00	; 0
    c37e:	31 f0       	breq	.+12     	; 0xc38c <malloc+0x4a>
    c380:	12 96       	adiw	r26, 0x02	; 2
    c382:	0c 93       	st	X, r16
    c384:	12 97       	sbiw	r26, 0x02	; 2
    c386:	13 96       	adiw	r26, 0x03	; 3
    c388:	1c 93       	st	X, r17
    c38a:	27 c0       	rjmp	.+78     	; 0xc3da <malloc+0x98>
    c38c:	00 93 98 05 	sts	0x0598, r16	; 0x800598 <__flp>
    c390:	10 93 99 05 	sts	0x0599, r17	; 0x800599 <__flp+0x1>
    c394:	22 c0       	rjmp	.+68     	; 0xc3da <malloc+0x98>
    c396:	21 15       	cp	r18, r1
    c398:	31 05       	cpc	r19, r1
    c39a:	19 f0       	breq	.+6      	; 0xc3a2 <malloc+0x60>
    c39c:	42 17       	cp	r20, r18
    c39e:	53 07       	cpc	r21, r19
    c3a0:	18 f4       	brcc	.+6      	; 0xc3a8 <malloc+0x66>
    c3a2:	9a 01       	movw	r18, r20
    c3a4:	bd 01       	movw	r22, r26
    c3a6:	ef 01       	movw	r28, r30
    c3a8:	df 01       	movw	r26, r30
    c3aa:	f8 01       	movw	r30, r16
    c3ac:	db cf       	rjmp	.-74     	; 0xc364 <malloc+0x22>
    c3ae:	21 15       	cp	r18, r1
    c3b0:	31 05       	cpc	r19, r1
    c3b2:	f9 f0       	breq	.+62     	; 0xc3f2 <malloc+0xb0>
    c3b4:	28 1b       	sub	r18, r24
    c3b6:	39 0b       	sbc	r19, r25
    c3b8:	24 30       	cpi	r18, 0x04	; 4
    c3ba:	31 05       	cpc	r19, r1
    c3bc:	80 f4       	brcc	.+32     	; 0xc3de <malloc+0x9c>
    c3be:	8a 81       	ldd	r24, Y+2	; 0x02
    c3c0:	9b 81       	ldd	r25, Y+3	; 0x03
    c3c2:	61 15       	cp	r22, r1
    c3c4:	71 05       	cpc	r23, r1
    c3c6:	21 f0       	breq	.+8      	; 0xc3d0 <malloc+0x8e>
    c3c8:	fb 01       	movw	r30, r22
    c3ca:	93 83       	std	Z+3, r25	; 0x03
    c3cc:	82 83       	std	Z+2, r24	; 0x02
    c3ce:	04 c0       	rjmp	.+8      	; 0xc3d8 <malloc+0x96>
    c3d0:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <__flp+0x1>
    c3d4:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <__flp>
    c3d8:	fe 01       	movw	r30, r28
    c3da:	32 96       	adiw	r30, 0x02	; 2
    c3dc:	44 c0       	rjmp	.+136    	; 0xc466 <malloc+0x124>
    c3de:	fe 01       	movw	r30, r28
    c3e0:	e2 0f       	add	r30, r18
    c3e2:	f3 1f       	adc	r31, r19
    c3e4:	81 93       	st	Z+, r24
    c3e6:	91 93       	st	Z+, r25
    c3e8:	22 50       	subi	r18, 0x02	; 2
    c3ea:	31 09       	sbc	r19, r1
    c3ec:	39 83       	std	Y+1, r19	; 0x01
    c3ee:	28 83       	st	Y, r18
    c3f0:	3a c0       	rjmp	.+116    	; 0xc466 <malloc+0x124>
    c3f2:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <__brkval>
    c3f6:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <__brkval+0x1>
    c3fa:	23 2b       	or	r18, r19
    c3fc:	41 f4       	brne	.+16     	; 0xc40e <malloc+0xcc>
    c3fe:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    c402:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    c406:	30 93 97 05 	sts	0x0597, r19	; 0x800597 <__brkval+0x1>
    c40a:	20 93 96 05 	sts	0x0596, r18	; 0x800596 <__brkval>
    c40e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    c412:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    c416:	21 15       	cp	r18, r1
    c418:	31 05       	cpc	r19, r1
    c41a:	41 f4       	brne	.+16     	; 0xc42c <malloc+0xea>
    c41c:	2d b7       	in	r18, 0x3d	; 61
    c41e:	3e b7       	in	r19, 0x3e	; 62
    c420:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c424:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c428:	24 1b       	sub	r18, r20
    c42a:	35 0b       	sbc	r19, r21
    c42c:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <__brkval>
    c430:	f0 91 97 05 	lds	r31, 0x0597	; 0x800597 <__brkval+0x1>
    c434:	e2 17       	cp	r30, r18
    c436:	f3 07       	cpc	r31, r19
    c438:	a0 f4       	brcc	.+40     	; 0xc462 <malloc+0x120>
    c43a:	2e 1b       	sub	r18, r30
    c43c:	3f 0b       	sbc	r19, r31
    c43e:	28 17       	cp	r18, r24
    c440:	39 07       	cpc	r19, r25
    c442:	78 f0       	brcs	.+30     	; 0xc462 <malloc+0x120>
    c444:	ac 01       	movw	r20, r24
    c446:	4e 5f       	subi	r20, 0xFE	; 254
    c448:	5f 4f       	sbci	r21, 0xFF	; 255
    c44a:	24 17       	cp	r18, r20
    c44c:	35 07       	cpc	r19, r21
    c44e:	48 f0       	brcs	.+18     	; 0xc462 <malloc+0x120>
    c450:	4e 0f       	add	r20, r30
    c452:	5f 1f       	adc	r21, r31
    c454:	50 93 97 05 	sts	0x0597, r21	; 0x800597 <__brkval+0x1>
    c458:	40 93 96 05 	sts	0x0596, r20	; 0x800596 <__brkval>
    c45c:	81 93       	st	Z+, r24
    c45e:	91 93       	st	Z+, r25
    c460:	02 c0       	rjmp	.+4      	; 0xc466 <malloc+0x124>
    c462:	e0 e0       	ldi	r30, 0x00	; 0
    c464:	f0 e0       	ldi	r31, 0x00	; 0
    c466:	cf 01       	movw	r24, r30
    c468:	df 91       	pop	r29
    c46a:	cf 91       	pop	r28
    c46c:	1f 91       	pop	r17
    c46e:	0f 91       	pop	r16
    c470:	08 95       	ret

0000c472 <free>:
    c472:	cf 93       	push	r28
    c474:	df 93       	push	r29
    c476:	00 97       	sbiw	r24, 0x00	; 0
    c478:	09 f4       	brne	.+2      	; 0xc47c <free+0xa>
    c47a:	81 c0       	rjmp	.+258    	; 0xc57e <free+0x10c>
    c47c:	fc 01       	movw	r30, r24
    c47e:	32 97       	sbiw	r30, 0x02	; 2
    c480:	13 82       	std	Z+3, r1	; 0x03
    c482:	12 82       	std	Z+2, r1	; 0x02
    c484:	a0 91 98 05 	lds	r26, 0x0598	; 0x800598 <__flp>
    c488:	b0 91 99 05 	lds	r27, 0x0599	; 0x800599 <__flp+0x1>
    c48c:	10 97       	sbiw	r26, 0x00	; 0
    c48e:	81 f4       	brne	.+32     	; 0xc4b0 <free+0x3e>
    c490:	20 81       	ld	r18, Z
    c492:	31 81       	ldd	r19, Z+1	; 0x01
    c494:	82 0f       	add	r24, r18
    c496:	93 1f       	adc	r25, r19
    c498:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <__brkval>
    c49c:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <__brkval+0x1>
    c4a0:	28 17       	cp	r18, r24
    c4a2:	39 07       	cpc	r19, r25
    c4a4:	51 f5       	brne	.+84     	; 0xc4fa <free+0x88>
    c4a6:	f0 93 97 05 	sts	0x0597, r31	; 0x800597 <__brkval+0x1>
    c4aa:	e0 93 96 05 	sts	0x0596, r30	; 0x800596 <__brkval>
    c4ae:	67 c0       	rjmp	.+206    	; 0xc57e <free+0x10c>
    c4b0:	ed 01       	movw	r28, r26
    c4b2:	20 e0       	ldi	r18, 0x00	; 0
    c4b4:	30 e0       	ldi	r19, 0x00	; 0
    c4b6:	ce 17       	cp	r28, r30
    c4b8:	df 07       	cpc	r29, r31
    c4ba:	40 f4       	brcc	.+16     	; 0xc4cc <free+0x5a>
    c4bc:	4a 81       	ldd	r20, Y+2	; 0x02
    c4be:	5b 81       	ldd	r21, Y+3	; 0x03
    c4c0:	9e 01       	movw	r18, r28
    c4c2:	41 15       	cp	r20, r1
    c4c4:	51 05       	cpc	r21, r1
    c4c6:	f1 f0       	breq	.+60     	; 0xc504 <free+0x92>
    c4c8:	ea 01       	movw	r28, r20
    c4ca:	f5 cf       	rjmp	.-22     	; 0xc4b6 <free+0x44>
    c4cc:	d3 83       	std	Z+3, r29	; 0x03
    c4ce:	c2 83       	std	Z+2, r28	; 0x02
    c4d0:	40 81       	ld	r20, Z
    c4d2:	51 81       	ldd	r21, Z+1	; 0x01
    c4d4:	84 0f       	add	r24, r20
    c4d6:	95 1f       	adc	r25, r21
    c4d8:	c8 17       	cp	r28, r24
    c4da:	d9 07       	cpc	r29, r25
    c4dc:	59 f4       	brne	.+22     	; 0xc4f4 <free+0x82>
    c4de:	88 81       	ld	r24, Y
    c4e0:	99 81       	ldd	r25, Y+1	; 0x01
    c4e2:	84 0f       	add	r24, r20
    c4e4:	95 1f       	adc	r25, r21
    c4e6:	02 96       	adiw	r24, 0x02	; 2
    c4e8:	91 83       	std	Z+1, r25	; 0x01
    c4ea:	80 83       	st	Z, r24
    c4ec:	8a 81       	ldd	r24, Y+2	; 0x02
    c4ee:	9b 81       	ldd	r25, Y+3	; 0x03
    c4f0:	93 83       	std	Z+3, r25	; 0x03
    c4f2:	82 83       	std	Z+2, r24	; 0x02
    c4f4:	21 15       	cp	r18, r1
    c4f6:	31 05       	cpc	r19, r1
    c4f8:	29 f4       	brne	.+10     	; 0xc504 <free+0x92>
    c4fa:	f0 93 99 05 	sts	0x0599, r31	; 0x800599 <__flp+0x1>
    c4fe:	e0 93 98 05 	sts	0x0598, r30	; 0x800598 <__flp>
    c502:	3d c0       	rjmp	.+122    	; 0xc57e <free+0x10c>
    c504:	e9 01       	movw	r28, r18
    c506:	fb 83       	std	Y+3, r31	; 0x03
    c508:	ea 83       	std	Y+2, r30	; 0x02
    c50a:	49 91       	ld	r20, Y+
    c50c:	59 91       	ld	r21, Y+
    c50e:	c4 0f       	add	r28, r20
    c510:	d5 1f       	adc	r29, r21
    c512:	ec 17       	cp	r30, r28
    c514:	fd 07       	cpc	r31, r29
    c516:	61 f4       	brne	.+24     	; 0xc530 <free+0xbe>
    c518:	80 81       	ld	r24, Z
    c51a:	91 81       	ldd	r25, Z+1	; 0x01
    c51c:	84 0f       	add	r24, r20
    c51e:	95 1f       	adc	r25, r21
    c520:	02 96       	adiw	r24, 0x02	; 2
    c522:	e9 01       	movw	r28, r18
    c524:	99 83       	std	Y+1, r25	; 0x01
    c526:	88 83       	st	Y, r24
    c528:	82 81       	ldd	r24, Z+2	; 0x02
    c52a:	93 81       	ldd	r25, Z+3	; 0x03
    c52c:	9b 83       	std	Y+3, r25	; 0x03
    c52e:	8a 83       	std	Y+2, r24	; 0x02
    c530:	e0 e0       	ldi	r30, 0x00	; 0
    c532:	f0 e0       	ldi	r31, 0x00	; 0
    c534:	12 96       	adiw	r26, 0x02	; 2
    c536:	8d 91       	ld	r24, X+
    c538:	9c 91       	ld	r25, X
    c53a:	13 97       	sbiw	r26, 0x03	; 3
    c53c:	00 97       	sbiw	r24, 0x00	; 0
    c53e:	19 f0       	breq	.+6      	; 0xc546 <free+0xd4>
    c540:	fd 01       	movw	r30, r26
    c542:	dc 01       	movw	r26, r24
    c544:	f7 cf       	rjmp	.-18     	; 0xc534 <free+0xc2>
    c546:	8d 91       	ld	r24, X+
    c548:	9c 91       	ld	r25, X
    c54a:	11 97       	sbiw	r26, 0x01	; 1
    c54c:	9d 01       	movw	r18, r26
    c54e:	2e 5f       	subi	r18, 0xFE	; 254
    c550:	3f 4f       	sbci	r19, 0xFF	; 255
    c552:	82 0f       	add	r24, r18
    c554:	93 1f       	adc	r25, r19
    c556:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <__brkval>
    c55a:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <__brkval+0x1>
    c55e:	28 17       	cp	r18, r24
    c560:	39 07       	cpc	r19, r25
    c562:	69 f4       	brne	.+26     	; 0xc57e <free+0x10c>
    c564:	30 97       	sbiw	r30, 0x00	; 0
    c566:	29 f4       	brne	.+10     	; 0xc572 <free+0x100>
    c568:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <__flp+0x1>
    c56c:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <__flp>
    c570:	02 c0       	rjmp	.+4      	; 0xc576 <free+0x104>
    c572:	13 82       	std	Z+3, r1	; 0x03
    c574:	12 82       	std	Z+2, r1	; 0x02
    c576:	b0 93 97 05 	sts	0x0597, r27	; 0x800597 <__brkval+0x1>
    c57a:	a0 93 96 05 	sts	0x0596, r26	; 0x800596 <__brkval>
    c57e:	df 91       	pop	r29
    c580:	cf 91       	pop	r28
    c582:	08 95       	ret

0000c584 <random_r>:
    c584:	8f 92       	push	r8
    c586:	9f 92       	push	r9
    c588:	af 92       	push	r10
    c58a:	bf 92       	push	r11
    c58c:	cf 92       	push	r12
    c58e:	df 92       	push	r13
    c590:	ef 92       	push	r14
    c592:	ff 92       	push	r15
    c594:	cf 93       	push	r28
    c596:	df 93       	push	r29
    c598:	ec 01       	movw	r28, r24
    c59a:	68 81       	ld	r22, Y
    c59c:	79 81       	ldd	r23, Y+1	; 0x01
    c59e:	8a 81       	ldd	r24, Y+2	; 0x02
    c5a0:	9b 81       	ldd	r25, Y+3	; 0x03
    c5a2:	61 15       	cp	r22, r1
    c5a4:	71 05       	cpc	r23, r1
    c5a6:	81 05       	cpc	r24, r1
    c5a8:	91 05       	cpc	r25, r1
    c5aa:	21 f4       	brne	.+8      	; 0xc5b4 <random_r+0x30>
    c5ac:	64 e2       	ldi	r22, 0x24	; 36
    c5ae:	79 ed       	ldi	r23, 0xD9	; 217
    c5b0:	8b e5       	ldi	r24, 0x5B	; 91
    c5b2:	97 e0       	ldi	r25, 0x07	; 7
    c5b4:	2d e1       	ldi	r18, 0x1D	; 29
    c5b6:	33 ef       	ldi	r19, 0xF3	; 243
    c5b8:	41 e0       	ldi	r20, 0x01	; 1
    c5ba:	50 e0       	ldi	r21, 0x00	; 0
    c5bc:	71 de       	rcall	.-798    	; 0xc2a0 <__divmodsi4>
    c5be:	49 01       	movw	r8, r18
    c5c0:	5a 01       	movw	r10, r20
    c5c2:	9b 01       	movw	r18, r22
    c5c4:	ac 01       	movw	r20, r24
    c5c6:	a7 ea       	ldi	r26, 0xA7	; 167
    c5c8:	b1 e4       	ldi	r27, 0x41	; 65
    c5ca:	8e de       	rcall	.-740    	; 0xc2e8 <__muluhisi3>
    c5cc:	6b 01       	movw	r12, r22
    c5ce:	7c 01       	movw	r14, r24
    c5d0:	ac ee       	ldi	r26, 0xEC	; 236
    c5d2:	b4 ef       	ldi	r27, 0xF4	; 244
    c5d4:	a5 01       	movw	r20, r10
    c5d6:	94 01       	movw	r18, r8
    c5d8:	2e d5       	rcall	.+2652   	; 0xd036 <__mulohisi3>
    c5da:	dc 01       	movw	r26, r24
    c5dc:	cb 01       	movw	r24, r22
    c5de:	8c 0d       	add	r24, r12
    c5e0:	9d 1d       	adc	r25, r13
    c5e2:	ae 1d       	adc	r26, r14
    c5e4:	bf 1d       	adc	r27, r15
    c5e6:	b7 ff       	sbrs	r27, 7
    c5e8:	03 c0       	rjmp	.+6      	; 0xc5f0 <random_r+0x6c>
    c5ea:	01 97       	sbiw	r24, 0x01	; 1
    c5ec:	a1 09       	sbc	r26, r1
    c5ee:	b0 48       	sbci	r27, 0x80	; 128
    c5f0:	88 83       	st	Y, r24
    c5f2:	99 83       	std	Y+1, r25	; 0x01
    c5f4:	aa 83       	std	Y+2, r26	; 0x02
    c5f6:	bb 83       	std	Y+3, r27	; 0x03
    c5f8:	bc 01       	movw	r22, r24
    c5fa:	cd 01       	movw	r24, r26
    c5fc:	9f 77       	andi	r25, 0x7F	; 127
    c5fe:	df 91       	pop	r29
    c600:	cf 91       	pop	r28
    c602:	ff 90       	pop	r15
    c604:	ef 90       	pop	r14
    c606:	df 90       	pop	r13
    c608:	cf 90       	pop	r12
    c60a:	bf 90       	pop	r11
    c60c:	af 90       	pop	r10
    c60e:	9f 90       	pop	r9
    c610:	8f 90       	pop	r8
    c612:	08 95       	ret

0000c614 <random>:
    c614:	8f 92       	push	r8
    c616:	9f 92       	push	r9
    c618:	af 92       	push	r10
    c61a:	bf 92       	push	r11
    c61c:	cf 92       	push	r12
    c61e:	df 92       	push	r13
    c620:	ef 92       	push	r14
    c622:	ff 92       	push	r15
    c624:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <next>
    c628:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <next+0x1>
    c62c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <next+0x2>
    c630:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <next+0x3>
    c634:	61 15       	cp	r22, r1
    c636:	71 05       	cpc	r23, r1
    c638:	81 05       	cpc	r24, r1
    c63a:	91 05       	cpc	r25, r1
    c63c:	21 f4       	brne	.+8      	; 0xc646 <random+0x32>
    c63e:	64 e2       	ldi	r22, 0x24	; 36
    c640:	79 ed       	ldi	r23, 0xD9	; 217
    c642:	8b e5       	ldi	r24, 0x5B	; 91
    c644:	97 e0       	ldi	r25, 0x07	; 7
    c646:	2d e1       	ldi	r18, 0x1D	; 29
    c648:	33 ef       	ldi	r19, 0xF3	; 243
    c64a:	41 e0       	ldi	r20, 0x01	; 1
    c64c:	50 e0       	ldi	r21, 0x00	; 0
    c64e:	28 de       	rcall	.-944    	; 0xc2a0 <__divmodsi4>
    c650:	49 01       	movw	r8, r18
    c652:	5a 01       	movw	r10, r20
    c654:	9b 01       	movw	r18, r22
    c656:	ac 01       	movw	r20, r24
    c658:	a7 ea       	ldi	r26, 0xA7	; 167
    c65a:	b1 e4       	ldi	r27, 0x41	; 65
    c65c:	45 de       	rcall	.-886    	; 0xc2e8 <__muluhisi3>
    c65e:	6b 01       	movw	r12, r22
    c660:	7c 01       	movw	r14, r24
    c662:	ac ee       	ldi	r26, 0xEC	; 236
    c664:	b4 ef       	ldi	r27, 0xF4	; 244
    c666:	a5 01       	movw	r20, r10
    c668:	94 01       	movw	r18, r8
    c66a:	e5 d4       	rcall	.+2506   	; 0xd036 <__mulohisi3>
    c66c:	dc 01       	movw	r26, r24
    c66e:	cb 01       	movw	r24, r22
    c670:	8c 0d       	add	r24, r12
    c672:	9d 1d       	adc	r25, r13
    c674:	ae 1d       	adc	r26, r14
    c676:	bf 1d       	adc	r27, r15
    c678:	b7 ff       	sbrs	r27, 7
    c67a:	03 c0       	rjmp	.+6      	; 0xc682 <random+0x6e>
    c67c:	01 97       	sbiw	r24, 0x01	; 1
    c67e:	a1 09       	sbc	r26, r1
    c680:	b0 48       	sbci	r27, 0x80	; 128
    c682:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    c686:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    c68a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    c68e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    c692:	bc 01       	movw	r22, r24
    c694:	cd 01       	movw	r24, r26
    c696:	9f 77       	andi	r25, 0x7F	; 127
    c698:	ff 90       	pop	r15
    c69a:	ef 90       	pop	r14
    c69c:	df 90       	pop	r13
    c69e:	cf 90       	pop	r12
    c6a0:	bf 90       	pop	r11
    c6a2:	af 90       	pop	r10
    c6a4:	9f 90       	pop	r9
    c6a6:	8f 90       	pop	r8
    c6a8:	08 95       	ret

0000c6aa <srandom>:
    c6aa:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <next>
    c6ae:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <next+0x1>
    c6b2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <next+0x2>
    c6b6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <next+0x3>
    c6ba:	08 95       	ret

0000c6bc <realloc>:
    c6bc:	6f 92       	push	r6
    c6be:	7f 92       	push	r7
    c6c0:	8f 92       	push	r8
    c6c2:	9f 92       	push	r9
    c6c4:	af 92       	push	r10
    c6c6:	bf 92       	push	r11
    c6c8:	cf 92       	push	r12
    c6ca:	df 92       	push	r13
    c6cc:	ef 92       	push	r14
    c6ce:	ff 92       	push	r15
    c6d0:	0f 93       	push	r16
    c6d2:	1f 93       	push	r17
    c6d4:	cf 93       	push	r28
    c6d6:	df 93       	push	r29
    c6d8:	00 97       	sbiw	r24, 0x00	; 0
    c6da:	81 f4       	brne	.+32     	; 0xc6fc <realloc+0x40>
    c6dc:	cb 01       	movw	r24, r22
    c6de:	df 91       	pop	r29
    c6e0:	cf 91       	pop	r28
    c6e2:	1f 91       	pop	r17
    c6e4:	0f 91       	pop	r16
    c6e6:	ff 90       	pop	r15
    c6e8:	ef 90       	pop	r14
    c6ea:	df 90       	pop	r13
    c6ec:	cf 90       	pop	r12
    c6ee:	bf 90       	pop	r11
    c6f0:	af 90       	pop	r10
    c6f2:	9f 90       	pop	r9
    c6f4:	8f 90       	pop	r8
    c6f6:	7f 90       	pop	r7
    c6f8:	6f 90       	pop	r6
    c6fa:	23 ce       	rjmp	.-954    	; 0xc342 <malloc>
    c6fc:	fc 01       	movw	r30, r24
    c6fe:	e6 0f       	add	r30, r22
    c700:	f7 1f       	adc	r31, r23
    c702:	9c 01       	movw	r18, r24
    c704:	22 50       	subi	r18, 0x02	; 2
    c706:	31 09       	sbc	r19, r1
    c708:	e2 17       	cp	r30, r18
    c70a:	f3 07       	cpc	r31, r19
    c70c:	08 f4       	brcc	.+2      	; 0xc710 <realloc+0x54>
    c70e:	a5 c0       	rjmp	.+330    	; 0xc85a <realloc+0x19e>
    c710:	ec 01       	movw	r28, r24
    c712:	d9 01       	movw	r26, r18
    c714:	0d 91       	ld	r16, X+
    c716:	1c 91       	ld	r17, X
    c718:	11 97       	sbiw	r26, 0x01	; 1
    c71a:	06 17       	cp	r16, r22
    c71c:	17 07       	cpc	r17, r23
    c71e:	a8 f0       	brcs	.+42     	; 0xc74a <realloc+0x8e>
    c720:	05 30       	cpi	r16, 0x05	; 5
    c722:	11 05       	cpc	r17, r1
    c724:	08 f4       	brcc	.+2      	; 0xc728 <realloc+0x6c>
    c726:	97 c0       	rjmp	.+302    	; 0xc856 <realloc+0x19a>
    c728:	c8 01       	movw	r24, r16
    c72a:	04 97       	sbiw	r24, 0x04	; 4
    c72c:	86 17       	cp	r24, r22
    c72e:	97 07       	cpc	r25, r23
    c730:	08 f4       	brcc	.+2      	; 0xc734 <realloc+0x78>
    c732:	91 c0       	rjmp	.+290    	; 0xc856 <realloc+0x19a>
    c734:	02 50       	subi	r16, 0x02	; 2
    c736:	11 09       	sbc	r17, r1
    c738:	06 1b       	sub	r16, r22
    c73a:	17 0b       	sbc	r17, r23
    c73c:	01 93       	st	Z+, r16
    c73e:	11 93       	st	Z+, r17
    c740:	6d 93       	st	X+, r22
    c742:	7c 93       	st	X, r23
    c744:	cf 01       	movw	r24, r30
    c746:	95 de       	rcall	.-726    	; 0xc472 <free>
    c748:	86 c0       	rjmp	.+268    	; 0xc856 <realloc+0x19a>
    c74a:	5b 01       	movw	r10, r22
    c74c:	a0 1a       	sub	r10, r16
    c74e:	b1 0a       	sbc	r11, r17
    c750:	4c 01       	movw	r8, r24
    c752:	80 0e       	add	r8, r16
    c754:	91 1e       	adc	r9, r17
    c756:	a0 91 98 05 	lds	r26, 0x0598	; 0x800598 <__flp>
    c75a:	b0 91 99 05 	lds	r27, 0x0599	; 0x800599 <__flp+0x1>
    c75e:	61 2c       	mov	r6, r1
    c760:	71 2c       	mov	r7, r1
    c762:	e1 2c       	mov	r14, r1
    c764:	f1 2c       	mov	r15, r1
    c766:	10 97       	sbiw	r26, 0x00	; 0
    c768:	09 f4       	brne	.+2      	; 0xc76c <realloc+0xb0>
    c76a:	46 c0       	rjmp	.+140    	; 0xc7f8 <realloc+0x13c>
    c76c:	8d 91       	ld	r24, X+
    c76e:	9c 91       	ld	r25, X
    c770:	11 97       	sbiw	r26, 0x01	; 1
    c772:	a8 15       	cp	r26, r8
    c774:	b9 05       	cpc	r27, r9
    c776:	b1 f5       	brne	.+108    	; 0xc7e4 <realloc+0x128>
    c778:	6c 01       	movw	r12, r24
    c77a:	42 e0       	ldi	r20, 0x02	; 2
    c77c:	c4 0e       	add	r12, r20
    c77e:	d1 1c       	adc	r13, r1
    c780:	ca 14       	cp	r12, r10
    c782:	db 04       	cpc	r13, r11
    c784:	78 f1       	brcs	.+94     	; 0xc7e4 <realloc+0x128>
    c786:	4c 01       	movw	r8, r24
    c788:	8a 18       	sub	r8, r10
    c78a:	9b 08       	sbc	r9, r11
    c78c:	64 01       	movw	r12, r8
    c78e:	42 e0       	ldi	r20, 0x02	; 2
    c790:	c4 0e       	add	r12, r20
    c792:	d1 1c       	adc	r13, r1
    c794:	12 96       	adiw	r26, 0x02	; 2
    c796:	bc 90       	ld	r11, X
    c798:	12 97       	sbiw	r26, 0x02	; 2
    c79a:	13 96       	adiw	r26, 0x03	; 3
    c79c:	ac 91       	ld	r26, X
    c79e:	b5 e0       	ldi	r27, 0x05	; 5
    c7a0:	cb 16       	cp	r12, r27
    c7a2:	d1 04       	cpc	r13, r1
    c7a4:	40 f0       	brcs	.+16     	; 0xc7b6 <realloc+0xfa>
    c7a6:	b2 82       	std	Z+2, r11	; 0x02
    c7a8:	a3 83       	std	Z+3, r26	; 0x03
    c7aa:	91 82       	std	Z+1, r9	; 0x01
    c7ac:	80 82       	st	Z, r8
    c7ae:	d9 01       	movw	r26, r18
    c7b0:	6d 93       	st	X+, r22
    c7b2:	7c 93       	st	X, r23
    c7b4:	09 c0       	rjmp	.+18     	; 0xc7c8 <realloc+0x10c>
    c7b6:	0e 5f       	subi	r16, 0xFE	; 254
    c7b8:	1f 4f       	sbci	r17, 0xFF	; 255
    c7ba:	80 0f       	add	r24, r16
    c7bc:	91 1f       	adc	r25, r17
    c7be:	f9 01       	movw	r30, r18
    c7c0:	91 83       	std	Z+1, r25	; 0x01
    c7c2:	80 83       	st	Z, r24
    c7c4:	eb 2d       	mov	r30, r11
    c7c6:	fa 2f       	mov	r31, r26
    c7c8:	e1 14       	cp	r14, r1
    c7ca:	f1 04       	cpc	r15, r1
    c7cc:	31 f0       	breq	.+12     	; 0xc7da <realloc+0x11e>
    c7ce:	d7 01       	movw	r26, r14
    c7d0:	13 96       	adiw	r26, 0x03	; 3
    c7d2:	fc 93       	st	X, r31
    c7d4:	ee 93       	st	-X, r30
    c7d6:	12 97       	sbiw	r26, 0x02	; 2
    c7d8:	3e c0       	rjmp	.+124    	; 0xc856 <realloc+0x19a>
    c7da:	f0 93 99 05 	sts	0x0599, r31	; 0x800599 <__flp+0x1>
    c7de:	e0 93 98 05 	sts	0x0598, r30	; 0x800598 <__flp>
    c7e2:	39 c0       	rjmp	.+114    	; 0xc856 <realloc+0x19a>
    c7e4:	68 16       	cp	r6, r24
    c7e6:	79 06       	cpc	r7, r25
    c7e8:	08 f4       	brcc	.+2      	; 0xc7ec <realloc+0x130>
    c7ea:	3c 01       	movw	r6, r24
    c7ec:	7d 01       	movw	r14, r26
    c7ee:	12 96       	adiw	r26, 0x02	; 2
    c7f0:	0d 90       	ld	r0, X+
    c7f2:	bc 91       	ld	r27, X
    c7f4:	a0 2d       	mov	r26, r0
    c7f6:	b7 cf       	rjmp	.-146    	; 0xc766 <realloc+0xaa>
    c7f8:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <__brkval>
    c7fc:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <__brkval+0x1>
    c800:	88 16       	cp	r8, r24
    c802:	99 06       	cpc	r9, r25
    c804:	e1 f4       	brne	.+56     	; 0xc83e <realloc+0x182>
    c806:	66 16       	cp	r6, r22
    c808:	77 06       	cpc	r7, r23
    c80a:	c8 f4       	brcc	.+50     	; 0xc83e <realloc+0x182>
    c80c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    c810:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    c814:	00 97       	sbiw	r24, 0x00	; 0
    c816:	41 f4       	brne	.+16     	; 0xc828 <realloc+0x16c>
    c818:	8d b7       	in	r24, 0x3d	; 61
    c81a:	9e b7       	in	r25, 0x3e	; 62
    c81c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c820:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c824:	84 1b       	sub	r24, r20
    c826:	95 0b       	sbc	r25, r21
    c828:	e8 17       	cp	r30, r24
    c82a:	f9 07       	cpc	r31, r25
    c82c:	b0 f4       	brcc	.+44     	; 0xc85a <realloc+0x19e>
    c82e:	f0 93 97 05 	sts	0x0597, r31	; 0x800597 <__brkval+0x1>
    c832:	e0 93 96 05 	sts	0x0596, r30	; 0x800596 <__brkval>
    c836:	f9 01       	movw	r30, r18
    c838:	71 83       	std	Z+1, r23	; 0x01
    c83a:	60 83       	st	Z, r22
    c83c:	0c c0       	rjmp	.+24     	; 0xc856 <realloc+0x19a>
    c83e:	cb 01       	movw	r24, r22
    c840:	80 dd       	rcall	.-1280   	; 0xc342 <malloc>
    c842:	7c 01       	movw	r14, r24
    c844:	00 97       	sbiw	r24, 0x00	; 0
    c846:	49 f0       	breq	.+18     	; 0xc85a <realloc+0x19e>
    c848:	a8 01       	movw	r20, r16
    c84a:	be 01       	movw	r22, r28
    c84c:	3b d0       	rcall	.+118    	; 0xc8c4 <memcpy>
    c84e:	ce 01       	movw	r24, r28
    c850:	10 de       	rcall	.-992    	; 0xc472 <free>
    c852:	c7 01       	movw	r24, r14
    c854:	04 c0       	rjmp	.+8      	; 0xc85e <realloc+0x1a2>
    c856:	ce 01       	movw	r24, r28
    c858:	02 c0       	rjmp	.+4      	; 0xc85e <realloc+0x1a2>
    c85a:	80 e0       	ldi	r24, 0x00	; 0
    c85c:	90 e0       	ldi	r25, 0x00	; 0
    c85e:	df 91       	pop	r29
    c860:	cf 91       	pop	r28
    c862:	1f 91       	pop	r17
    c864:	0f 91       	pop	r16
    c866:	ff 90       	pop	r15
    c868:	ef 90       	pop	r14
    c86a:	df 90       	pop	r13
    c86c:	cf 90       	pop	r12
    c86e:	bf 90       	pop	r11
    c870:	af 90       	pop	r10
    c872:	9f 90       	pop	r9
    c874:	8f 90       	pop	r8
    c876:	7f 90       	pop	r7
    c878:	6f 90       	pop	r6
    c87a:	08 95       	ret

0000c87c <abort>:
    c87c:	81 e0       	ldi	r24, 0x01	; 1
    c87e:	90 e0       	ldi	r25, 0x00	; 0
    c880:	f8 94       	cli
    c882:	dd c3       	rjmp	.+1978   	; 0xd03e <__do_global_dtors>

0000c884 <atoi>:
    c884:	fc 01       	movw	r30, r24
    c886:	88 27       	eor	r24, r24
    c888:	99 27       	eor	r25, r25
    c88a:	e8 94       	clt
    c88c:	21 91       	ld	r18, Z+
    c88e:	20 32       	cpi	r18, 0x20	; 32
    c890:	e9 f3       	breq	.-6      	; 0xc88c <atoi+0x8>
    c892:	29 30       	cpi	r18, 0x09	; 9
    c894:	10 f0       	brcs	.+4      	; 0xc89a <atoi+0x16>
    c896:	2e 30       	cpi	r18, 0x0E	; 14
    c898:	c8 f3       	brcs	.-14     	; 0xc88c <atoi+0x8>
    c89a:	2b 32       	cpi	r18, 0x2B	; 43
    c89c:	39 f0       	breq	.+14     	; 0xc8ac <atoi+0x28>
    c89e:	2d 32       	cpi	r18, 0x2D	; 45
    c8a0:	31 f4       	brne	.+12     	; 0xc8ae <atoi+0x2a>
    c8a2:	68 94       	set
    c8a4:	03 c0       	rjmp	.+6      	; 0xc8ac <atoi+0x28>
    c8a6:	98 d0       	rcall	.+304    	; 0xc9d8 <__mulhi_const_10>
    c8a8:	82 0f       	add	r24, r18
    c8aa:	91 1d       	adc	r25, r1
    c8ac:	21 91       	ld	r18, Z+
    c8ae:	20 53       	subi	r18, 0x30	; 48
    c8b0:	2a 30       	cpi	r18, 0x0A	; 10
    c8b2:	c8 f3       	brcs	.-14     	; 0xc8a6 <atoi+0x22>
    c8b4:	1e f4       	brtc	.+6      	; 0xc8bc <atoi+0x38>
    c8b6:	90 95       	com	r25
    c8b8:	81 95       	neg	r24
    c8ba:	9f 4f       	sbci	r25, 0xFF	; 255
    c8bc:	08 95       	ret

0000c8be <strtok>:
    c8be:	40 e1       	ldi	r20, 0x10	; 16
    c8c0:	53 e0       	ldi	r21, 0x03	; 3
    c8c2:	37 c0       	rjmp	.+110    	; 0xc932 <strtok_r>

0000c8c4 <memcpy>:
    c8c4:	fb 01       	movw	r30, r22
    c8c6:	dc 01       	movw	r26, r24
    c8c8:	02 c0       	rjmp	.+4      	; 0xc8ce <memcpy+0xa>
    c8ca:	01 90       	ld	r0, Z+
    c8cc:	0d 92       	st	X+, r0
    c8ce:	41 50       	subi	r20, 0x01	; 1
    c8d0:	50 40       	sbci	r21, 0x00	; 0
    c8d2:	d8 f7       	brcc	.-10     	; 0xc8ca <memcpy+0x6>
    c8d4:	08 95       	ret

0000c8d6 <memset>:
    c8d6:	dc 01       	movw	r26, r24
    c8d8:	01 c0       	rjmp	.+2      	; 0xc8dc <memset+0x6>
    c8da:	6d 93       	st	X+, r22
    c8dc:	41 50       	subi	r20, 0x01	; 1
    c8de:	50 40       	sbci	r21, 0x00	; 0
    c8e0:	e0 f7       	brcc	.-8      	; 0xc8da <memset+0x4>
    c8e2:	08 95       	ret

0000c8e4 <strcmp>:
    c8e4:	fb 01       	movw	r30, r22
    c8e6:	dc 01       	movw	r26, r24
    c8e8:	8d 91       	ld	r24, X+
    c8ea:	01 90       	ld	r0, Z+
    c8ec:	80 19       	sub	r24, r0
    c8ee:	01 10       	cpse	r0, r1
    c8f0:	d9 f3       	breq	.-10     	; 0xc8e8 <strcmp+0x4>
    c8f2:	99 0b       	sbc	r25, r25
    c8f4:	08 95       	ret

0000c8f6 <strcpy>:
    c8f6:	fb 01       	movw	r30, r22
    c8f8:	dc 01       	movw	r26, r24
    c8fa:	01 90       	ld	r0, Z+
    c8fc:	0d 92       	st	X+, r0
    c8fe:	00 20       	and	r0, r0
    c900:	e1 f7       	brne	.-8      	; 0xc8fa <strcpy+0x4>
    c902:	08 95       	ret

0000c904 <strlen>:
    c904:	fc 01       	movw	r30, r24
    c906:	01 90       	ld	r0, Z+
    c908:	00 20       	and	r0, r0
    c90a:	e9 f7       	brne	.-6      	; 0xc906 <strlen+0x2>
    c90c:	80 95       	com	r24
    c90e:	90 95       	com	r25
    c910:	8e 0f       	add	r24, r30
    c912:	9f 1f       	adc	r25, r31
    c914:	08 95       	ret

0000c916 <strncmp>:
    c916:	fb 01       	movw	r30, r22
    c918:	dc 01       	movw	r26, r24
    c91a:	41 50       	subi	r20, 0x01	; 1
    c91c:	50 40       	sbci	r21, 0x00	; 0
    c91e:	30 f0       	brcs	.+12     	; 0xc92c <strncmp+0x16>
    c920:	8d 91       	ld	r24, X+
    c922:	01 90       	ld	r0, Z+
    c924:	80 19       	sub	r24, r0
    c926:	19 f4       	brne	.+6      	; 0xc92e <strncmp+0x18>
    c928:	00 20       	and	r0, r0
    c92a:	b9 f7       	brne	.-18     	; 0xc91a <strncmp+0x4>
    c92c:	88 1b       	sub	r24, r24
    c92e:	99 0b       	sbc	r25, r25
    c930:	08 95       	ret

0000c932 <strtok_r>:
    c932:	fa 01       	movw	r30, r20
    c934:	a1 91       	ld	r26, Z+
    c936:	b0 81       	ld	r27, Z
    c938:	00 97       	sbiw	r24, 0x00	; 0
    c93a:	19 f4       	brne	.+6      	; 0xc942 <strtok_r+0x10>
    c93c:	10 97       	sbiw	r26, 0x00	; 0
    c93e:	e1 f0       	breq	.+56     	; 0xc978 <strtok_r+0x46>
    c940:	cd 01       	movw	r24, r26
    c942:	dc 01       	movw	r26, r24
    c944:	cd 01       	movw	r24, r26
    c946:	0d 90       	ld	r0, X+
    c948:	00 20       	and	r0, r0
    c94a:	11 f4       	brne	.+4      	; 0xc950 <strtok_r+0x1e>
    c94c:	c0 01       	movw	r24, r0
    c94e:	13 c0       	rjmp	.+38     	; 0xc976 <strtok_r+0x44>
    c950:	fb 01       	movw	r30, r22
    c952:	21 91       	ld	r18, Z+
    c954:	22 23       	and	r18, r18
    c956:	19 f0       	breq	.+6      	; 0xc95e <strtok_r+0x2c>
    c958:	20 15       	cp	r18, r0
    c95a:	d9 f7       	brne	.-10     	; 0xc952 <strtok_r+0x20>
    c95c:	f3 cf       	rjmp	.-26     	; 0xc944 <strtok_r+0x12>
    c95e:	fb 01       	movw	r30, r22
    c960:	21 91       	ld	r18, Z+
    c962:	20 15       	cp	r18, r0
    c964:	19 f4       	brne	.+6      	; 0xc96c <strtok_r+0x3a>
    c966:	1e 92       	st	-X, r1
    c968:	11 96       	adiw	r26, 0x01	; 1
    c96a:	06 c0       	rjmp	.+12     	; 0xc978 <strtok_r+0x46>
    c96c:	22 23       	and	r18, r18
    c96e:	c1 f7       	brne	.-16     	; 0xc960 <strtok_r+0x2e>
    c970:	0d 90       	ld	r0, X+
    c972:	00 20       	and	r0, r0
    c974:	a1 f7       	brne	.-24     	; 0xc95e <strtok_r+0x2c>
    c976:	d0 01       	movw	r26, r0
    c978:	fa 01       	movw	r30, r20
    c97a:	a1 93       	st	Z+, r26
    c97c:	b0 83       	st	Z, r27
    c97e:	08 95       	ret

0000c980 <itoa>:
    c980:	45 32       	cpi	r20, 0x25	; 37
    c982:	51 05       	cpc	r21, r1
    c984:	18 f4       	brcc	.+6      	; 0xc98c <itoa+0xc>
    c986:	42 30       	cpi	r20, 0x02	; 2
    c988:	08 f0       	brcs	.+2      	; 0xc98c <itoa+0xc>
    c98a:	04 c0       	rjmp	.+8      	; 0xc994 <__itoa_ncheck>
    c98c:	fb 01       	movw	r30, r22
    c98e:	10 82       	st	Z, r1
    c990:	cb 01       	movw	r24, r22
    c992:	08 95       	ret

0000c994 <__itoa_ncheck>:
    c994:	bb 27       	eor	r27, r27
    c996:	4a 30       	cpi	r20, 0x0A	; 10
    c998:	31 f4       	brne	.+12     	; 0xc9a6 <__itoa_ncheck+0x12>
    c99a:	99 23       	and	r25, r25
    c99c:	22 f4       	brpl	.+8      	; 0xc9a6 <__itoa_ncheck+0x12>
    c99e:	bd e2       	ldi	r27, 0x2D	; 45
    c9a0:	90 95       	com	r25
    c9a2:	81 95       	neg	r24
    c9a4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9a6:	42 c0       	rjmp	.+132    	; 0xca2c <__utoa_common>

0000c9a8 <ltoa>:
    c9a8:	25 32       	cpi	r18, 0x25	; 37
    c9aa:	31 05       	cpc	r19, r1
    c9ac:	18 f4       	brcc	.+6      	; 0xc9b4 <ltoa+0xc>
    c9ae:	22 30       	cpi	r18, 0x02	; 2
    c9b0:	08 f0       	brcs	.+2      	; 0xc9b4 <ltoa+0xc>
    c9b2:	04 c0       	rjmp	.+8      	; 0xc9bc <__ltoa_ncheck>
    c9b4:	fa 01       	movw	r30, r20
    c9b6:	10 82       	st	Z, r1
    c9b8:	ca 01       	movw	r24, r20
    c9ba:	08 95       	ret

0000c9bc <__ltoa_ncheck>:
    c9bc:	bb 27       	eor	r27, r27
    c9be:	2a 30       	cpi	r18, 0x0A	; 10
    c9c0:	51 f4       	brne	.+20     	; 0xc9d6 <__ltoa_ncheck+0x1a>
    c9c2:	99 23       	and	r25, r25
    c9c4:	42 f4       	brpl	.+16     	; 0xc9d6 <__ltoa_ncheck+0x1a>
    c9c6:	bd e2       	ldi	r27, 0x2D	; 45
    c9c8:	90 95       	com	r25
    c9ca:	80 95       	com	r24
    c9cc:	70 95       	com	r23
    c9ce:	61 95       	neg	r22
    c9d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c9d2:	8f 4f       	sbci	r24, 0xFF	; 255
    c9d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9d6:	09 c0       	rjmp	.+18     	; 0xc9ea <__ultoa_common>

0000c9d8 <__mulhi_const_10>:
    c9d8:	7a e0       	ldi	r23, 0x0A	; 10
    c9da:	97 9f       	mul	r25, r23
    c9dc:	90 2d       	mov	r25, r0
    c9de:	87 9f       	mul	r24, r23
    c9e0:	80 2d       	mov	r24, r0
    c9e2:	91 0d       	add	r25, r1
    c9e4:	11 24       	eor	r1, r1
    c9e6:	08 95       	ret

0000c9e8 <__ultoa_ncheck>:
    c9e8:	bb 27       	eor	r27, r27

0000c9ea <__ultoa_common>:
    c9ea:	fa 01       	movw	r30, r20
    c9ec:	a6 2f       	mov	r26, r22
    c9ee:	62 17       	cp	r22, r18
    c9f0:	71 05       	cpc	r23, r1
    c9f2:	81 05       	cpc	r24, r1
    c9f4:	91 05       	cpc	r25, r1
    c9f6:	33 0b       	sbc	r19, r19
    c9f8:	30 fb       	bst	r19, 0
    c9fa:	66 f0       	brts	.+24     	; 0xca14 <__ultoa_common+0x2a>
    c9fc:	aa 27       	eor	r26, r26
    c9fe:	66 0f       	add	r22, r22
    ca00:	77 1f       	adc	r23, r23
    ca02:	88 1f       	adc	r24, r24
    ca04:	99 1f       	adc	r25, r25
    ca06:	aa 1f       	adc	r26, r26
    ca08:	a2 17       	cp	r26, r18
    ca0a:	10 f0       	brcs	.+4      	; 0xca10 <__ultoa_common+0x26>
    ca0c:	a2 1b       	sub	r26, r18
    ca0e:	63 95       	inc	r22
    ca10:	38 50       	subi	r19, 0x08	; 8
    ca12:	a9 f7       	brne	.-22     	; 0xc9fe <__ultoa_common+0x14>
    ca14:	a0 5d       	subi	r26, 0xD0	; 208
    ca16:	aa 33       	cpi	r26, 0x3A	; 58
    ca18:	08 f0       	brcs	.+2      	; 0xca1c <__ultoa_common+0x32>
    ca1a:	a9 5d       	subi	r26, 0xD9	; 217
    ca1c:	a1 93       	st	Z+, r26
    ca1e:	36 f7       	brtc	.-52     	; 0xc9ec <__ultoa_common+0x2>
    ca20:	b1 11       	cpse	r27, r1
    ca22:	b1 93       	st	Z+, r27
    ca24:	10 82       	st	Z, r1
    ca26:	ca 01       	movw	r24, r20
    ca28:	5a c2       	rjmp	.+1204   	; 0xcede <strrev>

0000ca2a <__utoa_ncheck>:
    ca2a:	bb 27       	eor	r27, r27

0000ca2c <__utoa_common>:
    ca2c:	fb 01       	movw	r30, r22
    ca2e:	55 27       	eor	r21, r21
    ca30:	aa 27       	eor	r26, r26
    ca32:	88 0f       	add	r24, r24
    ca34:	99 1f       	adc	r25, r25
    ca36:	aa 1f       	adc	r26, r26
    ca38:	a4 17       	cp	r26, r20
    ca3a:	10 f0       	brcs	.+4      	; 0xca40 <__utoa_common+0x14>
    ca3c:	a4 1b       	sub	r26, r20
    ca3e:	83 95       	inc	r24
    ca40:	50 51       	subi	r21, 0x10	; 16
    ca42:	b9 f7       	brne	.-18     	; 0xca32 <__utoa_common+0x6>
    ca44:	a0 5d       	subi	r26, 0xD0	; 208
    ca46:	aa 33       	cpi	r26, 0x3A	; 58
    ca48:	08 f0       	brcs	.+2      	; 0xca4c <__utoa_common+0x20>
    ca4a:	a9 5d       	subi	r26, 0xD9	; 217
    ca4c:	a1 93       	st	Z+, r26
    ca4e:	00 97       	sbiw	r24, 0x00	; 0
    ca50:	79 f7       	brne	.-34     	; 0xca30 <__utoa_common+0x4>
    ca52:	b1 11       	cpse	r27, r1
    ca54:	b1 93       	st	Z+, r27
    ca56:	11 92       	st	Z+, r1
    ca58:	cb 01       	movw	r24, r22
    ca5a:	41 c2       	rjmp	.+1154   	; 0xcede <strrev>

0000ca5c <sprintf>:
    ca5c:	0f 93       	push	r16
    ca5e:	1f 93       	push	r17
    ca60:	cf 93       	push	r28
    ca62:	df 93       	push	r29
    ca64:	cd b7       	in	r28, 0x3d	; 61
    ca66:	de b7       	in	r29, 0x3e	; 62
    ca68:	2e 97       	sbiw	r28, 0x0e	; 14
    ca6a:	0f b6       	in	r0, 0x3f	; 63
    ca6c:	f8 94       	cli
    ca6e:	de bf       	out	0x3e, r29	; 62
    ca70:	0f be       	out	0x3f, r0	; 63
    ca72:	cd bf       	out	0x3d, r28	; 61
    ca74:	0e 89       	ldd	r16, Y+22	; 0x16
    ca76:	1f 89       	ldd	r17, Y+23	; 0x17
    ca78:	86 e0       	ldi	r24, 0x06	; 6
    ca7a:	8c 83       	std	Y+4, r24	; 0x04
    ca7c:	1a 83       	std	Y+2, r17	; 0x02
    ca7e:	09 83       	std	Y+1, r16	; 0x01
    ca80:	8f ef       	ldi	r24, 0xFF	; 255
    ca82:	9f e7       	ldi	r25, 0x7F	; 127
    ca84:	9e 83       	std	Y+6, r25	; 0x06
    ca86:	8d 83       	std	Y+5, r24	; 0x05
    ca88:	ae 01       	movw	r20, r28
    ca8a:	46 5e       	subi	r20, 0xE6	; 230
    ca8c:	5f 4f       	sbci	r21, 0xFF	; 255
    ca8e:	68 8d       	ldd	r22, Y+24	; 0x18
    ca90:	79 8d       	ldd	r23, Y+25	; 0x19
    ca92:	ce 01       	movw	r24, r28
    ca94:	01 96       	adiw	r24, 0x01	; 1
    ca96:	10 d0       	rcall	.+32     	; 0xcab8 <vfprintf>
    ca98:	ef 81       	ldd	r30, Y+7	; 0x07
    ca9a:	f8 85       	ldd	r31, Y+8	; 0x08
    ca9c:	e0 0f       	add	r30, r16
    ca9e:	f1 1f       	adc	r31, r17
    caa0:	10 82       	st	Z, r1
    caa2:	2e 96       	adiw	r28, 0x0e	; 14
    caa4:	0f b6       	in	r0, 0x3f	; 63
    caa6:	f8 94       	cli
    caa8:	de bf       	out	0x3e, r29	; 62
    caaa:	0f be       	out	0x3f, r0	; 63
    caac:	cd bf       	out	0x3d, r28	; 61
    caae:	df 91       	pop	r29
    cab0:	cf 91       	pop	r28
    cab2:	1f 91       	pop	r17
    cab4:	0f 91       	pop	r16
    cab6:	08 95       	ret

0000cab8 <vfprintf>:
    cab8:	2f 92       	push	r2
    caba:	3f 92       	push	r3
    cabc:	4f 92       	push	r4
    cabe:	5f 92       	push	r5
    cac0:	6f 92       	push	r6
    cac2:	7f 92       	push	r7
    cac4:	8f 92       	push	r8
    cac6:	9f 92       	push	r9
    cac8:	af 92       	push	r10
    caca:	bf 92       	push	r11
    cacc:	cf 92       	push	r12
    cace:	df 92       	push	r13
    cad0:	ef 92       	push	r14
    cad2:	ff 92       	push	r15
    cad4:	0f 93       	push	r16
    cad6:	1f 93       	push	r17
    cad8:	cf 93       	push	r28
    cada:	df 93       	push	r29
    cadc:	cd b7       	in	r28, 0x3d	; 61
    cade:	de b7       	in	r29, 0x3e	; 62
    cae0:	2b 97       	sbiw	r28, 0x0b	; 11
    cae2:	0f b6       	in	r0, 0x3f	; 63
    cae4:	f8 94       	cli
    cae6:	de bf       	out	0x3e, r29	; 62
    cae8:	0f be       	out	0x3f, r0	; 63
    caea:	cd bf       	out	0x3d, r28	; 61
    caec:	6c 01       	movw	r12, r24
    caee:	7b 01       	movw	r14, r22
    caf0:	8a 01       	movw	r16, r20
    caf2:	fc 01       	movw	r30, r24
    caf4:	17 82       	std	Z+7, r1	; 0x07
    caf6:	16 82       	std	Z+6, r1	; 0x06
    caf8:	83 81       	ldd	r24, Z+3	; 0x03
    cafa:	81 ff       	sbrs	r24, 1
    cafc:	bf c1       	rjmp	.+894    	; 0xce7c <vfprintf+0x3c4>
    cafe:	ce 01       	movw	r24, r28
    cb00:	01 96       	adiw	r24, 0x01	; 1
    cb02:	3c 01       	movw	r6, r24
    cb04:	f6 01       	movw	r30, r12
    cb06:	93 81       	ldd	r25, Z+3	; 0x03
    cb08:	f7 01       	movw	r30, r14
    cb0a:	93 fd       	sbrc	r25, 3
    cb0c:	85 91       	lpm	r24, Z+
    cb0e:	93 ff       	sbrs	r25, 3
    cb10:	81 91       	ld	r24, Z+
    cb12:	7f 01       	movw	r14, r30
    cb14:	88 23       	and	r24, r24
    cb16:	09 f4       	brne	.+2      	; 0xcb1a <vfprintf+0x62>
    cb18:	ad c1       	rjmp	.+858    	; 0xce74 <vfprintf+0x3bc>
    cb1a:	85 32       	cpi	r24, 0x25	; 37
    cb1c:	39 f4       	brne	.+14     	; 0xcb2c <vfprintf+0x74>
    cb1e:	93 fd       	sbrc	r25, 3
    cb20:	85 91       	lpm	r24, Z+
    cb22:	93 ff       	sbrs	r25, 3
    cb24:	81 91       	ld	r24, Z+
    cb26:	7f 01       	movw	r14, r30
    cb28:	85 32       	cpi	r24, 0x25	; 37
    cb2a:	21 f4       	brne	.+8      	; 0xcb34 <vfprintf+0x7c>
    cb2c:	b6 01       	movw	r22, r12
    cb2e:	90 e0       	ldi	r25, 0x00	; 0
    cb30:	e6 d1       	rcall	.+972    	; 0xcefe <fputc>
    cb32:	e8 cf       	rjmp	.-48     	; 0xcb04 <vfprintf+0x4c>
    cb34:	91 2c       	mov	r9, r1
    cb36:	21 2c       	mov	r2, r1
    cb38:	31 2c       	mov	r3, r1
    cb3a:	ff e1       	ldi	r31, 0x1F	; 31
    cb3c:	f3 15       	cp	r31, r3
    cb3e:	d8 f0       	brcs	.+54     	; 0xcb76 <vfprintf+0xbe>
    cb40:	8b 32       	cpi	r24, 0x2B	; 43
    cb42:	79 f0       	breq	.+30     	; 0xcb62 <vfprintf+0xaa>
    cb44:	38 f4       	brcc	.+14     	; 0xcb54 <vfprintf+0x9c>
    cb46:	80 32       	cpi	r24, 0x20	; 32
    cb48:	79 f0       	breq	.+30     	; 0xcb68 <vfprintf+0xb0>
    cb4a:	83 32       	cpi	r24, 0x23	; 35
    cb4c:	a1 f4       	brne	.+40     	; 0xcb76 <vfprintf+0xbe>
    cb4e:	23 2d       	mov	r18, r3
    cb50:	20 61       	ori	r18, 0x10	; 16
    cb52:	1d c0       	rjmp	.+58     	; 0xcb8e <vfprintf+0xd6>
    cb54:	8d 32       	cpi	r24, 0x2D	; 45
    cb56:	61 f0       	breq	.+24     	; 0xcb70 <vfprintf+0xb8>
    cb58:	80 33       	cpi	r24, 0x30	; 48
    cb5a:	69 f4       	brne	.+26     	; 0xcb76 <vfprintf+0xbe>
    cb5c:	23 2d       	mov	r18, r3
    cb5e:	21 60       	ori	r18, 0x01	; 1
    cb60:	16 c0       	rjmp	.+44     	; 0xcb8e <vfprintf+0xd6>
    cb62:	83 2d       	mov	r24, r3
    cb64:	82 60       	ori	r24, 0x02	; 2
    cb66:	38 2e       	mov	r3, r24
    cb68:	e3 2d       	mov	r30, r3
    cb6a:	e4 60       	ori	r30, 0x04	; 4
    cb6c:	3e 2e       	mov	r3, r30
    cb6e:	2a c0       	rjmp	.+84     	; 0xcbc4 <vfprintf+0x10c>
    cb70:	f3 2d       	mov	r31, r3
    cb72:	f8 60       	ori	r31, 0x08	; 8
    cb74:	1d c0       	rjmp	.+58     	; 0xcbb0 <vfprintf+0xf8>
    cb76:	37 fc       	sbrc	r3, 7
    cb78:	2d c0       	rjmp	.+90     	; 0xcbd4 <vfprintf+0x11c>
    cb7a:	20 ed       	ldi	r18, 0xD0	; 208
    cb7c:	28 0f       	add	r18, r24
    cb7e:	2a 30       	cpi	r18, 0x0A	; 10
    cb80:	40 f0       	brcs	.+16     	; 0xcb92 <vfprintf+0xda>
    cb82:	8e 32       	cpi	r24, 0x2E	; 46
    cb84:	b9 f4       	brne	.+46     	; 0xcbb4 <vfprintf+0xfc>
    cb86:	36 fc       	sbrc	r3, 6
    cb88:	75 c1       	rjmp	.+746    	; 0xce74 <vfprintf+0x3bc>
    cb8a:	23 2d       	mov	r18, r3
    cb8c:	20 64       	ori	r18, 0x40	; 64
    cb8e:	32 2e       	mov	r3, r18
    cb90:	19 c0       	rjmp	.+50     	; 0xcbc4 <vfprintf+0x10c>
    cb92:	36 fe       	sbrs	r3, 6
    cb94:	06 c0       	rjmp	.+12     	; 0xcba2 <vfprintf+0xea>
    cb96:	8a e0       	ldi	r24, 0x0A	; 10
    cb98:	98 9e       	mul	r9, r24
    cb9a:	20 0d       	add	r18, r0
    cb9c:	11 24       	eor	r1, r1
    cb9e:	92 2e       	mov	r9, r18
    cba0:	11 c0       	rjmp	.+34     	; 0xcbc4 <vfprintf+0x10c>
    cba2:	ea e0       	ldi	r30, 0x0A	; 10
    cba4:	2e 9e       	mul	r2, r30
    cba6:	20 0d       	add	r18, r0
    cba8:	11 24       	eor	r1, r1
    cbaa:	22 2e       	mov	r2, r18
    cbac:	f3 2d       	mov	r31, r3
    cbae:	f0 62       	ori	r31, 0x20	; 32
    cbb0:	3f 2e       	mov	r3, r31
    cbb2:	08 c0       	rjmp	.+16     	; 0xcbc4 <vfprintf+0x10c>
    cbb4:	8c 36       	cpi	r24, 0x6C	; 108
    cbb6:	21 f4       	brne	.+8      	; 0xcbc0 <vfprintf+0x108>
    cbb8:	83 2d       	mov	r24, r3
    cbba:	80 68       	ori	r24, 0x80	; 128
    cbbc:	38 2e       	mov	r3, r24
    cbbe:	02 c0       	rjmp	.+4      	; 0xcbc4 <vfprintf+0x10c>
    cbc0:	88 36       	cpi	r24, 0x68	; 104
    cbc2:	41 f4       	brne	.+16     	; 0xcbd4 <vfprintf+0x11c>
    cbc4:	f7 01       	movw	r30, r14
    cbc6:	93 fd       	sbrc	r25, 3
    cbc8:	85 91       	lpm	r24, Z+
    cbca:	93 ff       	sbrs	r25, 3
    cbcc:	81 91       	ld	r24, Z+
    cbce:	7f 01       	movw	r14, r30
    cbd0:	81 11       	cpse	r24, r1
    cbd2:	b3 cf       	rjmp	.-154    	; 0xcb3a <vfprintf+0x82>
    cbd4:	98 2f       	mov	r25, r24
    cbd6:	9f 7d       	andi	r25, 0xDF	; 223
    cbd8:	95 54       	subi	r25, 0x45	; 69
    cbda:	93 30       	cpi	r25, 0x03	; 3
    cbdc:	28 f4       	brcc	.+10     	; 0xcbe8 <vfprintf+0x130>
    cbde:	0c 5f       	subi	r16, 0xFC	; 252
    cbe0:	1f 4f       	sbci	r17, 0xFF	; 255
    cbe2:	9f e3       	ldi	r25, 0x3F	; 63
    cbe4:	99 83       	std	Y+1, r25	; 0x01
    cbe6:	0d c0       	rjmp	.+26     	; 0xcc02 <vfprintf+0x14a>
    cbe8:	83 36       	cpi	r24, 0x63	; 99
    cbea:	31 f0       	breq	.+12     	; 0xcbf8 <vfprintf+0x140>
    cbec:	83 37       	cpi	r24, 0x73	; 115
    cbee:	71 f0       	breq	.+28     	; 0xcc0c <vfprintf+0x154>
    cbf0:	83 35       	cpi	r24, 0x53	; 83
    cbf2:	09 f0       	breq	.+2      	; 0xcbf6 <vfprintf+0x13e>
    cbf4:	55 c0       	rjmp	.+170    	; 0xcca0 <vfprintf+0x1e8>
    cbf6:	20 c0       	rjmp	.+64     	; 0xcc38 <vfprintf+0x180>
    cbf8:	f8 01       	movw	r30, r16
    cbfa:	80 81       	ld	r24, Z
    cbfc:	89 83       	std	Y+1, r24	; 0x01
    cbfe:	0e 5f       	subi	r16, 0xFE	; 254
    cc00:	1f 4f       	sbci	r17, 0xFF	; 255
    cc02:	88 24       	eor	r8, r8
    cc04:	83 94       	inc	r8
    cc06:	91 2c       	mov	r9, r1
    cc08:	53 01       	movw	r10, r6
    cc0a:	12 c0       	rjmp	.+36     	; 0xcc30 <vfprintf+0x178>
    cc0c:	28 01       	movw	r4, r16
    cc0e:	f2 e0       	ldi	r31, 0x02	; 2
    cc10:	4f 0e       	add	r4, r31
    cc12:	51 1c       	adc	r5, r1
    cc14:	f8 01       	movw	r30, r16
    cc16:	a0 80       	ld	r10, Z
    cc18:	b1 80       	ldd	r11, Z+1	; 0x01
    cc1a:	36 fe       	sbrs	r3, 6
    cc1c:	03 c0       	rjmp	.+6      	; 0xcc24 <vfprintf+0x16c>
    cc1e:	69 2d       	mov	r22, r9
    cc20:	70 e0       	ldi	r23, 0x00	; 0
    cc22:	02 c0       	rjmp	.+4      	; 0xcc28 <vfprintf+0x170>
    cc24:	6f ef       	ldi	r22, 0xFF	; 255
    cc26:	7f ef       	ldi	r23, 0xFF	; 255
    cc28:	c5 01       	movw	r24, r10
    cc2a:	4e d1       	rcall	.+668    	; 0xcec8 <strnlen>
    cc2c:	4c 01       	movw	r8, r24
    cc2e:	82 01       	movw	r16, r4
    cc30:	f3 2d       	mov	r31, r3
    cc32:	ff 77       	andi	r31, 0x7F	; 127
    cc34:	3f 2e       	mov	r3, r31
    cc36:	15 c0       	rjmp	.+42     	; 0xcc62 <vfprintf+0x1aa>
    cc38:	28 01       	movw	r4, r16
    cc3a:	22 e0       	ldi	r18, 0x02	; 2
    cc3c:	42 0e       	add	r4, r18
    cc3e:	51 1c       	adc	r5, r1
    cc40:	f8 01       	movw	r30, r16
    cc42:	a0 80       	ld	r10, Z
    cc44:	b1 80       	ldd	r11, Z+1	; 0x01
    cc46:	36 fe       	sbrs	r3, 6
    cc48:	03 c0       	rjmp	.+6      	; 0xcc50 <vfprintf+0x198>
    cc4a:	69 2d       	mov	r22, r9
    cc4c:	70 e0       	ldi	r23, 0x00	; 0
    cc4e:	02 c0       	rjmp	.+4      	; 0xcc54 <vfprintf+0x19c>
    cc50:	6f ef       	ldi	r22, 0xFF	; 255
    cc52:	7f ef       	ldi	r23, 0xFF	; 255
    cc54:	c5 01       	movw	r24, r10
    cc56:	2d d1       	rcall	.+602    	; 0xceb2 <strnlen_P>
    cc58:	4c 01       	movw	r8, r24
    cc5a:	f3 2d       	mov	r31, r3
    cc5c:	f0 68       	ori	r31, 0x80	; 128
    cc5e:	3f 2e       	mov	r3, r31
    cc60:	82 01       	movw	r16, r4
    cc62:	33 fc       	sbrc	r3, 3
    cc64:	19 c0       	rjmp	.+50     	; 0xcc98 <vfprintf+0x1e0>
    cc66:	82 2d       	mov	r24, r2
    cc68:	90 e0       	ldi	r25, 0x00	; 0
    cc6a:	88 16       	cp	r8, r24
    cc6c:	99 06       	cpc	r9, r25
    cc6e:	a0 f4       	brcc	.+40     	; 0xcc98 <vfprintf+0x1e0>
    cc70:	b6 01       	movw	r22, r12
    cc72:	80 e2       	ldi	r24, 0x20	; 32
    cc74:	90 e0       	ldi	r25, 0x00	; 0
    cc76:	43 d1       	rcall	.+646    	; 0xcefe <fputc>
    cc78:	2a 94       	dec	r2
    cc7a:	f5 cf       	rjmp	.-22     	; 0xcc66 <vfprintf+0x1ae>
    cc7c:	f5 01       	movw	r30, r10
    cc7e:	37 fc       	sbrc	r3, 7
    cc80:	85 91       	lpm	r24, Z+
    cc82:	37 fe       	sbrs	r3, 7
    cc84:	81 91       	ld	r24, Z+
    cc86:	5f 01       	movw	r10, r30
    cc88:	b6 01       	movw	r22, r12
    cc8a:	90 e0       	ldi	r25, 0x00	; 0
    cc8c:	38 d1       	rcall	.+624    	; 0xcefe <fputc>
    cc8e:	21 10       	cpse	r2, r1
    cc90:	2a 94       	dec	r2
    cc92:	21 e0       	ldi	r18, 0x01	; 1
    cc94:	82 1a       	sub	r8, r18
    cc96:	91 08       	sbc	r9, r1
    cc98:	81 14       	cp	r8, r1
    cc9a:	91 04       	cpc	r9, r1
    cc9c:	79 f7       	brne	.-34     	; 0xcc7c <vfprintf+0x1c4>
    cc9e:	e1 c0       	rjmp	.+450    	; 0xce62 <vfprintf+0x3aa>
    cca0:	84 36       	cpi	r24, 0x64	; 100
    cca2:	11 f0       	breq	.+4      	; 0xcca8 <vfprintf+0x1f0>
    cca4:	89 36       	cpi	r24, 0x69	; 105
    cca6:	39 f5       	brne	.+78     	; 0xccf6 <vfprintf+0x23e>
    cca8:	f8 01       	movw	r30, r16
    ccaa:	37 fe       	sbrs	r3, 7
    ccac:	07 c0       	rjmp	.+14     	; 0xccbc <vfprintf+0x204>
    ccae:	60 81       	ld	r22, Z
    ccb0:	71 81       	ldd	r23, Z+1	; 0x01
    ccb2:	82 81       	ldd	r24, Z+2	; 0x02
    ccb4:	93 81       	ldd	r25, Z+3	; 0x03
    ccb6:	0c 5f       	subi	r16, 0xFC	; 252
    ccb8:	1f 4f       	sbci	r17, 0xFF	; 255
    ccba:	08 c0       	rjmp	.+16     	; 0xcccc <vfprintf+0x214>
    ccbc:	60 81       	ld	r22, Z
    ccbe:	71 81       	ldd	r23, Z+1	; 0x01
    ccc0:	07 2e       	mov	r0, r23
    ccc2:	00 0c       	add	r0, r0
    ccc4:	88 0b       	sbc	r24, r24
    ccc6:	99 0b       	sbc	r25, r25
    ccc8:	0e 5f       	subi	r16, 0xFE	; 254
    ccca:	1f 4f       	sbci	r17, 0xFF	; 255
    cccc:	f3 2d       	mov	r31, r3
    ccce:	ff 76       	andi	r31, 0x6F	; 111
    ccd0:	3f 2e       	mov	r3, r31
    ccd2:	97 ff       	sbrs	r25, 7
    ccd4:	09 c0       	rjmp	.+18     	; 0xcce8 <vfprintf+0x230>
    ccd6:	90 95       	com	r25
    ccd8:	80 95       	com	r24
    ccda:	70 95       	com	r23
    ccdc:	61 95       	neg	r22
    ccde:	7f 4f       	sbci	r23, 0xFF	; 255
    cce0:	8f 4f       	sbci	r24, 0xFF	; 255
    cce2:	9f 4f       	sbci	r25, 0xFF	; 255
    cce4:	f0 68       	ori	r31, 0x80	; 128
    cce6:	3f 2e       	mov	r3, r31
    cce8:	2a e0       	ldi	r18, 0x0A	; 10
    ccea:	30 e0       	ldi	r19, 0x00	; 0
    ccec:	a3 01       	movw	r20, r6
    ccee:	43 d1       	rcall	.+646    	; 0xcf76 <__ultoa_invert>
    ccf0:	88 2e       	mov	r8, r24
    ccf2:	86 18       	sub	r8, r6
    ccf4:	44 c0       	rjmp	.+136    	; 0xcd7e <vfprintf+0x2c6>
    ccf6:	85 37       	cpi	r24, 0x75	; 117
    ccf8:	31 f4       	brne	.+12     	; 0xcd06 <vfprintf+0x24e>
    ccfa:	23 2d       	mov	r18, r3
    ccfc:	2f 7e       	andi	r18, 0xEF	; 239
    ccfe:	b2 2e       	mov	r11, r18
    cd00:	2a e0       	ldi	r18, 0x0A	; 10
    cd02:	30 e0       	ldi	r19, 0x00	; 0
    cd04:	25 c0       	rjmp	.+74     	; 0xcd50 <vfprintf+0x298>
    cd06:	93 2d       	mov	r25, r3
    cd08:	99 7f       	andi	r25, 0xF9	; 249
    cd0a:	b9 2e       	mov	r11, r25
    cd0c:	8f 36       	cpi	r24, 0x6F	; 111
    cd0e:	c1 f0       	breq	.+48     	; 0xcd40 <vfprintf+0x288>
    cd10:	18 f4       	brcc	.+6      	; 0xcd18 <vfprintf+0x260>
    cd12:	88 35       	cpi	r24, 0x58	; 88
    cd14:	79 f0       	breq	.+30     	; 0xcd34 <vfprintf+0x27c>
    cd16:	ae c0       	rjmp	.+348    	; 0xce74 <vfprintf+0x3bc>
    cd18:	80 37       	cpi	r24, 0x70	; 112
    cd1a:	19 f0       	breq	.+6      	; 0xcd22 <vfprintf+0x26a>
    cd1c:	88 37       	cpi	r24, 0x78	; 120
    cd1e:	21 f0       	breq	.+8      	; 0xcd28 <vfprintf+0x270>
    cd20:	a9 c0       	rjmp	.+338    	; 0xce74 <vfprintf+0x3bc>
    cd22:	e9 2f       	mov	r30, r25
    cd24:	e0 61       	ori	r30, 0x10	; 16
    cd26:	be 2e       	mov	r11, r30
    cd28:	b4 fe       	sbrs	r11, 4
    cd2a:	0d c0       	rjmp	.+26     	; 0xcd46 <vfprintf+0x28e>
    cd2c:	fb 2d       	mov	r31, r11
    cd2e:	f4 60       	ori	r31, 0x04	; 4
    cd30:	bf 2e       	mov	r11, r31
    cd32:	09 c0       	rjmp	.+18     	; 0xcd46 <vfprintf+0x28e>
    cd34:	34 fe       	sbrs	r3, 4
    cd36:	0a c0       	rjmp	.+20     	; 0xcd4c <vfprintf+0x294>
    cd38:	29 2f       	mov	r18, r25
    cd3a:	26 60       	ori	r18, 0x06	; 6
    cd3c:	b2 2e       	mov	r11, r18
    cd3e:	06 c0       	rjmp	.+12     	; 0xcd4c <vfprintf+0x294>
    cd40:	28 e0       	ldi	r18, 0x08	; 8
    cd42:	30 e0       	ldi	r19, 0x00	; 0
    cd44:	05 c0       	rjmp	.+10     	; 0xcd50 <vfprintf+0x298>
    cd46:	20 e1       	ldi	r18, 0x10	; 16
    cd48:	30 e0       	ldi	r19, 0x00	; 0
    cd4a:	02 c0       	rjmp	.+4      	; 0xcd50 <vfprintf+0x298>
    cd4c:	20 e1       	ldi	r18, 0x10	; 16
    cd4e:	32 e0       	ldi	r19, 0x02	; 2
    cd50:	f8 01       	movw	r30, r16
    cd52:	b7 fe       	sbrs	r11, 7
    cd54:	07 c0       	rjmp	.+14     	; 0xcd64 <vfprintf+0x2ac>
    cd56:	60 81       	ld	r22, Z
    cd58:	71 81       	ldd	r23, Z+1	; 0x01
    cd5a:	82 81       	ldd	r24, Z+2	; 0x02
    cd5c:	93 81       	ldd	r25, Z+3	; 0x03
    cd5e:	0c 5f       	subi	r16, 0xFC	; 252
    cd60:	1f 4f       	sbci	r17, 0xFF	; 255
    cd62:	06 c0       	rjmp	.+12     	; 0xcd70 <vfprintf+0x2b8>
    cd64:	60 81       	ld	r22, Z
    cd66:	71 81       	ldd	r23, Z+1	; 0x01
    cd68:	80 e0       	ldi	r24, 0x00	; 0
    cd6a:	90 e0       	ldi	r25, 0x00	; 0
    cd6c:	0e 5f       	subi	r16, 0xFE	; 254
    cd6e:	1f 4f       	sbci	r17, 0xFF	; 255
    cd70:	a3 01       	movw	r20, r6
    cd72:	01 d1       	rcall	.+514    	; 0xcf76 <__ultoa_invert>
    cd74:	88 2e       	mov	r8, r24
    cd76:	86 18       	sub	r8, r6
    cd78:	fb 2d       	mov	r31, r11
    cd7a:	ff 77       	andi	r31, 0x7F	; 127
    cd7c:	3f 2e       	mov	r3, r31
    cd7e:	36 fe       	sbrs	r3, 6
    cd80:	0d c0       	rjmp	.+26     	; 0xcd9c <vfprintf+0x2e4>
    cd82:	23 2d       	mov	r18, r3
    cd84:	2e 7f       	andi	r18, 0xFE	; 254
    cd86:	a2 2e       	mov	r10, r18
    cd88:	89 14       	cp	r8, r9
    cd8a:	58 f4       	brcc	.+22     	; 0xcda2 <vfprintf+0x2ea>
    cd8c:	34 fe       	sbrs	r3, 4
    cd8e:	0b c0       	rjmp	.+22     	; 0xcda6 <vfprintf+0x2ee>
    cd90:	32 fc       	sbrc	r3, 2
    cd92:	09 c0       	rjmp	.+18     	; 0xcda6 <vfprintf+0x2ee>
    cd94:	83 2d       	mov	r24, r3
    cd96:	8e 7e       	andi	r24, 0xEE	; 238
    cd98:	a8 2e       	mov	r10, r24
    cd9a:	05 c0       	rjmp	.+10     	; 0xcda6 <vfprintf+0x2ee>
    cd9c:	b8 2c       	mov	r11, r8
    cd9e:	a3 2c       	mov	r10, r3
    cda0:	03 c0       	rjmp	.+6      	; 0xcda8 <vfprintf+0x2f0>
    cda2:	b8 2c       	mov	r11, r8
    cda4:	01 c0       	rjmp	.+2      	; 0xcda8 <vfprintf+0x2f0>
    cda6:	b9 2c       	mov	r11, r9
    cda8:	a4 fe       	sbrs	r10, 4
    cdaa:	0f c0       	rjmp	.+30     	; 0xcdca <vfprintf+0x312>
    cdac:	fe 01       	movw	r30, r28
    cdae:	e8 0d       	add	r30, r8
    cdb0:	f1 1d       	adc	r31, r1
    cdb2:	80 81       	ld	r24, Z
    cdb4:	80 33       	cpi	r24, 0x30	; 48
    cdb6:	21 f4       	brne	.+8      	; 0xcdc0 <vfprintf+0x308>
    cdb8:	9a 2d       	mov	r25, r10
    cdba:	99 7e       	andi	r25, 0xE9	; 233
    cdbc:	a9 2e       	mov	r10, r25
    cdbe:	09 c0       	rjmp	.+18     	; 0xcdd2 <vfprintf+0x31a>
    cdc0:	a2 fe       	sbrs	r10, 2
    cdc2:	06 c0       	rjmp	.+12     	; 0xcdd0 <vfprintf+0x318>
    cdc4:	b3 94       	inc	r11
    cdc6:	b3 94       	inc	r11
    cdc8:	04 c0       	rjmp	.+8      	; 0xcdd2 <vfprintf+0x31a>
    cdca:	8a 2d       	mov	r24, r10
    cdcc:	86 78       	andi	r24, 0x86	; 134
    cdce:	09 f0       	breq	.+2      	; 0xcdd2 <vfprintf+0x31a>
    cdd0:	b3 94       	inc	r11
    cdd2:	a3 fc       	sbrc	r10, 3
    cdd4:	10 c0       	rjmp	.+32     	; 0xcdf6 <vfprintf+0x33e>
    cdd6:	a0 fe       	sbrs	r10, 0
    cdd8:	06 c0       	rjmp	.+12     	; 0xcde6 <vfprintf+0x32e>
    cdda:	b2 14       	cp	r11, r2
    cddc:	80 f4       	brcc	.+32     	; 0xcdfe <vfprintf+0x346>
    cdde:	28 0c       	add	r2, r8
    cde0:	92 2c       	mov	r9, r2
    cde2:	9b 18       	sub	r9, r11
    cde4:	0d c0       	rjmp	.+26     	; 0xce00 <vfprintf+0x348>
    cde6:	b2 14       	cp	r11, r2
    cde8:	58 f4       	brcc	.+22     	; 0xce00 <vfprintf+0x348>
    cdea:	b6 01       	movw	r22, r12
    cdec:	80 e2       	ldi	r24, 0x20	; 32
    cdee:	90 e0       	ldi	r25, 0x00	; 0
    cdf0:	86 d0       	rcall	.+268    	; 0xcefe <fputc>
    cdf2:	b3 94       	inc	r11
    cdf4:	f8 cf       	rjmp	.-16     	; 0xcde6 <vfprintf+0x32e>
    cdf6:	b2 14       	cp	r11, r2
    cdf8:	18 f4       	brcc	.+6      	; 0xce00 <vfprintf+0x348>
    cdfa:	2b 18       	sub	r2, r11
    cdfc:	02 c0       	rjmp	.+4      	; 0xce02 <vfprintf+0x34a>
    cdfe:	98 2c       	mov	r9, r8
    ce00:	21 2c       	mov	r2, r1
    ce02:	a4 fe       	sbrs	r10, 4
    ce04:	0f c0       	rjmp	.+30     	; 0xce24 <vfprintf+0x36c>
    ce06:	b6 01       	movw	r22, r12
    ce08:	80 e3       	ldi	r24, 0x30	; 48
    ce0a:	90 e0       	ldi	r25, 0x00	; 0
    ce0c:	78 d0       	rcall	.+240    	; 0xcefe <fputc>
    ce0e:	a2 fe       	sbrs	r10, 2
    ce10:	16 c0       	rjmp	.+44     	; 0xce3e <vfprintf+0x386>
    ce12:	a1 fc       	sbrc	r10, 1
    ce14:	03 c0       	rjmp	.+6      	; 0xce1c <vfprintf+0x364>
    ce16:	88 e7       	ldi	r24, 0x78	; 120
    ce18:	90 e0       	ldi	r25, 0x00	; 0
    ce1a:	02 c0       	rjmp	.+4      	; 0xce20 <vfprintf+0x368>
    ce1c:	88 e5       	ldi	r24, 0x58	; 88
    ce1e:	90 e0       	ldi	r25, 0x00	; 0
    ce20:	b6 01       	movw	r22, r12
    ce22:	0c c0       	rjmp	.+24     	; 0xce3c <vfprintf+0x384>
    ce24:	8a 2d       	mov	r24, r10
    ce26:	86 78       	andi	r24, 0x86	; 134
    ce28:	51 f0       	breq	.+20     	; 0xce3e <vfprintf+0x386>
    ce2a:	a1 fe       	sbrs	r10, 1
    ce2c:	02 c0       	rjmp	.+4      	; 0xce32 <vfprintf+0x37a>
    ce2e:	8b e2       	ldi	r24, 0x2B	; 43
    ce30:	01 c0       	rjmp	.+2      	; 0xce34 <vfprintf+0x37c>
    ce32:	80 e2       	ldi	r24, 0x20	; 32
    ce34:	a7 fc       	sbrc	r10, 7
    ce36:	8d e2       	ldi	r24, 0x2D	; 45
    ce38:	b6 01       	movw	r22, r12
    ce3a:	90 e0       	ldi	r25, 0x00	; 0
    ce3c:	60 d0       	rcall	.+192    	; 0xcefe <fputc>
    ce3e:	89 14       	cp	r8, r9
    ce40:	30 f4       	brcc	.+12     	; 0xce4e <vfprintf+0x396>
    ce42:	b6 01       	movw	r22, r12
    ce44:	80 e3       	ldi	r24, 0x30	; 48
    ce46:	90 e0       	ldi	r25, 0x00	; 0
    ce48:	5a d0       	rcall	.+180    	; 0xcefe <fputc>
    ce4a:	9a 94       	dec	r9
    ce4c:	f8 cf       	rjmp	.-16     	; 0xce3e <vfprintf+0x386>
    ce4e:	8a 94       	dec	r8
    ce50:	f3 01       	movw	r30, r6
    ce52:	e8 0d       	add	r30, r8
    ce54:	f1 1d       	adc	r31, r1
    ce56:	80 81       	ld	r24, Z
    ce58:	b6 01       	movw	r22, r12
    ce5a:	90 e0       	ldi	r25, 0x00	; 0
    ce5c:	50 d0       	rcall	.+160    	; 0xcefe <fputc>
    ce5e:	81 10       	cpse	r8, r1
    ce60:	f6 cf       	rjmp	.-20     	; 0xce4e <vfprintf+0x396>
    ce62:	22 20       	and	r2, r2
    ce64:	09 f4       	brne	.+2      	; 0xce68 <vfprintf+0x3b0>
    ce66:	4e ce       	rjmp	.-868    	; 0xcb04 <vfprintf+0x4c>
    ce68:	b6 01       	movw	r22, r12
    ce6a:	80 e2       	ldi	r24, 0x20	; 32
    ce6c:	90 e0       	ldi	r25, 0x00	; 0
    ce6e:	47 d0       	rcall	.+142    	; 0xcefe <fputc>
    ce70:	2a 94       	dec	r2
    ce72:	f7 cf       	rjmp	.-18     	; 0xce62 <vfprintf+0x3aa>
    ce74:	f6 01       	movw	r30, r12
    ce76:	86 81       	ldd	r24, Z+6	; 0x06
    ce78:	97 81       	ldd	r25, Z+7	; 0x07
    ce7a:	02 c0       	rjmp	.+4      	; 0xce80 <vfprintf+0x3c8>
    ce7c:	8f ef       	ldi	r24, 0xFF	; 255
    ce7e:	9f ef       	ldi	r25, 0xFF	; 255
    ce80:	2b 96       	adiw	r28, 0x0b	; 11
    ce82:	0f b6       	in	r0, 0x3f	; 63
    ce84:	f8 94       	cli
    ce86:	de bf       	out	0x3e, r29	; 62
    ce88:	0f be       	out	0x3f, r0	; 63
    ce8a:	cd bf       	out	0x3d, r28	; 61
    ce8c:	df 91       	pop	r29
    ce8e:	cf 91       	pop	r28
    ce90:	1f 91       	pop	r17
    ce92:	0f 91       	pop	r16
    ce94:	ff 90       	pop	r15
    ce96:	ef 90       	pop	r14
    ce98:	df 90       	pop	r13
    ce9a:	cf 90       	pop	r12
    ce9c:	bf 90       	pop	r11
    ce9e:	af 90       	pop	r10
    cea0:	9f 90       	pop	r9
    cea2:	8f 90       	pop	r8
    cea4:	7f 90       	pop	r7
    cea6:	6f 90       	pop	r6
    cea8:	5f 90       	pop	r5
    ceaa:	4f 90       	pop	r4
    ceac:	3f 90       	pop	r3
    ceae:	2f 90       	pop	r2
    ceb0:	08 95       	ret

0000ceb2 <strnlen_P>:
    ceb2:	fc 01       	movw	r30, r24
    ceb4:	05 90       	lpm	r0, Z+
    ceb6:	61 50       	subi	r22, 0x01	; 1
    ceb8:	70 40       	sbci	r23, 0x00	; 0
    ceba:	01 10       	cpse	r0, r1
    cebc:	d8 f7       	brcc	.-10     	; 0xceb4 <strnlen_P+0x2>
    cebe:	80 95       	com	r24
    cec0:	90 95       	com	r25
    cec2:	8e 0f       	add	r24, r30
    cec4:	9f 1f       	adc	r25, r31
    cec6:	08 95       	ret

0000cec8 <strnlen>:
    cec8:	fc 01       	movw	r30, r24
    ceca:	61 50       	subi	r22, 0x01	; 1
    cecc:	70 40       	sbci	r23, 0x00	; 0
    cece:	01 90       	ld	r0, Z+
    ced0:	01 10       	cpse	r0, r1
    ced2:	d8 f7       	brcc	.-10     	; 0xceca <strnlen+0x2>
    ced4:	80 95       	com	r24
    ced6:	90 95       	com	r25
    ced8:	8e 0f       	add	r24, r30
    ceda:	9f 1f       	adc	r25, r31
    cedc:	08 95       	ret

0000cede <strrev>:
    cede:	dc 01       	movw	r26, r24
    cee0:	fc 01       	movw	r30, r24
    cee2:	67 2f       	mov	r22, r23
    cee4:	71 91       	ld	r23, Z+
    cee6:	77 23       	and	r23, r23
    cee8:	e1 f7       	brne	.-8      	; 0xcee2 <strrev+0x4>
    ceea:	32 97       	sbiw	r30, 0x02	; 2
    ceec:	04 c0       	rjmp	.+8      	; 0xcef6 <strrev+0x18>
    ceee:	7c 91       	ld	r23, X
    cef0:	6d 93       	st	X+, r22
    cef2:	70 83       	st	Z, r23
    cef4:	62 91       	ld	r22, -Z
    cef6:	ae 17       	cp	r26, r30
    cef8:	bf 07       	cpc	r27, r31
    cefa:	c8 f3       	brcs	.-14     	; 0xceee <strrev+0x10>
    cefc:	08 95       	ret

0000cefe <fputc>:
    cefe:	0f 93       	push	r16
    cf00:	1f 93       	push	r17
    cf02:	cf 93       	push	r28
    cf04:	df 93       	push	r29
    cf06:	fb 01       	movw	r30, r22
    cf08:	23 81       	ldd	r18, Z+3	; 0x03
    cf0a:	21 fd       	sbrc	r18, 1
    cf0c:	03 c0       	rjmp	.+6      	; 0xcf14 <fputc+0x16>
    cf0e:	8f ef       	ldi	r24, 0xFF	; 255
    cf10:	9f ef       	ldi	r25, 0xFF	; 255
    cf12:	2c c0       	rjmp	.+88     	; 0xcf6c <fputc+0x6e>
    cf14:	22 ff       	sbrs	r18, 2
    cf16:	16 c0       	rjmp	.+44     	; 0xcf44 <fputc+0x46>
    cf18:	46 81       	ldd	r20, Z+6	; 0x06
    cf1a:	57 81       	ldd	r21, Z+7	; 0x07
    cf1c:	24 81       	ldd	r18, Z+4	; 0x04
    cf1e:	35 81       	ldd	r19, Z+5	; 0x05
    cf20:	42 17       	cp	r20, r18
    cf22:	53 07       	cpc	r21, r19
    cf24:	44 f4       	brge	.+16     	; 0xcf36 <fputc+0x38>
    cf26:	a0 81       	ld	r26, Z
    cf28:	b1 81       	ldd	r27, Z+1	; 0x01
    cf2a:	9d 01       	movw	r18, r26
    cf2c:	2f 5f       	subi	r18, 0xFF	; 255
    cf2e:	3f 4f       	sbci	r19, 0xFF	; 255
    cf30:	31 83       	std	Z+1, r19	; 0x01
    cf32:	20 83       	st	Z, r18
    cf34:	8c 93       	st	X, r24
    cf36:	26 81       	ldd	r18, Z+6	; 0x06
    cf38:	37 81       	ldd	r19, Z+7	; 0x07
    cf3a:	2f 5f       	subi	r18, 0xFF	; 255
    cf3c:	3f 4f       	sbci	r19, 0xFF	; 255
    cf3e:	37 83       	std	Z+7, r19	; 0x07
    cf40:	26 83       	std	Z+6, r18	; 0x06
    cf42:	14 c0       	rjmp	.+40     	; 0xcf6c <fputc+0x6e>
    cf44:	8b 01       	movw	r16, r22
    cf46:	ec 01       	movw	r28, r24
    cf48:	fb 01       	movw	r30, r22
    cf4a:	00 84       	ldd	r0, Z+8	; 0x08
    cf4c:	f1 85       	ldd	r31, Z+9	; 0x09
    cf4e:	e0 2d       	mov	r30, r0
    cf50:	19 95       	eicall
    cf52:	89 2b       	or	r24, r25
    cf54:	e1 f6       	brne	.-72     	; 0xcf0e <fputc+0x10>
    cf56:	d8 01       	movw	r26, r16
    cf58:	16 96       	adiw	r26, 0x06	; 6
    cf5a:	8d 91       	ld	r24, X+
    cf5c:	9c 91       	ld	r25, X
    cf5e:	17 97       	sbiw	r26, 0x07	; 7
    cf60:	01 96       	adiw	r24, 0x01	; 1
    cf62:	17 96       	adiw	r26, 0x07	; 7
    cf64:	9c 93       	st	X, r25
    cf66:	8e 93       	st	-X, r24
    cf68:	16 97       	sbiw	r26, 0x06	; 6
    cf6a:	ce 01       	movw	r24, r28
    cf6c:	df 91       	pop	r29
    cf6e:	cf 91       	pop	r28
    cf70:	1f 91       	pop	r17
    cf72:	0f 91       	pop	r16
    cf74:	08 95       	ret

0000cf76 <__ultoa_invert>:
    cf76:	fa 01       	movw	r30, r20
    cf78:	aa 27       	eor	r26, r26
    cf7a:	28 30       	cpi	r18, 0x08	; 8
    cf7c:	51 f1       	breq	.+84     	; 0xcfd2 <__ultoa_invert+0x5c>
    cf7e:	20 31       	cpi	r18, 0x10	; 16
    cf80:	81 f1       	breq	.+96     	; 0xcfe2 <__ultoa_invert+0x6c>
    cf82:	e8 94       	clt
    cf84:	6f 93       	push	r22
    cf86:	6e 7f       	andi	r22, 0xFE	; 254
    cf88:	6e 5f       	subi	r22, 0xFE	; 254
    cf8a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf8c:	8f 4f       	sbci	r24, 0xFF	; 255
    cf8e:	9f 4f       	sbci	r25, 0xFF	; 255
    cf90:	af 4f       	sbci	r26, 0xFF	; 255
    cf92:	b1 e0       	ldi	r27, 0x01	; 1
    cf94:	3e d0       	rcall	.+124    	; 0xd012 <__ultoa_invert+0x9c>
    cf96:	b4 e0       	ldi	r27, 0x04	; 4
    cf98:	3c d0       	rcall	.+120    	; 0xd012 <__ultoa_invert+0x9c>
    cf9a:	67 0f       	add	r22, r23
    cf9c:	78 1f       	adc	r23, r24
    cf9e:	89 1f       	adc	r24, r25
    cfa0:	9a 1f       	adc	r25, r26
    cfa2:	a1 1d       	adc	r26, r1
    cfa4:	68 0f       	add	r22, r24
    cfa6:	79 1f       	adc	r23, r25
    cfa8:	8a 1f       	adc	r24, r26
    cfaa:	91 1d       	adc	r25, r1
    cfac:	a1 1d       	adc	r26, r1
    cfae:	6a 0f       	add	r22, r26
    cfb0:	71 1d       	adc	r23, r1
    cfb2:	81 1d       	adc	r24, r1
    cfb4:	91 1d       	adc	r25, r1
    cfb6:	a1 1d       	adc	r26, r1
    cfb8:	20 d0       	rcall	.+64     	; 0xcffa <__ultoa_invert+0x84>
    cfba:	09 f4       	brne	.+2      	; 0xcfbe <__ultoa_invert+0x48>
    cfbc:	68 94       	set
    cfbe:	3f 91       	pop	r19
    cfc0:	2a e0       	ldi	r18, 0x0A	; 10
    cfc2:	26 9f       	mul	r18, r22
    cfc4:	11 24       	eor	r1, r1
    cfc6:	30 19       	sub	r19, r0
    cfc8:	30 5d       	subi	r19, 0xD0	; 208
    cfca:	31 93       	st	Z+, r19
    cfcc:	de f6       	brtc	.-74     	; 0xcf84 <__ultoa_invert+0xe>
    cfce:	cf 01       	movw	r24, r30
    cfd0:	08 95       	ret
    cfd2:	46 2f       	mov	r20, r22
    cfd4:	47 70       	andi	r20, 0x07	; 7
    cfd6:	40 5d       	subi	r20, 0xD0	; 208
    cfd8:	41 93       	st	Z+, r20
    cfda:	b3 e0       	ldi	r27, 0x03	; 3
    cfdc:	0f d0       	rcall	.+30     	; 0xcffc <__ultoa_invert+0x86>
    cfde:	c9 f7       	brne	.-14     	; 0xcfd2 <__ultoa_invert+0x5c>
    cfe0:	f6 cf       	rjmp	.-20     	; 0xcfce <__ultoa_invert+0x58>
    cfe2:	46 2f       	mov	r20, r22
    cfe4:	4f 70       	andi	r20, 0x0F	; 15
    cfe6:	40 5d       	subi	r20, 0xD0	; 208
    cfe8:	4a 33       	cpi	r20, 0x3A	; 58
    cfea:	18 f0       	brcs	.+6      	; 0xcff2 <__ultoa_invert+0x7c>
    cfec:	49 5d       	subi	r20, 0xD9	; 217
    cfee:	31 fd       	sbrc	r19, 1
    cff0:	40 52       	subi	r20, 0x20	; 32
    cff2:	41 93       	st	Z+, r20
    cff4:	02 d0       	rcall	.+4      	; 0xcffa <__ultoa_invert+0x84>
    cff6:	a9 f7       	brne	.-22     	; 0xcfe2 <__ultoa_invert+0x6c>
    cff8:	ea cf       	rjmp	.-44     	; 0xcfce <__ultoa_invert+0x58>
    cffa:	b4 e0       	ldi	r27, 0x04	; 4
    cffc:	a6 95       	lsr	r26
    cffe:	97 95       	ror	r25
    d000:	87 95       	ror	r24
    d002:	77 95       	ror	r23
    d004:	67 95       	ror	r22
    d006:	ba 95       	dec	r27
    d008:	c9 f7       	brne	.-14     	; 0xcffc <__ultoa_invert+0x86>
    d00a:	00 97       	sbiw	r24, 0x00	; 0
    d00c:	61 05       	cpc	r22, r1
    d00e:	71 05       	cpc	r23, r1
    d010:	08 95       	ret
    d012:	9b 01       	movw	r18, r22
    d014:	ac 01       	movw	r20, r24
    d016:	0a 2e       	mov	r0, r26
    d018:	06 94       	lsr	r0
    d01a:	57 95       	ror	r21
    d01c:	47 95       	ror	r20
    d01e:	37 95       	ror	r19
    d020:	27 95       	ror	r18
    d022:	ba 95       	dec	r27
    d024:	c9 f7       	brne	.-14     	; 0xd018 <__ultoa_invert+0xa2>
    d026:	62 0f       	add	r22, r18
    d028:	73 1f       	adc	r23, r19
    d02a:	84 1f       	adc	r24, r20
    d02c:	95 1f       	adc	r25, r21
    d02e:	a0 1d       	adc	r26, r0
    d030:	08 95       	ret

0000d032 <__mulshisi3>:
    d032:	b7 ff       	sbrs	r27, 7
    d034:	59 c9       	rjmp	.-3406   	; 0xc2e8 <__muluhisi3>

0000d036 <__mulohisi3>:
    d036:	58 d9       	rcall	.-3408   	; 0xc2e8 <__muluhisi3>
    d038:	82 1b       	sub	r24, r18
    d03a:	93 0b       	sbc	r25, r19
    d03c:	08 95       	ret

0000d03e <__do_global_dtors>:
    d03e:	17 e1       	ldi	r17, 0x17	; 23
    d040:	c0 ef       	ldi	r28, 0xF0	; 240
    d042:	d7 e1       	ldi	r29, 0x17	; 23
    d044:	00 e0       	ldi	r16, 0x00	; 0
    d046:	05 c0       	rjmp	.+10     	; 0xd052 <__do_global_dtors+0x14>
    d048:	80 2f       	mov	r24, r16
    d04a:	fe 01       	movw	r30, r28
    d04c:	45 d9       	rcall	.-3446   	; 0xc2d8 <__tablejump2__>
    d04e:	21 96       	adiw	r28, 0x01	; 1
    d050:	01 1d       	adc	r16, r1
    d052:	c1 3f       	cpi	r28, 0xF1	; 241
    d054:	d1 07       	cpc	r29, r17
    d056:	80 e0       	ldi	r24, 0x00	; 0
    d058:	08 07       	cpc	r16, r24
    d05a:	b1 f7       	brne	.-20     	; 0xd048 <__do_global_dtors+0xa>
    d05c:	f8 94       	cli

0000d05e <__stop_program>:
    d05e:	ff cf       	rjmp	.-2      	; 0xd05e <__stop_program>
