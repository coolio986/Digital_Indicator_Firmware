
Motherboard_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  0000d166  0000d1fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000d166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000286  00800310  00800310  0000d30a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000d30a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001028  00000000  00000000  0000d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001edbe  00000000  00000000  0000e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004411  00000000  00000000  0002d18e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ae70  00000000  00000000  0003159f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003f90  00000000  00000000  0003c410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f51  00000000  00000000  000403a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000891e  00000000  00000000  000472f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f00  00000000  00000000  0004fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <__dtors_end>
       4:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
       8:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
       c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      10:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      14:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      18:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      1c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      20:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      24:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      28:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      2c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      30:	0c 94 c7 5c 	jmp	0xb98e	; 0xb98e <__vector_12>
      34:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      38:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      3c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      40:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      44:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      48:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      4c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      50:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      54:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      58:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      5c:	0c 94 73 43 	jmp	0x86e6	; 0x86e6 <__vector_23>
      60:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      64:	0c 94 fb 3e 	jmp	0x7df6	; 0x7df6 <__vector_25>
      68:	0c 94 2f 3f 	jmp	0x7e5e	; 0x7e5e <__vector_26>
      6c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      70:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      74:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      78:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      7c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      80:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      84:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      88:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      8c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      90:	0c 94 b9 3f 	jmp	0x7f72	; 0x7f72 <__vector_36>
      94:	0c 94 ed 3f 	jmp	0x7fda	; 0x7fda <__vector_37>
      98:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      9c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      a0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      a4:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      a8:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      ac:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      b0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      b4:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      b8:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      bc:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      c0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      c4:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      c8:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      cc:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      d0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      d4:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      d8:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      dc:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      e0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__bad_interrupt>
      e4:	61 2c       	mov	r6, r1
      e6:	74 2c       	mov	r7, r4
      e8:	87 2c       	mov	r8, r7
      ea:	9a 2c       	mov	r9, r10
      ec:	ad 2c       	mov	r10, r13
      ee:	c0 2c       	mov	r12, r0
      f0:	d3 2c       	mov	r13, r3
      f2:	e6 2c       	mov	r14, r6
      f4:	bd 46       	sbci	r27, 0x6D	; 109
      f6:	c7 46       	sbci	r28, 0x67	; 103
      f8:	9f 46       	sbci	r25, 0x6F	; 111
      fa:	a9 46       	sbci	r26, 0x69	; 105
      fc:	b3 46       	sbci	r27, 0x63	; 99
      fe:	3f 47       	sbci	r19, 0x7F	; 127
     100:	d1 46       	sbci	r29, 0x61	; 97
     102:	db 46       	sbci	r29, 0x6B	; 107
     104:	e5 46       	sbci	r30, 0x65	; 101
     106:	ef 46       	sbci	r30, 0x6F	; 111
     108:	f9 46       	sbci	r31, 0x69	; 105
     10a:	03 47       	sbci	r16, 0x73	; 115
     10c:	0d 47       	sbci	r16, 0x7D	; 125
     10e:	17 47       	sbci	r17, 0x77	; 119
     110:	3f 47       	sbci	r19, 0x7F	; 127
     112:	21 47       	sbci	r18, 0x71	; 113
     114:	2b 47       	sbci	r18, 0x7B	; 123
     116:	35 47       	sbci	r19, 0x75	; 117
     118:	ec 54       	subi	r30, 0x4C	; 76
     11a:	ec 54       	subi	r30, 0x4C	; 76
     11c:	ec 54       	subi	r30, 0x4C	; 76
     11e:	37 55       	subi	r19, 0x57	; 87
     120:	43 55       	subi	r20, 0x53	; 83
     122:	69 55       	subi	r22, 0x59	; 89
     124:	ec 54       	subi	r30, 0x4C	; 76
     126:	ec 54       	subi	r30, 0x4C	; 76
     128:	37 55       	subi	r19, 0x57	; 87
     12a:	43 55       	subi	r20, 0x53	; 83

0000012c <__trampolines_end>:
     12c:	44 69       	ori	r20, 0x94	; 148
     12e:	61 6d       	ori	r22, 0xD1	; 209
     130:	65 74       	andi	r22, 0x45	; 69
     132:	65 72       	andi	r22, 0x25	; 37
     134:	3a 20       	and	r3, r10
     136:	31 2e       	mov	r3, r17
     138:	37 00       	.word	0x0037	; ????

0000013a <_ZL4font>:
     13a:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     14a:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     15a:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     16a:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     17a:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     18a:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     19a:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1aa:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1ba:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1ca:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1da:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1ea:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1fa:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     20a:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     21a:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     22a:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     23a:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     24a:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     25a:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     26a:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     27a:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     28a:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     29a:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2aa:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2ba:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2ca:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2da:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2ea:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2fa:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     30a:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     31a:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     32a:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     33a:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     34a:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     35a:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     36a:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     37a:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     38a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     39a:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3aa:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3ba:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3ca:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     3da:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3ea:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3fa:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     40a:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     41a:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     42a:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     43a:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     44a:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     45a:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     46a:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     47a:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     48a:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     49a:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4aa:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     4ba:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     4ca:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     4da:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     4ea:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     4fa:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     50a:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     51a:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     52a:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     53a:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     54a:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     55a:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     56a:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     57a:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     58a:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     59a:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     5aa:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     5ba:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     5ca:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     5da:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     5ea:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     5fa:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     60a:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     61a:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     62a:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000635 <widtbl_f16>:
     635:	06 03 04 09 08 09 09 03 07 07 08 06 03 06 05 07     ................
     645:	08 08 08 08 08 08 08 08 08 08 03 03 06 06 06 08     ................
     655:	09 08 08 08 08 08 08 08 08 04 08 08 07 0a 08 08     ................
     665:	08 08 08 08 08 08 08 0a 08 08 08 04 07 04 07 09     ................
     675:	04 07 07 07 07 07 06 07 07 04 05 06 04 08 07 08     ................
     685:	07 08 06 06 05 07 08 08 06 07 07 05 03 05 08 06     ................

00000695 <_ZL10chr_f16_20>:
	...

000006a5 <_ZL10chr_f16_21>:
     6a5:	00 00 00 40 40 40 40 40 40 40 40 00 40 00 00 00     ...@@@@@@@@.@...

000006b5 <_ZL10chr_f16_22>:
     6b5:	00 00 a0 a0 a0 00 00 00 00 00 00 00 00 00 00 00     ................

000006c5 <_ZL10chr_f16_23>:
     6c5:	00 00 00 24 24 24 ff 24 24 ff 24 24 24 00 00 00     ...$$$.$$.$$$...

000006d5 <_ZL10chr_f16_24>:
     6d5:	00 00 00 3c 42 40 40 70 40 70 40 40 fe 00 00 00     ...<B@@p@p@@....

000006e5 <_ZL10chr_f16_25>:
     6e5:	00 00 00 61 91 92 64 08 10 26 49 89 86 00 00 00     ...a..d..&I.....

000006f5 <_ZL10chr_f16_26>:
     6f5:	00 00 00 20 50 88 88 50 20 52 8c 8c 73 00 00 00     ... P..P R..s...

00000705 <_ZL10chr_f16_27>:
     705:	00 00 40 40 40 80 00 00 00 00 00 00 00 00 00 00     ..@@@...........

00000715 <_ZL10chr_f16_28>:
     715:	00 0c 10 20 40 40 80 80 80 80 80 40 40 20 10 0c     ... @@.....@@ ..

00000725 <_ZL10chr_f16_29>:
     725:	00 c0 20 10 08 08 04 04 04 04 04 08 08 10 20 c0     .. ........... .

00000735 <_ZL10chr_f16_2A>:
     735:	00 00 00 00 10 92 54 38 54 92 10 00 00 00 00 00     ......T8T.......

00000745 <_ZL10chr_f16_2B>:
     745:	00 00 00 00 00 00 20 20 f8 20 20 00 00 00 00 00     ......  .  .....

00000755 <_ZL10chr_f16_2C>:
	...
     75d:	00 00 00 c0 c0 40 80 00                             .....@..

00000765 <_ZL10chr_f16_2D>:
	...
     76d:	f8 00 00 00 00 00 00 00                             ........

00000775 <_ZL10chr_f16_2E>:
	...
     77d:	00 00 00 c0 c0 00 00 00                             ........

00000785 <_ZL10chr_f16_2F>:
     785:	00 00 04 04 08 08 10 10 20 20 40 40 80 80 00 00     ........  @@....

00000795 <_ZL10chr_f16_30>:
     795:	00 00 00 38 44 44 82 82 82 82 44 44 38 00 00 00     ...8DD....DD8...

000007a5 <_ZL10chr_f16_31>:
     7a5:	00 00 00 10 30 50 10 10 10 10 10 10 7c 00 00 00     ....0P......|...

000007b5 <_ZL10chr_f16_32>:
     7b5:	00 00 00 38 44 82 02 04 18 20 40 80 fe 00 00 00     ...8D.... @.....

000007c5 <_ZL10chr_f16_33>:
     7c5:	00 00 00 78 84 02 04 38 04 02 02 84 78 00 00 00     ...x...8....x...

000007d5 <_ZL10chr_f16_34>:
     7d5:	00 00 00 04 0c 14 24 44 84 fe 04 04 04 00 00 00     ......$D........

000007e5 <_ZL10chr_f16_35>:
     7e5:	00 00 00 fc 80 80 80 f8 04 02 02 84 78 00 00 00     ............x...

000007f5 <_ZL10chr_f16_36>:
     7f5:	00 00 00 3c 40 80 80 b8 c4 82 82 44 38 00 00 00     ...<@......D8...

00000805 <_ZL10chr_f16_37>:
     805:	00 00 00 7e 02 02 04 04 08 08 10 10 10 00 00 00     ...~............

00000815 <_ZL10chr_f16_38>:
     815:	00 00 00 38 44 82 44 38 44 82 82 44 38 00 00 00     ...8D.D8D..D8...

00000825 <_ZL10chr_f16_39>:
     825:	00 00 00 38 44 82 82 46 3a 02 02 04 78 00 00 00     ...8D..F:...x...

00000835 <_ZL10chr_f16_3A>:
     835:	00 00 00 00 00 00 c0 c0 00 c0 c0 00 00 00 00 00     ................

00000845 <_ZL10chr_f16_3B>:
     845:	00 00 00 00 00 00 c0 c0 00 c0 c0 40 80 00 00 00     ...........@....

00000855 <_ZL10chr_f16_3C>:
     855:	00 00 00 00 08 10 20 40 80 40 20 10 08 00 00 00     ...... @.@ .....

00000865 <_ZL10chr_f16_3D>:
     865:	00 00 00 00 00 00 00 f8 00 f8 00 00 00 00 00 00     ................

00000875 <_ZL10chr_f16_3E>:
     875:	00 00 00 00 80 40 20 10 08 10 20 40 80 00 00 00     .....@ ... @....

00000885 <_ZL10chr_f16_3F>:
     885:	00 00 00 38 44 82 02 04 08 10 10 00 10 00 00 00     ...8D...........

00000895 <_ZL10chr_f16_40>:
     895:	00 00 00 3c 42 99 a5 a5 a5 a5 9e 40 3e 00 00 00     ...<B......@>...

000008a5 <_ZL10chr_f16_41>:
     8a5:	00 00 00 10 10 28 28 44 44 7c 82 82 82 00 00 00     .....((DD|......

000008b5 <_ZL10chr_f16_42>:
     8b5:	00 00 00 f8 84 82 84 f8 84 82 82 84 f8 00 00 00     ................

000008c5 <_ZL10chr_f16_43>:
     8c5:	00 00 00 3c 42 80 80 80 80 80 80 42 3c 00 00 00     ...<B......B<...

000008d5 <_ZL10chr_f16_44>:
     8d5:	00 00 00 f8 84 82 82 82 82 82 82 84 f8 00 00 00     ................

000008e5 <_ZL10chr_f16_45>:
     8e5:	00 00 00 fe 80 80 80 fc 80 80 80 80 fe 00 00 00     ................

000008f5 <_ZL10chr_f16_46>:
     8f5:	00 00 00 fe 80 80 80 f8 80 80 80 80 80 00 00 00     ................

00000905 <_ZL10chr_f16_47>:
     905:	00 00 00 3c 42 80 80 80 9c 82 82 42 3c 00 00 00     ...<B......B<...

00000915 <_ZL10chr_f16_48>:
     915:	00 00 00 84 84 84 84 fc 84 84 84 84 84 00 00 00     ................

00000925 <_ZL10chr_f16_49>:
     925:	00 00 00 e0 40 40 40 40 40 40 40 40 e0 00 00 00     ....@@@@@@@@....

00000935 <_ZL10chr_f16_4A>:
     935:	00 00 00 02 02 02 02 02 02 02 82 44 38 00 00 00     ...........D8...

00000945 <_ZL10chr_f16_4B>:
     945:	00 00 00 84 88 90 a0 c0 a0 90 88 84 82 00 00 00     ................

00000955 <_ZL10chr_f16_4C>:
     955:	00 00 00 80 80 80 80 80 80 80 80 80 fc 00 00 00     ................

00000965 <_ZL10chr_f16_4D>:
     965:	00 00 00 00 00 00 c1 80 c1 80 a2 80 a2 80 94 80     ................
     975:	94 80 88 80 88 80 80 80 80 80 00 00 00 00 00 00     ................

00000985 <_ZL10chr_f16_4E>:
     985:	00 00 00 c2 c2 a2 a2 92 92 8a 8a 86 86 00 00 00     ................

00000995 <_ZL10chr_f16_4F>:
     995:	00 00 00 38 44 82 82 82 82 82 82 44 38 00 00 00     ...8D......D8...

000009a5 <_ZL10chr_f16_50>:
     9a5:	00 00 00 f8 84 82 82 82 84 f8 80 80 80 00 00 00     ................

000009b5 <_ZL10chr_f16_51>:
     9b5:	00 00 00 38 44 82 82 82 82 82 82 44 38 08 06 00     ...8D......D8...

000009c5 <_ZL10chr_f16_52>:
     9c5:	00 00 00 f8 84 82 82 84 f8 90 88 84 82 00 00 00     ................

000009d5 <_ZL10chr_f16_53>:
     9d5:	00 00 00 38 44 82 80 60 1c 02 82 44 38 00 00 00     ...8D..`...D8...

000009e5 <_ZL10chr_f16_54>:
     9e5:	00 00 00 fe 10 10 10 10 10 10 10 10 10 00 00 00     ................

000009f5 <_ZL10chr_f16_55>:
     9f5:	00 00 00 82 82 82 82 82 82 82 82 44 38 00 00 00     ...........D8...

00000a05 <_ZL10chr_f16_56>:
     a05:	00 00 00 82 82 82 82 44 44 28 28 10 10 00 00 00     .......DD((.....

00000a15 <_ZL10chr_f16_57>:
     a15:	00 00 00 00 00 00 80 80 80 80 80 80 88 80 88 80     ................
     a25:	49 00 55 00 55 00 22 00 22 00 00 00 00 00 00 00     I.U.U.".".......

00000a35 <_ZL10chr_f16_58>:
     a35:	00 00 00 82 82 44 28 10 10 28 44 82 82 00 00 00     .....D(..(D.....

00000a45 <_ZL10chr_f16_59>:
     a45:	00 00 00 82 82 82 44 28 10 10 10 10 10 00 00 00     ......D(........

00000a55 <_ZL10chr_f16_5A>:
     a55:	00 00 00 fe 02 04 08 10 10 20 40 80 fe 00 00 00     ......... @.....

00000a65 <_ZL10chr_f16_5B>:
     a65:	00 00 e0 80 80 80 80 80 80 80 80 80 80 e0 00 00     ................

00000a75 <_ZL10chr_f16_5C>:
     a75:	00 00 04 04 08 08 10 10 20 20 40 40 80 80 00 00     ........  @@....

00000a85 <_ZL10chr_f16_5D>:
     a85:	00 00 e0 20 20 20 20 20 20 20 20 20 20 e0 00 00     ...          ...

00000a95 <_ZL10chr_f16_5E>:
     a95:	00 10 28 44 00 00 00 00 00 00 00 00 00 00 00 00     ..(D............
	...

00000ab5 <_ZL10chr_f16_5F>:
	...
     ac1:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ad1:	00 00 00 00                                         ....

00000ad5 <_ZL10chr_f16_60>:
     ad5:	00 00 00 40 40 40 20 00 00 00 00 00 00 00 00 00     ...@@@ .........

00000ae5 <_ZL10chr_f16_61>:
     ae5:	00 00 00 00 00 00 70 08 04 74 8c 8c 74 00 00 00     ......p..t..t...

00000af5 <_ZL10chr_f16_62>:
     af5:	00 00 00 00 80 80 b0 c8 84 84 84 c8 b0 00 00 00     ................

00000b05 <_ZL10chr_f16_63>:
     b05:	00 00 00 00 00 00 38 44 80 80 80 44 38 00 00 00     ......8D...D8...

00000b15 <_ZL10chr_f16_64>:
     b15:	00 00 00 00 04 04 34 4c 84 84 84 4c 34 00 00 00     ......4L...L4...

00000b25 <_ZL10chr_f16_65>:
     b25:	00 00 00 00 00 00 38 44 84 f8 80 44 38 00 00 00     ......8D...D8...

00000b35 <_ZL10chr_f16_66>:
     b35:	00 00 00 30 48 40 40 40 e0 40 40 40 40 00 00 00     ...0H@@@.@@@@...

00000b45 <_ZL10chr_f16_67>:
     b45:	00 00 00 00 00 00 30 4c 84 84 84 4c 34 04 08 70     ......0L...L4..p

00000b55 <_ZL10chr_f16_68>:
     b55:	00 00 00 80 80 80 b0 c8 84 84 84 84 84 00 00 00     ................

00000b65 <_ZL10chr_f16_69>:
     b65:	00 00 00 00 40 00 40 40 40 40 40 40 40 00 00 00     ....@.@@@@@@@...

00000b75 <_ZL10chr_f16_6A>:
     b75:	00 00 00 00 10 00 30 10 10 10 10 10 10 10 90 60     ......0........`

00000b85 <_ZL10chr_f16_6B>:
     b85:	00 00 00 80 80 80 88 90 a0 c0 a0 90 88 00 00 00     ................

00000b95 <_ZL10chr_f16_6C>:
     b95:	00 00 00 c0 40 40 40 40 40 40 40 40 40 00 00 00     ....@@@@@@@@@...

00000ba5 <_ZL10chr_f16_6D>:
     ba5:	00 00 00 00 00 00 ac d2 92 92 92 92 92 00 00 00     ................

00000bb5 <_ZL10chr_f16_6E>:
     bb5:	00 00 00 00 00 00 b0 c8 84 84 84 84 84 00 00 00     ................

00000bc5 <_ZL10chr_f16_6F>:
     bc5:	00 00 00 00 00 00 38 44 82 82 82 44 38 00 00 00     ......8D...D8...

00000bd5 <_ZL10chr_f16_70>:
     bd5:	00 00 00 00 00 00 b0 c8 84 84 84 c8 b0 80 80 80     ................

00000be5 <_ZL10chr_f16_71>:
     be5:	00 00 00 00 00 00 34 4c 84 84 84 4c 34 04 04 06     ......4L...L4...

00000bf5 <_ZL10chr_f16_72>:
     bf5:	00 00 00 00 00 00 b0 c8 80 80 80 80 80 00 00 00     ................

00000c05 <_ZL10chr_f16_73>:
     c05:	00 00 00 00 00 00 70 88 80 70 08 88 70 00 00 00     ......p..p..p...

00000c15 <_ZL10chr_f16_74>:
     c15:	00 00 00 00 40 40 e0 40 40 40 40 40 30 00 00 00     ....@@.@@@@@0...

00000c25 <_ZL10chr_f16_75>:
     c25:	00 00 00 00 00 00 84 84 84 84 84 4c 34 00 00 00     ...........L4...

00000c35 <_ZL10chr_f16_76>:
     c35:	00 00 00 00 00 00 82 82 82 82 44 28 10 00 00 00     ..........D(....

00000c45 <_ZL10chr_f16_77>:
     c45:	00 00 00 00 00 00 82 82 82 92 92 aa 44 00 00 00     ............D...

00000c55 <_ZL10chr_f16_78>:
     c55:	00 00 00 00 00 00 88 88 50 20 50 88 88 00 00 00     ........P P.....

00000c65 <_ZL10chr_f16_79>:
     c65:	00 00 00 00 00 00 84 84 84 84 84 4c 34 04 08 70     ...........L4..p

00000c75 <_ZL10chr_f16_7A>:
     c75:	00 00 00 00 00 00 fc 04 08 30 40 80 fc 00 00 00     .........0@.....

00000c85 <_ZL10chr_f16_7B>:
     c85:	00 10 20 20 20 20 20 20 40 20 20 20 20 20 20 10     ..      @      .

00000c95 <_ZL10chr_f16_7C>:
     c95:	00 00 40 40 40 40 40 40 40 40 40 40 40 40 40 00     ..@@@@@@@@@@@@@.

00000ca5 <_ZL10chr_f16_7D>:
     ca5:	00 40 20 20 20 20 20 20 10 20 20 20 20 20 20 40     .@      .      @

00000cb5 <_ZL10chr_f16_7E>:
     cb5:	00 00 00 32 4c 00 00 00 00 00 00 00 00 00 00 00     ...2L...........

00000cc5 <_ZL10chr_f16_7F>:
     cc5:	00 00 30 48 48 30 00 00 00 00 00 00 00 00 00 00     ..0HH0..........

00000cd5 <chrtbl_f16>:
     cd5:	95 06 a5 06 b5 06 c5 06 d5 06 e5 06 f5 06 05 07     ................
     ce5:	15 07 25 07 35 07 45 07 55 07 65 07 75 07 85 07     ..%.5.E.U.e.u...
     cf5:	95 07 a5 07 b5 07 c5 07 d5 07 e5 07 f5 07 05 08     ................
     d05:	15 08 25 08 35 08 45 08 55 08 65 08 75 08 85 08     ..%.5.E.U.e.u...
     d15:	95 08 a5 08 b5 08 c5 08 d5 08 e5 08 f5 08 05 09     ................
     d25:	15 09 25 09 35 09 45 09 55 09 65 09 85 09 95 09     ..%.5.E.U.e.....
     d35:	a5 09 b5 09 c5 09 d5 09 e5 09 f5 09 05 0a 15 0a     ................
     d45:	35 0a 45 0a 55 0a 65 0a 75 0a 85 0a 95 0a b5 0a     5.E.U.e.u.......
     d55:	d5 0a e5 0a f5 0a 05 0b 15 0b 25 0b 35 0b 45 0b     ..........%.5.E.
     d65:	55 0b 65 0b 75 0b 85 0b 95 0b a5 0b b5 0b c5 0b     U.e.u...........
     d75:	d5 0b e5 0b f5 0b 05 0c 15 0c 25 0c 35 0c 45 0c     ..........%.5.E.
     d85:	55 0c 65 0c 75 0c 85 0c 95 0c a5 0c b5 0c c5 0c     U.e.u...........

00000d95 <widtbl_f32>:
     d95:	05 08 08 13 0e 15 11 06 08 08 0c 0a 07 08 07 08     ................
     da5:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 07 0e 09 0e 0d     ................
     db5:	19 10 11 12 12 10 0f 13 12 06 0d 11 0d 15 12 13     ................
     dc5:	10 13 11 10 0e 12 0f 17 0f 10 10 09 0d 09 0c 0d     ................
     dd5:	09 0e 0f 0d 0f 0e 08 0f 0f 06 06 0c 06 16 0f 0f     ................
     de5:	0f 0f 08 0c 07 0e 0c 12 0d 0d 0c 0d 0d 0d 0f 01     ................

00000df5 <_ZL10chr_f32_20>:
     df5:	7f 01                                               ..

00000df7 <_ZL10chr_f32_21>:
     df7:	0a 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
     e07:	05 81 05 81 05 81 05 81 05 81 15 81 05 81 05 81     ................
     e17:	3a                                                  :

00000e18 <_ZL10chr_f32_22>:
     e18:	09 80 01 80 03 80 01 80 03 80 01 80 03 80 01 80     ................
     e28:	03 80 01 80 03 80 01 80 03 80 01 80 7f 11           ..............

00000e36 <_ZL10chr_f32_23>:
     e36:	2e 81 01 81 0c 80 02 80 0d 80 02 80 0c 81 01 81     ................
     e46:	0c 80 02 80 0d 80 02 80 08 8d 08 80 02 80 0d 80     ................
     e56:	02 80 0d 80 02 80 08 8d 08 80 02 80 0d 80 02 80     ................
     e66:	0c 81 01 81 0c 80 02 80 0d 80 02 80 0c 81 01 81     ................
     e76:	7f 0d                                               ..

00000e78 <_ZL10chr_f32_24>:
     e78:	1f 85 05 89 03 82 03 82 02 81 07 81 01 81 07 81     ................
     e88:	01 81 0b 82 0b 81 0a 87 07 81 0b 81 0b 81 0b 81     ................
     e98:	0a 81 0b 86 02 80 01 8b 01 81 04 83 63              ............c

00000ea5 <_ZL10chr_f32_25>:
     ea5:	2d 82 07 81 05 86 05 80 06 81 02 81 04 81 05 81     -...............
     eb5:	04 81 02 81 06 81 04 81 02 80 07 81 04 81 01 81     ................
     ec5:	08 81 02 81 02 80 09 86 01 80 0c 82 02 81 02 82     ................
     ed5:	0c 80 01 86 09 80 02 81 02 81 08 81 01 81 04 81     ................
     ee5:	07 80 02 81 04 81 06 81 02 81 04 81 05 81 04 81     ................
     ef5:	02 81 06 80 05 86 05 81 07 82 07 80 7f 0c           ..............

00000f03 <_ZL10chr_f32_26>:
     f03:	15 84 0a 86 08 82 02 82 07 81 04 81 07 81 04 81     ................
     f13:	07 81 03 82 08 81 01 82 0a 84 0a 83 0b 85 03 81     ................
     f23:	03 82 01 82 02 81 02 82 03 82 01 81 02 81 05 84     ................
     f33:	03 81 06 83 03 81 07 81 04 82 04 85 03 88 01 82     ................
     f43:	03 85 04 82 76                                      ....v

00000f48 <_ZL10chr_f32_27>:
     f48:	06 82 02 82 02 82 04 80 03 81 02 81 74              ............t

00000f55 <_ZL10chr_f32_28>:
     f55:	0d 81 05 80 05 81 05 80 05 81 05 81 05 81 04 81     ................
     f65:	05 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
     f75:	05 81 06 81 05 81 05 81 06 80 06 81 06 80 06 81     ................
     f85:	07                                                  .

00000f86 <_ZL10chr_f32_29>:
     f86:	07 81 06 80 06 81 06 80 06 81 05 81 05 81 06 81     ................
     f96:	05 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
     fa6:	05 81 04 81 05 81 05 81 05 80 05 81 05 80 05 81     ................
     fb6:	0d                                                  .

00000fb7 <_ZL10chr_f32_2A>:
     fb7:	10 81 09 81 09 81 06 80 01 81 01 80 02 89 03 85     ................
     fc7:	06 83 06 81 01 81 04 82 01 82 04 80 03 80 7f 36     ...............6

00000fd7 <_ZL10chr_f32_2B>:
     fd7:	53 81 07 81 07 81 04 87 01 87 04 81 07 81 07 81     S...............
     fe7:	67                                                  g

00000fe8 <_ZL10chr_f32_2C>:
     fe8:	71 82 03 82 03 82 05 80 04 81 04 80 04 81 17        q..............

00000ff7 <_ZL10chr_f32_2D>:
     ff7:	58 85 01 85 68                                      X...h

00000ffc <_ZL10chr_f32_2E>:
     ffc:	71 82 03 82 03 82 32                                q.....2

00001003 <_ZL10chr_f32_2F>:
    1003:	0d 81 05 81 05 80 05 81 05 81 05 80 05 81 05 81     ................
    1013:	05 80 05 81 05 81 05 80 05 81 05 81 05 80 05 81     ................
    1023:	05 81 05 80 05 81 05 81 2d                          ........-

0000102c <_ZL10chr_f32_30>:
    102c:	20 83 07 87 04 83 01 83 03 81 05 81 02 82 05 82      ...............
    103c:	01 81 07 81 01 81 07 81 01 81 07 81 01 81 07 81     ................
    104c:	01 81 07 81 01 81 07 81 01 81 07 81 01 82 05 82     ................
    105c:	02 81 05 81 03 83 01 83 04 87 07 83 66              ............f

00001069 <_ZL10chr_f32_31>:
    1069:	22 81 0b 81 0a 82 07 85 07 85 0b 81 0b 81 0b 81     "...............
    1079:	0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81     ................
    1089:	0b 81 66                                            ..f

0000108c <_ZL10chr_f32_32>:
    108c:	1f 85 05 89 03 82 03 82 02 82 06 81 01 81 07 81     ................
    109c:	01 81 07 81 0b 81 0a 82 08 83 07 84 06 84 07 83     ................
    10ac:	08 82 09 82 0a 81 0b 8b 01 8b 62                    ..........b

000010b7 <_ZL10chr_f32_33>:
    10b7:	1f 85 06 87 04 82 03 82 03 81 05 81 02 82 05 81     ................
    10c7:	0b 81 0a 82 07 84 08 85 0b 82 0b 81 01 81 07 81     ................
    10d7:	01 81 07 81 01 82 05 82 02 82 03 82 03 89 05 85     ................
    10e7:	65                                                  e

000010e8 <_ZL10chr_f32_34>:
    10e8:	24 81 0a 82 09 83 09 83 08 81 00 81 07 81 01 81     $...............
    10f8:	06 81 02 81 06 81 02 81 05 81 03 81 04 81 04 81     ................
    1108:	03 81 05 81 03 8b 01 8b 09 81 0b 81 0b 81 0b 81     ................
    1118:	64                                                  d

00001119 <_ZL10chr_f32_35>:
    1119:	1d 89 03 89 03 81 0b 81 0b 81 0b 81 00 84 05 89     ................
    1129:	02 83 03 82 02 81 06 82 0b 81 0b 81 0b 81 01 81     ................
    1139:	07 81 01 82 05 82 02 82 03 82 03 89 05 85 65        ..............e

00001148 <_ZL10chr_f32_36>:
    1148:	20 84 06 88 03 82 04 81 03 81 06 81 02 81 06 81      ...............
    1158:	01 81 0b 81 01 84 04 8a 02 83 03 82 02 82 05 82     ................
    1168:	01 81 07 81 01 81 07 81 01 81 07 81 02 81 05 82     ................
    1178:	02 82 03 82 04 88 05 85 65                          ........e

00001181 <_ZL10chr_f32_37>:
    1181:	1c 8b 01 8b 0a 81 0a 82 09 82 0a 81 0a 82 0a 81     ................
    1191:	0a 81 0b 81 0a 82 0a 81 0b 81 0b 81 0a 81 0b 81     ................
    11a1:	0b 81 69                                            ..i

000011a4 <_ZL10chr_f32_38>:
    11a4:	20 83 07 87 05 81 03 81 04 81 05 81 03 81 05 81      ...............
    11b4:	03 81 05 81 04 81 03 81 06 85 06 87 04 82 03 82     ................
    11c4:	02 81 07 81 01 81 07 81 01 81 07 81 01 81 07 81     ................
    11d4:	02 82 03 82 03 89 05 85 65                          ........e

000011dd <_ZL10chr_f32_39>:
    11dd:	1f 85 05 88 04 82 03 82 02 82 05 81 02 81 07 81     ................
    11ed:	01 81 07 81 01 81 07 81 01 82 05 82 02 82 03 83     ................
    11fd:	02 8a 04 84 01 81 0b 81 01 81 06 81 02 81 06 81     ................
    120d:	03 81 04 82 03 88 05 86 65                          ........e

00001216 <_ZL10chr_f32_3A>:
    1216:	2b 82 03 82 03 82 34 82 03 82 03 82 32              +.....4.....2

00001223 <_ZL10chr_f32_3B>:
    1223:	2b 82 03 82 03 82 34 82 03 82 03 82 05 80 04 81     +.....4.........
    1233:	04 80 04 81 17                                      .....

00001238 <_ZL10chr_f32_3C>:
    1238:	6b 82 08 82 07 83 07 82 08 81 0d 82 0d 82 0c 82     k...............
    1248:	0c 82 7f 0c                                         ....

0000124c <_ZL10chr_f32_3D>:
    124c:	51 86 01 86 13 86 01 86 63                          Q.......c

00001255 <_ZL10chr_f32_3E>:
    1255:	62 82 0c 82 0c 83 0c 82 0d 81 08 82 07 83 07 82     b...............
    1265:	08 82 7f 15                                         ....

00001269 <_ZL10chr_f32_3F>:
    1269:	10 85 04 88 03 82 03 82 01 82 05 81 01 81 06 81     ................
    1279:	01 81 06 81 09 82 08 82 08 82 08 82 09 81 09 82     ................
    1289:	09 82 23 82 09 82 09 82 5f                          ..#....._

00001292 <_ZL10chr_f32_40>:
    1292:	21 88 0d 82 06 82 09 82 0a 81 07 81 0d 81 05 81     !...............
    12a2:	0f 81 04 80 06 83 01 80 03 81 02 81 04 81 02 83     ................
    12b2:	03 81 02 81 03 81 04 81 04 81 01 81 04 81 04 81     ................
    12c2:	04 81 01 81 03 81 05 81 04 81 01 81 03 81 05 81     ................
    12d2:	04 81 01 81 03 81 04 81 04 81 02 81 03 81 04 81     ................
    12e2:	04 81 02 81 03 81 04 81 03 81 04 81 03 81 02 82     ................
    12f2:	02 81 05 81 04 83 01 84 07 81 17 81 17 81 0b 81     ................
    1302:	09 82 05 83 0d 87 6c                                ......l

00001309 <_ZL10chr_f32_41>:
    1309:	15 83 0b 83 0b 83 0a 81 01 81 09 81 01 81 09 81     ................
    1319:	01 81 08 81 03 81 07 81 03 81 07 81 03 81 06 81     ................
    1329:	05 81 05 81 05 81 05 89 04 8b 03 81 07 81 03 81     ................
    1339:	07 81 02 81 09 81 01 81 09 81 00 82 09 82 6f        ..............o

00001348 <_ZL10chr_f32_42>:
    1348:	12 8a 05 8c 03 81 07 82 03 81 08 81 03 81 08 81     ................
    1358:	03 81 08 81 03 81 08 81 03 81 07 82 03 8a 05 8c     ................
    1368:	03 81 07 82 03 81 09 81 02 81 09 81 02 81 09 81     ................
    1378:	02 81 09 81 02 81 07 82 03 8c 03 8a 7a              ............z

00001385 <_ZL10chr_f32_43>:
    1385:	17 86 08 8a 05 83 04 83 03 82 08 81 03 81 0a 81     ................
    1395:	01 82 0a 81 01 81 0f 81 0f 81 0f 81 0f 81 0f 81     ................
    13a5:	0b 81 01 82 0a 81 02 81 09 82 02 82 08 81 04 83     ................
    13b5:	04 83 05 8a 08 86 7f 02                             ........

000013bd <_ZL10chr_f32_44>:
    13bd:	13 89 07 8b 05 81 06 83 04 81 08 82 03 81 09 81     ................
    13cd:	03 81 09 82 02 81 0a 81 02 81 0a 81 02 81 0a 81     ................
    13dd:	02 81 0a 81 02 81 0a 81 02 81 0a 81 02 81 09 82     ................
    13ed:	02 81 09 81 03 81 08 82 03 81 06 83 04 8b 05 89     ................
    13fd:	7f 03                                               ..

000013ff <_ZL10chr_f32_45>:
    13ff:	11 8c 02 8c 02 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    140f:	0d 8b 03 8b 03 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    141f:	0d 8c 02 8c 70                                      ....p

00001424 <_ZL10chr_f32_46>:
    1424:	10 8b 02 8b 02 81 0c 81 0c 81 0c 81 0c 81 0c 81     ................
    1434:	0c 8a 03 8a 03 81 0c 81 0c 81 0c 81 0c 81 0c 81     ................
    1444:	0c 81 0c 81 73                                      ....s

00001449 <_ZL10chr_f32_47>:
    1449:	18 86 09 8a 06 82 05 83 04 82 08 81 04 81 09 82     ................
    1459:	02 82 0f 81 10 81 10 81 05 87 02 81 05 87 02 81     ................
    1469:	0b 81 02 81 0b 81 02 82 0a 81 03 81 09 82 03 82     ................
    1479:	07 83 04 83 04 84 05 89 00 81 07 85 03 80 7f 06     ................

00001489 <_ZL10chr_f32_48>:
    1489:	13 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    1499:	03 81 09 81 03 81 09 81 03 81 09 81 03 8d 03 8d     ................
    14a9:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    14b9:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    14c9:	03 81 09 81 7f                                      .....

000014ce <_ZL10chr_f32_49>:
    14ce:	07 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    14de:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    14ee:	03 81 03 81 2b                                      ....+

000014f3 <_ZL10chr_f32_4A>:
    14f3:	15 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1503:	0a 81 0a 81 0a 81 0a 81 01 81 06 81 01 81 06 81     ................
    1513:	01 81 06 81 01 82 04 82 02 88 04 86 5e              ............^

00001520 <_ZL10chr_f32_4B>:
    1520:	12 81 08 82 02 81 07 82 03 81 06 82 04 81 05 82     ................
    1530:	05 81 04 82 06 81 03 82 07 81 02 82 08 81 01 82     ................
    1540:	09 81 00 83 09 87 08 83 01 82 07 82 03 82 06 81     ................
    1550:	05 81 06 81 05 82 05 81 06 82 04 81 07 82 03 81     ................
    1560:	08 82 02 81 09 82 76                                ......v

00001567 <_ZL10chr_f32_4C>:
    1567:	0e 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1577:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1587:	0a 8a 01 8a 5a                                      ....Z

0000158c <_ZL10chr_f32_4D>:
    158c:	16 82 0a 82 03 83 08 83 03 83 08 83 03 83 08 83     ................
    159c:	03 81 00 81 06 81 00 81 03 81 00 81 06 81 00 81     ................
    15ac:	03 81 00 81 06 81 00 81 03 81 01 81 04 81 01 81     ................
    15bc:	03 81 01 81 04 81 01 81 03 81 01 81 04 81 01 81     ................
    15cc:	03 81 02 81 02 81 02 81 03 81 02 81 02 81 02 81     ................
    15dc:	03 81 02 81 02 81 02 81 03 81 03 81 00 81 03 81     ................
    15ec:	03 81 03 81 00 81 03 81 03 81 03 84 03 81 03 81     ................
    15fc:	04 82 04 81 03 81 04 82 04 81 7f 14                 ............

00001608 <_ZL10chr_f32_4E>:
    1608:	13 82 08 81 03 82 08 81 03 83 07 81 03 84 06 81     ................
    1618:	03 81 00 81 06 81 03 81 00 82 05 81 03 81 01 82     ................
    1628:	04 81 03 81 02 81 04 81 03 81 02 82 03 81 03 81     ................
    1638:	03 82 02 81 03 81 04 81 02 81 03 81 04 82 01 81     ................
    1648:	03 81 05 82 00 81 03 81 06 81 00 81 03 81 06 84     ................
    1658:	03 81 07 83 03 81 08 82 03 81 08 82 7f              .............

00001665 <_ZL10chr_f32_4F>:
    1665:	18 86 09 8a 06 83 04 83 04 82 08 82 03 81 0a 81     ................
    1675:	02 82 0a 82 01 81 0c 81 01 81 0c 81 01 81 0c 81     ................
    1685:	01 81 0c 81 01 81 0c 81 01 81 0c 81 01 82 0a 82     ................
    1695:	02 81 0a 81 03 82 08 82 04 83 04 83 06 8a 09 86     ................
    16a5:	7f 0a                                               ..

000016a7 <_ZL10chr_f32_50>:
    16a7:	11 8a 04 8b 03 81 07 82 02 81 08 81 02 81 08 81     ................
    16b7:	02 81 08 81 02 81 08 81 02 81 07 82 02 8b 03 8a     ................
    16c7:	04 81 0d 81 0d 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    16d7:	7b                                                  {

000016d8 <_ZL10chr_f32_51>:
    16d8:	18 86 09 8a 06 83 04 83 04 82 08 82 03 81 0a 81     ................
    16e8:	02 82 0a 82 01 81 0c 81 01 81 0c 81 01 81 0c 81     ................
    16f8:	01 81 0c 81 01 81 0c 81 01 81 0c 81 01 82 06 80     ................
    1708:	02 82 02 81 05 82 01 81 03 82 05 85 04 83 04 83     ................
    1718:	06 8c 07 86 01 82 10 80 73                          ........s

00001721 <_ZL10chr_f32_52>:
    1721:	12 8b 04 8c 03 81 08 82 02 81 09 81 02 81 09 81     ................
    1731:	02 81 09 81 02 81 09 81 02 81 08 81 03 8c 03 8b     ................
    1741:	04 81 07 82 03 81 08 81 03 81 08 82 02 81 09 81     ................
    1751:	02 81 09 81 02 81 09 81 02 81 09 81 02 81 09 81     ................
    1761:	77                                                  w

00001762 <_ZL10chr_f32_53>:
    1762:	14 85 07 89 04 82 05 82 03 81 07 81 03 81 07 81     ................
    1772:	03 81 07 82 02 82 0d 84 0b 86 0b 85 0c 83 0d 82     ................
    1782:	01 82 08 81 02 81 08 81 02 81 08 81 02 83 05 82     ................
    1792:	03 8a 06 86 73                                      ....s

00001797 <_ZL10chr_f32_54>:
    1797:	0d 9b 05 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81     ................
    17a7:	0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81 0b 81     ................
    17b7:	0b 81 67                                            ..g

000017ba <_ZL10chr_f32_55>:
    17ba:	13 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    17ca:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    17da:	03 81 09 81 03 81 09 81 03 81 09 81 03 81 09 81     ................
    17ea:	03 81 09 81 03 81 09 81 03 82 07 82 04 82 05 82     ................
    17fa:	06 89 08 87 7f 02                                   ......

00001800 <_ZL10chr_f32_56>:
    1800:	0e 82 08 82 00 81 08 81 01 81 08 81 01 81 08 81     ................
    1810:	02 81 06 81 03 81 06 81 03 81 06 81 04 81 04 81     ................
    1820:	05 81 04 81 05 81 04 81 06 81 02 81 07 81 02 81     ................
    1830:	07 81 02 81 08 81 00 81 09 81 00 81 09 84 0a 82     ................
    1840:	0b 82 6e                                            ..n

00001843 <_ZL10chr_f32_57>:
    1843:	16 82 06 82 06 82 00 81 06 82 06 81 01 81 06 82     ................
    1853:	06 81 01 82 04 81 00 81 04 82 02 81 04 81 00 81     ................
    1863:	04 81 03 81 04 81 00 81 04 81 03 81 04 81 00 81     ................
    1873:	04 81 03 82 02 81 02 81 02 82 04 81 02 81 02 81     ................
    1883:	02 81 05 81 02 81 02 81 02 81 05 81 02 81 02 81     ................
    1893:	02 81 05 82 00 81 04 81 00 82 06 81 00 81 04 81     ................
    18a3:	00 81 07 81 00 81 04 81 00 81 07 81 00 81 04 81     ................
    18b3:	00 81 07 83 06 83 08 82 06 82 09 82 06 82 7f 25     ...............%

000018c3 <_ZL10chr_f32_58>:
    18c3:	0f 81 08 81 01 82 06 82 02 81 06 81 04 81 04 81     ................
    18d3:	05 82 02 82 06 81 02 81 08 81 00 81 09 84 0a 82     ................
    18e3:	0b 82 0a 81 00 81 08 82 00 82 07 81 02 81 06 81     ................
    18f3:	04 81 04 82 04 82 03 81 06 81 02 82 06 82 00 82     ................
    1903:	08 82 68                                            ..h

00001906 <_ZL10chr_f32_59>:
    1906:	0f 82 09 82 00 82 07 82 02 81 07 81 03 82 05 82     ................
    1916:	04 81 05 81 06 81 03 81 07 82 01 82 08 81 01 81     ................
    1926:	0a 83 0b 83 0c 81 0d 81 0d 81 0d 81 0d 81 0d 81     ................
    1936:	0d 81 0d 81 76                                      ....v

0000193b <_ZL10chr_f32_5A>:
    193b:	11 8c 02 8c 0c 82 0b 82 0b 82 0c 81 0c 81 0c 82     ................
    194b:	0b 82 0b 82 0c 81 0c 81 0c 82 0b 82 0b 82 0b 82     ................
    195b:	0c 8d 01 8d 70                                      ....p

00001960 <_ZL10chr_f32_5B>:
    1960:	0b 84 03 84 03 81 06 81 06 81 06 81 06 81 06 81     ................
    1970:	06 81 06 81 06 81 06 81 06 81 06 81 06 81 06 81     ................
    1980:	06 81 06 81 06 81 06 81 06 81 06 84 03 84 12        ...............

0000198f <_ZL10chr_f32_5C>:
    198f:	01 80 0b 80 0b 81 0b 80 0b 80 0b 81 0b 80 0b 80     ................
    199f:	0b 81 0b 80 0b 80 0b 81 0b 80 0b 80 0b 81 0b 80     ................
    19af:	0b 80 0b 81 0b 80 0b 80 0b 81 0b 80 0b 80 0b 81     ................
    19bf:	0b 80 0e                                            ...

000019c2 <_ZL10chr_f32_5D>:
    19c2:	09 84 03 84 06 81 06 81 06 81 06 81 06 81 06 81     ................
    19d2:	06 81 06 81 06 81 06 81 06 81 06 81 06 81 06 81     ................
    19e2:	06 81 06 81 06 81 06 81 06 81 03 84 03 84 14        ...............

000019f1 <_ZL10chr_f32_5E>:
    19f1:	10 82 07 81 00 81 05 81 02 81 03 81 04 81 01 81     ................
    1a01:	06 81 7f 6f                                         ...o

00001a05 <_ZL10chr_f32_5F>:
    1a05:	7f 7f 1d 8c 26                                      ....&

00001a0a <_ZL10chr_f32_60>:
    1a0a:	0b 83 03 85 01 82 01 82 00 81 03 81 00 81 03 81     ................
    1a1a:	00 82 01 82 01 85 03 83 7f 1a                       ..........

00001a24 <_ZL10chr_f32_61>:
    1a24:	57 85 05 88 04 81 04 82 03 81 05 81 0b 81 05 87     W...............
    1a34:	03 89 02 82 05 81 02 81 06 81 02 81 06 81 02 82     ................
    1a44:	03 83 03 86 00 83 02 84 02 82 61                    ..........a

00001a4f <_ZL10chr_f32_62>:
    1a4f:	10 81 0c 81 0c 81 0c 81 0c 81 0c 81 01 83 06 81     ................
    1a5f:	00 86 04 84 01 83 03 82 05 81 03 81 06 82 02 81     ................
    1a6f:	07 81 02 81 07 81 02 81 07 81 02 81 06 82 02 82     ................
    1a7f:	05 81 03 84 01 83 03 81 00 86 04 81 01 83 6d        ..............m

00001a8e <_ZL10chr_f32_63>:
    1a8e:	52 83 06 87 03 83 01 82 03 81 05 81 01 82 09 81     R...............
    1a9e:	0a 81 0a 81 0a 82 05 81 02 81 05 81 02 83 01 82     ................
    1aae:	04 87 06 83 5e                                      ....^

00001ab3 <_ZL10chr_f32_64>:
    1ab3:	19 81 0c 81 0c 81 0c 81 0c 81 06 83 01 81 04 86     ................
    1ac3:	00 81 03 83 01 84 03 81 05 82 02 82 06 81 02 81     ................
    1ad3:	07 81 02 81 07 81 02 81 07 81 02 82 06 81 03 81     ................
    1ae3:	05 82 03 83 01 84 04 86 00 81 06 83 01 81 6a        ..............j

00001af2 <_ZL10chr_f32_65>:
    1af2:	58 83 07 87 04 83 01 83 03 81 05 81 02 82 06 81     X...............
    1b02:	01 8b 01 8b 01 81 0b 82 0b 81 05 82 02 83 01 83     ................
    1b12:	04 87 07 83 66                                      ....f

00001b17 <_ZL10chr_f32_66>:
    1b17:	0a 83 02 84 02 81 05 81 05 81 03 86 00 86 02 81     ................
    1b27:	05 81 05 81 05 81 05 81 05 81 05 81 05 81 05 81     ................
    1b37:	05 81 05 81 3b                                      ....;

00001b3c <_ZL10chr_f32_67>:
    1b3c:	5e 83 01 81 04 86 00 81 03 83 01 84 03 81 05 82     ^...............
    1b4c:	02 81 07 81 02 81 07 81 02 81 07 81 02 81 07 81     ................
    1b5c:	02 82 06 81 03 81 05 82 03 83 01 84 04 86 00 81     ................
    1b6c:	06 83 01 81 0c 81 02 81 07 81 02 81 06 82 03 82     ................
    1b7c:	03 82 04 89 06 85 13                                .......

00001b83 <_ZL10chr_f32_68>:
    1b83:	10 81 0c 81 0c 81 0c 81 0c 81 0c 81 01 84 05 81     ................
    1b93:	00 86 04 83 03 82 03 82 05 81 03 81 06 81 03 81     ................
    1ba3:	06 81 03 81 06 81 03 81 06 81 03 81 06 81 03 81     ................
    1bb3:	06 81 03 81 06 81 03 81 06 81 03 81 06 81 6a        ..............j

00001bc2 <_ZL10chr_f32_69>:
    1bc2:	07 81 03 81 03 81 0f 81 03 81 03 81 03 81 03 81     ................
    1bd2:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1be2:	2b                                                  +

00001be3 <_ZL10chr_f32_6A>:
    1be3:	07 81 03 81 03 81 0f 81 03 81 03 81 03 81 03 81     ................
    1bf3:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1c03:	03 81 03 81 03 81 03 81 01 83 01 82 08              .............

00001c10 <_ZL10chr_f32_6B>:
    1c10:	19 81 09 81 09 81 09 81 09 81 04 82 01 81 03 82     ................
    1c20:	02 81 02 82 03 81 01 82 04 81 00 82 05 85 05 86     ................
    1c30:	04 82 01 81 04 81 02 82 03 81 03 81 03 81 03 82     ................
    1c40:	02 81 04 81 02 81 04 82 53                          ........S

00001c49 <_ZL10chr_f32_6C>:
    1c49:	07 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1c59:	03 81 03 81 03 81 03 81 03 81 03 81 03 81 03 81     ................
    1c69:	03 81 03 81 2b                                      ....+

00001c6e <_ZL10chr_f32_6D>:
    1c6e:	7f 05 81 01 83 03 83 05 81 00 85 00 86 04 83 02     ................
    1c7e:	84 02 82 03 82 04 82 04 81 03 81 05 81 05 81 03     ................
    1c8e:	81 05 81 05 81 03 81 05 81 05 81 03 81 05 81 05     ................
    1c9e:	81 03 81 05 81 05 81 03 81 05 81 05 81 03 81 05     ................
    1cae:	81 05 81 03 81 05 81 05 81 03 81 05 81 05 81 7f     ................
    1cbe:	1b                                                  .

00001cbf <_ZL10chr_f32_6E>:
    1cbf:	5b 81 01 84 05 81 00 86 04 83 03 82 03 82 05 81     [...............
    1ccf:	03 81 06 81 03 81 06 81 03 81 06 81 03 81 06 81     ................
    1cdf:	03 81 06 81 03 81 06 81 03 81 06 81 03 81 06 81     ................
    1cef:	03 81 06 81 6a                                      ....j

00001cf4 <_ZL10chr_f32_6F>:
    1cf4:	5e 84 07 88 04 83 02 83 03 81 06 81 02 82 06 82     ^...............
    1d04:	01 81 08 81 01 81 08 81 01 81 08 81 01 82 06 82     ................
    1d14:	02 81 06 81 03 83 02 83 04 88 07 84 6d              ............m

00001d21 <_ZL10chr_f32_70>:
    1d21:	5b 81 01 83 06 81 00 86 04 84 01 83 03 82 05 81     [...............
    1d31:	03 81 06 82 02 81 07 81 02 81 07 81 02 81 07 81     ................
    1d41:	02 81 06 82 02 82 05 81 03 84 01 83 03 81 00 86     ................
    1d51:	04 81 01 83 06 81 0c 81 0c 81 0c 81 0c 81 28        ..............(

00001d60 <_ZL10chr_f32_71>:
    1d60:	5e 83 01 81 04 86 00 81 03 83 01 84 03 81 05 82     ^...............
    1d70:	02 82 06 81 02 81 07 81 02 81 07 81 02 81 07 81     ................
    1d80:	02 82 06 81 03 81 05 82 03 83 01 84 04 86 00 81     ................
    1d90:	06 83 01 81 0c 81 0c 81 0c 81 0c 81 0c 81 1f        ...............

00001d9f <_ZL10chr_f32_72>:
    1d9f:	31 81 00 82 01 85 01 82 04 81 05 81 05 81 05 81     1...............
    1daf:	05 81 05 81 05 81 05 81 05 81 05 81 3b              ............;

00001dbc <_ZL10chr_f32_73>:
    1dbc:	4a 84 05 87 02 82 03 81 02 81 05 81 01 81 0a 84     J...............
    1dcc:	07 86 07 84 09 81 01 81 05 81 01 82 03 82 02 87     ................
    1ddc:	04 85 56                                            ..V

00001ddf <_ZL10chr_f32_74>:
    1ddf:	0f 81 04 81 04 81 04 81 02 85 00 85 02 81 04 81     ................
    1def:	04 81 04 81 04 81 04 81 04 81 04 81 04 81 04 83     ................
    1dff:	03 82 31                                            ..1

00001e02 <_ZL10chr_f32_75>:
    1e02:	55 81 06 81 02 81 06 81 02 81 06 81 02 81 06 81     U...............
    1e12:	02 81 06 81 02 81 06 81 02 81 06 81 02 81 06 81     ................
    1e22:	02 81 06 81 02 81 05 82 02 82 03 83 03 86 00 81     ................
    1e32:	04 84 01 81 62                                      ....b

00001e37 <_ZL10chr_f32_76>:
    1e37:	47 81 06 81 00 81 06 81 01 81 04 81 02 81 04 81     G...............
    1e47:	02 81 04 81 03 81 02 81 04 81 02 81 04 81 02 81     ................
    1e57:	05 81 00 81 06 81 00 81 06 84 07 82 08 82 58        ..............X

00001e66 <_ZL10chr_f32_77>:
    1e66:	6b 81 04 82 04 81 00 81 04 82 04 81 00 81 04 80     k...............
    1e76:	00 80 04 81 01 81 02 81 00 81 02 81 02 81 02 81     ................
    1e86:	00 81 02 81 02 81 02 81 00 81 02 81 02 81 02 80     ................
    1e96:	02 80 02 81 03 81 00 81 02 81 00 81 04 81 00 81     ................
    1ea6:	02 81 00 81 04 81 00 81 02 81 00 81 05 82 04 82     ................
    1eb6:	06 82 04 82 06 82 04 82 7f 01                       ..........

00001ec0 <_ZL10chr_f32_78>:
    1ec0:	4e 81 06 81 01 82 04 82 02 81 04 81 04 81 02 81     N...............
    1ed0:	05 82 00 82 06 84 08 82 08 84 06 82 00 82 05 81     ................
    1ee0:	02 81 04 81 04 81 02 82 04 82 01 81 06 81 5b        ..............[

00001eef <_ZL10chr_f32_79>:
    1eef:	4d 82 06 82 00 81 06 81 01 81 06 81 02 81 04 81     M...............
    1eff:	03 81 04 81 03 81 04 81 04 81 02 81 05 81 02 81     ................
    1f0f:	05 81 02 81 06 81 00 81 07 81 00 81 07 81 00 81     ................
    1f1f:	08 82 09 82 09 82 09 81 09 82 06 84 07 83 14        ...............

00001f2e <_ZL10chr_f32_7A>:
    1f2e:	48 89 01 89 08 82 07 82 07 82 07 82 08 81 08 82     H...............
    1f3e:	07 82 07 82 07 82 08 89 01 89 54                    ..........T

00001f49 <_ZL10chr_f32_7B>:
    1f49:	06 83 07 82 09 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1f59:	0a 81 0a 81 0a 81 09 81 08 82 0b 81 0b 81 0a 81     ................
    1f69:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 82     ................
    1f79:	0a 83 0e                                            ...

00001f7c <_ZL10chr_f32_7C>:
    1f7c:	04 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1f8c:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1f9c:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1fac:	0a 81 12                                            ...

00001faf <_ZL10chr_f32_7D>:
    1faf:	01 83 0a 82 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81     ................
    1fbf:	0a 81 0a 81 0a 81 0b 81 0b 82 08 81 09 81 0a 81     ................
    1fcf:	0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 0a 81 09 82     ................
    1fdf:	07 83 13                                            ...

00001fe2 <_ZL10chr_f32_7E>:
    1fe2:	11 83 09 81 01 81 07 81 03 82 03 80 00 80 06 81     ................
    1ff2:	01 81 00 80 07 83 7f 7f 2c                          ........,

00001ffb <_ZL10chr_f32_7F>:
    1ffb:	19                                                  .

00001ffc <chrtbl_f32>:
    1ffc:	f5 0d f7 0d 18 0e 36 0e 78 0e a5 0e 03 0f 48 0f     ......6.x.....H.
    200c:	55 0f 86 0f b7 0f d7 0f e8 0f f7 0f fc 0f 03 10     U...............
    201c:	2c 10 69 10 8c 10 b7 10 e8 10 19 11 48 11 81 11     ,.i.........H...
    202c:	a4 11 dd 11 16 12 23 12 38 12 4c 12 55 12 69 12     ......#.8.L.U.i.
    203c:	92 12 09 13 48 13 85 13 bd 13 ff 13 24 14 49 14     ....H.......$.I.
    204c:	89 14 ce 14 f3 14 20 15 67 15 8c 15 08 16 65 16     ...... .g.....e.
    205c:	a7 16 d8 16 21 17 62 17 97 17 ba 17 00 18 43 18     ....!.b.......C.
    206c:	c3 18 06 19 3b 19 60 19 8f 19 c2 19 f1 19 05 1a     ....;.`.........
    207c:	0a 1a 24 1a 4f 1a 8e 1a b3 1a f2 1a 17 1b 3c 1b     ..$.O.........<.
    208c:	83 1b c2 1b e3 1b 10 1c 49 1c 6e 1c bf 1c f4 1c     ........I.n.....
    209c:	21 1d 60 1d 9f 1d bc 1d df 1d 02 1e 37 1e 66 1e     !.`.........7.f.
    20ac:	c0 1e ef 1e 2e 1f 49 1f 7c 1f af 1f e2 1f fb 1f     ......I.|.......

000020bc <widtbl_f64>:
    20bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 11 0f 0c     ................
    20cc:	1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 0f 0c 0c 0c 0c 0c     ................
    20dc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    20ec:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    20fc:	0c 1b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 2a 0c 0c     .............*..
    210c:	1d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 0c 0c 0c     ................

0000211c <_ZL10chr_f64_20>:
    211c:	7f 7f 7f 7f 3f                                      ....?

00002121 <_ZL10chr_f64_2D>:
    2121:	7f 7f 45 8a 05 8a 05 8a 05 8a 7f 7f 7f 2b           ..E..........+

0000212f <_ZL10chr_f64_2E>:
    212f:	7f 7f 7f 55 84 09 84 09 84 09 84 09 84 7f 38        ...U..........8

0000213e <_ZL10chr_f64_30>:
    213e:	23 87 0f 8d 0b 8f 09 91 07 86 05 86 06 84 09 84     #...............
    214e:	06 83 0b 83 05 84 0b 84 04 83 0d 83 04 83 0d 83     ................
    215e:	04 83 0d 83 03 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    216e:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    217e:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    218e:	02 83 0f 83 02 83 0f 83 02 83 0f 83 03 83 0d 83     ................
    219e:	04 83 0d 83 04 83 0d 83 04 84 0b 84 05 83 0b 83     ................
    21ae:	06 84 09 84 06 86 05 86 07 91 09 8f 0b 8d 0f 87     ................
    21be:	7f 7f 32                                            ..2

000021c1 <_ZL10chr_f64_31>:
    21c1:	29 82 17 82 16 83 16 83 15 84 14 85 12 87 0d 8c     )...............
    21d1:	0d 8c 0d 87 00 83 0d 84 03 83 16 83 16 83 16 83     ................
    21e1:	16 83 16 83 16 83 16 83 16 83 16 83 16 83 16 83     ................
    21f1:	16 83 16 83 16 83 16 83 16 83 16 83 16 83 16 83     ................
    2201:	16 83 16 83 16 83 16 83 16 83 7f 7f 4c              ............L

0000220e <_ZL10chr_f64_32>:
    220e:	24 87 10 8c 0b 8f 09 91 08 85 05 86 06 84 09 84     $...............
    221e:	06 84 0a 83 06 83 0b 84 04 84 0c 83 04 83 0d 83     ................
    222e:	04 83 0d 83 04 83 0d 83 16 83 15 84 15 84 14 84     ................
    223e:	14 85 13 85 12 86 11 87 10 88 10 88 0f 88 10 87     ................
    224e:	11 86 12 85 13 85 14 84 14 84 15 83 16 83 15 96     ................
    225e:	03 96 03 96 03 96 7f 7f 45                          ........E

00002267 <_ZL10chr_f64_33>:
    2267:	23 87 0f 8d 0b 90 08 91 07 86 05 86 06 84 09 84     #...............
    2277:	05 84 0b 84 04 84 0b 84 04 83 0d 83 04 83 0d 83     ................
    2287:	04 83 0d 83 15 84 15 84 14 84 14 85 0d 8b 0e 89     ................
    2297:	10 8b 0e 8c 14 86 15 84 16 84 15 84 02 83 0f 83     ................
    22a7:	02 83 0f 83 02 83 0f 83 02 84 0d 84 02 84 0c 85     ................
    22b7:	03 84 0b 84 04 85 09 85 05 86 05 86 07 91 09 8f     ................
    22c7:	0b 8d 0f 87 7f 7f 4d                                ......M

000022ce <_ZL10chr_f64_34>:
    22ce:	45 83 15 84 14 85 13 86 13 86 12 87 11 83 00 83     E...............
    22de:	11 83 00 83 10 83 01 83 0f 83 02 83 0e 84 02 83     ................
    22ee:	0e 83 03 83 0d 83 04 83 0c 83 05 83 0b 84 05 83     ................
    22fe:	0b 83 06 83 0a 83 07 83 09 84 07 83 09 83 08 83     ................
    230e:	08 83 09 83 07 83 0a 83 07 97 02 97 02 97 02 97     ................
    231e:	11 83 16 83 16 83 16 83 16 83 16 83 16 83 16 83     ................
    232e:	16 83 7f 7f 4a                                      ....J

00002333 <_ZL10chr_f64_35>:
    2333:	3a 91 08 91 08 91 08 91 08 82 16 83 16 83 16 83     :...............
    2343:	16 82 17 82 17 82 16 83 02 87 0b 83 00 8b 09 91     ................
    2353:	08 92 07 86 05 86 06 84 09 85 05 83 0b 84 16 83     ................
    2363:	16 84 16 83 16 83 16 83 16 83 16 83 03 83 0e 83     ................
    2373:	03 83 0d 84 03 83 0d 83 04 84 0b 84 05 84 09 85     ................
    2383:	05 86 05 86 07 91 09 8f 0b 8d 0f 87 7f 7f 32        ..............2

00002392 <_ZL10chr_f64_36>:
    2392:	24 86 11 8b 0c 8e 0a 90 08 86 05 85 06 85 09 84     $...............
    23a2:	05 84 0b 83 05 83 0c 84 03 84 0d 83 03 83 0e 83     ................
    23b2:	03 83 16 83 15 83 16 83 04 86 0a 83 02 8b 07 83     ................
    23c2:	00 8e 06 94 05 88 05 86 04 86 09 84 04 85 0b 84     ................
    23d2:	03 84 0d 83 03 84 0d 84 02 83 0f 83 02 83 0f 83     ................
    23e2:	02 83 0f 83 02 83 0f 83 02 83 0f 83 03 83 0d 84     ................
    23f2:	03 83 0d 83 04 84 0b 84 05 84 09 85 05 86 05 86     ................
    2402:	07 91 09 8f 0c 8c 0f 88 7f 7f 31                    ..........1

0000240d <_ZL10chr_f64_37>:
    240d:	37 96 03 96 03 96 03 96 16 83 15 83 15 83 15 83     7...............
    241d:	15 84 14 84 14 84 15 83 15 84 14 84 15 84 14 84     ................
    242d:	15 83 15 84 15 83 15 84 15 84 15 83 15 84 15 83     ................
    243d:	16 83 15 84 15 83 16 83 16 83 16 83 15 84 15 83     ................
    244d:	16 83 16 83 7f 7f 53                                ......S

00002454 <_ZL10chr_f64_38>:
    2454:	24 85 11 8b 0c 8f 09 91 07 86 05 86 06 84 09 84     $...............
    2464:	05 84 0b 84 04 84 0b 84 04 83 0d 83 04 83 0d 83     ................
    2474:	04 83 0d 83 04 84 0b 84 05 83 0b 83 06 84 09 84     ................
    2484:	07 85 05 85 09 8f 0b 8d 0b 8f 09 91 07 85 07 85     ................
    2494:	05 84 0b 84 04 83 0d 83 03 84 0d 84 02 83 0f 83     ................
    24a4:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    24b4:	02 84 0d 84 02 84 0d 84 03 84 0b 84 04 86 07 86     ................
    24c4:	05 93 07 91 09 8f 0d 89 7f 7f 31                    ..........1

000024cf <_ZL10chr_f64_39>:
    24cf:	22 88 0f 8c 0c 8f 09 91 07 86 05 86 05 85 09 84     "...............
    24df:	05 84 0b 84 04 83 0d 83 03 84 0d 83 03 83 0f 83     ................
    24ef:	02 83 0f 83 02 83 0f 83 02 83 0f 83 02 83 0f 83     ................
    24ff:	02 84 0d 84 03 83 0d 84 03 84 0b 85 04 84 09 86     ................
    250f:	04 86 05 88 05 94 06 8e 00 83 07 8b 02 83 0a 86     ................
    251f:	04 83 16 83 15 83 16 83 03 83 0e 83 03 83 0d 84     ................
    252f:	03 84 0c 83 05 83 0b 84 05 84 09 85 06 85 05 86     ................
    253f:	08 90 0a 8e 0c 8b 11 86 7f 7f 33                    ..........3

0000254a <_ZL10chr_f64_3A>:
    254a:	7f 1a 84 09 84 09 84 09 84 09 84 7f 3d 84 09 84     ............=...
    255a:	09 84 09 84 09 84 7f 74                             .......t

00002562 <_ZL10chr_f64_61>:
    2562:	7f 7b 88 0f 8d 0a 90 09 91 07 85 06 85 06 84 0a     .{..............
    2572:	84 05 83 0c 83 05 83 0c 83 05 83 0c 83 16 83 15     ................
    2582:	84 0e 8b 09 90 07 92 06 8d 01 83 05 88 07 83 05     ................
    2592:	84 0b 83 04 84 0c 83 04 83 0d 83 04 83 0d 83 04     ................
    25a2:	83 0c 84 04 83 0b 85 04 84 09 86 05 84 06 8a 03     ................
    25b2:	8f 01 84 04 8d 02 84 05 8a 05 83 07 86 7f 7f 35     ...............5

000025c2 <_ZL10chr_f64_6D>:
    25c2:	7f 7f 7f 05 86 07 86 0a 83 02 89 04 8a 08 83 00     ................
    25d2:	8c 02 8c 07 83 00 8d 00 8e 06 87 05 89 05 84 06     ................
    25e2:	85 08 86 08 84 05 84 0a 84 0a 83 05 84 0a 84 0a     ................
    25f2:	83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b     ................
    2602:	83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05     ................
    2612:	83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b     ................
    2622:	83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b     ................
    2632:	83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05     ................
    2642:	83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b 83 0b     ................
    2652:	83 05 83 0b 83 0b 83 05 83 0b 83 0b 83 05 83 0b     ................
    2662:	83 0b 83 7f 7f 7f 7a                                ......z

00002669 <_ZL10chr_f64_70>:
    2669:	7f 7f 10 86 0c 83 02 8b 09 83 01 8d 08 83 00 8f     ................
    2679:	07 88 05 86 06 86 09 84 06 85 0b 84 05 84 0d 83     ................
    2689:	05 84 0d 83 05 84 0d 84 04 83 0f 83 04 83 0f 83     ................
    2699:	04 83 0f 83 04 83 0f 83 04 83 0f 83 04 83 0f 83     ................
    26a9:	04 83 0f 83 04 83 0f 83 04 83 0e 84 04 84 0d 83     ................
    26b9:	05 84 0c 84 05 85 0b 84 05 86 09 84 06 88 05 86     ................
    26c9:	06 83 00 8f 07 83 01 8d 08 83 02 8b 09 83 04 86     ................
    26d9:	0c 83 18 83 18 83 18 83 18 83 18 83 18 83 18 83     ................
    26e9:	18 83 18 83 32                                      ....2

000026ee <chrtbl_f64>:
    26ee:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    26fe:	1c 21 1c 21 1c 21 1c 21 1c 21 21 21 2f 21 1c 21     .!.!.!.!.!!!/!.!
    270e:	3e 21 c1 21 0e 22 67 22 ce 22 33 23 92 23 0d 24     >!.!."g"."3#.#.$
    271e:	54 24 cf 24 4a 25 1c 21 1c 21 1c 21 1c 21 1c 21     T$.$J%.!.!.!.!.!
    272e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    273e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    274e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    275e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!
    276e:	1c 21 62 25 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!b%.!.!.!.!.!.!
    277e:	1c 21 1c 21 1c 21 1c 21 1c 21 c2 25 1c 21 1c 21     .!.!.!.!.!.%.!.!
    278e:	69 26 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     i&.!.!.!.!.!.!.!
    279e:	1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21 1c 21     .!.!.!.!.!.!.!.!

000027ae <widtbl_f7s>:
    27ae:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27be:	20 20 20 20 20 20 20 20 20 20 0c 0c 0c 0c 0c 0c               ......
    27ce:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27de:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27ee:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    27fe:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................

0000280e <_ZL10chr_f7s_20>:
    280e:	7f 7f 7f 7f 3f                                      ....?

00002813 <_ZL10chr_f7s_2E>:
    2813:	7f 7f 7f 7b 82 07 84 06 84 06 84 07 82 10           ...{..........

00002821 <_ZL10chr_f7s_30>:
    2821:	27 8e 0f 90 0d 92 0d 90 01 80 08 81 01 8e 01 82     '...............
    2831:	06 83 10 84 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2841:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2851:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2861:	04 85 0e 85 04 85 0e 85 04 84 10 84 04 82 14 82     ................
    2871:	04 80 18 80 24 80 1e 82 15 81 04 84 11 83 04 85     ....$...........
    2881:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2891:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    28a1:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    28b1:	0e 85 04 85 0e 85 05 83 10 83 07 81 01 8e 01 81     ................
    28c1:	0b 90 0d 92 0d 90 0f 8e 28                          ........(

000028ca <_ZL10chr_f7s_31>:
    28ca:	7f 19 80 1d 82 1b 84 19 85 19 85 19 85 19 85 19     ................
    28da:	85 19 85 19 85 19 85 19 85 19 85 19 85 19 85 19     ................
    28ea:	85 1b 83 1d 81 1e 80 5d 81 1b 83 19 85 19 85 19     .......]........
    28fa:	85 19 85 19 85 19 85 19 85 19 85 19 85 19 85 19     ................
    290a:	85 19 85 19 85 19 85 1a 83 1c 81 7f 24              ............$

00002917 <_ZL10chr_f7s_32>:
    2917:	27 8e 0f 90 0d 92 0d 90 01 80 0c 8e 01 82 1b 84     '...............
    2927:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2937:	19 85 19 85 19 85 19 85 19 85 1a 84 0a 8e 02 82     ................
    2947:	08 92 02 80 06 96 06 80 01 94 07 82 01 90 09 84     ................
    2957:	1a 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2967:	19 85 19 85 19 85 19 85 19 85 19 85 1a 83 1c 81     ................
    2977:	01 8e 0f 90 0d 92 0d 90 0f 8e 28                    ..........(

00002982 <_ZL10chr_f7s_33>:
    2982:	27 8e 0f 90 0d 92 0d 90 01 80 0c 8e 01 82 1b 84     '...............
    2992:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    29a2:	19 85 19 85 19 85 19 85 19 85 1a 84 0a 8e 02 82     ................
    29b2:	08 92 02 80 06 96 09 94 0c 90 02 81 1b 83 19 85     ................
    29c2:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    29d2:	19 85 19 85 19 85 19 85 19 85 1a 83 0b 8e 01 81     ................
    29e2:	0b 90 0d 92 0d 90 0f 8e 28                          ........(

000029eb <_ZL10chr_f7s_34>:
    29eb:	7f 19 80 08 81 12 82 06 83 10 84 04 85 0e 85 04     ................
    29fb:	85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04     ................
    2a0b:	85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04     ................
    2a1b:	85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04     ................
    2a2b:	84 10 84 04 82 02 8e 02 82 04 80 02 92 02 80 06     ................
    2a3b:	96 09 94 0c 90 02 81 1b 83 19 85 19 85 19 85 19     ................
    2a4b:	85 19 85 19 85 19 85 19 85 19 85 19 85 19 85 19     ................
    2a5b:	85 19 85 19 85 1a 83 1c 81 7f 24                    ..........$

00002a66 <_ZL10chr_f7s_35>:
    2a66:	27 8e 0f 90 0d 92 0d 90 0b 81 01 8e 0b 83 1a 85     '...............
    2a76:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2a86:	19 85 19 85 19 85 19 85 19 84 1a 82 02 8e 0a 80     ................
    2a96:	02 92 0a 96 09 94 0c 90 02 81 1b 83 19 85 19 85     ................
    2aa6:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2ab6:	19 85 19 85 19 85 19 85 1a 83 0b 8e 01 81 0b 90     ................
    2ac6:	0d 92 0d 90 0f 8e 28                                ......(

00002acd <_ZL10chr_f7s_36>:
    2acd:	27 8e 0f 90 0d 92 0d 90 0b 81 01 8e 0b 83 1a 85     '...............
    2add:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2aed:	19 85 19 85 19 85 19 85 19 84 1a 82 02 8e 0a 80     ................
    2afd:	02 92 0a 96 06 80 01 94 07 82 01 90 02 81 04 84     ................
    2b0d:	11 83 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2b1d:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2b2d:	0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85     ................
    2b3d:	0e 85 04 85 0e 85 04 85 0e 85 05 83 10 83 07 81     ................
    2b4d:	01 8e 01 81 0b 90 0d 92 0d 90 0f 8e 28              ............(

00002b5a <_ZL10chr_f7s_37>:
    2b5a:	27 8e 0f 90 0d 92 0d 90 01 80 0c 8e 01 82 1b 84     '...............
    2b6a:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2b7a:	19 85 19 85 19 85 19 85 19 85 1a 84 1c 82 1e 80     ................
    2b8a:	5d 81 1b 83 19 85 19 85 19 85 19 85 19 85 19 85     ]...............
    2b9a:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2baa:	1a 83 1c 81 7f 24                                   .....$

00002bb0 <_ZL10chr_f7s_38>:
    2bb0:	27 8e 0f 90 0d 92 0d 90 01 80 08 81 01 8e 01 82     '...............
    2bc0:	06 83 10 84 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2bd0:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2be0:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2bf0:	04 85 0e 85 04 85 0e 85 04 84 10 84 04 82 02 8e     ................
    2c00:	02 82 04 80 02 92 02 80 06 96 06 80 01 94 07 82     ................
    2c10:	01 90 02 81 04 84 11 83 04 85 0e 85 04 85 0e 85     ................
    2c20:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c30:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c40:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c50:	05 83 10 83 07 81 01 8e 01 81 0b 90 0d 92 0d 90     ................
    2c60:	0f 8e 28                                            ..(

00002c63 <_ZL10chr_f7s_39>:
    2c63:	27 8e 0f 90 0d 92 0d 90 01 80 08 81 01 8e 01 82     '...............
    2c73:	06 83 10 84 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c83:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2c93:	04 85 0e 85 04 85 0e 85 04 85 0e 85 04 85 0e 85     ................
    2ca3:	04 85 0e 85 04 85 0e 85 04 84 10 84 04 82 02 8e     ................
    2cb3:	02 82 04 80 02 92 02 80 06 96 09 94 0c 90 02 81     ................
    2cc3:	1b 83 19 85 19 85 19 85 19 85 19 85 19 85 19 85     ................
    2cd3:	19 85 19 85 19 85 19 85 19 85 19 85 19 85 1a 83     ................
    2ce3:	0b 8e 01 81 0b 90 0d 92 0d 90 0f 8e 28              ............(

00002cf0 <_ZL10chr_f7s_3A>:
    2cf0:	7f 1f 82 07 84 06 84 06 84 07 82 7f 18 82 07 84     ................
    2d00:	06 84 06 84 07 82 7f 20                             ....... 

00002d08 <chrtbl_f7s>:
    2d08:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d18:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 13 28 0e 28     .(.(.(.(.(.(.(.(
    2d28:	21 28 ca 28 17 29 82 29 eb 29 66 2a cd 2a 5a 2b     !(.(.).).)f*.*Z+
    2d38:	b0 2b 63 2c f0 2c 0e 28 0e 28 0e 28 0e 28 0e 28     .+c,.,.(.(.(.(.(
    2d48:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d58:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d68:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d78:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d88:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2d98:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2da8:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(
    2db8:	0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28 0e 28     .(.(.(.(.(.(.(.(

00002dc8 <_ZL8fontdata>:
	...
    2dd0:	00 08 d5 0c 35 06 10 00 00 00 00 00 fc 1f 95 0d     ....5...........
    2de0:	1a 00 00 00 00 00 ee 26 bc 20 30 08 2d ae 27 30     .......&. 0.-.'0
    2df0:	00 00 00 00 00                                      .....

00002df5 <_ZZN11TFT_ILI93414initEvE12ILI9341_cmds>:
    2df5:	15 ef 03 03 80 02 cf 03 00 c1 30 ed 04 64 03 12     ..........0..d..
    2e05:	81 e8 03 85 00 78 cb 05 39 2c 00 34 02 f7 01 20     .....x..9,.4... 
    2e15:	ea 02 00 00 c0 01 23 c1 01 10 c5 02 3e 28 c7 01     ......#.....>(..
    2e25:	86 36 01 48 3a 01 55 b1 02 00 18 b6 03 08 82 27     .6.H:.U........'
    2e35:	f2 01 00 26 01 01 e0 0f 0f 31 2b 0c 0e 08 4e f1     ...&.....1+...N.
    2e45:	37 07 10 03 0e 09 00 e1 0f 00 0e 14 03 11 07 31     7..............1
    2e55:	c1 48 08 0f 0c 31 36 0f 11 80 78 29 00              .H...16...x).

00002e62 <port_to_mode_PGM>:
    2e62:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    2e72:	01 01 00 00 04 01 07 01 0a 01                       ..........

00002e7c <port_to_output_PGM>:
    2e7c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    2e8c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00002e96 <port_to_input_PGM>:
    2e96:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    2ea6:	00 01 00 00 03 01 06 01 09 01                       ..........

00002eb0 <digital_pin_to_port_PGM>:
    2eb0:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    2ec0:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    2ed0:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    2ee0:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    2ef0:	0b 0b 0b 0b 0b 0b                                   ......

00002ef6 <digital_pin_to_bit_mask_PGM>:
    2ef6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    2f06:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    2f16:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    2f26:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    2f36:	04 08 10 20 40 80                                   ... @.

00002f3c <digital_pin_to_timer_PGM>:
    2f3c:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
    2f68:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00002f82 <prvIdleTask>:
            }
        }
        taskEXIT_CRITICAL();

        return xReturn;
    }
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	1f 92       	push	r1
    2f88:	1f 92       	push	r1
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	0e 94 bb 50 	call	0xa176	; 0xa176 <prvCheckTasksWaitingTermination>
    2f96:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <pxReadyTasksLists>
    2f9a:	82 30       	cpi	r24, 0x02	; 2
    2f9c:	10 f0       	brcs	.+4      	; 0x2fa2 <prvIdleTask+0x20>
    2f9e:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <vPortYield>
    2fa2:	0e 94 71 56 	call	0xace2	; 0xace2 <vApplicationIdleHook>
    2fa6:	f5 cf       	rjmp	.-22     	; 0x2f92 <prvIdleTask+0x10>

00002fa8 <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <prvTimerTask+0x6>
    2fae:	1f 92       	push	r1
    2fb0:	1f 92       	push	r1
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9d 83       	std	Y+5, r25	; 0x05
    2fb8:	8c 83       	std	Y+4, r24	; 0x04
    2fba:	ce 01       	movw	r24, r28
    2fbc:	03 96       	adiw	r24, 0x03	; 3
    2fbe:	0e 94 de 53 	call	0xa7bc	; 0xa7bc <prvGetNextExpireTime>
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	62 2f       	mov	r22, r18
    2fce:	0e 94 8d 53 	call	0xa71a	; 0xa71a <prvProcessTimerOrBlockTask>
    2fd2:	0e 94 ac 54 	call	0xa958	; 0xa958 <prvProcessReceivedCommands>
    2fd6:	f1 cf       	rjmp	.-30     	; 0x2fba <prvTimerTask+0x12>

00002fd8 <__ctors_start>:
    2fd8:	f1 18       	sub	r15, r1
    2fda:	64 1f       	adc	r22, r20
    2fdc:	70 20       	and	r7, r0
    2fde:	ad 3f       	cpi	r26, 0xFD	; 253
    2fe0:	6b 40       	sbci	r22, 0x0B	; 11

00002fe2 <__ctors_end>:
    2fe2:	70 1f       	adc	r23, r16
    2fe4:	7c 20       	and	r7, r12

00002fe6 <__dtors_end>:
    2fe6:	11 24       	eor	r1, r1
    2fe8:	1f be       	out	0x3f, r1	; 63
    2fea:	cf ef       	ldi	r28, 0xFF	; 255
    2fec:	d1 e2       	ldi	r29, 0x21	; 33
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	00 e0       	ldi	r16, 0x00	; 0
    2ff4:	0c bf       	out	0x3c, r16	; 60

00002ff6 <__do_copy_data>:
    2ff6:	13 e0       	ldi	r17, 0x03	; 3
    2ff8:	a0 e0       	ldi	r26, 0x00	; 0
    2ffa:	b2 e0       	ldi	r27, 0x02	; 2
    2ffc:	e6 e6       	ldi	r30, 0x66	; 102
    2ffe:	f1 ed       	ldi	r31, 0xD1	; 209
    3000:	00 e0       	ldi	r16, 0x00	; 0
    3002:	0b bf       	out	0x3b, r16	; 59
    3004:	02 c0       	rjmp	.+4      	; 0x300a <__do_copy_data+0x14>
    3006:	07 90       	elpm	r0, Z+
    3008:	0d 92       	st	X+, r0
    300a:	a0 31       	cpi	r26, 0x10	; 16
    300c:	b1 07       	cpc	r27, r17
    300e:	d9 f7       	brne	.-10     	; 0x3006 <__do_copy_data+0x10>

00003010 <__do_clear_bss>:
    3010:	25 e0       	ldi	r18, 0x05	; 5
    3012:	a0 e1       	ldi	r26, 0x10	; 16
    3014:	b3 e0       	ldi	r27, 0x03	; 3
    3016:	01 c0       	rjmp	.+2      	; 0x301a <.do_clear_bss_start>

00003018 <.do_clear_bss_loop>:
    3018:	1d 92       	st	X+, r1

0000301a <.do_clear_bss_start>:
    301a:	a6 39       	cpi	r26, 0x96	; 150
    301c:	b2 07       	cpc	r27, r18
    301e:	e1 f7       	brne	.-8      	; 0x3018 <.do_clear_bss_loop>

00003020 <__do_global_ctors>:
    3020:	17 e1       	ldi	r17, 0x17	; 23
    3022:	c1 ef       	ldi	r28, 0xF1	; 241
    3024:	d7 e1       	ldi	r29, 0x17	; 23
    3026:	00 e0       	ldi	r16, 0x00	; 0
    3028:	06 c0       	rjmp	.+12     	; 0x3036 <__do_global_ctors+0x16>
    302a:	21 97       	sbiw	r28, 0x01	; 1
    302c:	01 09       	sbc	r16, r1
    302e:	80 2f       	mov	r24, r16
    3030:	fe 01       	movw	r30, r28
    3032:	0e 94 ef 61 	call	0xc3de	; 0xc3de <__tablejump2__>
    3036:	cc 3e       	cpi	r28, 0xEC	; 236
    3038:	d1 07       	cpc	r29, r17
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	08 07       	cpc	r16, r24
    303e:	a9 f7       	brne	.-22     	; 0x302a <__do_global_ctors+0xa>
    3040:	0e 94 77 40 	call	0x80ee	; 0x80ee <main>
    3044:	0c 94 a2 68 	jmp	0xd144	; 0xd144 <__do_global_dtors>

00003048 <__bad_interrupt>:
    3048:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000304c <_ZN6ScreenC1Ev>:
    304c:	cf 93       	push	r28
    304e:	df 93       	push	r29
    3050:	1f 92       	push	r1
    3052:	1f 92       	push	r1
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZN6Screen13firstInstanceE>
    3060:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <_ZN6Screen13firstInstanceE+0x1>
    3064:	89 2b       	or	r24, r25
    3066:	31 f4       	brne	.+12     	; 0x3074 <_ZN6ScreenC1Ev+0x28>
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZN6Screen13firstInstanceE+0x1>
    3070:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZN6Screen13firstInstanceE>
    3074:	00 00       	nop
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	08 95       	ret

00003080 <_ZN6Screen4initEv>:
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	1f 92       	push	r1
    3086:	1f 92       	push	r1
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	9a 83       	std	Y+2, r25	; 0x02
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	86 e1       	ldi	r24, 0x16	; 22
    3092:	93 e0       	ldi	r25, 0x03	; 3
    3094:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_ZN11TFT_ILI93414initEv>
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	86 e1       	ldi	r24, 0x16	; 22
    309e:	93 e0       	ldi	r25, 0x03	; 3
    30a0:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN11TFT_ILI934110fillScreenEj>
    30a4:	63 e0       	ldi	r22, 0x03	; 3
    30a6:	86 e1       	ldi	r24, 0x16	; 22
    30a8:	93 e0       	ldi	r25, 0x03	; 3
    30aa:	0e 94 33 2c 	call	0x5866	; 0x5866 <_ZN11TFT_ILI934111setRotationEh>
    30ae:	00 00       	nop
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	08 95       	ret

000030ba <_ZN6Screen12UpdateScreenEv>:
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	1f 92       	push	r1
    30c0:	1f 92       	push	r1
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9a 83       	std	Y+2, r25	; 0x02
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	9a 81       	ldd	r25, Y+2	; 0x02
    30ce:	fc 01       	movw	r30, r24
    30d0:	80 81       	ld	r24, Z
    30d2:	88 23       	and	r24, r24
    30d4:	19 f0       	breq	.+6      	; 0x30dc <_ZN6Screen12UpdateScreenEv+0x22>
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	06 d0       	rcall	.+12     	; 0x30e8 <_ZN6Screen19RunScreenSimulationEv>
    30dc:	00 00       	nop
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	08 95       	ret

000030e8 <_ZN6Screen19RunScreenSimulationEv>:
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	1f 92       	push	r1
    30ee:	1f 92       	push	r1
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	9a 83       	std	Y+2, r25	; 0x02
    30f6:	89 83       	std	Y+1, r24	; 0x01
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	60 ee       	ldi	r22, 0xE0	; 224
    30fe:	77 e0       	ldi	r23, 0x07	; 7
    3100:	86 e1       	ldi	r24, 0x16	; 22
    3102:	93 e0       	ldi	r25, 0x03	; 3
    3104:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN11TFT_ILI934112setTextColorEjj>
    3108:	63 e0       	ldi	r22, 0x03	; 3
    310a:	86 e1       	ldi	r24, 0x16	; 22
    310c:	93 e0       	ldi	r25, 0x03	; 3
    310e:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <_ZN11TFT_ILI934111setTextSizeEh>
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	86 e1       	ldi	r24, 0x16	; 22
    311c:	93 e0       	ldi	r25, 0x03	; 3
    311e:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <_ZN11TFT_ILI93419setCursorEii>
    3122:	8c e2       	ldi	r24, 0x2C	; 44
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	bc 01       	movw	r22, r24
    3128:	86 e1       	ldi	r24, 0x16	; 22
    312a:	93 e0       	ldi	r25, 0x03	; 3
    312c:	0e 94 06 41 	call	0x820c	; 0x820c <_ZN5Print5printEPK19__FlashStringHelper>
    3130:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i>
    3134:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <i+0x1>
    3138:	0a 97       	sbiw	r24, 0x0a	; 10
    313a:	2c f4       	brge	.+10     	; 0x3146 <_ZN6Screen19RunScreenSimulationEv+0x5e>
    313c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i>
    3140:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <i+0x1>
    3144:	02 c0       	rjmp	.+4      	; 0x314a <_ZN6Screen19RunScreenSimulationEv+0x62>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <i+0x1>
    314e:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <i>
    3152:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i>
    3156:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <i+0x1>
    315a:	9c 01       	movw	r18, r24
    315c:	2f 5f       	subi	r18, 0xFF	; 255
    315e:	3f 4f       	sbci	r19, 0xFF	; 255
    3160:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <i+0x1>
    3164:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <i>
    3168:	4a e0       	ldi	r20, 0x0A	; 10
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	bc 01       	movw	r22, r24
    316e:	86 e1       	ldi	r24, 0x16	; 22
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	0e 94 b2 42 	call	0x8564	; 0x8564 <_ZN5Print7printlnEii>
    3176:	00 00       	nop
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	08 95       	ret

00003182 <_ZN6ScreenD1Ev>:
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	1f 92       	push	r1
    3188:	1f 92       	push	r1
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	00 00       	nop
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	08 95       	ret

0000319e <_Z41__static_initialization_and_destruction_0ii>:
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	00 d0       	rcall	.+0      	; 0x31a4 <_Z41__static_initialization_and_destruction_0ii+0x6>
    31a4:	1f 92       	push	r1
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	7c 83       	std	Y+4, r23	; 0x04
    31b0:	6b 83       	std	Y+3, r22	; 0x03
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	61 f4       	brne	.+24     	; 0x31d2 <_Z41__static_initialization_and_destruction_0ii+0x34>
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	41 f4       	brne	.+16     	; 0x31d2 <_Z41__static_initialization_and_destruction_0ii+0x34>
    31c2:	40 e4       	ldi	r20, 0x40	; 64
    31c4:	51 e0       	ldi	r21, 0x01	; 1
    31c6:	60 ef       	ldi	r22, 0xF0	; 240
    31c8:	70 e0       	ldi	r23, 0x00	; 0
    31ca:	86 e1       	ldi	r24, 0x16	; 22
    31cc:	93 e0       	ldi	r25, 0x03	; 3
    31ce:	0e 94 a1 23 	call	0x4742	; 0x4742 <_ZN11TFT_ILI9341C1Eii>
    31d2:	00 00       	nop
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	08 95       	ret

000031e2 <_GLOBAL__sub_I__ZN6Screen13firstInstanceE>:
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	6f ef       	ldi	r22, 0xFF	; 255
    31ec:	7f ef       	ldi	r23, 0xFF	; 255
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	d5 df       	rcall	.-86     	; 0x319e <_Z41__static_initialization_and_destruction_0ii>
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	08 95       	ret

000031fa <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <_ZN14HardwareSerial5beginEm+0x6>
    3200:	00 d0       	rcall	.+0      	; 0x3202 <_ZN14HardwareSerial5beginEm+0x8>
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	4b 83       	std	Y+3, r20	; 0x03
    320c:	5c 83       	std	Y+4, r21	; 0x04
    320e:	6d 83       	std	Y+5, r22	; 0x05
    3210:	7e 83       	std	Y+6, r23	; 0x06
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	ad 81       	ldd	r26, Y+5	; 0x05
    3218:	be 81       	ldd	r27, Y+6	; 0x06
    321a:	e9 81       	ldd	r30, Y+1	; 0x01
    321c:	fa 81       	ldd	r31, Y+2	; 0x02
    321e:	26 e0       	ldi	r18, 0x06	; 6
    3220:	ac 01       	movw	r20, r24
    3222:	bd 01       	movw	r22, r26
    3224:	cf 01       	movw	r24, r30
    3226:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <_ZN14HardwareSerial5beginEmh>
    322a:	00 00       	nop
    322c:	26 96       	adiw	r28, 0x06	; 6
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	08 95       	ret

0000323e <_ZN18SerialPortExpanderC1Ev>:
#include "SerialCommand.h"

SerialPortExpander *SerialPortExpander::firstInstance;

// default constructor
SerialPortExpander::SerialPortExpander()
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	1f 92       	push	r1
    3244:	1f 92       	push	r1
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	9a 83       	std	Y+2, r25	; 0x02
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	fc 01       	movw	r30, r24
    3254:	10 82       	st	Z, r1
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	9a 81       	ldd	r25, Y+2	; 0x02
    325a:	fc 01       	movw	r30, r24
    325c:	11 82       	std	Z+1, r1	; 0x01
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	2b e2       	ldi	r18, 0x2B	; 43
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	fc 01       	movw	r30, r24
    3268:	33 83       	std	Z+3, r19	; 0x03
    326a:	22 83       	std	Z+2, r18	; 0x02
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	2a e2       	ldi	r18, 0x2A	; 42
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	fc 01       	movw	r30, r24
    3276:	35 83       	std	Z+5, r19	; 0x05
    3278:	24 83       	std	Z+4, r18	; 0x04
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	29 e2       	ldi	r18, 0x29	; 41
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	fc 01       	movw	r30, r24
    3284:	37 83       	std	Z+7, r19	; 0x07
    3286:	26 83       	std	Z+6, r18	; 0x06
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	9a 81       	ldd	r25, Y+2	; 0x02
    328c:	fc 01       	movw	r30, r24
    328e:	11 86       	std	Z+9, r1	; 0x09
    3290:	10 86       	std	Z+8, r1	; 0x08
{
	if(!firstInstance)
    3292:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN18SerialPortExpander13firstInstanceE>
    3296:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <_ZN18SerialPortExpander13firstInstanceE+0x1>
    329a:	89 2b       	or	r24, r25
    329c:	31 f4       	brne	.+12     	; 0x32aa <_ZN18SerialPortExpanderC1Ev+0x6c>
	{
		firstInstance = this;
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <_ZN18SerialPortExpander13firstInstanceE+0x1>
    32a6:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <_ZN18SerialPortExpander13firstInstanceE>
	}

} //SerialPortExpander
    32aa:	00 00       	nop
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <_ZN18SerialPortExpander4initEv>:


void SerialPortExpander::init(void)
{
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	1f 92       	push	r1
    32bc:	1f 92       	push	r1
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
	pinMode(s1, OUTPUT);              //Set the digital pin as output
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	fc 01       	movw	r30, r24
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	61 e0       	ldi	r22, 0x01	; 1
    32d2:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
	pinMode(s2, OUTPUT);              //Set the digital pin as output
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	9a 81       	ldd	r25, Y+2	; 0x02
    32da:	fc 01       	movw	r30, r24
    32dc:	84 81       	ldd	r24, Z+4	; 0x04
    32de:	95 81       	ldd	r25, Z+5	; 0x05
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
	pinMode(s3, OUTPUT);              //Set the digital pin as output
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	fc 01       	movw	r30, r24
    32ec:	86 81       	ldd	r24, Z+6	; 0x06
    32ee:	97 81       	ldd	r25, Z+7	; 0x07
    32f0:	61 e0       	ldi	r22, 0x01	; 1
    32f2:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
	
	
	Serial1.begin(SERIAL_BAUD);
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	52 ec       	ldi	r21, 0xC2	; 194
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	88 e6       	ldi	r24, 0x68	; 104
    3300:	94 e0       	ldi	r25, 0x04	; 4
    3302:	7b df       	rcall	.-266    	; 0x31fa <_ZN14HardwareSerial5beginEm>
	Serial1.setTimeout(50);
    3304:	42 e3       	ldi	r20, 0x32	; 50
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	88 e6       	ldi	r24, 0x68	; 104
    330e:	94 e0       	ldi	r25, 0x04	; 4
    3310:	0e 94 52 43 	call	0x86a4	; 0x86a4 <_ZN6Stream10setTimeoutEm>
	
}
    3314:	00 00       	nop
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	08 95       	ret

00003320 <_ZN18SerialPortExpander21ProcessSerialExpanderEP13SerialCommand>:

void SerialPortExpander::ProcessSerialExpander(SerialCommand *sCommand)
{
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	c8 56       	subi	r28, 0x68	; 104
    332a:	d1 09       	sbc	r29, r1
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	9e 01       	movw	r18, r28
    3338:	2b 59       	subi	r18, 0x9B	; 155
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	f9 01       	movw	r30, r18
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
    3342:	ce 01       	movw	r24, r28
    3344:	89 59       	subi	r24, 0x99	; 153
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	fc 01       	movw	r30, r24
    334a:	71 83       	std	Z+1, r23	; 0x01
    334c:	60 83       	st	Z, r22

	Open_channel(sCommand);
    334e:	ce 01       	movw	r24, r28
    3350:	89 59       	subi	r24, 0x99	; 153
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	fc 01       	movw	r30, r24
    3356:	20 81       	ld	r18, Z
    3358:	31 81       	ldd	r19, Z+1	; 0x01
    335a:	ce 01       	movw	r24, r28
    335c:	8b 59       	subi	r24, 0x9B	; 155
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	fc 01       	movw	r30, r24
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	b9 01       	movw	r22, r18
    3368:	1d d0       	rcall	.+58     	; 0x33a4 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand>
	//Serial.print(sCommand->hardwareType ";");

	char charBuilder[100];
	
	//BUILD_SERIAL_OUTPUT(sCommand->hardwareType, sCommand->command, charBuilder);
	BuildSerialOutput(sCommand, charBuilder);
    336a:	ce 01       	movw	r24, r28
    336c:	89 59       	subi	r24, 0x99	; 153
    336e:	9f 4f       	sbci	r25, 0xFF	; 255
    3370:	fc 01       	movw	r30, r24
    3372:	80 81       	ld	r24, Z
    3374:	91 81       	ldd	r25, Z+1	; 0x01
    3376:	9e 01       	movw	r18, r28
    3378:	2f 5f       	subi	r18, 0xFF	; 255
    337a:	3f 4f       	sbci	r19, 0xFF	; 255
    337c:	b9 01       	movw	r22, r18
    337e:	a9 d4       	rcall	.+2386   	; 0x3cd2 <_Z17BuildSerialOutputP13SerialCommandPc>
	//BUILD_SERIAL_OUTPUT(sCommand, charBuilder);
	Serial1.println(charBuilder);
    3380:	ce 01       	movw	r24, r28
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	bc 01       	movw	r22, r24
    3386:	88 e6       	ldi	r24, 0x68	; 104
    3388:	94 e0       	ldi	r25, 0x04	; 4
    338a:	0e 94 8b 42 	call	0x8516	; 0x8516 <_ZN5Print7printlnEPKc>
	//
	//Serial.println(charBuilder);            //let’s transmit the data received from the Atlas Scientific device to the serial monitor
	//}


}
    338e:	00 00       	nop
    3390:	c8 59       	subi	r28, 0x98	; 152
    3392:	df 4f       	sbci	r29, 0xFF	; 255
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	08 95       	ret

000033a4 <_ZN18SerialPortExpander12Open_channelEP13SerialCommand>:

void SerialPortExpander::Open_channel(SerialCommand *sCommand)
{                             //This function controls what UART port is opened.
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <_ZN18SerialPortExpander12Open_channelEP13SerialCommand+0x6>
    33aa:	1f 92       	push	r1
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	9a 83       	std	Y+2, r25	; 0x02
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	7c 83       	std	Y+4, r23	; 0x04
    33b6:	6b 83       	std	Y+3, r22	; 0x03

	//port = atoi(sCommand->hardwareType);                           //Convert the ASCII char value of the port to be opened into an int
	port = sCommand->hardwareType;
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	9c 81       	ldd	r25, Y+4	; 0x04
    33bc:	fc 01       	movw	r30, r24
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	9c 01       	movw	r18, r24
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	9a 81       	ldd	r25, Y+2	; 0x02
    33c8:	fc 01       	movw	r30, r24
    33ca:	31 87       	std	Z+9, r19	; 0x09
    33cc:	20 87       	std	Z+8, r18	; 0x08
	if (port < 1 || port > 8)port = 1;              //If the value of the port is within range (1-8) then open that port. If it’s not in range set it port 1
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	fc 01       	movw	r30, r24
    33d4:	80 85       	ldd	r24, Z+8	; 0x08
    33d6:	91 85       	ldd	r25, Z+9	; 0x09
    33d8:	18 16       	cp	r1, r24
    33da:	19 06       	cpc	r1, r25
    33dc:	3c f4       	brge	.+14     	; 0x33ec <_ZN18SerialPortExpander12Open_channelEP13SerialCommand+0x48>
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	9a 81       	ldd	r25, Y+2	; 0x02
    33e2:	fc 01       	movw	r30, r24
    33e4:	80 85       	ldd	r24, Z+8	; 0x08
    33e6:	91 85       	ldd	r25, Z+9	; 0x09
    33e8:	09 97       	sbiw	r24, 0x09	; 9
    33ea:	3c f0       	brlt	.+14     	; 0x33fa <_ZN18SerialPortExpander12Open_channelEP13SerialCommand+0x56>
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	9a 81       	ldd	r25, Y+2	; 0x02
    33f0:	21 e0       	ldi	r18, 0x01	; 1
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	fc 01       	movw	r30, r24
    33f6:	31 87       	std	Z+9, r19	; 0x09
    33f8:	20 87       	std	Z+8, r18	; 0x08
	port -= 1;                                      //So, this device knows its ports as 0-1 but we have them labeled 1-8 by subtracting one from the port to be opened we correct for this.
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	9a 81       	ldd	r25, Y+2	; 0x02
    33fe:	fc 01       	movw	r30, r24
    3400:	80 85       	ldd	r24, Z+8	; 0x08
    3402:	91 85       	ldd	r25, Z+9	; 0x09
    3404:	9c 01       	movw	r18, r24
    3406:	21 50       	subi	r18, 0x01	; 1
    3408:	31 09       	sbc	r19, r1
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	9a 81       	ldd	r25, Y+2	; 0x02
    340e:	fc 01       	movw	r30, r24
    3410:	31 87       	std	Z+9, r19	; 0x09
    3412:	20 87       	std	Z+8, r18	; 0x08

	digitalWrite(s1, bitRead(port, 0));             //Here we have two commands combined into one.
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	9a 81       	ldd	r25, Y+2	; 0x02
    3418:	fc 01       	movw	r30, r24
    341a:	80 85       	ldd	r24, Z+8	; 0x08
    341c:	91 85       	ldd	r25, Z+9	; 0x09
    341e:	28 2f       	mov	r18, r24
    3420:	21 70       	andi	r18, 0x01	; 1
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	9a 81       	ldd	r25, Y+2	; 0x02
    3426:	fc 01       	movw	r30, r24
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	62 2f       	mov	r22, r18
    342e:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
	digitalWrite(s2, bitRead(port, 1));             //The digitalWrite command sets a pin to 1/0 (high or low)
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	9a 81       	ldd	r25, Y+2	; 0x02
    3436:	fc 01       	movw	r30, r24
    3438:	80 85       	ldd	r24, Z+8	; 0x08
    343a:	91 85       	ldd	r25, Z+9	; 0x09
    343c:	95 95       	asr	r25
    343e:	87 95       	ror	r24
    3440:	28 2f       	mov	r18, r24
    3442:	21 70       	andi	r18, 0x01	; 1
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	fc 01       	movw	r30, r24
    344a:	84 81       	ldd	r24, Z+4	; 0x04
    344c:	95 81       	ldd	r25, Z+5	; 0x05
    344e:	62 2f       	mov	r22, r18
    3450:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
	digitalWrite(s3, bitRead(port, 2));             //The bitRead command tells us what the bit value is for a specific bit location of a number
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	9a 81       	ldd	r25, Y+2	; 0x02
    3458:	fc 01       	movw	r30, r24
    345a:	80 85       	ldd	r24, Z+8	; 0x08
    345c:	91 85       	ldd	r25, Z+9	; 0x09
    345e:	95 95       	asr	r25
    3460:	87 95       	ror	r24
    3462:	95 95       	asr	r25
    3464:	87 95       	ror	r24
    3466:	28 2f       	mov	r18, r24
    3468:	21 70       	andi	r18, 0x01	; 1
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	fc 01       	movw	r30, r24
    3470:	86 81       	ldd	r24, Z+6	; 0x06
    3472:	97 81       	ldd	r25, Z+7	; 0x07
    3474:	62 2f       	mov	r22, r18
    3476:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
	delay(2);                                       //this is needed to make sure the channel switching event has completed
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 70 44 	call	0x88e0	; 0x88e0 <delay>
	return;                                         //go back
    3486:	00 00       	nop
}
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	df 91       	pop	r29
    3492:	cf 91       	pop	r28
    3494:	08 95       	ret

00003496 <_ZN18SerialPortExpanderD1Ev>:

// default destructor
SerialPortExpander::~SerialPortExpander()
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	1f 92       	push	r1
    349c:	1f 92       	push	r1
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
{
} //~SerialPortExpander
    34a6:	00 00       	nop
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	08 95       	ret

000034b2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	1f 92       	push	r1
    34b8:	1f 92       	push	r1
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	08 95       	ret

000034d0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	1f 92       	push	r1
    34d6:	1f 92       	push	r1
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	00 00       	nop
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	08 95       	ret

000034ec <_ZN16SerialProcessingC1Ev>:
			return chars2;
		}
	}
	
	return chars2;
}
    34ec:	cf 93       	push	r28
    34ee:	df 93       	push	r29
    34f0:	1f 92       	push	r1
    34f2:	1f 92       	push	r1
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	9a 83       	std	Y+2, r25	; 0x02
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN16SerialProcessing13firstInstanceE>
    3500:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN16SerialProcessing13firstInstanceE+0x1>
    3504:	89 2b       	or	r24, r25
    3506:	31 f4       	brne	.+12     	; 0x3514 <_ZN16SerialProcessingC1Ev+0x28>
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	9a 81       	ldd	r25, Y+2	; 0x02
    350c:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <_ZN16SerialProcessing13firstInstanceE+0x1>
    3510:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZN16SerialProcessing13firstInstanceE>
    3514:	00 00       	nop
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	08 95       	ret

00003520 <_ZN16SerialProcessing4initEv>:
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	1f 92       	push	r1
    3526:	1f 92       	push	r1
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	8f e5       	ldi	r24, 0x5F	; 95
    3532:	93 e0       	ldi	r25, 0x03	; 3
    3534:	c0 de       	rcall	.-640    	; 0x32b6 <_ZN18SerialPortExpander4initEv>
    3536:	00 00       	nop
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	08 95       	ret

00003542 <_ZN16SerialProcessing19CheckSerialCommandsEv>:
    3542:	af 92       	push	r10
    3544:	bf 92       	push	r11
    3546:	cf 92       	push	r12
    3548:	df 92       	push	r13
    354a:	ef 92       	push	r14
    354c:	ff 92       	push	r15
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
    355a:	2c 97       	sbiw	r28, 0x0c	; 12
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	9c 87       	std	Y+12, r25	; 0x0c
    3568:	8b 87       	std	Y+11, r24	; 0x0b
    356a:	8b ec       	ldi	r24, 0xCB	; 203
    356c:	93 e0       	ldi	r25, 0x03	; 3
    356e:	0e 94 1e 3c 	call	0x783c	; 0x783c <_ZN14HardwareSerial9availableEv>
    3572:	21 e0       	ldi	r18, 0x01	; 1
    3574:	18 16       	cp	r1, r24
    3576:	19 06       	cpc	r1, r25
    3578:	0c f0       	brlt	.+2      	; 0x357c <_ZN16SerialProcessing19CheckSerialCommandsEv+0x3a>
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	22 23       	and	r18, r18
    357e:	09 f4       	brne	.+2      	; 0x3582 <_ZN16SerialProcessing19CheckSerialCommandsEv+0x40>
    3580:	7b c0       	rjmp	.+246    	; 0x3678 <_ZN16SerialProcessing19CheckSerialCommandsEv+0x136>
    3582:	8b ec       	ldi	r24, 0xCB	; 203
    3584:	93 e0       	ldi	r25, 0x03	; 3
    3586:	e5 d1       	rcall	.+970    	; 0x3952 <_Z11CheckSerialP14HardwareSerial>
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	9d d2       	rcall	.+1338   	; 0x3acc <_Z13GetSerialArgsPc>
    3592:	a2 2e       	mov	r10, r18
    3594:	b3 2e       	mov	r11, r19
    3596:	c4 2e       	mov	r12, r20
    3598:	d5 2e       	mov	r13, r21
    359a:	e6 2e       	mov	r14, r22
    359c:	f7 2e       	mov	r15, r23
    359e:	08 2f       	mov	r16, r24
    35a0:	19 2f       	mov	r17, r25
    35a2:	2a 2d       	mov	r18, r10
    35a4:	3b 2d       	mov	r19, r11
    35a6:	4c 2d       	mov	r20, r12
    35a8:	5d 2d       	mov	r21, r13
    35aa:	6e 2d       	mov	r22, r14
    35ac:	7f 2d       	mov	r23, r15
    35ae:	80 2f       	mov	r24, r16
    35b0:	91 2f       	mov	r25, r17
    35b2:	2d 83       	std	Y+5, r18	; 0x05
    35b4:	3e 83       	std	Y+6, r19	; 0x06
    35b6:	4f 83       	std	Y+7, r20	; 0x07
    35b8:	58 87       	std	Y+8, r21	; 0x08
    35ba:	69 87       	std	Y+9, r22	; 0x09
    35bc:	7a 87       	std	Y+10, r23	; 0x0a
    35be:	2d 81       	ldd	r18, Y+5	; 0x05
    35c0:	3e 81       	ldd	r19, Y+6	; 0x06
    35c2:	84 e6       	ldi	r24, 0x64	; 100
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	28 17       	cp	r18, r24
    35c8:	39 07       	cpc	r19, r25
    35ca:	39 f4       	brne	.+14     	; 0x35da <_ZN16SerialProcessing19CheckSerialCommandsEv+0x98>
    35cc:	9e 01       	movw	r18, r28
    35ce:	2b 5f       	subi	r18, 0xFB	; 251
    35d0:	3f 4f       	sbci	r19, 0xFF	; 255
    35d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    35d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    35d6:	b9 01       	movw	r22, r18
    35d8:	65 d0       	rcall	.+202    	; 0x36a4 <_ZN16SerialProcessing20CheckInteralCommandsEP13SerialCommand>
    35da:	2d 81       	ldd	r18, Y+5	; 0x05
    35dc:	3e 81       	ldd	r19, Y+6	; 0x06
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	28 17       	cp	r18, r24
    35e4:	39 07       	cpc	r19, r25
    35e6:	39 f4       	brne	.+14     	; 0x35f6 <_ZN16SerialProcessing19CheckSerialCommandsEv+0xb4>
    35e8:	9e 01       	movw	r18, r28
    35ea:	2b 5f       	subi	r18, 0xFB	; 251
    35ec:	3f 4f       	sbci	r19, 0xFF	; 255
    35ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    35f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    35f2:	b9 01       	movw	r22, r18
    35f4:	83 d0       	rcall	.+262    	; 0x36fc <_ZN16SerialProcessing20CheckSpoolerCommandsEP13SerialCommand>
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	28 17       	cp	r18, r24
    3600:	39 07       	cpc	r19, r25
    3602:	68 f4       	brcc	.+26     	; 0x361e <_ZN16SerialProcessing19CheckSerialCommandsEv+0xdc>
    3604:	2d 81       	ldd	r18, Y+5	; 0x05
    3606:	3e 81       	ldd	r19, Y+6	; 0x06
    3608:	84 e6       	ldi	r24, 0x64	; 100
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	28 17       	cp	r18, r24
    360e:	39 07       	cpc	r19, r25
    3610:	30 f4       	brcc	.+12     	; 0x361e <_ZN16SerialProcessing19CheckSerialCommandsEv+0xdc>
    3612:	ce 01       	movw	r24, r28
    3614:	05 96       	adiw	r24, 0x05	; 5
    3616:	bc 01       	movw	r22, r24
    3618:	8f e5       	ldi	r24, 0x5F	; 95
    361a:	93 e0       	ldi	r25, 0x03	; 3
    361c:	81 de       	rcall	.-766    	; 0x3320 <_ZN18SerialPortExpander21ProcessSerialExpanderEP13SerialCommand>
    361e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <SIMULATIONACTIVE>
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	89 27       	eor	r24, r25
    3626:	88 23       	and	r24, r24
    3628:	39 f1       	breq	.+78     	; 0x3678 <_ZN16SerialProcessing19CheckSerialCommandsEv+0x136>
    362a:	8b ec       	ldi	r24, 0xCB	; 203
    362c:	93 e0       	ldi	r25, 0x03	; 3
    362e:	91 d1       	rcall	.+802    	; 0x3952 <_Z11CheckSerialP14HardwareSerial>
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	8b 83       	std	Y+3, r24	; 0x03
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	9c 81       	ldd	r25, Y+4	; 0x04
    3638:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    363c:	02 97       	sbiw	r24, 0x02	; 2
    363e:	e0 f0       	brcs	.+56     	; 0x3678 <_ZN16SerialProcessing19CheckSerialCommandsEv+0x136>
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	4a e0       	ldi	r20, 0x0A	; 10
    3646:	50 e0       	ldi	r21, 0x00	; 0
    3648:	bc 01       	movw	r22, r24
    364a:	8b ec       	ldi	r24, 0xCB	; 203
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	0e 94 a9 41 	call	0x8352	; 0x8352 <_ZN5Print5printEji>
    3652:	65 e1       	ldi	r22, 0x15	; 21
    3654:	72 e0       	ldi	r23, 0x02	; 2
    3656:	8b ec       	ldi	r24, 0xCB	; 203
    3658:	93 e0       	ldi	r25, 0x03	; 3
    365a:	0e 94 54 41 	call	0x82a8	; 0x82a8 <_ZN5Print5printEPKc>
    365e:	8f 81       	ldd	r24, Y+7	; 0x07
    3660:	98 85       	ldd	r25, Y+8	; 0x08
    3662:	bc 01       	movw	r22, r24
    3664:	8b ec       	ldi	r24, 0xCB	; 203
    3666:	93 e0       	ldi	r25, 0x03	; 3
    3668:	0e 94 54 41 	call	0x82a8	; 0x82a8 <_ZN5Print5printEPKc>
    366c:	65 e1       	ldi	r22, 0x15	; 21
    366e:	72 e0       	ldi	r23, 0x02	; 2
    3670:	8b ec       	ldi	r24, 0xCB	; 203
    3672:	93 e0       	ldi	r25, 0x03	; 3
    3674:	0e 94 8b 42 	call	0x8516	; 0x8516 <_ZN5Print7printlnEPKc>
    3678:	88 e6       	ldi	r24, 0x68	; 104
    367a:	94 e0       	ldi	r25, 0x04	; 4
    367c:	0e 94 1e 3c 	call	0x783c	; 0x783c <_ZN14HardwareSerial9availableEv>
    3680:	00 00       	nop
    3682:	2c 96       	adiw	r28, 0x0c	; 12
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	bf 90       	pop	r11
    36a0:	af 90       	pop	r10
    36a2:	08 95       	ret

000036a4 <_ZN16SerialProcessing20CheckInteralCommandsEP13SerialCommand>:
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <_ZN16SerialProcessing20CheckInteralCommandsEP13SerialCommand+0x6>
    36aa:	1f 92       	push	r1
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
    36b4:	7c 83       	std	Y+4, r23	; 0x04
    36b6:	6b 83       	std	Y+3, r22	; 0x03
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	fc 01       	movw	r30, r24
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	67 e1       	ldi	r22, 0x17	; 23
    36c4:	72 e0       	ldi	r23, 0x02	; 2
    36c6:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <strcmp>
    36ca:	89 2b       	or	r24, r25
    36cc:	79 f4       	brne	.+30     	; 0x36ec <_ZN16SerialProcessing20CheckInteralCommandsEP13SerialCommand+0x48>
    36ce:	8b 81       	ldd	r24, Y+3	; 0x03
    36d0:	9c 81       	ldd	r25, Y+4	; 0x04
    36d2:	fc 01       	movw	r30, r24
    36d4:	84 81       	ldd	r24, Z+4	; 0x04
    36d6:	95 81       	ldd	r25, Z+5	; 0x05
    36d8:	6a e2       	ldi	r22, 0x2A	; 42
    36da:	72 e0       	ldi	r23, 0x02	; 2
    36dc:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <strcmp>
    36e0:	21 e0       	ldi	r18, 0x01	; 1
    36e2:	89 2b       	or	r24, r25
    36e4:	09 f0       	breq	.+2      	; 0x36e8 <_ZN16SerialProcessing20CheckInteralCommandsEP13SerialCommand+0x44>
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <SIMULATIONACTIVE>
    36ec:	00 00       	nop
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	08 95       	ret

000036fc <_ZN16SerialProcessing20CheckSpoolerCommandsEP13SerialCommand>:
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	00 d0       	rcall	.+0      	; 0x3702 <_ZN16SerialProcessing20CheckSpoolerCommandsEP13SerialCommand+0x6>
    3702:	1f 92       	push	r1
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	9a 83       	std	Y+2, r25	; 0x02
    370a:	89 83       	std	Y+1, r24	; 0x01
    370c:	7c 83       	std	Y+4, r23	; 0x04
    370e:	6b 83       	std	Y+3, r22	; 0x03
    3710:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SIMULATIONACTIVE>
    3714:	88 23       	and	r24, r24
    3716:	69 f0       	breq	.+26     	; 0x3732 <_ZN16SerialProcessing20CheckSpoolerCommandsEP13SerialCommand+0x36>
    3718:	8b 81       	ldd	r24, Y+3	; 0x03
    371a:	9c 81       	ldd	r25, Y+4	; 0x04
    371c:	fc 01       	movw	r30, r24
    371e:	82 81       	ldd	r24, Z+2	; 0x02
    3720:	93 81       	ldd	r25, Z+3	; 0x03
    3722:	bc 01       	movw	r22, r24
    3724:	8f e2       	ldi	r24, 0x2F	; 47
    3726:	92 e0       	ldi	r25, 0x02	; 2
    3728:	52 d3       	rcall	.+1700   	; 0x3dce <_Z10startsWithPKcS0_>
    372a:	88 23       	and	r24, r24
    372c:	61 f0       	breq	.+24     	; 0x3746 <_ZN16SerialProcessing20CheckSpoolerCommandsEP13SerialCommand+0x4a>
    372e:	10 d3       	rcall	.+1568   	; 0x3d50 <_Z18PrintRandomRPMDatav>
    3730:	0a c0       	rjmp	.+20     	; 0x3746 <_ZN16SerialProcessing20CheckSpoolerCommandsEP13SerialCommand+0x4a>
    3732:	8b 81       	ldd	r24, Y+3	; 0x03
    3734:	9c 81       	ldd	r25, Y+4	; 0x04
    3736:	fc 01       	movw	r30, r24
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	bc 01       	movw	r22, r24
    373e:	8b ec       	ldi	r24, 0xCB	; 203
    3740:	93 e0       	ldi	r25, 0x03	; 3
    3742:	0e 94 8b 42 	call	0x8516	; 0x8516 <_ZN5Print7printlnEPKc>
    3746:	00 00       	nop
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	08 95       	ret

00003756 <_ZN5PrintC1ERKS_>:
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	00 d0       	rcall	.+0      	; 0x375c <_ZN5PrintC1ERKS_+0x6>
    375c:	1f 92       	push	r1
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	9a 83       	std	Y+2, r25	; 0x02
    3764:	89 83       	std	Y+1, r24	; 0x01
    3766:	7c 83       	std	Y+4, r23	; 0x04
    3768:	6b 83       	std	Y+3, r22	; 0x03
    376a:	28 e0       	ldi	r18, 0x08	; 8
    376c:	33 e0       	ldi	r19, 0x03	; 3
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	fc 01       	movw	r30, r24
    3774:	31 83       	std	Z+1, r19	; 0x01
    3776:	20 83       	st	Z, r18
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	9c 81       	ldd	r25, Y+4	; 0x04
    377c:	fc 01       	movw	r30, r24
    377e:	22 81       	ldd	r18, Z+2	; 0x02
    3780:	33 81       	ldd	r19, Z+3	; 0x03
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	fc 01       	movw	r30, r24
    3788:	33 83       	std	Z+3, r19	; 0x03
    378a:	22 83       	std	Z+2, r18	; 0x02
    378c:	00 00       	nop
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	08 95       	ret

0000379c <_ZN6StreamC1ERKS_>:
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <_ZN6StreamC1ERKS_+0x6>
    37a2:	1f 92       	push	r1
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
    37ac:	7c 83       	std	Y+4, r23	; 0x04
    37ae:	6b 83       	std	Y+3, r22	; 0x03
    37b0:	2b 81       	ldd	r18, Y+3	; 0x03
    37b2:	3c 81       	ldd	r19, Y+4	; 0x04
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	b9 01       	movw	r22, r18
    37ba:	cd df       	rcall	.-102    	; 0x3756 <_ZN5PrintC1ERKS_>
    37bc:	28 ed       	ldi	r18, 0xD8	; 216
    37be:	32 e0       	ldi	r19, 0x02	; 2
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	fc 01       	movw	r30, r24
    37c6:	31 83       	std	Z+1, r19	; 0x01
    37c8:	20 83       	st	Z, r18
    37ca:	8b 81       	ldd	r24, Y+3	; 0x03
    37cc:	9c 81       	ldd	r25, Y+4	; 0x04
    37ce:	fc 01       	movw	r30, r24
    37d0:	84 81       	ldd	r24, Z+4	; 0x04
    37d2:	95 81       	ldd	r25, Z+5	; 0x05
    37d4:	a6 81       	ldd	r26, Z+6	; 0x06
    37d6:	b7 81       	ldd	r27, Z+7	; 0x07
    37d8:	29 81       	ldd	r18, Y+1	; 0x01
    37da:	3a 81       	ldd	r19, Y+2	; 0x02
    37dc:	f9 01       	movw	r30, r18
    37de:	84 83       	std	Z+4, r24	; 0x04
    37e0:	95 83       	std	Z+5, r25	; 0x05
    37e2:	a6 83       	std	Z+6, r26	; 0x06
    37e4:	b7 83       	std	Z+7, r27	; 0x07
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	fc 01       	movw	r30, r24
    37ec:	80 85       	ldd	r24, Z+8	; 0x08
    37ee:	91 85       	ldd	r25, Z+9	; 0x09
    37f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    37f2:	b3 85       	ldd	r27, Z+11	; 0x0b
    37f4:	29 81       	ldd	r18, Y+1	; 0x01
    37f6:	3a 81       	ldd	r19, Y+2	; 0x02
    37f8:	f9 01       	movw	r30, r18
    37fa:	80 87       	std	Z+8, r24	; 0x08
    37fc:	91 87       	std	Z+9, r25	; 0x09
    37fe:	a2 87       	std	Z+10, r26	; 0x0a
    3800:	b3 87       	std	Z+11, r27	; 0x0b
    3802:	00 00       	nop
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	08 95       	ret

00003812 <_ZN14HardwareSerialC1ERKS_>:
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	00 d0       	rcall	.+0      	; 0x3818 <_ZN14HardwareSerialC1ERKS_+0x6>
    3818:	1f 92       	push	r1
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	9a 83       	std	Y+2, r25	; 0x02
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	7c 83       	std	Y+4, r23	; 0x04
    3824:	6b 83       	std	Y+3, r22	; 0x03
    3826:	2b 81       	ldd	r18, Y+3	; 0x03
    3828:	3c 81       	ldd	r19, Y+4	; 0x04
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	b9 01       	movw	r22, r18
    3830:	b5 df       	rcall	.-150    	; 0x379c <_ZN6StreamC1ERKS_>
    3832:	26 ef       	ldi	r18, 0xF6	; 246
    3834:	32 e0       	ldi	r19, 0x02	; 2
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	9a 81       	ldd	r25, Y+2	; 0x02
    383a:	fc 01       	movw	r30, r24
    383c:	31 83       	std	Z+1, r19	; 0x01
    383e:	20 83       	st	Z, r18
    3840:	8b 81       	ldd	r24, Y+3	; 0x03
    3842:	9c 81       	ldd	r25, Y+4	; 0x04
    3844:	fc 01       	movw	r30, r24
    3846:	24 85       	ldd	r18, Z+12	; 0x0c
    3848:	35 85       	ldd	r19, Z+13	; 0x0d
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	9a 81       	ldd	r25, Y+2	; 0x02
    384e:	fc 01       	movw	r30, r24
    3850:	35 87       	std	Z+13, r19	; 0x0d
    3852:	24 87       	std	Z+12, r18	; 0x0c
    3854:	8b 81       	ldd	r24, Y+3	; 0x03
    3856:	9c 81       	ldd	r25, Y+4	; 0x04
    3858:	fc 01       	movw	r30, r24
    385a:	26 85       	ldd	r18, Z+14	; 0x0e
    385c:	37 85       	ldd	r19, Z+15	; 0x0f
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	9a 81       	ldd	r25, Y+2	; 0x02
    3862:	fc 01       	movw	r30, r24
    3864:	37 87       	std	Z+15, r19	; 0x0f
    3866:	26 87       	std	Z+14, r18	; 0x0e
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	fc 01       	movw	r30, r24
    386e:	20 89       	ldd	r18, Z+16	; 0x10
    3870:	31 89       	ldd	r19, Z+17	; 0x11
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	9a 81       	ldd	r25, Y+2	; 0x02
    3876:	fc 01       	movw	r30, r24
    3878:	31 8b       	std	Z+17, r19	; 0x11
    387a:	20 8b       	std	Z+16, r18	; 0x10
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	fc 01       	movw	r30, r24
    3882:	22 89       	ldd	r18, Z+18	; 0x12
    3884:	33 89       	ldd	r19, Z+19	; 0x13
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	fc 01       	movw	r30, r24
    388c:	33 8b       	std	Z+19, r19	; 0x13
    388e:	22 8b       	std	Z+18, r18	; 0x12
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	9c 81       	ldd	r25, Y+4	; 0x04
    3894:	fc 01       	movw	r30, r24
    3896:	24 89       	ldd	r18, Z+20	; 0x14
    3898:	35 89       	ldd	r19, Z+21	; 0x15
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	9a 81       	ldd	r25, Y+2	; 0x02
    389e:	fc 01       	movw	r30, r24
    38a0:	35 8b       	std	Z+21, r19	; 0x15
    38a2:	24 8b       	std	Z+20, r18	; 0x14
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	9c 81       	ldd	r25, Y+4	; 0x04
    38a8:	fc 01       	movw	r30, r24
    38aa:	26 89       	ldd	r18, Z+22	; 0x16
    38ac:	37 89       	ldd	r19, Z+23	; 0x17
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	9a 81       	ldd	r25, Y+2	; 0x02
    38b2:	fc 01       	movw	r30, r24
    38b4:	37 8b       	std	Z+23, r19	; 0x17
    38b6:	26 8b       	std	Z+22, r18	; 0x16
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	9c 81       	ldd	r25, Y+4	; 0x04
    38bc:	fc 01       	movw	r30, r24
    38be:	20 8d       	ldd	r18, Z+24	; 0x18
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	9a 81       	ldd	r25, Y+2	; 0x02
    38c4:	fc 01       	movw	r30, r24
    38c6:	20 8f       	std	Z+24, r18	; 0x18
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	9c 81       	ldd	r25, Y+4	; 0x04
    38cc:	fc 01       	movw	r30, r24
    38ce:	21 8d       	ldd	r18, Z+25	; 0x19
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	fc 01       	movw	r30, r24
    38d6:	21 8f       	std	Z+25, r18	; 0x19
    38d8:	8b 81       	ldd	r24, Y+3	; 0x03
    38da:	9c 81       	ldd	r25, Y+4	; 0x04
    38dc:	fc 01       	movw	r30, r24
    38de:	22 8d       	ldd	r18, Z+26	; 0x1a
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	fc 01       	movw	r30, r24
    38e6:	22 8f       	std	Z+26, r18	; 0x1a
    38e8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ea:	9c 81       	ldd	r25, Y+4	; 0x04
    38ec:	fc 01       	movw	r30, r24
    38ee:	23 8d       	ldd	r18, Z+27	; 0x1b
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	fc 01       	movw	r30, r24
    38f6:	23 8f       	std	Z+27, r18	; 0x1b
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	fc 01       	movw	r30, r24
    38fe:	24 8d       	ldd	r18, Z+28	; 0x1c
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	9a 81       	ldd	r25, Y+2	; 0x02
    3904:	fc 01       	movw	r30, r24
    3906:	24 8f       	std	Z+28, r18	; 0x1c
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	9a 81       	ldd	r25, Y+2	; 0x02
    390c:	2b 81       	ldd	r18, Y+3	; 0x03
    390e:	3c 81       	ldd	r19, Y+4	; 0x04
    3910:	40 e4       	ldi	r20, 0x40	; 64
    3912:	f9 01       	movw	r30, r18
    3914:	7d 96       	adiw	r30, 0x1d	; 29
    3916:	dc 01       	movw	r26, r24
    3918:	5d 96       	adiw	r26, 0x1d	; 29
    391a:	01 90       	ld	r0, Z+
    391c:	0d 92       	st	X+, r0
    391e:	4a 95       	dec	r20
    3920:	e1 f7       	brne	.-8      	; 0x391a <_ZN14HardwareSerialC1ERKS_+0x108>
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	9a 81       	ldd	r25, Y+2	; 0x02
    3926:	9c 01       	movw	r18, r24
    3928:	23 5a       	subi	r18, 0xA3	; 163
    392a:	3f 4f       	sbci	r19, 0xFF	; 255
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	9c 81       	ldd	r25, Y+4	; 0x04
    3930:	83 5a       	subi	r24, 0xA3	; 163
    3932:	9f 4f       	sbci	r25, 0xFF	; 255
    3934:	40 e4       	ldi	r20, 0x40	; 64
    3936:	fc 01       	movw	r30, r24
    3938:	d9 01       	movw	r26, r18
    393a:	01 90       	ld	r0, Z+
    393c:	0d 92       	st	X+, r0
    393e:	4a 95       	dec	r20
    3940:	e1 f7       	brne	.-8      	; 0x393a <_ZN14HardwareSerialC1ERKS_+0x128>
    3942:	00 00       	nop
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	08 95       	ret

00003952 <_Z11CheckSerialP14HardwareSerial>:
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	c2 5a       	subi	r28, 0xA2	; 162
    395c:	d1 09       	sbc	r29, r1
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	9e 01       	movw	r18, r28
    396a:	2f 55       	subi	r18, 0x5F	; 95
    396c:	3f 4f       	sbci	r19, 0xFF	; 255
    396e:	f9 01       	movw	r30, r18
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	80 83       	st	Z, r24
    3974:	ce 01       	movw	r24, r28
    3976:	8f 55       	subi	r24, 0x5F	; 95
    3978:	9f 4f       	sbci	r25, 0xFF	; 255
    397a:	fc 01       	movw	r30, r24
    397c:	20 81       	ld	r18, Z
    397e:	31 81       	ldd	r19, Z+1	; 0x01
    3980:	ce 01       	movw	r24, r28
    3982:	04 96       	adiw	r24, 0x04	; 4
    3984:	b9 01       	movw	r22, r18
    3986:	45 df       	rcall	.-374    	; 0x3812 <_ZN14HardwareSerialC1ERKS_>
    3988:	8d e0       	ldi	r24, 0x0D	; 13
    398a:	8a 83       	std	Y+2, r24	; 0x02
    398c:	19 82       	std	Y+1, r1	; 0x01
    398e:	ce 01       	movw	r24, r28
    3990:	8f 55       	subi	r24, 0x5F	; 95
    3992:	9f 4f       	sbci	r25, 0xFF	; 255
    3994:	fc 01       	movw	r30, r24
    3996:	80 81       	ld	r24, Z
    3998:	91 81       	ldd	r25, Z+1	; 0x01
    399a:	fc 01       	movw	r30, r24
    399c:	80 81       	ld	r24, Z
    399e:	91 81       	ldd	r25, Z+1	; 0x01
    39a0:	08 96       	adiw	r24, 0x08	; 8
    39a2:	fc 01       	movw	r30, r24
    39a4:	20 81       	ld	r18, Z
    39a6:	31 81       	ldd	r19, Z+1	; 0x01
    39a8:	ce 01       	movw	r24, r28
    39aa:	8f 55       	subi	r24, 0x5F	; 95
    39ac:	9f 4f       	sbci	r25, 0xFF	; 255
    39ae:	fc 01       	movw	r30, r24
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	f9 01       	movw	r30, r18
    39b6:	19 95       	eicall
    39b8:	18 16       	cp	r1, r24
    39ba:	19 06       	cpc	r1, r25
    39bc:	3c f4       	brge	.+14     	; 0x39cc <_Z11CheckSerialP14HardwareSerial+0x7a>
    39be:	99 81       	ldd	r25, Y+1	; 0x01
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	89 27       	eor	r24, r25
    39c4:	88 23       	and	r24, r24
    39c6:	11 f0       	breq	.+4      	; 0x39cc <_Z11CheckSerialP14HardwareSerial+0x7a>
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	01 c0       	rjmp	.+2      	; 0x39ce <_Z11CheckSerialP14HardwareSerial+0x7c>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	88 23       	and	r24, r24
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <_Z11CheckSerialP14HardwareSerial+0x82>
    39d2:	3e c0       	rjmp	.+124    	; 0x3a50 <_Z11CheckSerialP14HardwareSerial+0xfe>
    39d4:	ce 01       	movw	r24, r28
    39d6:	8f 55       	subi	r24, 0x5F	; 95
    39d8:	9f 4f       	sbci	r25, 0xFF	; 255
    39da:	fc 01       	movw	r30, r24
    39dc:	80 81       	ld	r24, Z
    39de:	91 81       	ldd	r25, Z+1	; 0x01
    39e0:	fc 01       	movw	r30, r24
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	0a 96       	adiw	r24, 0x0a	; 10
    39e8:	fc 01       	movw	r30, r24
    39ea:	20 81       	ld	r18, Z
    39ec:	31 81       	ldd	r19, Z+1	; 0x01
    39ee:	ce 01       	movw	r24, r28
    39f0:	8f 55       	subi	r24, 0x5F	; 95
    39f2:	9f 4f       	sbci	r25, 0xFF	; 255
    39f4:	fc 01       	movw	r30, r24
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	f9 01       	movw	r30, r18
    39fc:	19 95       	eicall
    39fe:	8b 83       	std	Y+3, r24	; 0x03
    3a00:	9b 81       	ldd	r25, Y+3	; 0x03
    3a02:	8a 81       	ldd	r24, Y+2	; 0x02
    3a04:	98 17       	cp	r25, r24
    3a06:	b9 f0       	breq	.+46     	; 0x3a36 <_Z11CheckSerialP14HardwareSerial+0xe4>
    3a08:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a0c:	88 2f       	mov	r24, r24
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	83 5c       	subi	r24, 0xC3	; 195
    3a12:	9c 4f       	sbci	r25, 0xFC	; 252
    3a14:	2b 81       	ldd	r18, Y+3	; 0x03
    3a16:	fc 01       	movw	r30, r24
    3a18:	20 83       	st	Z, r18
    3a1a:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a1e:	8f 5f       	subi	r24, 0xFF	; 255
    3a20:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a24:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a28:	80 32       	cpi	r24, 0x20	; 32
    3a2a:	08 f4       	brcc	.+2      	; 0x3a2e <_Z11CheckSerialP14HardwareSerial+0xdc>
    3a2c:	b0 cf       	rjmp	.-160    	; 0x398e <_Z11CheckSerialP14HardwareSerial+0x3c>
    3a2e:	8f e1       	ldi	r24, 0x1F	; 31
    3a30:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a34:	ac cf       	rjmp	.-168    	; 0x398e <_Z11CheckSerialP14HardwareSerial+0x3c>
    3a36:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	83 5c       	subi	r24, 0xC3	; 195
    3a40:	9c 4f       	sbci	r25, 0xFC	; 252
    3a42:	fc 01       	movw	r30, r24
    3a44:	10 82       	st	Z, r1
    3a46:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <_ZZ11CheckSerialP14HardwareSerialE3ndx>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	9f cf       	rjmp	.-194    	; 0x398e <_Z11CheckSerialP14HardwareSerial+0x3c>
    3a50:	ce 01       	movw	r24, r28
    3a52:	8f 55       	subi	r24, 0x5F	; 95
    3a54:	9f 4f       	sbci	r25, 0xFF	; 255
    3a56:	fc 01       	movw	r30, r24
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	80 81       	ld	r24, Z
    3a60:	91 81       	ldd	r25, Z+1	; 0x01
    3a62:	08 96       	adiw	r24, 0x08	; 8
    3a64:	fc 01       	movw	r30, r24
    3a66:	20 81       	ld	r18, Z
    3a68:	31 81       	ldd	r19, Z+1	; 0x01
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	8f 55       	subi	r24, 0x5F	; 95
    3a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a70:	fc 01       	movw	r30, r24
    3a72:	80 81       	ld	r24, Z
    3a74:	91 81       	ldd	r25, Z+1	; 0x01
    3a76:	f9 01       	movw	r30, r18
    3a78:	19 95       	eicall
    3a7a:	21 e0       	ldi	r18, 0x01	; 1
    3a7c:	18 16       	cp	r1, r24
    3a7e:	19 06       	cpc	r1, r25
    3a80:	0c f0       	brlt	.+2      	; 0x3a84 <_Z11CheckSerialP14HardwareSerial+0x132>
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	22 23       	and	r18, r18
    3a86:	b1 f0       	breq	.+44     	; 0x3ab4 <_Z11CheckSerialP14HardwareSerial+0x162>
    3a88:	ce 01       	movw	r24, r28
    3a8a:	8f 55       	subi	r24, 0x5F	; 95
    3a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8e:	fc 01       	movw	r30, r24
    3a90:	80 81       	ld	r24, Z
    3a92:	91 81       	ldd	r25, Z+1	; 0x01
    3a94:	fc 01       	movw	r30, r24
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	0a 96       	adiw	r24, 0x0a	; 10
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	20 81       	ld	r18, Z
    3aa0:	31 81       	ldd	r19, Z+1	; 0x01
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	8f 55       	subi	r24, 0x5F	; 95
    3aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	f9 01       	movw	r30, r18
    3ab0:	19 95       	eicall
    3ab2:	ce cf       	rjmp	.-100    	; 0x3a50 <_Z11CheckSerialP14HardwareSerial+0xfe>
    3ab4:	8d e3       	ldi	r24, 0x3D	; 61
    3ab6:	93 e0       	ldi	r25, 0x03	; 3
    3ab8:	ce 55       	subi	r28, 0x5E	; 94
    3aba:	df 4f       	sbci	r29, 0xFF	; 255
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	08 95       	ret

00003acc <_Z13GetSerialArgsPc>:




SerialCommand GetSerialArgs(char *serialData)
{
    3acc:	2f 92       	push	r2
    3ace:	3f 92       	push	r3
    3ad0:	4f 92       	push	r4
    3ad2:	5f 92       	push	r5
    3ad4:	6f 92       	push	r6
    3ad6:	7f 92       	push	r7
    3ad8:	8f 92       	push	r8
    3ada:	9f 92       	push	r9
    3adc:	af 92       	push	r10
    3ade:	bf 92       	push	r11
    3ae0:	cf 92       	push	r12
    3ae2:	df 92       	push	r13
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	a8 97       	sbiw	r28, 0x28	; 40
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	f8 94       	cli
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	cd bf       	out	0x3d, r28	; 61
    3b00:	98 a7       	std	Y+40, r25	; 0x28
    3b02:	8f a3       	std	Y+39, r24	; 0x27
	SerialCommand c;
	char delim[] = ";";
    3b04:	8b e3       	ldi	r24, 0x3B	; 59
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9a 8b       	std	Y+18, r25	; 0x12
    3b0a:	89 8b       	std	Y+17, r24	; 0x11
	char *ptr = strtok(serialData, delim);
    3b0c:	9e 01       	movw	r18, r28
    3b0e:	2f 5e       	subi	r18, 0xEF	; 239
    3b10:	3f 4f       	sbci	r19, 0xFF	; 255
    3b12:	8f a1       	ldd	r24, Y+39	; 0x27
    3b14:	98 a5       	ldd	r25, Y+40	; 0x28
    3b16:	b9 01       	movw	r22, r18
    3b18:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <strtok>
    3b1c:	9a 83       	std	Y+2, r25	; 0x02
    3b1e:	89 83       	std	Y+1, r24	; 0x01
	uint16_t loopCounter = 0;
    3b20:	1c 82       	std	Y+4, r1	; 0x04
    3b22:	1b 82       	std	Y+3, r1	; 0x03
	char *splitStrings[10] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
    3b24:	24 e1       	ldi	r18, 0x14	; 20
    3b26:	ce 01       	movw	r24, r28
    3b28:	43 96       	adiw	r24, 0x13	; 19
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	32 2f       	mov	r19, r18
    3b2e:	11 92       	st	Z+, r1
    3b30:	3a 95       	dec	r19
    3b32:	e9 f7       	brne	.-6      	; 0x3b2e <_Z13GetSerialArgsPc+0x62>
	
	while(ptr != NULL)
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	9a 81       	ldd	r25, Y+2	; 0x02
    3b38:	89 2b       	or	r24, r25
    3b3a:	11 f1       	breq	.+68     	; 0x3b80 <_Z13GetSerialArgsPc+0xb4>
	{
		if (loopCounter <= 10){ splitStrings[loopCounter] = ptr;}
    3b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b40:	0b 97       	sbiw	r24, 0x0b	; 11
    3b42:	78 f4       	brcc	.+30     	; 0x3b62 <_Z13GetSerialArgsPc+0x96>
    3b44:	8b 81       	ldd	r24, Y+3	; 0x03
    3b46:	9c 81       	ldd	r25, Y+4	; 0x04
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	9e 01       	movw	r18, r28
    3b4e:	2f 5f       	subi	r18, 0xFF	; 255
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	82 0f       	add	r24, r18
    3b54:	93 1f       	adc	r25, r19
    3b56:	42 96       	adiw	r24, 0x12	; 18
    3b58:	29 81       	ldd	r18, Y+1	; 0x01
    3b5a:	3a 81       	ldd	r19, Y+2	; 0x02
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	31 83       	std	Z+1, r19	; 0x01
    3b60:	20 83       	st	Z, r18
		ptr = strtok(NULL, delim);
    3b62:	ce 01       	movw	r24, r28
    3b64:	41 96       	adiw	r24, 0x11	; 17
    3b66:	bc 01       	movw	r22, r24
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	0e 94 e2 64 	call	0xc9c4	; 0xc9c4 <strtok>
    3b70:	9a 83       	std	Y+2, r25	; 0x02
    3b72:	89 83       	std	Y+1, r24	; 0x01
		loopCounter++;
    3b74:	8b 81       	ldd	r24, Y+3	; 0x03
    3b76:	9c 81       	ldd	r25, Y+4	; 0x04
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	9c 83       	std	Y+4, r25	; 0x04
    3b7c:	8b 83       	std	Y+3, r24	; 0x03
	char delim[] = ";";
	char *ptr = strtok(serialData, delim);
	uint16_t loopCounter = 0;
	char *splitStrings[10] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
	
	while(ptr != NULL)
    3b7e:	da cf       	rjmp	.-76     	; 0x3b34 <_Z13GetSerialArgsPc+0x68>
	//for (int i = loopCounter; i < 10; i++)
	//{
	//splitStrings[i] = NULL; //null out rest of point array
	//}

	if (!ExistsInIntArray(int_hardwareTypes, array_size(int_hardwareTypes), atoi(splitStrings[0]))){return c;}
    3b80:	8b 89       	ldd	r24, Y+19	; 0x13
    3b82:	9c 89       	ldd	r25, Y+20	; 0x14
    3b84:	0e 94 c5 64 	call	0xc98a	; 0xc98a <atoi>
    3b88:	8c 01       	movw	r16, r24
    3b8a:	8a e0       	ldi	r24, 0x0A	; 10
    3b8c:	92 e0       	ldi	r25, 0x02	; 2
    3b8e:	65 d1       	rcall	.+714    	; 0x3e5a <_Z10array_sizeILj5EjEjRAT__T0_>
    3b90:	a8 01       	movw	r20, r16
    3b92:	bc 01       	movw	r22, r24
    3b94:	8a e0       	ldi	r24, 0x0A	; 10
    3b96:	92 e0       	ldi	r25, 0x02	; 2
    3b98:	61 d0       	rcall	.+194    	; 0x3c5c <_Z16ExistsInIntArrayPjjj>
    3b9a:	98 2f       	mov	r25, r24
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	89 27       	eor	r24, r25
    3ba0:	88 23       	and	r24, r24
    3ba2:	51 f0       	breq	.+20     	; 0x3bb8 <_Z13GetSerialArgsPc+0xec>
    3ba4:	86 e0       	ldi	r24, 0x06	; 6
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	3b 96       	adiw	r30, 0x0b	; 11
    3baa:	de 01       	movw	r26, r28
    3bac:	15 96       	adiw	r26, 0x05	; 5
    3bae:	01 90       	ld	r0, Z+
    3bb0:	0d 92       	st	X+, r0
    3bb2:	8a 95       	dec	r24
    3bb4:	e1 f7       	brne	.-8      	; 0x3bae <_Z13GetSerialArgsPc+0xe2>
    3bb6:	17 c0       	rjmp	.+46     	; 0x3be6 <_Z13GetSerialArgsPc+0x11a>
	
	
	c.hardwareType = atoi(splitStrings[0]);
    3bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bba:	9c 89       	ldd	r25, Y+20	; 0x14
    3bbc:	0e 94 c5 64 	call	0xc98a	; 0xc98a <atoi>
    3bc0:	9c 87       	std	Y+12, r25	; 0x0c
    3bc2:	8b 87       	std	Y+11, r24	; 0x0b
	c.command = splitStrings[1];
    3bc4:	8d 89       	ldd	r24, Y+21	; 0x15
    3bc6:	9e 89       	ldd	r25, Y+22	; 0x16
    3bc8:	9e 87       	std	Y+14, r25	; 0x0e
    3bca:	8d 87       	std	Y+13, r24	; 0x0d
	c.value = splitStrings[2];
    3bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bce:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd0:	98 8b       	std	Y+16, r25	; 0x10
    3bd2:	8f 87       	std	Y+15, r24	; 0x0f
	
	return c;
    3bd4:	86 e0       	ldi	r24, 0x06	; 6
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	3b 96       	adiw	r30, 0x0b	; 11
    3bda:	de 01       	movw	r26, r28
    3bdc:	15 96       	adiw	r26, 0x05	; 5
    3bde:	01 90       	ld	r0, Z+
    3be0:	0d 92       	st	X+, r0
    3be2:	8a 95       	dec	r24
    3be4:	e1 f7       	brne	.-8      	; 0x3bde <_Z13GetSerialArgsPc+0x112>
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	5d 81       	ldd	r21, Y+5	; 0x05
    3bea:	40 e0       	ldi	r20, 0x00	; 0
    3bec:	4e 81       	ldd	r20, Y+6	; 0x06
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	3f 81       	ldd	r19, Y+7	; 0x07
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	28 85       	ldd	r18, Y+8	; 0x08
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	99 85       	ldd	r25, Y+9	; 0x09
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bfe:	25 2e       	mov	r2, r21
    3c00:	34 2e       	mov	r3, r20
    3c02:	43 2e       	mov	r4, r19
    3c04:	52 2e       	mov	r5, r18
    3c06:	69 2e       	mov	r6, r25
    3c08:	78 2e       	mov	r7, r24
    3c0a:	a2 2c       	mov	r10, r2
    3c0c:	b3 2c       	mov	r11, r3
    3c0e:	c4 2c       	mov	r12, r4
    3c10:	d5 2c       	mov	r13, r5
    3c12:	e6 2c       	mov	r14, r6
    3c14:	f7 2c       	mov	r15, r7
    3c16:	08 2d       	mov	r16, r8
    3c18:	19 2d       	mov	r17, r9

}
    3c1a:	2a 2d       	mov	r18, r10
    3c1c:	3b 2d       	mov	r19, r11
    3c1e:	4c 2d       	mov	r20, r12
    3c20:	5d 2d       	mov	r21, r13
    3c22:	6e 2d       	mov	r22, r14
    3c24:	7f 2d       	mov	r23, r15
    3c26:	80 2f       	mov	r24, r16
    3c28:	91 2f       	mov	r25, r17
    3c2a:	a8 96       	adiw	r28, 0x28	; 40
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	f8 94       	cli
    3c30:	de bf       	out	0x3e, r29	; 62
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	cd bf       	out	0x3d, r28	; 61
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	1f 91       	pop	r17
    3c3c:	0f 91       	pop	r16
    3c3e:	ff 90       	pop	r15
    3c40:	ef 90       	pop	r14
    3c42:	df 90       	pop	r13
    3c44:	cf 90       	pop	r12
    3c46:	bf 90       	pop	r11
    3c48:	af 90       	pop	r10
    3c4a:	9f 90       	pop	r9
    3c4c:	8f 90       	pop	r8
    3c4e:	7f 90       	pop	r7
    3c50:	6f 90       	pop	r6
    3c52:	5f 90       	pop	r5
    3c54:	4f 90       	pop	r4
    3c56:	3f 90       	pop	r3
    3c58:	2f 90       	pop	r2
    3c5a:	08 95       	ret

00003c5c <_Z16ExistsInIntArrayPjjj>:

bool ExistsInIntArray(uint16_t *arrayToCheck, size_t arraySize, uint16_t numberToCheck)
{
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	28 97       	sbiw	r28, 0x08	; 8
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	9c 83       	std	Y+4, r25	; 0x04
    3c72:	8b 83       	std	Y+3, r24	; 0x03
    3c74:	7e 83       	std	Y+6, r23	; 0x06
    3c76:	6d 83       	std	Y+5, r22	; 0x05
    3c78:	58 87       	std	Y+8, r21	; 0x08
    3c7a:	4f 83       	std	Y+7, r20	; 0x07
	

	for (unsigned int i = 0; i < arraySize; i++)
    3c7c:	1a 82       	std	Y+2, r1	; 0x02
    3c7e:	19 82       	std	Y+1, r1	; 0x01
    3c80:	29 81       	ldd	r18, Y+1	; 0x01
    3c82:	3a 81       	ldd	r19, Y+2	; 0x02
    3c84:	8d 81       	ldd	r24, Y+5	; 0x05
    3c86:	9e 81       	ldd	r25, Y+6	; 0x06
    3c88:	28 17       	cp	r18, r24
    3c8a:	39 07       	cpc	r19, r25
    3c8c:	c0 f4       	brcc	.+48     	; 0x3cbe <_Z16ExistsInIntArrayPjjj+0x62>
	{
		if (arrayToCheck[i] == numberToCheck)
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	9a 81       	ldd	r25, Y+2	; 0x02
    3c92:	88 0f       	add	r24, r24
    3c94:	99 1f       	adc	r25, r25
    3c96:	2b 81       	ldd	r18, Y+3	; 0x03
    3c98:	3c 81       	ldd	r19, Y+4	; 0x04
    3c9a:	82 0f       	add	r24, r18
    3c9c:	93 1f       	adc	r25, r19
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	20 81       	ld	r18, Z
    3ca2:	31 81       	ldd	r19, Z+1	; 0x01
    3ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca6:	98 85       	ldd	r25, Y+8	; 0x08
    3ca8:	28 17       	cp	r18, r24
    3caa:	39 07       	cpc	r19, r25
    3cac:	11 f4       	brne	.+4      	; 0x3cb2 <_Z16ExistsInIntArrayPjjj+0x56>
		{
			return true;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	07 c0       	rjmp	.+14     	; 0x3cc0 <_Z16ExistsInIntArrayPjjj+0x64>

bool ExistsInIntArray(uint16_t *arrayToCheck, size_t arraySize, uint16_t numberToCheck)
{
	

	for (unsigned int i = 0; i < arraySize; i++)
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	9a 83       	std	Y+2, r25	; 0x02
    3cba:	89 83       	std	Y+1, r24	; 0x01
    3cbc:	e1 cf       	rjmp	.-62     	; 0x3c80 <_Z16ExistsInIntArrayPjjj+0x24>
		if (arrayToCheck[i] == numberToCheck)
		{
			return true;
		}
	}
	return false;
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
}
    3cc0:	28 96       	adiw	r28, 0x08	; 8
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	08 95       	ret

00003cd2 <_Z17BuildSerialOutputP13SerialCommandPc>:

void BuildSerialOutput(SerialCommand *sCommand, char *outputBuffer)
{
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <_Z17BuildSerialOutputP13SerialCommandPc+0x6>
    3cd8:	1f 92       	push	r1
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    3ce2:	7c 83       	std	Y+4, r23	; 0x04
    3ce4:	6b 83       	std	Y+3, r22	; 0x03
	sprintf(outputBuffer, OUTPUT_STRING_FORMAT, sCommand->hardwareType, sCommand->command, sCommand->value);
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	fc 01       	movw	r30, r24
    3cec:	44 81       	ldd	r20, Z+4	; 0x04
    3cee:	55 81       	ldd	r21, Z+5	; 0x05
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	22 81       	ldd	r18, Z+2	; 0x02
    3cf8:	33 81       	ldd	r19, Z+3	; 0x03
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfe:	fc 01       	movw	r30, r24
    3d00:	80 81       	ld	r24, Z
    3d02:	91 81       	ldd	r25, Z+1	; 0x01
    3d04:	65 2f       	mov	r22, r21
    3d06:	6f 93       	push	r22
    3d08:	4f 93       	push	r20
    3d0a:	43 2f       	mov	r20, r19
    3d0c:	4f 93       	push	r20
    3d0e:	2f 93       	push	r18
    3d10:	29 2f       	mov	r18, r25
    3d12:	2f 93       	push	r18
    3d14:	8f 93       	push	r24
    3d16:	86 e3       	ldi	r24, 0x36	; 54
    3d18:	92 e0       	ldi	r25, 0x02	; 2
    3d1a:	89 2f       	mov	r24, r25
    3d1c:	8f 93       	push	r24
    3d1e:	86 e3       	ldi	r24, 0x36	; 54
    3d20:	92 e0       	ldi	r25, 0x02	; 2
    3d22:	8f 93       	push	r24
    3d24:	8c 81       	ldd	r24, Y+4	; 0x04
    3d26:	8f 93       	push	r24
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	8f 93       	push	r24
    3d2c:	0e 94 b1 65 	call	0xcb62	; 0xcb62 <sprintf>
    3d30:	8d b7       	in	r24, 0x3d	; 61
    3d32:	9e b7       	in	r25, 0x3e	; 62
    3d34:	0a 96       	adiw	r24, 0x0a	; 10
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
}
    3d40:	00 00       	nop
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	08 95       	ret

00003d50 <_Z18PrintRandomRPMDatav>:
template<size_t SIZE, class T> inline size_t array_size(T (&arr)[SIZE]) {
	return SIZE;
}

void PrintRandomRPMData()
{
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	00 d0       	rcall	.+0      	; 0x3d56 <_Z18PrintRandomRPMDatav+0x6>
    3d56:	1f 92       	push	r1
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
	long rpm = random(10, 15);
    3d5c:	2f e0       	ldi	r18, 0x0F	; 15
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e0       	ldi	r20, 0x00	; 0
    3d62:	50 e0       	ldi	r21, 0x00	; 0
    3d64:	6a e0       	ldi	r22, 0x0A	; 10
    3d66:	70 e0       	ldi	r23, 0x00	; 0
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	0e 94 62 48 	call	0x90c4	; 0x90c4 <_Z6randomll>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	9a 83       	std	Y+2, r25	; 0x02
    3d78:	ab 83       	std	Y+3, r26	; 0x03
    3d7a:	bc 83       	std	Y+4, r27	; 0x04

	Serial.print(hardwareType.spooler);
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	4a e0       	ldi	r20, 0x0A	; 10
    3d82:	50 e0       	ldi	r21, 0x00	; 0
    3d84:	bc 01       	movw	r22, r24
    3d86:	8b ec       	ldi	r24, 0xCB	; 203
    3d88:	93 e0       	ldi	r25, 0x03	; 3
    3d8a:	0e 94 a9 41 	call	0x8352	; 0x8352 <_ZN5Print5printEji>
	Serial.print(";getrpm = ");
    3d8e:	6f e3       	ldi	r22, 0x3F	; 63
    3d90:	72 e0       	ldi	r23, 0x02	; 2
    3d92:	8b ec       	ldi	r24, 0xCB	; 203
    3d94:	93 e0       	ldi	r25, 0x03	; 3
    3d96:	0e 94 54 41 	call	0x82a8	; 0x82a8 <_ZN5Print5printEPKc>
	Serial.print(rpm);
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3da0:	bc 81       	ldd	r27, Y+4	; 0x04
    3da2:	2a e0       	ldi	r18, 0x0A	; 10
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	ac 01       	movw	r20, r24
    3da8:	bd 01       	movw	r22, r26
    3daa:	8b ec       	ldi	r24, 0xCB	; 203
    3dac:	93 e0       	ldi	r25, 0x03	; 3
    3dae:	0e 94 cb 41 	call	0x8396	; 0x8396 <_ZN5Print5printEli>
	Serial.println(";");
    3db2:	65 e1       	ldi	r22, 0x15	; 21
    3db4:	72 e0       	ldi	r23, 0x02	; 2
    3db6:	8b ec       	ldi	r24, 0xCB	; 203
    3db8:	93 e0       	ldi	r25, 0x03	; 3
    3dba:	0e 94 8b 42 	call	0x8516	; 0x8516 <_ZN5Print7printlnEPKc>
}
    3dbe:	00 00       	nop
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	08 95       	ret

00003dce <_Z10startsWithPKcS0_>:

bool startsWith(const char *pre, const char *str)
{
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	28 97       	sbiw	r28, 0x08	; 8
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	cd bf       	out	0x3d, r28	; 61
    3de2:	9e 83       	std	Y+6, r25	; 0x06
    3de4:	8d 83       	std	Y+5, r24	; 0x05
    3de6:	78 87       	std	Y+8, r23	; 0x08
    3de8:	6f 83       	std	Y+7, r22	; 0x07
	size_t lenpre = strlen(pre),
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	9e 81       	ldd	r25, Y+6	; 0x06
    3dee:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    3df2:	9a 83       	std	Y+2, r25	; 0x02
    3df4:	89 83       	std	Y+1, r24	; 0x01
	lenstr = strlen(str);
    3df6:	8f 81       	ldd	r24, Y+7	; 0x07
    3df8:	98 85       	ldd	r25, Y+8	; 0x08
    3dfa:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    3dfe:	9c 83       	std	Y+4, r25	; 0x04
    3e00:	8b 83       	std	Y+3, r24	; 0x03
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    3e02:	2b 81       	ldd	r18, Y+3	; 0x03
    3e04:	3c 81       	ldd	r19, Y+4	; 0x04
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0a:	28 17       	cp	r18, r24
    3e0c:	39 07       	cpc	r19, r25
    3e0e:	68 f0       	brcs	.+26     	; 0x3e2a <_Z10startsWithPKcS0_+0x5c>
    3e10:	49 81       	ldd	r20, Y+1	; 0x01
    3e12:	5a 81       	ldd	r21, Y+2	; 0x02
    3e14:	2f 81       	ldd	r18, Y+7	; 0x07
    3e16:	38 85       	ldd	r19, Y+8	; 0x08
    3e18:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e1c:	b9 01       	movw	r22, r18
    3e1e:	0e 94 0e 65 	call	0xca1c	; 0xca1c <strncmp>
    3e22:	89 2b       	or	r24, r25
    3e24:	11 f4       	brne	.+4      	; 0x3e2a <_Z10startsWithPKcS0_+0x5c>
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	01 c0       	rjmp	.+2      	; 0x3e2c <_Z10startsWithPKcS0_+0x5e>
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
}
    3e2c:	28 96       	adiw	r28, 0x08	; 8
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	08 95       	ret

00003e3e <_ZN16SerialProcessingD1Ev>:

// default destructor
SerialProcessing::~SerialProcessing()
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	1f 92       	push	r1
    3e44:	1f 92       	push	r1
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	89 83       	std	Y+1, r24	; 0x01
{
} //~SerialProcessing
    3e4e:	00 00       	nop
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	08 95       	ret

00003e5a <_Z10array_sizeILj5EjEjRAT__T0_>:
void BuildSerialOutput(SerialCommand *sCommand, char *outputBuffer)
{
	sprintf(outputBuffer, OUTPUT_STRING_FORMAT, sCommand->hardwareType, sCommand->command, sCommand->value);
}

template<size_t SIZE, class T> inline size_t array_size(T (&arr)[SIZE]) {
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	1f 92       	push	r1
    3e60:	1f 92       	push	r1
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	9a 83       	std	Y+2, r25	; 0x02
    3e68:	89 83       	std	Y+1, r24	; 0x01
	return SIZE;
    3e6a:	85 e0       	ldi	r24, 0x05	; 5
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
}
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	08 95       	ret

00003e78 <_Z41__static_initialization_and_destruction_0ii>:
}

// default destructor
SerialProcessing::~SerialProcessing()
{
} //~SerialProcessing
    3e78:	cf 93       	push	r28
    3e7a:	df 93       	push	r29
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <_Z41__static_initialization_and_destruction_0ii+0x6>
    3e7e:	1f 92       	push	r1
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	9a 83       	std	Y+2, r25	; 0x02
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	7c 83       	std	Y+4, r23	; 0x04
    3e8a:	6b 83       	std	Y+3, r22	; 0x03
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	39 f4       	brne	.+14     	; 0x3ea2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    3e94:	8b 81       	ldd	r24, Y+3	; 0x03
    3e96:	9c 81       	ldd	r25, Y+4	; 0x04
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	19 f4       	brne	.+6      	; 0x3ea2 <_Z41__static_initialization_and_destruction_0ii+0x2a>


template<size_t SIZE, class T> inline size_t array_size(T (&arr)[SIZE]);

SerialProcessing *SerialProcessing::firstInstance;
SerialPortExpander serialPortExpander;
    3e9c:	8f e5       	ldi	r24, 0x5F	; 95
    3e9e:	93 e0       	ldi	r25, 0x03	; 3
    3ea0:	ce d9       	rcall	.-3172   	; 0x323e <_ZN18SerialPortExpanderC1Ev>
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	89 2b       	or	r24, r25
    3ea8:	39 f4       	brne	.+14     	; 0x3eb8 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	9c 81       	ldd	r25, Y+4	; 0x04
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	19 f4       	brne	.+6      	; 0x3eb8 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3eb2:	8f e5       	ldi	r24, 0x5F	; 95
    3eb4:	93 e0       	ldi	r25, 0x03	; 3
    3eb6:	ef da       	rcall	.-2594   	; 0x3496 <_ZN18SerialPortExpanderD1Ev>
}

// default destructor
SerialProcessing::~SerialProcessing()
{
} //~SerialProcessing
    3eb8:	00 00       	nop
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	08 95       	ret

00003ec8 <_GLOBAL__sub_I__ZN16SerialProcessing13firstInstanceE>:
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	6f ef       	ldi	r22, 0xFF	; 255
    3ed2:	7f ef       	ldi	r23, 0xFF	; 255
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	cf df       	rcall	.-98     	; 0x3e78 <_Z41__static_initialization_and_destruction_0ii>
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	08 95       	ret

00003ee0 <_GLOBAL__sub_D__ZN16SerialProcessing13firstInstanceE>:
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	6f ef       	ldi	r22, 0xFF	; 255
    3eea:	7f ef       	ldi	r23, 0xFF	; 255
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	c3 df       	rcall	.-122    	; 0x3e78 <_Z41__static_initialization_and_destruction_0ii>
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	08 95       	ret

00003ef8 <setup>:
SerialProcessing serialProcessing;



void setup()
{
    3ef8:	ef 92       	push	r14
    3efa:	ff 92       	push	r15
    3efc:	0f 93       	push	r16
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
	Serial.begin(SERIAL_BAUD);
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	52 ec       	ldi	r21, 0xC2	; 194
    3f0a:	61 e0       	ldi	r22, 0x01	; 1
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	8b ec       	ldi	r24, 0xCB	; 203
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	73 d9       	rcall	.-3354   	; 0x31fa <_ZN14HardwareSerial5beginEm>
	
	
	spcProcessing.init();
    3f14:	8e ea       	ldi	r24, 0xAE	; 174
    3f16:	93 e0       	ldi	r25, 0x03	; 3
    3f18:	8c d1       	rcall	.+792    	; 0x4232 <_ZN13SpcProcessing4initEv>
	//serialPortExpander.init();
	screen.init();
    3f1a:	87 ec       	ldi	r24, 0xC7	; 199
    3f1c:	93 e0       	ldi	r25, 0x03	; 3
    3f1e:	b0 d8       	rcall	.-3744   	; 0x3080 <_ZN6Screen4initEv>
	serialProcessing.init();
    3f20:	88 ec       	ldi	r24, 0xC8	; 200
    3f22:	93 e0       	ldi	r25, 0x03	; 3
    3f24:	fd da       	rcall	.-2566   	; 0x3520 <_ZN16SerialProcessing4initEv>
    3f26:	e1 2c       	mov	r14, r1
	TaskCheckSPC
	,  (const portCHAR *)"CheckSPC"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,   2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3f28:	f1 2c       	mov	r15, r1
    3f2a:	02 e0       	ldi	r16, 0x02	; 2
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	44 ef       	ldi	r20, 0xF4	; 244
    3f32:	51 e0       	ldi	r21, 0x01	; 1
    3f34:	6a e4       	ldi	r22, 0x4A	; 74
    3f36:	72 e0       	ldi	r23, 0x02	; 2
    3f38:	83 ee       	ldi	r24, 0xE3	; 227
    3f3a:	9f e1       	ldi	r25, 0x1F	; 31
    3f3c:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <xTaskCreate>
    3f40:	e1 2c       	mov	r14, r1
	TaskCheckSerialExpander
	,  (const portCHAR *)"CheckSerialExpander"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3f42:	f1 2c       	mov	r15, r1
    3f44:	02 e0       	ldi	r16, 0x02	; 2
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	44 ef       	ldi	r20, 0xF4	; 244
    3f4c:	51 e0       	ldi	r21, 0x01	; 1
    3f4e:	63 e5       	ldi	r22, 0x53	; 83
    3f50:	72 e0       	ldi	r23, 0x02	; 2
    3f52:	83 ef       	ldi	r24, 0xF3	; 243
    3f54:	9f e1       	ldi	r25, 0x1F	; 31
    3f56:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <xTaskCreate>
    3f5a:	e1 2c       	mov	r14, r1
	TaskRunScreen
	,  (const portCHAR *)"RunScreen"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3f5c:	f1 2c       	mov	r15, r1
    3f5e:	02 e0       	ldi	r16, 0x02	; 2
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	44 ef       	ldi	r20, 0xF4	; 244
    3f66:	51 e0       	ldi	r21, 0x01	; 1
    3f68:	67 e6       	ldi	r22, 0x67	; 103
    3f6a:	72 e0       	ldi	r23, 0x02	; 2
    3f6c:	80 e1       	ldi	r24, 0x10	; 16
    3f6e:	90 e2       	ldi	r25, 0x20	; 32
    3f70:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <xTaskCreate>
    3f74:	e1 2c       	mov	r14, r1
	TaskCheckSerialCommands
	,  (const portCHAR *)"CheckSerialCommands"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3f76:	f1 2c       	mov	r15, r1
    3f78:	02 e0       	ldi	r16, 0x02	; 2
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	44 ef       	ldi	r20, 0xF4	; 244
    3f80:	51 e0       	ldi	r21, 0x01	; 1
    3f82:	61 e7       	ldi	r22, 0x71	; 113
    3f84:	72 e0       	ldi	r23, 0x02	; 2
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	90 e2       	ldi	r25, 0x20	; 32
    3f8a:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <xTaskCreate>
    3f8e:	e1 2c       	mov	r14, r1
	TaskRunSimulation
	,  (const portCHAR *)"RunSimulation"   // A name just for humans
	,  500  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
    3f90:	f1 2c       	mov	r15, r1
    3f92:	02 e0       	ldi	r16, 0x02	; 2
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	44 ef       	ldi	r20, 0xF4	; 244
    3f9a:	51 e0       	ldi	r21, 0x01	; 1
    3f9c:	65 e8       	ldi	r22, 0x85	; 133
    3f9e:	72 e0       	ldi	r23, 0x02	; 2
    3fa0:	84 e2       	ldi	r24, 0x24	; 36
    3fa2:	90 e2       	ldi	r25, 0x20	; 32
    3fa4:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <xTaskCreate>
    3fa8:	00 00       	nop


	
}
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	0f 91       	pop	r16
    3fb0:	ff 90       	pop	r15
    3fb2:	ef 90       	pop	r14
    3fb4:	08 95       	ret

00003fb6 <loop>:
    3fb6:	cf 93       	push	r28

void loop()
{
    3fb8:	df 93       	push	r29
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
	//nothing to do here, all done in RTOS tasks
}
    3fbe:	00 00       	nop
    3fc0:	df 91       	pop	r29
    3fc2:	cf 91       	pop	r28
    3fc4:	08 95       	ret

00003fc6 <_Z12TaskCheckSPCPv>:

void TaskCheckSPC(void *pvParameters)  // This is a task.
{
    3fc6:	cf 93       	push	r28
    3fc8:	df 93       	push	r29
    3fca:	1f 92       	push	r1
    3fcc:	1f 92       	push	r1
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	9a 83       	std	Y+2, r25	; 0x02
    3fd4:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;
	

	for (;;) // A Task shall never return or exit.
	{
		spcProcessing.RunSPCDataLoop();
    3fd6:	8e ea       	ldi	r24, 0xAE	; 174
    3fd8:	93 e0       	ldi	r25, 0x03	; 3
    3fda:	59 d1       	rcall	.+690    	; 0x428e <_ZN13SpcProcessing14RunSPCDataLoopEv>
		vTaskDelay( 1000 / portTICK_PERIOD_MS); // wait for one second
    3fdc:	8e e3       	ldi	r24, 0x3E	; 62
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 9a 4c 	call	0x9934	; 0x9934 <vTaskDelay>
void TaskCheckSPC(void *pvParameters)  // This is a task.
{
	(void) pvParameters;
	

	for (;;) // A Task shall never return or exit.
    3fe4:	f8 cf       	rjmp	.-16     	; 0x3fd6 <_Z12TaskCheckSPCPv+0x10>

00003fe6 <_Z23TaskCheckSerialExpanderPv>:
	}

}

void TaskCheckSerialExpander(void *pvParameters)  // This is a task.
{
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	1f 92       	push	r1
    3fec:	1f 92       	push	r1
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	9a 83       	std	Y+2, r25	; 0x02
    3ff4:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
	{
		//serialPortExpander.RunSerialExpanderDataLoop();
		vTaskDelay( 100 / portTICK_PERIOD_MS ); // wait for one second
    3ff6:	86 e0       	ldi	r24, 0x06	; 6
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 9a 4c 	call	0x9934	; 0x9934 <vTaskDelay>

void TaskCheckSerialExpander(void *pvParameters)  // This is a task.
{
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
    3ffe:	fb cf       	rjmp	.-10     	; 0x3ff6 <_Z23TaskCheckSerialExpanderPv+0x10>

00004000 <_Z23TaskCheckSerialCommandsPv>:
	}

}

void TaskCheckSerialCommands(void *pvParameters)  // This is a task.
{
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	1f 92       	push	r1
    4006:	1f 92       	push	r1
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
	{
		//CheckSerialCommands();
		serialProcessing.CheckSerialCommands();
    4010:	88 ec       	ldi	r24, 0xC8	; 200
    4012:	93 e0       	ldi	r25, 0x03	; 3
    4014:	96 da       	rcall	.-2772   	; 0x3542 <_ZN16SerialProcessing19CheckSerialCommandsEv>
		vTaskDelay( 100 / portTICK_PERIOD_MS ); // wait for one second
    4016:	86 e0       	ldi	r24, 0x06	; 6
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	0e 94 9a 4c 	call	0x9934	; 0x9934 <vTaskDelay>

void TaskCheckSerialCommands(void *pvParameters)  // This is a task.
{
	(void) pvParameters;
	
	for (;;) // A Task shall never return or exit.
    401e:	f8 cf       	rjmp	.-16     	; 0x4010 <_Z23TaskCheckSerialCommandsPv+0x10>

00004020 <_Z13TaskRunScreenPv>:
	}

}

void TaskRunScreen(void *pvParameters)  // This is a task.
{
    4020:	cf 93       	push	r28
    4022:	df 93       	push	r29
    4024:	00 d0       	rcall	.+0      	; 0x4026 <_Z13TaskRunScreenPv+0x6>
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	9b 83       	std	Y+3, r25	; 0x03
    402c:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t uxHighWaterMark;
	
	
	for (;;) // A Task shall never return or exit.
	{
		screen.IsInSimulationMode = SIMULATIONACTIVE;
    402e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SIMULATIONACTIVE>
    4032:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <screen>
		screen.UpdateScreen();
    4036:	87 ec       	ldi	r24, 0xC7	; 199
    4038:	93 e0       	ldi	r25, 0x03	; 3
    403a:	3f d8       	rcall	.-3970   	; 0x30ba <_ZN6Screen12UpdateScreenEv>
		
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 1a 51 	call	0xa234	; 0xa234 <uxTaskGetStackHighWaterMark>
    4044:	89 83       	std	Y+1, r24	; 0x01
{
	(void) pvParameters;
	UBaseType_t uxHighWaterMark;
	
	
	for (;;) // A Task shall never return or exit.
    4046:	f3 cf       	rjmp	.-26     	; 0x402e <_Z13TaskRunScreenPv+0xe>

00004048 <_Z17TaskRunSimulationPv>:
	}

}

void TaskRunSimulation(void *pvParameters)  // This is a task.
{
    4048:	cf 93       	push	r28
    404a:	df 93       	push	r29
    404c:	1f 92       	push	r1
    404e:	1f 92       	push	r1
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
    4054:	9a 83       	std	Y+2, r25	; 0x02
    4056:	89 83       	std	Y+1, r24	; 0x01
	for (;;) // A Task shall never return or exit.
	{
		if (spcProcessing.IsInSimulationMode != SIMULATIONACTIVE)
    4058:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <spcProcessing>
    405c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SIMULATIONACTIVE>
    4060:	98 17       	cp	r25, r24
    4062:	21 f0       	breq	.+8      	; 0x406c <_Z17TaskRunSimulationPv+0x24>
		{
			spcProcessing.IsInSimulationMode = SIMULATIONACTIVE;
    4064:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SIMULATIONACTIVE>
    4068:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <spcProcessing>
		}
		vTaskDelay( 50 / portTICK_PERIOD_MS  ); // wait for one second
    406c:	83 e0       	ldi	r24, 0x03	; 3
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	0e 94 9a 4c 	call	0x9934	; 0x9934 <vTaskDelay>

}

void TaskRunSimulation(void *pvParameters)  // This is a task.
{
	for (;;) // A Task shall never return or exit.
    4074:	f1 cf       	rjmp	.-30     	; 0x4058 <_Z17TaskRunSimulationPv+0x10>

00004076 <_Z41__static_initialization_and_destruction_0ii>:
		{
			spcProcessing.IsInSimulationMode = SIMULATIONACTIVE;
		}
		vTaskDelay( 50 / portTICK_PERIOD_MS  ); // wait for one second
	}
}
    4076:	cf 93       	push	r28
    4078:	df 93       	push	r29
    407a:	00 d0       	rcall	.+0      	; 0x407c <_Z41__static_initialization_and_destruction_0ii+0x6>
    407c:	1f 92       	push	r1
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
    4086:	7c 83       	std	Y+4, r23	; 0x04
    4088:	6b 83       	std	Y+3, r22	; 0x03
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	71 f4       	brne	.+28     	; 0x40ae <_Z41__static_initialization_and_destruction_0ii+0x38>
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	9c 81       	ldd	r25, Y+4	; 0x04
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	51 f4       	brne	.+20     	; 0x40ae <_Z41__static_initialization_and_destruction_0ii+0x38>

bool SIMULATIONACTIVE = true; //sets default value for simulation


SerialCommand sCommand;
SpcProcessing spcProcessing;
    409a:	8e ea       	ldi	r24, 0xAE	; 174
    409c:	93 e0       	ldi	r25, 0x03	; 3
    409e:	76 d0       	rcall	.+236    	; 0x418c <_ZN13SpcProcessingC1Ev>
//SerialPortExpander serialPortExpander;
Screen screen;
    40a0:	87 ec       	ldi	r24, 0xC7	; 199
    40a2:	93 e0       	ldi	r25, 0x03	; 3
    40a4:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN6ScreenC1Ev>
SerialProcessing serialProcessing;
    40a8:	88 ec       	ldi	r24, 0xC8	; 200
    40aa:	93 e0       	ldi	r25, 0x03	; 3
    40ac:	1f da       	rcall	.-3010   	; 0x34ec <_ZN16SerialProcessingC1Ev>
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	9a 81       	ldd	r25, Y+2	; 0x02
    40b2:	89 2b       	or	r24, r25
    40b4:	69 f4       	brne	.+26     	; 0x40d0 <_Z41__static_initialization_and_destruction_0ii+0x5a>
    40b6:	8b 81       	ldd	r24, Y+3	; 0x03
    40b8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ba:	01 96       	adiw	r24, 0x01	; 1
    40bc:	49 f4       	brne	.+18     	; 0x40d0 <_Z41__static_initialization_and_destruction_0ii+0x5a>
    40be:	88 ec       	ldi	r24, 0xC8	; 200
    40c0:	93 e0       	ldi	r25, 0x03	; 3
    40c2:	bd de       	rcall	.-646    	; 0x3e3e <_ZN16SerialProcessingD1Ev>


SerialCommand sCommand;
SpcProcessing spcProcessing;
//SerialPortExpander serialPortExpander;
Screen screen;
    40c4:	87 ec       	ldi	r24, 0xC7	; 199
    40c6:	93 e0       	ldi	r25, 0x03	; 3
    40c8:	5c d8       	rcall	.-3912   	; 0x3182 <_ZN6ScreenD1Ev>

bool SIMULATIONACTIVE = true; //sets default value for simulation


SerialCommand sCommand;
SpcProcessing spcProcessing;
    40ca:	8e ea       	ldi	r24, 0xAE	; 174
    40cc:	93 e0       	ldi	r25, 0x03	; 3
    40ce:	a0 d2       	rcall	.+1344   	; 0x4610 <_ZN13SpcProcessingD1Ev>
    40d0:	00 00       	nop
		{
			spcProcessing.IsInSimulationMode = SIMULATIONACTIVE;
		}
		vTaskDelay( 50 / portTICK_PERIOD_MS  ); // wait for one second
	}
}
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	08 95       	ret

000040e0 <_GLOBAL__sub_I_SIMULATIONACTIVE>:
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	6f ef       	ldi	r22, 0xFF	; 255
    40ea:	7f ef       	ldi	r23, 0xFF	; 255
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	c2 df       	rcall	.-124    	; 0x4076 <_Z41__static_initialization_and_destruction_0ii>
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	08 95       	ret

000040f8 <_GLOBAL__sub_D_SIMULATIONACTIVE>:
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	6f ef       	ldi	r22, 0xFF	; 255
    4102:	7f ef       	ldi	r23, 0xFF	; 255
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	b6 df       	rcall	.-148    	; 0x4076 <_Z41__static_initialization_and_destruction_0ii>
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	08 95       	ret

00004110 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    4110:	cf 93       	push	r28
    4112:	df 93       	push	r29
    4114:	1f 92       	push	r1
    4116:	1f 92       	push	r1
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
    411c:	9a 83       	std	Y+2, r25	; 0x02
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	9a 81       	ldd	r25, Y+2	; 0x02
    4124:	fc 01       	movw	r30, r24
    4126:	84 81       	ldd	r24, Z+4	; 0x04
    4128:	95 81       	ldd	r25, Z+5	; 0x05
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	08 95       	ret

00004134 <_ZN6StringpLEi>:
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	00 d0       	rcall	.+0      	; 0x413a <_ZN6StringpLEi+0x6>
    413a:	1f 92       	push	r1
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
    4140:	9a 83       	std	Y+2, r25	; 0x02
    4142:	89 83       	std	Y+1, r24	; 0x01
    4144:	7c 83       	std	Y+4, r23	; 0x04
    4146:	6b 83       	std	Y+3, r22	; 0x03
    4148:	2b 81       	ldd	r18, Y+3	; 0x03
    414a:	3c 81       	ldd	r19, Y+4	; 0x04
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	b9 01       	movw	r22, r18
    4152:	0e 94 76 4a 	call	0x94ec	; 0x94ec <_ZN6String6concatEi>
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	9a 81       	ldd	r25, Y+2	; 0x02
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	0f 90       	pop	r0
    4160:	0f 90       	pop	r0
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	08 95       	ret

00004168 <_ZNK6String5c_strEv>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    4168:	cf 93       	push	r28
    416a:	df 93       	push	r29
    416c:	1f 92       	push	r1
    416e:	1f 92       	push	r1
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
    4174:	9a 83       	std	Y+2, r25	; 0x02
    4176:	89 83       	std	Y+1, r24	; 0x01
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	9a 81       	ldd	r25, Y+2	; 0x02
    417c:	fc 01       	movw	r30, r24
    417e:	80 81       	ld	r24, Z
    4180:	91 81       	ldd	r25, Z+1	; 0x01
    4182:	0f 90       	pop	r0
    4184:	0f 90       	pop	r0
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    418a:	08 95       	ret

0000418c <_ZN13SpcProcessingC1Ev>:

SpcProcessing *SpcProcessing::firstinstance;


// default constructor main entry point
SpcProcessing::SpcProcessing()
    418c:	cf 93       	push	r28
    418e:	df 93       	push	r29
    4190:	1f 92       	push	r1
    4192:	1f 92       	push	r1
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	9a 83       	std	Y+2, r25	; 0x02
    419a:	89 83       	std	Y+1, r24	; 0x01
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	fc 01       	movw	r30, r24
    41a2:	10 82       	st	Z, r1
    41a4:	89 81       	ldd	r24, Y+1	; 0x01
    41a6:	9a 81       	ldd	r25, Y+2	; 0x02
    41a8:	25 e0       	ldi	r18, 0x05	; 5
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	fc 01       	movw	r30, r24
    41ae:	32 83       	std	Z+2, r19	; 0x02
    41b0:	21 83       	std	Z+1, r18	; 0x01
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	9a 81       	ldd	r25, Y+2	; 0x02
    41b6:	22 e0       	ldi	r18, 0x02	; 2
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	fc 01       	movw	r30, r24
    41bc:	34 83       	std	Z+4, r19	; 0x04
    41be:	23 83       	std	Z+3, r18	; 0x03
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	9a 81       	ldd	r25, Y+2	; 0x02
    41c4:	23 e0       	ldi	r18, 0x03	; 3
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	fc 01       	movw	r30, r24
    41ca:	36 83       	std	Z+6, r19	; 0x06
    41cc:	25 83       	std	Z+5, r18	; 0x05
    41ce:	29 81       	ldd	r18, Y+1	; 0x01
    41d0:	3a 81       	ldd	r19, Y+2	; 0x02
    41d2:	82 e3       	ldi	r24, 0x32	; 50
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	a0 e0       	ldi	r26, 0x00	; 0
    41d8:	b0 e0       	ldi	r27, 0x00	; 0
    41da:	f9 01       	movw	r30, r18
    41dc:	87 83       	std	Z+7, r24	; 0x07
    41de:	90 87       	std	Z+8, r25	; 0x08
    41e0:	a1 87       	std	Z+9, r26	; 0x09
    41e2:	b2 87       	std	Z+10, r27	; 0x0a
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	9a 81       	ldd	r25, Y+2	; 0x02
    41e8:	fc 01       	movw	r30, r24
    41ea:	13 86       	std	Z+11, r1	; 0x0b
    41ec:	14 86       	std	Z+12, r1	; 0x0c
    41ee:	15 86       	std	Z+13, r1	; 0x0d
    41f0:	16 86       	std	Z+14, r1	; 0x0e
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	9a 81       	ldd	r25, Y+2	; 0x02
    41f6:	fc 01       	movw	r30, r24
    41f8:	17 86       	std	Z+15, r1	; 0x0f
    41fa:	10 8a       	std	Z+16, r1	; 0x10
    41fc:	11 8a       	std	Z+17, r1	; 0x11
    41fe:	12 8a       	std	Z+18, r1	; 0x12
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	43 96       	adiw	r24, 0x13	; 19
    4206:	63 e9       	ldi	r22, 0x93	; 147
    4208:	72 e0       	ldi	r23, 0x02	; 2
    420a:	0e 94 be 48 	call	0x917c	; 0x917c <_ZN6StringC1EPKc>
{
	if(!firstinstance)
    420e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN13SpcProcessing13firstinstanceE>
    4212:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <_ZN13SpcProcessing13firstinstanceE+0x1>
    4216:	89 2b       	or	r24, r25
    4218:	31 f4       	brne	.+12     	; 0x4226 <_ZN13SpcProcessingC1Ev+0x9a>
	{
		firstinstance = this;
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <_ZN13SpcProcessing13firstinstanceE+0x1>
    4222:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZN13SpcProcessing13firstinstanceE>
	}

	
} //spcProcessing
    4226:	00 00       	nop
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	08 95       	ret

00004232 <_ZN13SpcProcessing4initEv>:

void SpcProcessing::init(void)
{
    4232:	cf 93       	push	r28
    4234:	df 93       	push	r29
    4236:	1f 92       	push	r1
    4238:	1f 92       	push	r1
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
    423e:	9a 83       	std	Y+2, r25	; 0x02
    4240:	89 83       	std	Y+1, r24	; 0x01
	pinMode(req, OUTPUT);
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	9a 81       	ldd	r25, Y+2	; 0x02
    4246:	fc 01       	movw	r30, r24
    4248:	81 81       	ldd	r24, Z+1	; 0x01
    424a:	92 81       	ldd	r25, Z+2	; 0x02
    424c:	61 e0       	ldi	r22, 0x01	; 1
    424e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
	pinMode(clk, INPUT_PULLUP);
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
    4256:	fc 01       	movw	r30, r24
    4258:	85 81       	ldd	r24, Z+5	; 0x05
    425a:	96 81       	ldd	r25, Z+6	; 0x06
    425c:	62 e0       	ldi	r22, 0x02	; 2
    425e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
	pinMode(dat, INPUT_PULLUP);
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	9a 81       	ldd	r25, Y+2	; 0x02
    4266:	fc 01       	movw	r30, r24
    4268:	83 81       	ldd	r24, Z+3	; 0x03
    426a:	94 81       	ldd	r25, Z+4	; 0x04
    426c:	62 e0       	ldi	r22, 0x02	; 2
    426e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
	

	digitalWrite(req, HIGH); // set request at high via transistor needed for default state
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	9a 81       	ldd	r25, Y+2	; 0x02
    4276:	fc 01       	movw	r30, r24
    4278:	81 81       	ldd	r24, Z+1	; 0x01
    427a:	92 81       	ldd	r25, Z+2	; 0x02
    427c:	61 e0       	ldi	r22, 0x01	; 1
    427e:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
}
    4282:	00 00       	nop
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	08 95       	ret

0000428e <_ZN13SpcProcessing14RunSPCDataLoopEv>:

void SpcProcessing::RunSPCDataLoop(void)
{
    428e:	ef 92       	push	r14
    4290:	ff 92       	push	r15
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
    429e:	c7 57       	subi	r28, 0x77	; 119
    42a0:	d1 09       	sbc	r29, r1
    42a2:	0f b6       	in	r0, 0x3f	; 63
    42a4:	f8 94       	cli
    42a6:	de bf       	out	0x3e, r29	; 62
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	cd bf       	out	0x3d, r28	; 61
    42ac:	9e 01       	movw	r18, r28
    42ae:	2a 58       	subi	r18, 0x8A	; 138
    42b0:	3f 4f       	sbci	r19, 0xFF	; 255
    42b2:	f9 01       	movw	r30, r18
    42b4:	91 83       	std	Z+1, r25	; 0x01
    42b6:	80 83       	st	Z, r24
	currentMillis = millis();
    42b8:	0e 94 e6 43 	call	0x87cc	; 0x87cc <millis>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	9e 01       	movw	r18, r28
    42c2:	2a 58       	subi	r18, 0x8A	; 138
    42c4:	3f 4f       	sbci	r19, 0xFF	; 255
    42c6:	f9 01       	movw	r30, r18
    42c8:	20 81       	ld	r18, Z
    42ca:	31 81       	ldd	r19, Z+1	; 0x01
    42cc:	f9 01       	movw	r30, r18
    42ce:	83 87       	std	Z+11, r24	; 0x0b
    42d0:	94 87       	std	Z+12, r25	; 0x0c
    42d2:	a5 87       	std	Z+13, r26	; 0x0d
    42d4:	b6 87       	std	Z+14, r27	; 0x0e
	int maxRetries = 5;
    42d6:	85 e0       	ldi	r24, 0x05	; 5
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	89 83       	std	Y+1, r24	; 0x01


	if (currentMillis >= (previousMillis + loopTime))
    42de:	ce 01       	movw	r24, r28
    42e0:	8a 58       	subi	r24, 0x8A	; 138
    42e2:	9f 4f       	sbci	r25, 0xFF	; 255
    42e4:	fc 01       	movw	r30, r24
    42e6:	80 81       	ld	r24, Z
    42e8:	91 81       	ldd	r25, Z+1	; 0x01
    42ea:	fc 01       	movw	r30, r24
    42ec:	23 85       	ldd	r18, Z+11	; 0x0b
    42ee:	34 85       	ldd	r19, Z+12	; 0x0c
    42f0:	45 85       	ldd	r20, Z+13	; 0x0d
    42f2:	56 85       	ldd	r21, Z+14	; 0x0e
    42f4:	ce 01       	movw	r24, r28
    42f6:	8a 58       	subi	r24, 0x8A	; 138
    42f8:	9f 4f       	sbci	r25, 0xFF	; 255
    42fa:	fc 01       	movw	r30, r24
    42fc:	80 81       	ld	r24, Z
    42fe:	91 81       	ldd	r25, Z+1	; 0x01
    4300:	fc 01       	movw	r30, r24
    4302:	e7 84       	ldd	r14, Z+15	; 0x0f
    4304:	f0 88       	ldd	r15, Z+16	; 0x10
    4306:	01 89       	ldd	r16, Z+17	; 0x11
    4308:	12 89       	ldd	r17, Z+18	; 0x12
    430a:	ce 01       	movw	r24, r28
    430c:	8a 58       	subi	r24, 0x8A	; 138
    430e:	9f 4f       	sbci	r25, 0xFF	; 255
    4310:	fc 01       	movw	r30, r24
    4312:	80 81       	ld	r24, Z
    4314:	91 81       	ldd	r25, Z+1	; 0x01
    4316:	fc 01       	movw	r30, r24
    4318:	87 81       	ldd	r24, Z+7	; 0x07
    431a:	90 85       	ldd	r25, Z+8	; 0x08
    431c:	a1 85       	ldd	r26, Z+9	; 0x09
    431e:	b2 85       	ldd	r27, Z+10	; 0x0a
    4320:	8e 0d       	add	r24, r14
    4322:	9f 1d       	adc	r25, r15
    4324:	a0 1f       	adc	r26, r16
    4326:	b1 1f       	adc	r27, r17
    4328:	28 17       	cp	r18, r24
    432a:	39 07       	cpc	r19, r25
    432c:	4a 07       	cpc	r20, r26
    432e:	5b 07       	cpc	r21, r27
    4330:	08 f4       	brcc	.+2      	; 0x4334 <_ZN13SpcProcessing14RunSPCDataLoopEv+0xa6>
    4332:	ee c0       	rjmp	.+476    	; 0x4510 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x282>
	{
		if (IsInSimulationMode)
    4334:	ce 01       	movw	r24, r28
    4336:	8a 58       	subi	r24, 0x8A	; 138
    4338:	9f 4f       	sbci	r25, 0xFF	; 255
    433a:	fc 01       	movw	r30, r24
    433c:	80 81       	ld	r24, Z
    433e:	91 81       	ldd	r25, Z+1	; 0x01
    4340:	fc 01       	movw	r30, r24
    4342:	80 81       	ld	r24, Z
    4344:	88 23       	and	r24, r24
    4346:	41 f0       	breq	.+16     	; 0x4358 <_ZN13SpcProcessing14RunSPCDataLoopEv+0xca>
		{
			PrintRandomDiameterData();
    4348:	ce 01       	movw	r24, r28
    434a:	8a 58       	subi	r24, 0x8A	; 138
    434c:	9f 4f       	sbci	r25, 0xFF	; 255
    434e:	fc 01       	movw	r30, r24
    4350:	80 81       	ld	r24, Z
    4352:	91 81       	ldd	r25, Z+1	; 0x01
    4354:	eb d0       	rcall	.+470    	; 0x452c <_ZN13SpcProcessing23PrintRandomDiameterDataEv>
			return;
    4356:	dc c0       	rjmp	.+440    	; 0x4510 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x282>
		}
		
		digitalWrite(req, HIGH); // generate set request
    4358:	ce 01       	movw	r24, r28
    435a:	8a 58       	subi	r24, 0x8A	; 138
    435c:	9f 4f       	sbci	r25, 0xFF	; 255
    435e:	fc 01       	movw	r30, r24
    4360:	80 81       	ld	r24, Z
    4362:	91 81       	ldd	r25, Z+1	; 0x01
    4364:	fc 01       	movw	r30, r24
    4366:	81 81       	ldd	r24, Z+1	; 0x01
    4368:	92 81       	ldd	r25, Z+2	; 0x02
    436a:	61 e0       	ldi	r22, 0x01	; 1
    436c:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>

		int pinState = 0;
    4370:	1b 86       	std	Y+11, r1	; 0x0b
    4372:	1a 86       	std	Y+10, r1	; 0x0a
		int lastPinState = 0;
    4374:	1c 82       	std	Y+4, r1	; 0x04
    4376:	1b 82       	std	Y+3, r1	; 0x03
		for (int i = 0; i < 52;)
    4378:	1e 82       	std	Y+6, r1	; 0x06
    437a:	1d 82       	std	Y+5, r1	; 0x05
    437c:	8d 81       	ldd	r24, Y+5	; 0x05
    437e:	9e 81       	ldd	r25, Y+6	; 0x06
    4380:	c4 97       	sbiw	r24, 0x34	; 52
    4382:	0c f0       	brlt	.+2      	; 0x4386 <_ZN13SpcProcessing14RunSPCDataLoopEv+0xf8>
    4384:	43 c0       	rjmp	.+134    	; 0x440c <_ZN13SpcProcessing14RunSPCDataLoopEv+0x17e>
		{
			
			pinState = digitalRead(clk);
    4386:	ce 01       	movw	r24, r28
    4388:	8a 58       	subi	r24, 0x8A	; 138
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	fc 01       	movw	r30, r24
    438e:	80 81       	ld	r24, Z
    4390:	91 81       	ldd	r25, Z+1	; 0x01
    4392:	fc 01       	movw	r30, r24
    4394:	85 81       	ldd	r24, Z+5	; 0x05
    4396:	96 81       	ldd	r25, Z+6	; 0x06
    4398:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <digitalRead>
    439c:	9b 87       	std	Y+11, r25	; 0x0b
    439e:	8a 87       	std	Y+10, r24	; 0x0a

			if (pinState != lastPinState)
    43a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    43a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	9c 81       	ldd	r25, Y+4	; 0x04
    43a8:	28 17       	cp	r18, r24
    43aa:	39 07       	cpc	r19, r25
    43ac:	f9 f0       	breq	.+62     	; 0x43ec <_ZN13SpcProcessing14RunSPCDataLoopEv+0x15e>
			{
				if (pinState == LOW)
    43ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    43b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    43b2:	89 2b       	or	r24, r25
    43b4:	01 f5       	brne	.+64     	; 0x43f6 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x168>
				{
					dataStream += digitalRead(dat);
    43b6:	ce 01       	movw	r24, r28
    43b8:	8a 58       	subi	r24, 0x8A	; 138
    43ba:	9f 4f       	sbci	r25, 0xFF	; 255
    43bc:	fc 01       	movw	r30, r24
    43be:	80 81       	ld	r24, Z
    43c0:	91 81       	ldd	r25, Z+1	; 0x01
    43c2:	fc 01       	movw	r30, r24
    43c4:	83 81       	ldd	r24, Z+3	; 0x03
    43c6:	94 81       	ldd	r25, Z+4	; 0x04
    43c8:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <digitalRead>
    43cc:	9c 01       	movw	r18, r24
    43ce:	ce 01       	movw	r24, r28
    43d0:	8a 58       	subi	r24, 0x8A	; 138
    43d2:	9f 4f       	sbci	r25, 0xFF	; 255
    43d4:	fc 01       	movw	r30, r24
    43d6:	80 81       	ld	r24, Z
    43d8:	91 81       	ldd	r25, Z+1	; 0x01
    43da:	43 96       	adiw	r24, 0x13	; 19
    43dc:	b9 01       	movw	r22, r18
    43de:	aa de       	rcall	.-684    	; 0x4134 <_ZN6StringpLEi>
					i++;
    43e0:	8d 81       	ldd	r24, Y+5	; 0x05
    43e2:	9e 81       	ldd	r25, Y+6	; 0x06
    43e4:	01 96       	adiw	r24, 0x01	; 1
    43e6:	9e 83       	std	Y+6, r25	; 0x06
    43e8:	8d 83       	std	Y+5, r24	; 0x05
    43ea:	05 c0       	rjmp	.+10     	; 0x43f6 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x168>
				}
			}
			else
			{
				maxRetries--;
    43ec:	89 81       	ldd	r24, Y+1	; 0x01
    43ee:	9a 81       	ldd	r25, Y+2	; 0x02
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	9a 83       	std	Y+2, r25	; 0x02
    43f4:	89 83       	std	Y+1, r24	; 0x01
			}
			
			if (maxRetries <= 0){return;}
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	9a 81       	ldd	r25, Y+2	; 0x02
    43fa:	18 16       	cp	r1, r24
    43fc:	19 06       	cpc	r1, r25
    43fe:	0c f0       	brlt	.+2      	; 0x4402 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x174>
    4400:	86 c0       	rjmp	.+268    	; 0x450e <_ZN13SpcProcessing14RunSPCDataLoopEv+0x280>

			lastPinState = pinState;
    4402:	8a 85       	ldd	r24, Y+10	; 0x0a
    4404:	9b 85       	ldd	r25, Y+11	; 0x0b
    4406:	9c 83       	std	Y+4, r25	; 0x04
    4408:	8b 83       	std	Y+3, r24	; 0x03
		
		digitalWrite(req, HIGH); // generate set request

		int pinState = 0;
		int lastPinState = 0;
		for (int i = 0; i < 52;)
    440a:	b8 cf       	rjmp	.-144    	; 0x437c <_ZN13SpcProcessing14RunSPCDataLoopEv+0xee>

			lastPinState = pinState;
		}

		
		bool dataStreamValid = false;
    440c:	1f 82       	std	Y+7, r1	; 0x07
		for (unsigned int i = 0; i < dataStream.length(); i++)
    440e:	19 86       	std	Y+9, r1	; 0x09
    4410:	18 86       	std	Y+8, r1	; 0x08
    4412:	ce 01       	movw	r24, r28
    4414:	8a 58       	subi	r24, 0x8A	; 138
    4416:	9f 4f       	sbci	r25, 0xFF	; 255
    4418:	fc 01       	movw	r30, r24
    441a:	80 81       	ld	r24, Z
    441c:	91 81       	ldd	r25, Z+1	; 0x01
    441e:	43 96       	adiw	r24, 0x13	; 19
    4420:	77 de       	rcall	.-786    	; 0x4110 <_ZNK6String6lengthEv>
    4422:	9c 01       	movw	r18, r24
    4424:	41 e0       	ldi	r20, 0x01	; 1
    4426:	88 85       	ldd	r24, Y+8	; 0x08
    4428:	99 85       	ldd	r25, Y+9	; 0x09
    442a:	82 17       	cp	r24, r18
    442c:	93 07       	cpc	r25, r19
    442e:	08 f0       	brcs	.+2      	; 0x4432 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1a4>
    4430:	40 e0       	ldi	r20, 0x00	; 0
    4432:	44 23       	and	r20, r20
    4434:	e9 f0       	breq	.+58     	; 0x4470 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1e2>
		{
			if (dataStream[i] == '0')
    4436:	ce 01       	movw	r24, r28
    4438:	8a 58       	subi	r24, 0x8A	; 138
    443a:	9f 4f       	sbci	r25, 0xFF	; 255
    443c:	fc 01       	movw	r30, r24
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	43 96       	adiw	r24, 0x13	; 19
    4444:	28 85       	ldd	r18, Y+8	; 0x08
    4446:	39 85       	ldd	r19, Y+9	; 0x09
    4448:	b9 01       	movw	r22, r18
    444a:	0e 94 a4 4a 	call	0x9548	; 0x9548 <_ZN6StringixEj>
    444e:	fc 01       	movw	r30, r24
    4450:	90 81       	ld	r25, Z
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	90 33       	cpi	r25, 0x30	; 48
    4456:	09 f0       	breq	.+2      	; 0x445a <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1cc>
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	88 23       	and	r24, r24
    445c:	19 f0       	breq	.+6      	; 0x4464 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1d6>
			{
				dataStreamValid = true;
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	8f 83       	std	Y+7, r24	; 0x07
				break;
    4462:	06 c0       	rjmp	.+12     	; 0x4470 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x1e2>
			lastPinState = pinState;
		}

		
		bool dataStreamValid = false;
		for (unsigned int i = 0; i < dataStream.length(); i++)
    4464:	88 85       	ldd	r24, Y+8	; 0x08
    4466:	99 85       	ldd	r25, Y+9	; 0x09
    4468:	01 96       	adiw	r24, 0x01	; 1
    446a:	99 87       	std	Y+9, r25	; 0x09
    446c:	88 87       	std	Y+8, r24	; 0x08
    446e:	d1 cf       	rjmp	.-94     	; 0x4412 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x184>
				break;
			}
		}
		
		
		if (dataStreamValid)
    4470:	8f 81       	ldd	r24, Y+7	; 0x07
    4472:	88 23       	and	r24, r24
    4474:	f1 f0       	breq	.+60     	; 0x44b2 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x224>
		{
			char charBuilder[100];
			SerialCommand sCommand;
			sCommand.hardwareType = INDICATOR;
    4476:	1d 86       	std	Y+13, r1	; 0x0d
    4478:	1c 86       	std	Y+12, r1	; 0x0c
			strcpy (sCommand.command, dataStream.c_str());
    447a:	ce 01       	movw	r24, r28
    447c:	8a 58       	subi	r24, 0x8A	; 138
    447e:	9f 4f       	sbci	r25, 0xFF	; 255
    4480:	fc 01       	movw	r30, r24
    4482:	80 81       	ld	r24, Z
    4484:	91 81       	ldd	r25, Z+1	; 0x01
    4486:	43 96       	adiw	r24, 0x13	; 19
    4488:	6f de       	rcall	.-802    	; 0x4168 <_ZNK6String5c_strEv>
    448a:	9c 01       	movw	r18, r24
    448c:	8e 85       	ldd	r24, Y+14	; 0x0e
    448e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4490:	b9 01       	movw	r22, r18
    4492:	0e 94 fe 64 	call	0xc9fc	; 0xc9fc <strcpy>
			BuildSerialOutput(&sCommand, charBuilder);
    4496:	9e 01       	movw	r18, r28
    4498:	2e 5e       	subi	r18, 0xEE	; 238
    449a:	3f 4f       	sbci	r19, 0xFF	; 255
    449c:	ce 01       	movw	r24, r28
    449e:	0c 96       	adiw	r24, 0x0c	; 12
    44a0:	b9 01       	movw	r22, r18
    44a2:	17 dc       	rcall	.-2002   	; 0x3cd2 <_Z17BuildSerialOutputP13SerialCommandPc>
			//BUILD_SERIAL_OUTPUT(INDICATOR, dataStream.c_str(), charBuilder);
			//BUILD_SERIAL_OUTPUT(sCommand, charBuilder);

			Serial.println(charBuilder);
    44a4:	ce 01       	movw	r24, r28
    44a6:	42 96       	adiw	r24, 0x12	; 18
    44a8:	bc 01       	movw	r22, r24
    44aa:	8b ec       	ldi	r24, 0xCB	; 203
    44ac:	93 e0       	ldi	r25, 0x03	; 3
    44ae:	0e 94 8b 42 	call	0x8516	; 0x8516 <_ZN5Print7printlnEPKc>
		}
		
		dataStream = "";
    44b2:	ce 01       	movw	r24, r28
    44b4:	8a 58       	subi	r24, 0x8A	; 138
    44b6:	9f 4f       	sbci	r25, 0xFF	; 255
    44b8:	fc 01       	movw	r30, r24
    44ba:	80 81       	ld	r24, Z
    44bc:	91 81       	ldd	r25, Z+1	; 0x01
    44be:	43 96       	adiw	r24, 0x13	; 19
    44c0:	63 e9       	ldi	r22, 0x93	; 147
    44c2:	72 e0       	ldi	r23, 0x02	; 2
    44c4:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <_ZN6StringaSEPKc>
		digitalWrite(req, LOW);
    44c8:	ce 01       	movw	r24, r28
    44ca:	8a 58       	subi	r24, 0x8A	; 138
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	fc 01       	movw	r30, r24
    44d0:	80 81       	ld	r24, Z
    44d2:	91 81       	ldd	r25, Z+1	; 0x01
    44d4:	fc 01       	movw	r30, r24
    44d6:	81 81       	ldd	r24, Z+1	; 0x01
    44d8:	92 81       	ldd	r25, Z+2	; 0x02
    44da:	60 e0       	ldi	r22, 0x00	; 0
    44dc:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
		previousMillis = currentMillis;
    44e0:	ce 01       	movw	r24, r28
    44e2:	8a 58       	subi	r24, 0x8A	; 138
    44e4:	9f 4f       	sbci	r25, 0xFF	; 255
    44e6:	fc 01       	movw	r30, r24
    44e8:	80 81       	ld	r24, Z
    44ea:	91 81       	ldd	r25, Z+1	; 0x01
    44ec:	fc 01       	movw	r30, r24
    44ee:	83 85       	ldd	r24, Z+11	; 0x0b
    44f0:	94 85       	ldd	r25, Z+12	; 0x0c
    44f2:	a5 85       	ldd	r26, Z+13	; 0x0d
    44f4:	b6 85       	ldd	r27, Z+14	; 0x0e
    44f6:	9e 01       	movw	r18, r28
    44f8:	2a 58       	subi	r18, 0x8A	; 138
    44fa:	3f 4f       	sbci	r19, 0xFF	; 255
    44fc:	f9 01       	movw	r30, r18
    44fe:	20 81       	ld	r18, Z
    4500:	31 81       	ldd	r19, Z+1	; 0x01
    4502:	f9 01       	movw	r30, r18
    4504:	87 87       	std	Z+15, r24	; 0x0f
    4506:	90 8b       	std	Z+16, r25	; 0x10
    4508:	a1 8b       	std	Z+17, r26	; 0x11
    450a:	b2 8b       	std	Z+18, r27	; 0x12
    450c:	01 c0       	rjmp	.+2      	; 0x4510 <_ZN13SpcProcessing14RunSPCDataLoopEv+0x282>
			else
			{
				maxRetries--;
			}
			
			if (maxRetries <= 0){return;}
    450e:	00 00       	nop
		dataStream = "";
		digitalWrite(req, LOW);
		previousMillis = currentMillis;
	}
	
}
    4510:	c9 58       	subi	r28, 0x89	; 137
    4512:	df 4f       	sbci	r29, 0xFF	; 255
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	ff 90       	pop	r15
    4528:	ef 90       	pop	r14
    452a:	08 95       	ret

0000452c <_ZN13SpcProcessing23PrintRandomDiameterDataEv>:

int SpcProcessing::PrintRandomDiameterData(void)
{
    452c:	ef 92       	push	r14
    452e:	ff 92       	push	r15
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	2b 97       	sbiw	r28, 0x0b	; 11
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	9b 87       	std	Y+11, r25	; 0x0b
    454a:	8a 87       	std	Y+10, r24	; 0x0a
	char diameter[5];
	ltoa(random(17000, 18000), diameter, 10);
    454c:	20 e5       	ldi	r18, 0x50	; 80
    454e:	36 e4       	ldi	r19, 0x46	; 70
    4550:	40 e0       	ldi	r20, 0x00	; 0
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	68 e6       	ldi	r22, 0x68	; 104
    4556:	72 e4       	ldi	r23, 0x42	; 66
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	0e 94 62 48 	call	0x90c4	; 0x90c4 <_Z6randomll>
    4560:	7b 01       	movw	r14, r22
    4562:	8c 01       	movw	r16, r24
    4564:	ce 01       	movw	r24, r28
    4566:	05 96       	adiw	r24, 0x05	; 5
    4568:	2a e0       	ldi	r18, 0x0A	; 10
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	ac 01       	movw	r20, r24
    456e:	c8 01       	movw	r24, r16
    4570:	b7 01       	movw	r22, r14
    4572:	0e 94 57 65 	call	0xcaae	; 0xcaae <ltoa>
	
	Serial.print("0;111111111111111111110000");
    4576:	64 e9       	ldi	r22, 0x94	; 148
    4578:	72 e0       	ldi	r23, 0x02	; 2
    457a:	8b ec       	ldi	r24, 0xCB	; 203
    457c:	93 e0       	ldi	r25, 0x03	; 3
    457e:	0e 94 54 41 	call	0x82a8	; 0x82a8 <_ZN5Print5printEPKc>
	for (int i = 0; i < 5; i++)
    4582:	1a 82       	std	Y+2, r1	; 0x02
    4584:	19 82       	std	Y+1, r1	; 0x01
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	9a 81       	ldd	r25, Y+2	; 0x02
    458a:	05 97       	sbiw	r24, 0x05	; 5
    458c:	64 f5       	brge	.+88     	; 0x45e6 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0xba>
	{
		for (int j = 0; j < 4; j++)
    458e:	1c 82       	std	Y+4, r1	; 0x04
    4590:	1b 82       	std	Y+3, r1	; 0x03
    4592:	8b 81       	ldd	r24, Y+3	; 0x03
    4594:	9c 81       	ldd	r25, Y+4	; 0x04
    4596:	04 97       	sbiw	r24, 0x04	; 4
    4598:	04 f5       	brge	.+64     	; 0x45da <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0xae>
		{
			Serial.print(((byte)diameter[i] >> j) & 1);
    459a:	9e 01       	movw	r18, r28
    459c:	2b 5f       	subi	r18, 0xFB	; 251
    459e:	3f 4f       	sbci	r19, 0xFF	; 255
    45a0:	89 81       	ldd	r24, Y+1	; 0x01
    45a2:	9a 81       	ldd	r25, Y+2	; 0x02
    45a4:	82 0f       	add	r24, r18
    45a6:	93 1f       	adc	r25, r19
    45a8:	fc 01       	movw	r30, r24
    45aa:	80 81       	ld	r24, Z
    45ac:	88 2f       	mov	r24, r24
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0b 80       	ldd	r0, Y+3	; 0x03
    45b2:	02 c0       	rjmp	.+4      	; 0x45b8 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x8c>
    45b4:	95 95       	asr	r25
    45b6:	87 95       	ror	r24
    45b8:	0a 94       	dec	r0
    45ba:	e2 f7       	brpl	.-8      	; 0x45b4 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x88>
    45bc:	81 70       	andi	r24, 0x01	; 1
    45be:	99 27       	eor	r25, r25
    45c0:	4a e0       	ldi	r20, 0x0A	; 10
    45c2:	50 e0       	ldi	r21, 0x00	; 0
    45c4:	bc 01       	movw	r22, r24
    45c6:	8b ec       	ldi	r24, 0xCB	; 203
    45c8:	93 e0       	ldi	r25, 0x03	; 3
    45ca:	0e 94 86 41 	call	0x830c	; 0x830c <_ZN5Print5printEii>
	ltoa(random(17000, 18000), diameter, 10);
	
	Serial.print("0;111111111111111111110000");
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 4; j++)
    45ce:	8b 81       	ldd	r24, Y+3	; 0x03
    45d0:	9c 81       	ldd	r25, Y+4	; 0x04
    45d2:	01 96       	adiw	r24, 0x01	; 1
    45d4:	9c 83       	std	Y+4, r25	; 0x04
    45d6:	8b 83       	std	Y+3, r24	; 0x03
    45d8:	dc cf       	rjmp	.-72     	; 0x4592 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x66>
{
	char diameter[5];
	ltoa(random(17000, 18000), diameter, 10);
	
	Serial.print("0;111111111111111111110000");
	for (int i = 0; i < 5; i++)
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	9a 81       	ldd	r25, Y+2	; 0x02
    45de:	01 96       	adiw	r24, 0x01	; 1
    45e0:	9a 83       	std	Y+2, r25	; 0x02
    45e2:	89 83       	std	Y+1, r24	; 0x01
    45e4:	d0 cf       	rjmp	.-96     	; 0x4586 <_ZN13SpcProcessing23PrintRandomDiameterDataEv+0x5a>
		for (int j = 0; j < 4; j++)
		{
			Serial.print(((byte)diameter[i] >> j) & 1);
		}
	}
	Serial.println("00100000");
    45e6:	6f ea       	ldi	r22, 0xAF	; 175
    45e8:	72 e0       	ldi	r23, 0x02	; 2
    45ea:	8b ec       	ldi	r24, 0xCB	; 203
    45ec:	93 e0       	ldi	r25, 0x03	; 3
    45ee:	0e 94 8b 42 	call	0x8516	; 0x8516 <_ZN5Print7printlnEPKc>
	return 0;
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e0       	ldi	r25, 0x00	; 0
}
    45f6:	2b 96       	adiw	r28, 0x0b	; 11
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	1f 91       	pop	r17
    4608:	0f 91       	pop	r16
    460a:	ff 90       	pop	r15
    460c:	ef 90       	pop	r14
    460e:	08 95       	ret

00004610 <_ZN13SpcProcessingD1Ev>:

// default destructor
SpcProcessing::~SpcProcessing()
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	1f 92       	push	r1
    4616:	1f 92       	push	r1
    4618:	cd b7       	in	r28, 0x3d	; 61
    461a:	de b7       	in	r29, 0x3e	; 62
    461c:	9a 83       	std	Y+2, r25	; 0x02
    461e:	89 83       	std	Y+1, r24	; 0x01
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	9a 81       	ldd	r25, Y+2	; 0x02
    4624:	43 96       	adiw	r24, 0x13	; 19
    4626:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <_ZN6StringD1Ev>
{
} //~spcProcessing
    462a:	00 00       	nop
    462c:	0f 90       	pop	r0
    462e:	0f 90       	pop	r0
    4630:	df 91       	pop	r29
    4632:	cf 91       	pop	r28
    4634:	08 95       	ret

00004636 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	1f 92       	push	r1
    463c:	1f 92       	push	r1
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	9a 83       	std	Y+2, r25	; 0x02
    4644:	89 83       	std	Y+1, r24	; 0x01
    4646:	28 e0       	ldi	r18, 0x08	; 8
    4648:	33 e0       	ldi	r19, 0x03	; 3
    464a:	89 81       	ldd	r24, Y+1	; 0x01
    464c:	9a 81       	ldd	r25, Y+2	; 0x02
    464e:	fc 01       	movw	r30, r24
    4650:	31 83       	std	Z+1, r19	; 0x01
    4652:	20 83       	st	Z, r18
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	9a 81       	ldd	r25, Y+2	; 0x02
    4658:	fc 01       	movw	r30, r24
    465a:	13 82       	std	Z+3, r1	; 0x03
    465c:	12 82       	std	Z+2, r1	; 0x02
    465e:	00 00       	nop
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	df 91       	pop	r29
    4666:	cf 91       	pop	r28
    4668:	08 95       	ret

0000466a <_ZN18__gen_struct_PORTL1rEv>:
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
    4672:	8b e0       	ldi	r24, 0x0B	; 11
    4674:	91 e0       	ldi	r25, 0x01	; 1
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	08 95       	ret

0000467c <_ZN8SPIClass11setBitOrderEh>:
    467c:	cf 93       	push	r28
    467e:	df 93       	push	r29
    4680:	1f 92       	push	r1
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	89 83       	std	Y+1, r24	; 0x01
    4688:	89 81       	ldd	r24, Y+1	; 0x01
    468a:	88 23       	and	r24, r24
    468c:	51 f4       	brne	.+20     	; 0x46a2 <_ZN8SPIClass11setBitOrderEh+0x26>
    468e:	8c e4       	ldi	r24, 0x4C	; 76
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	2c e4       	ldi	r18, 0x4C	; 76
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	f9 01       	movw	r30, r18
    4698:	20 81       	ld	r18, Z
    469a:	20 62       	ori	r18, 0x20	; 32
    469c:	fc 01       	movw	r30, r24
    469e:	20 83       	st	Z, r18
    46a0:	09 c0       	rjmp	.+18     	; 0x46b4 <_ZN8SPIClass11setBitOrderEh+0x38>
    46a2:	8c e4       	ldi	r24, 0x4C	; 76
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	2c e4       	ldi	r18, 0x4C	; 76
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	f9 01       	movw	r30, r18
    46ac:	20 81       	ld	r18, Z
    46ae:	2f 7d       	andi	r18, 0xDF	; 223
    46b0:	fc 01       	movw	r30, r24
    46b2:	20 83       	st	Z, r18
    46b4:	00 00       	nop
    46b6:	0f 90       	pop	r0
    46b8:	df 91       	pop	r29
    46ba:	cf 91       	pop	r28
    46bc:	08 95       	ret

000046be <_ZN8SPIClass11setDataModeEh>:
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	1f 92       	push	r1
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
    46c8:	89 83       	std	Y+1, r24	; 0x01
    46ca:	8c e4       	ldi	r24, 0x4C	; 76
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	2c e4       	ldi	r18, 0x4C	; 76
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	f9 01       	movw	r30, r18
    46d4:	20 81       	ld	r18, Z
    46d6:	32 2f       	mov	r19, r18
    46d8:	33 7f       	andi	r19, 0xF3	; 243
    46da:	29 81       	ldd	r18, Y+1	; 0x01
    46dc:	23 2b       	or	r18, r19
    46de:	fc 01       	movw	r30, r24
    46e0:	20 83       	st	Z, r18
    46e2:	00 00       	nop
    46e4:	0f 90       	pop	r0
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	08 95       	ret

000046ec <_ZN8SPIClass15setClockDividerEh>:
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
    46f0:	1f 92       	push	r1
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	8c e4       	ldi	r24, 0x4C	; 76
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	2c e4       	ldi	r18, 0x4C	; 76
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	f9 01       	movw	r30, r18
    4702:	20 81       	ld	r18, Z
    4704:	32 2f       	mov	r19, r18
    4706:	3c 7f       	andi	r19, 0xFC	; 252
    4708:	29 81       	ldd	r18, Y+1	; 0x01
    470a:	23 70       	andi	r18, 0x03	; 3
    470c:	23 2b       	or	r18, r19
    470e:	fc 01       	movw	r30, r24
    4710:	20 83       	st	Z, r18
    4712:	8d e4       	ldi	r24, 0x4D	; 77
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	2d e4       	ldi	r18, 0x4D	; 77
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	f9 01       	movw	r30, r18
    471c:	20 81       	ld	r18, Z
    471e:	42 2f       	mov	r20, r18
    4720:	4e 7f       	andi	r20, 0xFE	; 254
    4722:	29 81       	ldd	r18, Y+1	; 0x01
    4724:	22 2f       	mov	r18, r18
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	35 95       	asr	r19
    472a:	27 95       	ror	r18
    472c:	35 95       	asr	r19
    472e:	27 95       	ror	r18
    4730:	21 70       	andi	r18, 0x01	; 1
    4732:	24 2b       	or	r18, r20
    4734:	fc 01       	movw	r30, r24
    4736:	20 83       	st	Z, r18
    4738:	00 00       	nop
    473a:	0f 90       	pop	r0
    473c:	df 91       	pop	r29
    473e:	cf 91       	pop	r28
    4740:	08 95       	ret

00004742 <_ZN11TFT_ILI9341C1Eii>:
    4742:	cf 93       	push	r28
    4744:	df 93       	push	r29
    4746:	00 d0       	rcall	.+0      	; 0x4748 <_ZN11TFT_ILI9341C1Eii+0x6>
    4748:	00 d0       	rcall	.+0      	; 0x474a <_ZN11TFT_ILI9341C1Eii+0x8>
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	9a 83       	std	Y+2, r25	; 0x02
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	7c 83       	std	Y+4, r23	; 0x04
    4754:	6b 83       	std	Y+3, r22	; 0x03
    4756:	5e 83       	std	Y+6, r21	; 0x06
    4758:	4d 83       	std	Y+5, r20	; 0x05
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	9a 81       	ldd	r25, Y+2	; 0x02
    475e:	6b df       	rcall	.-298    	; 0x4636 <_ZN5PrintC1Ev>
    4760:	2a ee       	ldi	r18, 0xEA	; 234
    4762:	32 e0       	ldi	r19, 0x02	; 2
    4764:	89 81       	ldd	r24, Y+1	; 0x01
    4766:	9a 81       	ldd	r25, Y+2	; 0x02
    4768:	fc 01       	movw	r30, r24
    476a:	31 83       	std	Z+1, r19	; 0x01
    476c:	20 83       	st	Z, r18
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	8c e2       	ldi	r24, 0x2C	; 44
    4772:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
    4776:	61 e0       	ldi	r22, 0x01	; 1
    4778:	8c e2       	ldi	r24, 0x2C	; 44
    477a:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
    477e:	75 df       	rcall	.-278    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    4780:	fc 01       	movw	r30, r24
    4782:	20 81       	ld	r18, Z
    4784:	22 60       	ori	r18, 0x02	; 2
    4786:	fc 01       	movw	r30, r24
    4788:	20 83       	st	Z, r18
    478a:	61 e0       	ldi	r22, 0x01	; 1
    478c:	80 e3       	ldi	r24, 0x30	; 48
    478e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
    4792:	6b df       	rcall	.-298    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    4794:	fc 01       	movw	r30, r24
    4796:	20 81       	ld	r18, Z
    4798:	24 60       	ori	r18, 0x04	; 4
    479a:	fc 01       	movw	r30, r24
    479c:	20 83       	st	Z, r18
    479e:	61 e0       	ldi	r22, 0x01	; 1
    47a0:	8f e2       	ldi	r24, 0x2F	; 47
    47a2:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
    47a6:	2b 81       	ldd	r18, Y+3	; 0x03
    47a8:	3c 81       	ldd	r19, Y+4	; 0x04
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	9a 81       	ldd	r25, Y+2	; 0x02
    47ae:	fc 01       	movw	r30, r24
    47b0:	33 8b       	std	Z+19, r19	; 0x13
    47b2:	22 8b       	std	Z+18, r18	; 0x12
    47b4:	2d 81       	ldd	r18, Y+5	; 0x05
    47b6:	3e 81       	ldd	r19, Y+6	; 0x06
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	9a 81       	ldd	r25, Y+2	; 0x02
    47bc:	fc 01       	movw	r30, r24
    47be:	35 8b       	std	Z+21, r19	; 0x15
    47c0:	24 8b       	std	Z+20, r18	; 0x14
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	9a 81       	ldd	r25, Y+2	; 0x02
    47c6:	fc 01       	movw	r30, r24
    47c8:	13 a2       	std	Z+35, r1	; 0x23
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	9a 81       	ldd	r25, Y+2	; 0x02
    47ce:	fc 01       	movw	r30, r24
    47d0:	11 86       	std	Z+9, r1	; 0x09
    47d2:	10 86       	std	Z+8, r1	; 0x08
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	9a 81       	ldd	r25, Y+2	; 0x02
    47d8:	fc 01       	movw	r30, r24
    47da:	20 85       	ldd	r18, Z+8	; 0x08
    47dc:	31 85       	ldd	r19, Z+9	; 0x09
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	9a 81       	ldd	r25, Y+2	; 0x02
    47e2:	fc 01       	movw	r30, r24
    47e4:	33 87       	std	Z+11, r19	; 0x0b
    47e6:	22 87       	std	Z+10, r18	; 0x0a
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	21 e0       	ldi	r18, 0x01	; 1
    47ee:	fc 01       	movw	r30, r24
    47f0:	20 a3       	std	Z+32, r18	; 0x20
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	9a 81       	ldd	r25, Y+2	; 0x02
    47f6:	21 e0       	ldi	r18, 0x01	; 1
    47f8:	fc 01       	movw	r30, r24
    47fa:	21 a3       	std	Z+33, r18	; 0x21
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4800:	2f ef       	ldi	r18, 0xFF	; 255
    4802:	3f ef       	ldi	r19, 0xFF	; 255
    4804:	fc 01       	movw	r30, r24
    4806:	37 8b       	std	Z+23, r19	; 0x17
    4808:	26 8b       	std	Z+22, r18	; 0x16
    480a:	89 81       	ldd	r24, Y+1	; 0x01
    480c:	9a 81       	ldd	r25, Y+2	; 0x02
    480e:	fc 01       	movw	r30, r24
    4810:	11 8e       	std	Z+25, r1	; 0x19
    4812:	10 8e       	std	Z+24, r1	; 0x18
    4814:	89 81       	ldd	r24, Y+1	; 0x01
    4816:	9a 81       	ldd	r25, Y+2	; 0x02
    4818:	fc 01       	movw	r30, r24
    481a:	11 8a       	std	Z+17, r1	; 0x11
    481c:	10 8a       	std	Z+16, r1	; 0x10
    481e:	89 81       	ldd	r24, Y+1	; 0x01
    4820:	9a 81       	ldd	r25, Y+2	; 0x02
    4822:	21 e0       	ldi	r18, 0x01	; 1
    4824:	fc 01       	movw	r30, r24
    4826:	24 a3       	std	Z+36, r18	; 0x24
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	fc 01       	movw	r30, r24
    482e:	12 a2       	std	Z+34, r1	; 0x22
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	9a 81       	ldd	r25, Y+2	; 0x02
    4834:	fc 01       	movw	r30, r24
    4836:	13 8e       	std	Z+27, r1	; 0x1b
    4838:	12 8e       	std	Z+26, r1	; 0x1a
    483a:	89 81       	ldd	r24, Y+1	; 0x01
    483c:	9a 81       	ldd	r25, Y+2	; 0x02
    483e:	2f ef       	ldi	r18, 0xFF	; 255
    4840:	3f ef       	ldi	r19, 0xFF	; 255
    4842:	fc 01       	movw	r30, r24
    4844:	35 8f       	std	Z+29, r19	; 0x1d
    4846:	24 8f       	std	Z+28, r18	; 0x1c
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	9a 81       	ldd	r25, Y+2	; 0x02
    484c:	2f ef       	ldi	r18, 0xFF	; 255
    484e:	3f ef       	ldi	r19, 0xFF	; 255
    4850:	fc 01       	movw	r30, r24
    4852:	37 8f       	std	Z+31, r19	; 0x1f
    4854:	26 8f       	std	Z+30, r18	; 0x1e
    4856:	89 81       	ldd	r24, Y+1	; 0x01
    4858:	9a 81       	ldd	r25, Y+2	; 0x02
    485a:	2f ef       	ldi	r18, 0xFF	; 255
    485c:	3f ef       	ldi	r19, 0xFF	; 255
    485e:	fc 01       	movw	r30, r24
    4860:	35 87       	std	Z+13, r19	; 0x0d
    4862:	24 87       	std	Z+12, r18	; 0x0c
    4864:	89 81       	ldd	r24, Y+1	; 0x01
    4866:	9a 81       	ldd	r25, Y+2	; 0x02
    4868:	2f ef       	ldi	r18, 0xFF	; 255
    486a:	3f ef       	ldi	r19, 0xFF	; 255
    486c:	fc 01       	movw	r30, r24
    486e:	37 87       	std	Z+15, r19	; 0x0f
    4870:	26 87       	std	Z+14, r18	; 0x0e
    4872:	89 81       	ldd	r24, Y+1	; 0x01
    4874:	9a 81       	ldd	r25, Y+2	; 0x02
    4876:	22 e0       	ldi	r18, 0x02	; 2
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	fc 01       	movw	r30, r24
    487c:	33 8f       	std	Z+27, r19	; 0x1b
    487e:	22 8f       	std	Z+26, r18	; 0x1a
    4880:	89 81       	ldd	r24, Y+1	; 0x01
    4882:	9a 81       	ldd	r25, Y+2	; 0x02
    4884:	fc 01       	movw	r30, r24
    4886:	82 8d       	ldd	r24, Z+26	; 0x1a
    4888:	93 8d       	ldd	r25, Z+27	; 0x1b
    488a:	9c 01       	movw	r18, r24
    488c:	24 60       	ori	r18, 0x04	; 4
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	9a 81       	ldd	r25, Y+2	; 0x02
    4892:	fc 01       	movw	r30, r24
    4894:	33 8f       	std	Z+27, r19	; 0x1b
    4896:	22 8f       	std	Z+26, r18	; 0x1a
    4898:	89 81       	ldd	r24, Y+1	; 0x01
    489a:	9a 81       	ldd	r25, Y+2	; 0x02
    489c:	fc 01       	movw	r30, r24
    489e:	82 8d       	ldd	r24, Z+26	; 0x1a
    48a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    48a2:	9c 01       	movw	r18, r24
    48a4:	20 61       	ori	r18, 0x10	; 16
    48a6:	89 81       	ldd	r24, Y+1	; 0x01
    48a8:	9a 81       	ldd	r25, Y+2	; 0x02
    48aa:	fc 01       	movw	r30, r24
    48ac:	33 8f       	std	Z+27, r19	; 0x1b
    48ae:	22 8f       	std	Z+26, r18	; 0x1a
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	fc 01       	movw	r30, r24
    48b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    48b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    48ba:	9c 01       	movw	r18, r24
    48bc:	20 64       	ori	r18, 0x40	; 64
    48be:	89 81       	ldd	r24, Y+1	; 0x01
    48c0:	9a 81       	ldd	r25, Y+2	; 0x02
    48c2:	fc 01       	movw	r30, r24
    48c4:	33 8f       	std	Z+27, r19	; 0x1b
    48c6:	22 8f       	std	Z+26, r18	; 0x1a
    48c8:	89 81       	ldd	r24, Y+1	; 0x01
    48ca:	9a 81       	ldd	r25, Y+2	; 0x02
    48cc:	fc 01       	movw	r30, r24
    48ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    48d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    48d2:	9c 01       	movw	r18, r24
    48d4:	20 68       	ori	r18, 0x80	; 128
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	9a 81       	ldd	r25, Y+2	; 0x02
    48da:	fc 01       	movw	r30, r24
    48dc:	33 8f       	std	Z+27, r19	; 0x1b
    48de:	22 8f       	std	Z+26, r18	; 0x1a
    48e0:	00 00       	nop
    48e2:	26 96       	adiw	r28, 0x06	; 6
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	f8 94       	cli
    48e8:	de bf       	out	0x3e, r29	; 62
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	cd bf       	out	0x3d, r28	; 61
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	08 95       	ret

000048f4 <_ZN11TFT_ILI93418spiwriteEh>:
    48f4:	cf 93       	push	r28
    48f6:	df 93       	push	r29
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <_ZN11TFT_ILI93418spiwriteEh+0x6>
    48fa:	1f 92       	push	r1
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	9b 83       	std	Y+3, r25	; 0x03
    4902:	8a 83       	std	Y+2, r24	; 0x02
    4904:	6c 83       	std	Y+4, r22	; 0x04
    4906:	8c e4       	ldi	r24, 0x4C	; 76
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	fc 01       	movw	r30, r24
    490c:	80 81       	ld	r24, Z
    490e:	89 83       	std	Y+1, r24	; 0x01
    4910:	8c e4       	ldi	r24, 0x4C	; 76
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	2a 81       	ldd	r18, Y+2	; 0x02
    4916:	3b 81       	ldd	r19, Y+3	; 0x03
    4918:	f9 01       	movw	r30, r18
    491a:	26 81       	ldd	r18, Z+6	; 0x06
    491c:	fc 01       	movw	r30, r24
    491e:	20 83       	st	Z, r18
    4920:	8e e4       	ldi	r24, 0x4E	; 78
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	2c 81       	ldd	r18, Y+4	; 0x04
    4926:	fc 01       	movw	r30, r24
    4928:	20 83       	st	Z, r18
    492a:	00 00       	nop
    492c:	8d e4       	ldi	r24, 0x4D	; 77
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	fc 01       	movw	r30, r24
    4932:	80 81       	ld	r24, Z
    4934:	80 95       	com	r24
    4936:	88 1f       	adc	r24, r24
    4938:	88 27       	eor	r24, r24
    493a:	88 1f       	adc	r24, r24
    493c:	88 23       	and	r24, r24
    493e:	09 f0       	breq	.+2      	; 0x4942 <_ZN11TFT_ILI93418spiwriteEh+0x4e>
    4940:	f5 cf       	rjmp	.-22     	; 0x492c <_ZN11TFT_ILI93418spiwriteEh+0x38>
    4942:	8c e4       	ldi	r24, 0x4C	; 76
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	29 81       	ldd	r18, Y+1	; 0x01
    4948:	fc 01       	movw	r30, r24
    494a:	20 83       	st	Z, r18
    494c:	00 00       	nop
    494e:	0f 90       	pop	r0
    4950:	0f 90       	pop	r0
    4952:	0f 90       	pop	r0
    4954:	0f 90       	pop	r0
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	08 95       	ret

0000495c <_ZN11TFT_ILI934112writecommandEh>:
    495c:	cf 93       	push	r28
    495e:	df 93       	push	r29
    4960:	00 d0       	rcall	.+0      	; 0x4962 <_ZN11TFT_ILI934112writecommandEh+0x6>
    4962:	cd b7       	in	r28, 0x3d	; 61
    4964:	de b7       	in	r29, 0x3e	; 62
    4966:	9a 83       	std	Y+2, r25	; 0x02
    4968:	89 83       	std	Y+1, r24	; 0x01
    496a:	6b 83       	std	Y+3, r22	; 0x03
    496c:	8d e4       	ldi	r24, 0x4D	; 77
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	fc 01       	movw	r30, r24
    4972:	20 81       	ld	r18, Z
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	9a 81       	ldd	r25, Y+2	; 0x02
    4978:	fc 01       	movw	r30, r24
    497a:	27 83       	std	Z+7, r18	; 0x07
    497c:	76 de       	rcall	.-788    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    497e:	fc 01       	movw	r30, r24
    4980:	20 81       	ld	r18, Z
    4982:	2d 7f       	andi	r18, 0xFD	; 253
    4984:	fc 01       	movw	r30, r24
    4986:	20 83       	st	Z, r18
    4988:	70 de       	rcall	.-800    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    498a:	fc 01       	movw	r30, r24
    498c:	20 81       	ld	r18, Z
    498e:	2b 7f       	andi	r18, 0xFB	; 251
    4990:	fc 01       	movw	r30, r24
    4992:	20 83       	st	Z, r18
    4994:	89 81       	ldd	r24, Y+1	; 0x01
    4996:	9a 81       	ldd	r25, Y+2	; 0x02
    4998:	6b 81       	ldd	r22, Y+3	; 0x03
    499a:	ac df       	rcall	.-168    	; 0x48f4 <_ZN11TFT_ILI93418spiwriteEh>
    499c:	66 de       	rcall	.-820    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    499e:	fc 01       	movw	r30, r24
    49a0:	20 81       	ld	r18, Z
    49a2:	24 60       	ori	r18, 0x04	; 4
    49a4:	fc 01       	movw	r30, r24
    49a6:	20 83       	st	Z, r18
    49a8:	00 00       	nop
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	08 95       	ret

000049b6 <_ZN11TFT_ILI93419writedataEh>:
    49b6:	cf 93       	push	r28
    49b8:	df 93       	push	r29
    49ba:	00 d0       	rcall	.+0      	; 0x49bc <_ZN11TFT_ILI93419writedataEh+0x6>
    49bc:	cd b7       	in	r28, 0x3d	; 61
    49be:	de b7       	in	r29, 0x3e	; 62
    49c0:	9a 83       	std	Y+2, r25	; 0x02
    49c2:	89 83       	std	Y+1, r24	; 0x01
    49c4:	6b 83       	std	Y+3, r22	; 0x03
    49c6:	51 de       	rcall	.-862    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    49c8:	fc 01       	movw	r30, r24
    49ca:	20 81       	ld	r18, Z
    49cc:	22 60       	ori	r18, 0x02	; 2
    49ce:	fc 01       	movw	r30, r24
    49d0:	20 83       	st	Z, r18
    49d2:	4b de       	rcall	.-874    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    49d4:	fc 01       	movw	r30, r24
    49d6:	20 81       	ld	r18, Z
    49d8:	2b 7f       	andi	r18, 0xFB	; 251
    49da:	fc 01       	movw	r30, r24
    49dc:	20 83       	st	Z, r18
    49de:	89 81       	ldd	r24, Y+1	; 0x01
    49e0:	9a 81       	ldd	r25, Y+2	; 0x02
    49e2:	6b 81       	ldd	r22, Y+3	; 0x03
    49e4:	87 df       	rcall	.-242    	; 0x48f4 <_ZN11TFT_ILI93418spiwriteEh>
    49e6:	41 de       	rcall	.-894    	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    49e8:	fc 01       	movw	r30, r24
    49ea:	20 81       	ld	r18, Z
    49ec:	24 60       	ori	r18, 0x04	; 4
    49ee:	fc 01       	movw	r30, r24
    49f0:	20 83       	st	Z, r18
    49f2:	00 00       	nop
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	0f 90       	pop	r0
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	08 95       	ret

00004a00 <_ZN11TFT_ILI93414initEv>:
    4a00:	cf 93       	push	r28
    4a02:	df 93       	push	r29
    4a04:	1f 92       	push	r1
    4a06:	1f 92       	push	r1
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
    4a0c:	9a 83       	std	Y+2, r25	; 0x02
    4a0e:	89 83       	std	Y+1, r24	; 0x01
    4a10:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <_ZN8SPIClass5beginEv>
    4a14:	8c e4       	ldi	r24, 0x4C	; 76
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	fc 01       	movw	r30, r24
    4a1a:	20 81       	ld	r18, Z
    4a1c:	89 81       	ldd	r24, Y+1	; 0x01
    4a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a20:	fc 01       	movw	r30, r24
    4a22:	27 83       	std	Z+7, r18	; 0x07
    4a24:	84 e0       	ldi	r24, 0x04	; 4
    4a26:	62 de       	rcall	.-828    	; 0x46ec <_ZN8SPIClass15setClockDividerEh>
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	28 de       	rcall	.-944    	; 0x467c <_ZN8SPIClass11setBitOrderEh>
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	47 de       	rcall	.-882    	; 0x46be <_ZN8SPIClass11setDataModeEh>
    4a30:	8c e4       	ldi	r24, 0x4C	; 76
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	fc 01       	movw	r30, r24
    4a36:	20 81       	ld	r18, Z
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	26 83       	std	Z+6, r18	; 0x06
    4a40:	61 e0       	ldi	r22, 0x01	; 1
    4a42:	8c e2       	ldi	r24, 0x2C	; 44
    4a44:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
    4a48:	65 e0       	ldi	r22, 0x05	; 5
    4a4a:	70 e0       	ldi	r23, 0x00	; 0
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	0e 94 70 44 	call	0x88e0	; 0x88e0 <delay>
    4a54:	60 e0       	ldi	r22, 0x00	; 0
    4a56:	8c e2       	ldi	r24, 0x2C	; 44
    4a58:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
    4a5c:	64 e1       	ldi	r22, 0x14	; 20
    4a5e:	70 e0       	ldi	r23, 0x00	; 0
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0e 94 70 44 	call	0x88e0	; 0x88e0 <delay>
    4a68:	61 e0       	ldi	r22, 0x01	; 1
    4a6a:	8c e2       	ldi	r24, 0x2C	; 44
    4a6c:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
    4a70:	66 e9       	ldi	r22, 0x96	; 150
    4a72:	70 e0       	ldi	r23, 0x00	; 0
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	0e 94 70 44 	call	0x88e0	; 0x88e0 <delay>
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a80:	65 ef       	ldi	r22, 0xF5	; 245
    4a82:	7d e2       	ldi	r23, 0x2D	; 45
    4a84:	06 d0       	rcall	.+12     	; 0x4a92 <_ZN11TFT_ILI934111commandListEPKh>
    4a86:	00 00       	nop
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	08 95       	ret

00004a92 <_ZN11TFT_ILI934111commandListEPKh>:
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	66 97       	sbiw	r28, 0x16	; 22
    4a9c:	0f b6       	in	r0, 0x3f	; 63
    4a9e:	f8 94       	cli
    4aa0:	de bf       	out	0x3e, r29	; 62
    4aa2:	0f be       	out	0x3f, r0	; 63
    4aa4:	cd bf       	out	0x3d, r28	; 61
    4aa6:	9c 8b       	std	Y+20, r25	; 0x14
    4aa8:	8b 8b       	std	Y+19, r24	; 0x13
    4aaa:	7e 8b       	std	Y+22, r23	; 0x16
    4aac:	6d 8b       	std	Y+21, r22	; 0x15
    4aae:	8d 89       	ldd	r24, Y+21	; 0x15
    4ab0:	9e 89       	ldd	r25, Y+22	; 0x16
    4ab2:	9c 01       	movw	r18, r24
    4ab4:	2f 5f       	subi	r18, 0xFF	; 255
    4ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ab8:	3e 8b       	std	Y+22, r19	; 0x16
    4aba:	2d 8b       	std	Y+21, r18	; 0x15
    4abc:	9c 83       	std	Y+4, r25	; 0x04
    4abe:	8b 83       	std	Y+3, r24	; 0x03
    4ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	84 91       	lpm	r24, Z
    4ac8:	8d 83       	std	Y+5, r24	; 0x05
    4aca:	8d 81       	ldd	r24, Y+5	; 0x05
    4acc:	89 83       	std	Y+1, r24	; 0x01
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	9f ef       	ldi	r25, 0xFF	; 255
    4ad2:	98 0f       	add	r25, r24
    4ad4:	99 83       	std	Y+1, r25	; 0x01
    4ad6:	91 e0       	ldi	r25, 0x01	; 1
    4ad8:	88 23       	and	r24, r24
    4ada:	09 f4       	brne	.+2      	; 0x4ade <_ZN11TFT_ILI934111commandListEPKh+0x4c>
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	99 23       	and	r25, r25
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <_ZN11TFT_ILI934111commandListEPKh+0x52>
    4ae2:	6d c0       	rjmp	.+218    	; 0x4bbe <_ZN11TFT_ILI934111commandListEPKh+0x12c>
    4ae4:	8d 89       	ldd	r24, Y+21	; 0x15
    4ae6:	9e 89       	ldd	r25, Y+22	; 0x16
    4ae8:	9c 01       	movw	r18, r24
    4aea:	2f 5f       	subi	r18, 0xFF	; 255
    4aec:	3f 4f       	sbci	r19, 0xFF	; 255
    4aee:	3e 8b       	std	Y+22, r19	; 0x16
    4af0:	2d 8b       	std	Y+21, r18	; 0x15
    4af2:	9f 83       	std	Y+7, r25	; 0x07
    4af4:	8e 83       	std	Y+6, r24	; 0x06
    4af6:	8e 81       	ldd	r24, Y+6	; 0x06
    4af8:	9f 81       	ldd	r25, Y+7	; 0x07
    4afa:	fc 01       	movw	r30, r24
    4afc:	84 91       	lpm	r24, Z
    4afe:	88 87       	std	Y+8, r24	; 0x08
    4b00:	28 85       	ldd	r18, Y+8	; 0x08
    4b02:	8b 89       	ldd	r24, Y+19	; 0x13
    4b04:	9c 89       	ldd	r25, Y+20	; 0x14
    4b06:	62 2f       	mov	r22, r18
    4b08:	29 df       	rcall	.-430    	; 0x495c <_ZN11TFT_ILI934112writecommandEh>
    4b0a:	8d 89       	ldd	r24, Y+21	; 0x15
    4b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    4b0e:	9c 01       	movw	r18, r24
    4b10:	2f 5f       	subi	r18, 0xFF	; 255
    4b12:	3f 4f       	sbci	r19, 0xFF	; 255
    4b14:	3e 8b       	std	Y+22, r19	; 0x16
    4b16:	2d 8b       	std	Y+21, r18	; 0x15
    4b18:	9a 87       	std	Y+10, r25	; 0x0a
    4b1a:	89 87       	std	Y+9, r24	; 0x09
    4b1c:	89 85       	ldd	r24, Y+9	; 0x09
    4b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b20:	fc 01       	movw	r30, r24
    4b22:	84 91       	lpm	r24, Z
    4b24:	8b 87       	std	Y+11, r24	; 0x0b
    4b26:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b28:	8a 83       	std	Y+2, r24	; 0x02
    4b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2c:	80 78       	andi	r24, 0x80	; 128
    4b2e:	8c 87       	std	Y+12, r24	; 0x0c
    4b30:	8a 81       	ldd	r24, Y+2	; 0x02
    4b32:	8f 77       	andi	r24, 0x7F	; 127
    4b34:	8a 83       	std	Y+2, r24	; 0x02
    4b36:	8a 81       	ldd	r24, Y+2	; 0x02
    4b38:	9f ef       	ldi	r25, 0xFF	; 255
    4b3a:	98 0f       	add	r25, r24
    4b3c:	9a 83       	std	Y+2, r25	; 0x02
    4b3e:	91 e0       	ldi	r25, 0x01	; 1
    4b40:	88 23       	and	r24, r24
    4b42:	09 f4       	brne	.+2      	; 0x4b46 <_ZN11TFT_ILI934111commandListEPKh+0xb4>
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	99 23       	and	r25, r25
    4b48:	a1 f0       	breq	.+40     	; 0x4b72 <_ZN11TFT_ILI934111commandListEPKh+0xe0>
    4b4a:	8d 89       	ldd	r24, Y+21	; 0x15
    4b4c:	9e 89       	ldd	r25, Y+22	; 0x16
    4b4e:	9c 01       	movw	r18, r24
    4b50:	2f 5f       	subi	r18, 0xFF	; 255
    4b52:	3f 4f       	sbci	r19, 0xFF	; 255
    4b54:	3e 8b       	std	Y+22, r19	; 0x16
    4b56:	2d 8b       	std	Y+21, r18	; 0x15
    4b58:	9e 87       	std	Y+14, r25	; 0x0e
    4b5a:	8d 87       	std	Y+13, r24	; 0x0d
    4b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b60:	fc 01       	movw	r30, r24
    4b62:	84 91       	lpm	r24, Z
    4b64:	8f 87       	std	Y+15, r24	; 0x0f
    4b66:	2f 85       	ldd	r18, Y+15	; 0x0f
    4b68:	8b 89       	ldd	r24, Y+19	; 0x13
    4b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b6c:	62 2f       	mov	r22, r18
    4b6e:	23 df       	rcall	.-442    	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    4b70:	e2 cf       	rjmp	.-60     	; 0x4b36 <_ZN11TFT_ILI934111commandListEPKh+0xa4>
    4b72:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b74:	88 23       	and	r24, r24
    4b76:	09 f4       	brne	.+2      	; 0x4b7a <_ZN11TFT_ILI934111commandListEPKh+0xe8>
    4b78:	aa cf       	rjmp	.-172    	; 0x4ace <_ZN11TFT_ILI934111commandListEPKh+0x3c>
    4b7a:	8d 89       	ldd	r24, Y+21	; 0x15
    4b7c:	9e 89       	ldd	r25, Y+22	; 0x16
    4b7e:	9c 01       	movw	r18, r24
    4b80:	2f 5f       	subi	r18, 0xFF	; 255
    4b82:	3f 4f       	sbci	r19, 0xFF	; 255
    4b84:	3e 8b       	std	Y+22, r19	; 0x16
    4b86:	2d 8b       	std	Y+21, r18	; 0x15
    4b88:	99 8b       	std	Y+17, r25	; 0x11
    4b8a:	88 8b       	std	Y+16, r24	; 0x10
    4b8c:	88 89       	ldd	r24, Y+16	; 0x10
    4b8e:	99 89       	ldd	r25, Y+17	; 0x11
    4b90:	fc 01       	movw	r30, r24
    4b92:	84 91       	lpm	r24, Z
    4b94:	8a 8b       	std	Y+18, r24	; 0x12
    4b96:	8a 89       	ldd	r24, Y+18	; 0x12
    4b98:	8c 87       	std	Y+12, r24	; 0x0c
    4b9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    4b9e:	31 f0       	breq	.+12     	; 0x4bac <_ZN11TFT_ILI934111commandListEPKh+0x11a>
    4ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ba2:	88 2f       	mov	r24, r24
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	a0 e0       	ldi	r26, 0x00	; 0
    4ba8:	b0 e0       	ldi	r27, 0x00	; 0
    4baa:	04 c0       	rjmp	.+8      	; 0x4bb4 <_ZN11TFT_ILI934111commandListEPKh+0x122>
    4bac:	84 ef       	ldi	r24, 0xF4	; 244
    4bae:	91 e0       	ldi	r25, 0x01	; 1
    4bb0:	a0 e0       	ldi	r26, 0x00	; 0
    4bb2:	b0 e0       	ldi	r27, 0x00	; 0
    4bb4:	bc 01       	movw	r22, r24
    4bb6:	cd 01       	movw	r24, r26
    4bb8:	0e 94 70 44 	call	0x88e0	; 0x88e0 <delay>
    4bbc:	88 cf       	rjmp	.-240    	; 0x4ace <_ZN11TFT_ILI934111commandListEPKh+0x3c>
    4bbe:	00 00       	nop
    4bc0:	66 96       	adiw	r28, 0x16	; 22
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	08 95       	ret

00004bd2 <_ZN11TFT_ILI934110fillScreenEj>:
    4bd2:	ef 92       	push	r14
    4bd4:	ff 92       	push	r15
    4bd6:	0f 93       	push	r16
    4bd8:	1f 93       	push	r17
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	00 d0       	rcall	.+0      	; 0x4be0 <_ZN11TFT_ILI934110fillScreenEj+0xe>
    4be0:	1f 92       	push	r1
    4be2:	cd b7       	in	r28, 0x3d	; 61
    4be4:	de b7       	in	r29, 0x3e	; 62
    4be6:	9a 83       	std	Y+2, r25	; 0x02
    4be8:	89 83       	std	Y+1, r24	; 0x01
    4bea:	7c 83       	std	Y+4, r23	; 0x04
    4bec:	6b 83       	std	Y+3, r22	; 0x03
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
    4bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	84 89       	ldd	r24, Z+20	; 0x14
    4bf6:	95 89       	ldd	r25, Z+21	; 0x15
    4bf8:	bc 01       	movw	r22, r24
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	fc 01       	movw	r30, r24
    4c00:	82 89       	ldd	r24, Z+18	; 0x12
    4c02:	93 89       	ldd	r25, Z+19	; 0x13
    4c04:	ac 01       	movw	r20, r24
    4c06:	2b 81       	ldd	r18, Y+3	; 0x03
    4c08:	3c 81       	ldd	r19, Y+4	; 0x04
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0e:	79 01       	movw	r14, r18
    4c10:	8b 01       	movw	r16, r22
    4c12:	9a 01       	movw	r18, r20
    4c14:	40 e0       	ldi	r20, 0x00	; 0
    4c16:	50 e0       	ldi	r21, 0x00	; 0
    4c18:	60 e0       	ldi	r22, 0x00	; 0
    4c1a:	70 e0       	ldi	r23, 0x00	; 0
    4c1c:	ab d5       	rcall	.+2902   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    4c1e:	00 00       	nop
    4c20:	0f 90       	pop	r0
    4c22:	0f 90       	pop	r0
    4c24:	0f 90       	pop	r0
    4c26:	0f 90       	pop	r0
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	ff 90       	pop	r15
    4c32:	ef 90       	pop	r14
    4c34:	08 95       	ret

00004c36 <_ZN11TFT_ILI93419setCursorEii>:
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29
    4c3a:	00 d0       	rcall	.+0      	; 0x4c3c <_ZN11TFT_ILI93419setCursorEii+0x6>
    4c3c:	00 d0       	rcall	.+0      	; 0x4c3e <_ZN11TFT_ILI93419setCursorEii+0x8>
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	9a 83       	std	Y+2, r25	; 0x02
    4c44:	89 83       	std	Y+1, r24	; 0x01
    4c46:	7c 83       	std	Y+4, r23	; 0x04
    4c48:	6b 83       	std	Y+3, r22	; 0x03
    4c4a:	5e 83       	std	Y+6, r21	; 0x06
    4c4c:	4d 83       	std	Y+5, r20	; 0x05
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
    4c50:	9a 81       	ldd	r25, Y+2	; 0x02
    4c52:	2b 81       	ldd	r18, Y+3	; 0x03
    4c54:	3c 81       	ldd	r19, Y+4	; 0x04
    4c56:	fc 01       	movw	r30, r24
    4c58:	31 87       	std	Z+9, r19	; 0x09
    4c5a:	20 87       	std	Z+8, r18	; 0x08
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c60:	2d 81       	ldd	r18, Y+5	; 0x05
    4c62:	3e 81       	ldd	r19, Y+6	; 0x06
    4c64:	fc 01       	movw	r30, r24
    4c66:	33 87       	std	Z+11, r19	; 0x0b
    4c68:	22 87       	std	Z+10, r18	; 0x0a
    4c6a:	00 00       	nop
    4c6c:	26 96       	adiw	r28, 0x06	; 6
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	f8 94       	cli
    4c72:	de bf       	out	0x3e, r29	; 62
    4c74:	0f be       	out	0x3f, r0	; 63
    4c76:	cd bf       	out	0x3d, r28	; 61
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	08 95       	ret

00004c7e <_ZN11TFT_ILI934111setTextSizeEh>:
    4c7e:	cf 93       	push	r28
    4c80:	df 93       	push	r29
    4c82:	00 d0       	rcall	.+0      	; 0x4c84 <_ZN11TFT_ILI934111setTextSizeEh+0x6>
    4c84:	cd b7       	in	r28, 0x3d	; 61
    4c86:	de b7       	in	r29, 0x3e	; 62
    4c88:	9a 83       	std	Y+2, r25	; 0x02
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	6b 83       	std	Y+3, r22	; 0x03
    4c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c90:	88 30       	cpi	r24, 0x08	; 8
    4c92:	10 f0       	brcs	.+4      	; 0x4c98 <_ZN11TFT_ILI934111setTextSizeEh+0x1a>
    4c94:	87 e0       	ldi	r24, 0x07	; 7
    4c96:	8b 83       	std	Y+3, r24	; 0x03
    4c98:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9a:	88 23       	and	r24, r24
    4c9c:	11 f0       	breq	.+4      	; 0x4ca2 <_ZN11TFT_ILI934111setTextSizeEh+0x24>
    4c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    4ca0:	01 c0       	rjmp	.+2      	; 0x4ca4 <_ZN11TFT_ILI934111setTextSizeEh+0x26>
    4ca2:	21 e0       	ldi	r18, 0x01	; 1
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca8:	fc 01       	movw	r30, r24
    4caa:	21 a3       	std	Z+33, r18	; 0x21
    4cac:	00 00       	nop
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	0f 90       	pop	r0
    4cb4:	df 91       	pop	r29
    4cb6:	cf 91       	pop	r28
    4cb8:	08 95       	ret

00004cba <_ZN11TFT_ILI934112setTextColorEjj>:
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	00 d0       	rcall	.+0      	; 0x4cc0 <_ZN11TFT_ILI934112setTextColorEjj+0x6>
    4cc0:	00 d0       	rcall	.+0      	; 0x4cc2 <_ZN11TFT_ILI934112setTextColorEjj+0x8>
    4cc2:	cd b7       	in	r28, 0x3d	; 61
    4cc4:	de b7       	in	r29, 0x3e	; 62
    4cc6:	9a 83       	std	Y+2, r25	; 0x02
    4cc8:	89 83       	std	Y+1, r24	; 0x01
    4cca:	7c 83       	std	Y+4, r23	; 0x04
    4ccc:	6b 83       	std	Y+3, r22	; 0x03
    4cce:	5e 83       	std	Y+6, r21	; 0x06
    4cd0:	4d 83       	std	Y+5, r20	; 0x05
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
    4cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    4cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    4cda:	fc 01       	movw	r30, r24
    4cdc:	37 8b       	std	Z+23, r19	; 0x17
    4cde:	26 8b       	std	Z+22, r18	; 0x16
    4ce0:	89 81       	ldd	r24, Y+1	; 0x01
    4ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce4:	2d 81       	ldd	r18, Y+5	; 0x05
    4ce6:	3e 81       	ldd	r19, Y+6	; 0x06
    4ce8:	fc 01       	movw	r30, r24
    4cea:	31 8f       	std	Z+25, r19	; 0x19
    4cec:	20 8f       	std	Z+24, r18	; 0x18
    4cee:	00 00       	nop
    4cf0:	26 96       	adiw	r28, 0x06	; 6
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	f8 94       	cli
    4cf6:	de bf       	out	0x3e, r29	; 62
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	cd bf       	out	0x3d, r28	; 61
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	08 95       	ret

00004d02 <_ZN11TFT_ILI93418drawCharEiihjjh>:
    4d02:	cf 92       	push	r12
    4d04:	ef 92       	push	r14
    4d06:	ff 92       	push	r15
    4d08:	0f 93       	push	r16
    4d0a:	1f 93       	push	r17
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
    4d10:	cd b7       	in	r28, 0x3d	; 61
    4d12:	de b7       	in	r29, 0x3e	; 62
    4d14:	a1 97       	sbiw	r28, 0x21	; 33
    4d16:	0f b6       	in	r0, 0x3f	; 63
    4d18:	f8 94       	cli
    4d1a:	de bf       	out	0x3e, r29	; 62
    4d1c:	0f be       	out	0x3f, r0	; 63
    4d1e:	cd bf       	out	0x3d, r28	; 61
    4d20:	9f 8b       	std	Y+23, r25	; 0x17
    4d22:	8e 8b       	std	Y+22, r24	; 0x16
    4d24:	79 8f       	std	Y+25, r23	; 0x19
    4d26:	68 8f       	std	Y+24, r22	; 0x18
    4d28:	5b 8f       	std	Y+27, r21	; 0x1b
    4d2a:	4a 8f       	std	Y+26, r20	; 0x1a
    4d2c:	2c 8f       	std	Y+28, r18	; 0x1c
    4d2e:	1e 8f       	std	Y+30, r17	; 0x1e
    4d30:	0d 8f       	std	Y+29, r16	; 0x1d
    4d32:	f8 a2       	std	Y+32, r15	; 0x20
    4d34:	ef 8e       	std	Y+31, r14	; 0x1f
    4d36:	c9 a2       	std	Y+33, r12	; 0x21
    4d38:	8e 89       	ldd	r24, Y+22	; 0x16
    4d3a:	9f 89       	ldd	r25, Y+23	; 0x17
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	82 89       	ldd	r24, Z+18	; 0x12
    4d40:	93 89       	ldd	r25, Z+19	; 0x13
    4d42:	9c 01       	movw	r18, r24
    4d44:	88 8d       	ldd	r24, Y+24	; 0x18
    4d46:	99 8d       	ldd	r25, Y+25	; 0x19
    4d48:	82 17       	cp	r24, r18
    4d4a:	93 07       	cpc	r25, r19
    4d4c:	0c f0       	brlt	.+2      	; 0x4d50 <_ZN11TFT_ILI93418drawCharEiihjjh+0x4e>
    4d4e:	04 c2       	rjmp	.+1032   	; 0x5158 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4d50:	8e 89       	ldd	r24, Y+22	; 0x16
    4d52:	9f 89       	ldd	r25, Y+23	; 0x17
    4d54:	fc 01       	movw	r30, r24
    4d56:	84 89       	ldd	r24, Z+20	; 0x14
    4d58:	95 89       	ldd	r25, Z+21	; 0x15
    4d5a:	9c 01       	movw	r18, r24
    4d5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d60:	82 17       	cp	r24, r18
    4d62:	93 07       	cpc	r25, r19
    4d64:	0c f0       	brlt	.+2      	; 0x4d68 <_ZN11TFT_ILI93418drawCharEiihjjh+0x66>
    4d66:	f8 c1       	rjmp	.+1008   	; 0x5158 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4d68:	89 a1       	ldd	r24, Y+33	; 0x21
    4d6a:	28 2f       	mov	r18, r24
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	c9 01       	movw	r24, r18
    4d70:	88 0f       	add	r24, r24
    4d72:	99 1f       	adc	r25, r25
    4d74:	82 0f       	add	r24, r18
    4d76:	93 1f       	adc	r25, r19
    4d78:	88 0f       	add	r24, r24
    4d7a:	99 1f       	adc	r25, r25
    4d7c:	9c 01       	movw	r18, r24
    4d7e:	88 8d       	ldd	r24, Y+24	; 0x18
    4d80:	99 8d       	ldd	r25, Y+25	; 0x19
    4d82:	82 0f       	add	r24, r18
    4d84:	93 1f       	adc	r25, r19
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	99 23       	and	r25, r25
    4d8a:	0c f4       	brge	.+2      	; 0x4d8e <_ZN11TFT_ILI93418drawCharEiihjjh+0x8c>
    4d8c:	e5 c1       	rjmp	.+970    	; 0x5158 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    4d90:	88 2f       	mov	r24, r24
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	9c 01       	movw	r18, r24
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	22 0f       	add	r18, r18
    4d9c:	33 1f       	adc	r19, r19
    4d9e:	22 0f       	add	r18, r18
    4da0:	33 1f       	adc	r19, r19
    4da2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4da4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4da6:	82 0f       	add	r24, r18
    4da8:	93 1f       	adc	r25, r19
    4daa:	01 97       	sbiw	r24, 0x01	; 1
    4dac:	99 23       	and	r25, r25
    4dae:	0c f4       	brge	.+2      	; 0x4db2 <_ZN11TFT_ILI93418drawCharEiihjjh+0xb0>
    4db0:	d3 c1       	rjmp	.+934    	; 0x5158 <_ZN11TFT_ILI93418drawCharEiihjjh+0x456>
    4db2:	41 e0       	ldi	r20, 0x01	; 1
    4db4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4db6:	38 a1       	ldd	r19, Y+32	; 0x20
    4db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4dbc:	28 17       	cp	r18, r24
    4dbe:	39 07       	cpc	r19, r25
    4dc0:	09 f4       	brne	.+2      	; 0x4dc4 <_ZN11TFT_ILI93418drawCharEiihjjh+0xc2>
    4dc2:	40 e0       	ldi	r20, 0x00	; 0
    4dc4:	49 87       	std	Y+9, r20	; 0x09
    4dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    4dc8:	81 30       	cpi	r24, 0x01	; 1
    4dca:	09 f0       	breq	.+2      	; 0x4dce <_ZN11TFT_ILI93418drawCharEiihjjh+0xcc>
    4dcc:	e9 c0       	rjmp	.+466    	; 0x4fa0 <_ZN11TFT_ILI93418drawCharEiihjjh+0x29e>
    4dce:	89 85       	ldd	r24, Y+9	; 0x09
    4dd0:	88 23       	and	r24, r24
    4dd2:	09 f4       	brne	.+2      	; 0x4dd6 <_ZN11TFT_ILI93418drawCharEiihjjh+0xd4>
    4dd4:	e5 c0       	rjmp	.+458    	; 0x4fa0 <_ZN11TFT_ILI93418drawCharEiihjjh+0x29e>
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	89 83       	std	Y+1, r24	; 0x01
    4dda:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ddc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4dde:	fc 01       	movw	r30, r24
    4de0:	38 96       	adiw	r30, 0x08	; 8
    4de2:	88 8d       	ldd	r24, Y+24	; 0x18
    4de4:	99 8d       	ldd	r25, Y+25	; 0x19
    4de6:	9c 01       	movw	r18, r24
    4de8:	2b 5f       	subi	r18, 0xFB	; 251
    4dea:	3f 4f       	sbci	r19, 0xFF	; 255
    4dec:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4dee:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4df0:	68 8d       	ldd	r22, Y+24	; 0x18
    4df2:	79 8d       	ldd	r23, Y+25	; 0x19
    4df4:	8e 89       	ldd	r24, Y+22	; 0x16
    4df6:	9f 89       	ldd	r25, Y+23	; 0x17
    4df8:	8f 01       	movw	r16, r30
    4dfa:	bd d1       	rcall	.+890    	; 0x5176 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    4dfc:	1a 82       	std	Y+2, r1	; 0x02
    4dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4e00:	85 30       	cpi	r24, 0x05	; 5
    4e02:	5c f5       	brge	.+86     	; 0x4e5a <_ZN11TFT_ILI93418drawCharEiihjjh+0x158>
    4e04:	8a 81       	ldd	r24, Y+2	; 0x02
    4e06:	08 2e       	mov	r0, r24
    4e08:	00 0c       	add	r0, r0
    4e0a:	99 0b       	sbc	r25, r25
    4e0c:	9e 01       	movw	r18, r28
    4e0e:	20 5f       	subi	r18, 0xF0	; 240
    4e10:	3f 4f       	sbci	r19, 0xFF	; 255
    4e12:	a9 01       	movw	r20, r18
    4e14:	48 0f       	add	r20, r24
    4e16:	59 1f       	adc	r21, r25
    4e18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e1a:	28 2f       	mov	r18, r24
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	c9 01       	movw	r24, r18
    4e20:	88 0f       	add	r24, r24
    4e22:	99 1f       	adc	r25, r25
    4e24:	88 0f       	add	r24, r24
    4e26:	99 1f       	adc	r25, r25
    4e28:	82 0f       	add	r24, r18
    4e2a:	93 1f       	adc	r25, r19
    4e2c:	9c 01       	movw	r18, r24
    4e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e30:	08 2e       	mov	r0, r24
    4e32:	00 0c       	add	r0, r0
    4e34:	99 0b       	sbc	r25, r25
    4e36:	82 0f       	add	r24, r18
    4e38:	93 1f       	adc	r25, r19
    4e3a:	86 5c       	subi	r24, 0xC6	; 198
    4e3c:	9e 4f       	sbci	r25, 0xFE	; 254
    4e3e:	9b 87       	std	Y+11, r25	; 0x0b
    4e40:	8a 87       	std	Y+10, r24	; 0x0a
    4e42:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e44:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e46:	fc 01       	movw	r30, r24
    4e48:	84 91       	lpm	r24, Z
    4e4a:	8c 87       	std	Y+12, r24	; 0x0c
    4e4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e4e:	fa 01       	movw	r30, r20
    4e50:	80 83       	st	Z, r24
    4e52:	8a 81       	ldd	r24, Y+2	; 0x02
    4e54:	8f 5f       	subi	r24, 0xFF	; 255
    4e56:	8a 83       	std	Y+2, r24	; 0x02
    4e58:	d2 cf       	rjmp	.-92     	; 0x4dfe <_ZN11TFT_ILI93418drawCharEiihjjh+0xfc>
    4e5a:	1d 8a       	std	Y+21, r1	; 0x15
    4e5c:	1b 82       	std	Y+3, r1	; 0x03
    4e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e60:	88 30       	cpi	r24, 0x08	; 8
    4e62:	0c f0       	brlt	.+2      	; 0x4e66 <_ZN11TFT_ILI93418drawCharEiihjjh+0x164>
    4e64:	8b c0       	rjmp	.+278    	; 0x4f7c <_ZN11TFT_ILI93418drawCharEiihjjh+0x27a>
    4e66:	1c 82       	std	Y+4, r1	; 0x04
    4e68:	8c 81       	ldd	r24, Y+4	; 0x04
    4e6a:	85 30       	cpi	r24, 0x05	; 5
    4e6c:	0c f0       	brlt	.+2      	; 0x4e70 <_ZN11TFT_ILI93418drawCharEiihjjh+0x16e>
    4e6e:	5c c0       	rjmp	.+184    	; 0x4f28 <_ZN11TFT_ILI93418drawCharEiihjjh+0x226>
    4e70:	8c 81       	ldd	r24, Y+4	; 0x04
    4e72:	08 2e       	mov	r0, r24
    4e74:	00 0c       	add	r0, r0
    4e76:	99 0b       	sbc	r25, r25
    4e78:	9e 01       	movw	r18, r28
    4e7a:	20 5f       	subi	r18, 0xF0	; 240
    4e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e7e:	82 0f       	add	r24, r18
    4e80:	93 1f       	adc	r25, r19
    4e82:	fc 01       	movw	r30, r24
    4e84:	90 81       	ld	r25, Z
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	89 23       	and	r24, r25
    4e8a:	88 23       	and	r24, r24
    4e8c:	29 f1       	breq	.+74     	; 0x4ed8 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1d6>
    4e8e:	8d e4       	ldi	r24, 0x4D	; 77
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	fc 01       	movw	r30, r24
    4e94:	80 81       	ld	r24, Z
    4e96:	80 95       	com	r24
    4e98:	88 1f       	adc	r24, r24
    4e9a:	88 27       	eor	r24, r24
    4e9c:	88 1f       	adc	r24, r24
    4e9e:	88 23       	and	r24, r24
    4ea0:	09 f0       	breq	.+2      	; 0x4ea4 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1a2>
    4ea2:	f5 cf       	rjmp	.-22     	; 0x4e8e <_ZN11TFT_ILI93418drawCharEiihjjh+0x18c>
    4ea4:	8e e4       	ldi	r24, 0x4E	; 78
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4eaa:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4eac:	23 2f       	mov	r18, r19
    4eae:	33 27       	eor	r19, r19
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	20 83       	st	Z, r18
    4eb4:	00 00       	nop
    4eb6:	8d e4       	ldi	r24, 0x4D	; 77
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	fc 01       	movw	r30, r24
    4ebc:	80 81       	ld	r24, Z
    4ebe:	80 95       	com	r24
    4ec0:	88 1f       	adc	r24, r24
    4ec2:	88 27       	eor	r24, r24
    4ec4:	88 1f       	adc	r24, r24
    4ec6:	88 23       	and	r24, r24
    4ec8:	09 f0       	breq	.+2      	; 0x4ecc <_ZN11TFT_ILI93418drawCharEiihjjh+0x1ca>
    4eca:	f5 cf       	rjmp	.-22     	; 0x4eb6 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1b4>
    4ecc:	8e e4       	ldi	r24, 0x4E	; 78
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	20 83       	st	Z, r18
    4ed6:	24 c0       	rjmp	.+72     	; 0x4f20 <_ZN11TFT_ILI93418drawCharEiihjjh+0x21e>
    4ed8:	8d e4       	ldi	r24, 0x4D	; 77
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	fc 01       	movw	r30, r24
    4ede:	80 81       	ld	r24, Z
    4ee0:	80 95       	com	r24
    4ee2:	88 1f       	adc	r24, r24
    4ee4:	88 27       	eor	r24, r24
    4ee6:	88 1f       	adc	r24, r24
    4ee8:	88 23       	and	r24, r24
    4eea:	09 f0       	breq	.+2      	; 0x4eee <_ZN11TFT_ILI93418drawCharEiihjjh+0x1ec>
    4eec:	f5 cf       	rjmp	.-22     	; 0x4ed8 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1d6>
    4eee:	8e e4       	ldi	r24, 0x4E	; 78
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4ef4:	38 a1       	ldd	r19, Y+32	; 0x20
    4ef6:	23 2f       	mov	r18, r19
    4ef8:	33 27       	eor	r19, r19
    4efa:	fc 01       	movw	r30, r24
    4efc:	20 83       	st	Z, r18
    4efe:	00 00       	nop
    4f00:	8d e4       	ldi	r24, 0x4D	; 77
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	fc 01       	movw	r30, r24
    4f06:	80 81       	ld	r24, Z
    4f08:	80 95       	com	r24
    4f0a:	88 1f       	adc	r24, r24
    4f0c:	88 27       	eor	r24, r24
    4f0e:	88 1f       	adc	r24, r24
    4f10:	88 23       	and	r24, r24
    4f12:	09 f0       	breq	.+2      	; 0x4f16 <_ZN11TFT_ILI93418drawCharEiihjjh+0x214>
    4f14:	f5 cf       	rjmp	.-22     	; 0x4f00 <_ZN11TFT_ILI93418drawCharEiihjjh+0x1fe>
    4f16:	8e e4       	ldi	r24, 0x4E	; 78
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	20 83       	st	Z, r18
    4f20:	8c 81       	ldd	r24, Y+4	; 0x04
    4f22:	8f 5f       	subi	r24, 0xFF	; 255
    4f24:	8c 83       	std	Y+4, r24	; 0x04
    4f26:	a0 cf       	rjmp	.-192    	; 0x4e68 <_ZN11TFT_ILI93418drawCharEiihjjh+0x166>
    4f28:	89 81       	ldd	r24, Y+1	; 0x01
    4f2a:	88 0f       	add	r24, r24
    4f2c:	89 83       	std	Y+1, r24	; 0x01
    4f2e:	8d e4       	ldi	r24, 0x4D	; 77
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	fc 01       	movw	r30, r24
    4f34:	80 81       	ld	r24, Z
    4f36:	80 95       	com	r24
    4f38:	88 1f       	adc	r24, r24
    4f3a:	88 27       	eor	r24, r24
    4f3c:	88 1f       	adc	r24, r24
    4f3e:	88 23       	and	r24, r24
    4f40:	09 f0       	breq	.+2      	; 0x4f44 <_ZN11TFT_ILI93418drawCharEiihjjh+0x242>
    4f42:	f5 cf       	rjmp	.-22     	; 0x4f2e <_ZN11TFT_ILI93418drawCharEiihjjh+0x22c>
    4f44:	8e e4       	ldi	r24, 0x4E	; 78
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4f4a:	38 a1       	ldd	r19, Y+32	; 0x20
    4f4c:	23 2f       	mov	r18, r19
    4f4e:	33 27       	eor	r19, r19
    4f50:	fc 01       	movw	r30, r24
    4f52:	20 83       	st	Z, r18
    4f54:	8d e4       	ldi	r24, 0x4D	; 77
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	fc 01       	movw	r30, r24
    4f5a:	80 81       	ld	r24, Z
    4f5c:	80 95       	com	r24
    4f5e:	88 1f       	adc	r24, r24
    4f60:	88 27       	eor	r24, r24
    4f62:	88 1f       	adc	r24, r24
    4f64:	88 23       	and	r24, r24
    4f66:	09 f0       	breq	.+2      	; 0x4f6a <_ZN11TFT_ILI93418drawCharEiihjjh+0x268>
    4f68:	f5 cf       	rjmp	.-22     	; 0x4f54 <_ZN11TFT_ILI93418drawCharEiihjjh+0x252>
    4f6a:	8e e4       	ldi	r24, 0x4E	; 78
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4f70:	fc 01       	movw	r30, r24
    4f72:	20 83       	st	Z, r18
    4f74:	8b 81       	ldd	r24, Y+3	; 0x03
    4f76:	8f 5f       	subi	r24, 0xFF	; 255
    4f78:	8b 83       	std	Y+3, r24	; 0x03
    4f7a:	71 cf       	rjmp	.-286    	; 0x4e5e <_ZN11TFT_ILI93418drawCharEiihjjh+0x15c>
    4f7c:	8d e4       	ldi	r24, 0x4D	; 77
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	fc 01       	movw	r30, r24
    4f82:	80 81       	ld	r24, Z
    4f84:	80 95       	com	r24
    4f86:	88 1f       	adc	r24, r24
    4f88:	88 27       	eor	r24, r24
    4f8a:	88 1f       	adc	r24, r24
    4f8c:	88 23       	and	r24, r24
    4f8e:	09 f0       	breq	.+2      	; 0x4f92 <_ZN11TFT_ILI93418drawCharEiihjjh+0x290>
    4f90:	f5 cf       	rjmp	.-22     	; 0x4f7c <_ZN11TFT_ILI93418drawCharEiihjjh+0x27a>
    4f92:	6b db       	rcall	.-2346   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    4f94:	fc 01       	movw	r30, r24
    4f96:	20 81       	ld	r18, Z
    4f98:	24 60       	ori	r18, 0x04	; 4
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	20 83       	st	Z, r18
    4f9e:	dd c0       	rjmp	.+442    	; 0x515a <_ZN11TFT_ILI93418drawCharEiihjjh+0x458>
    4fa0:	1d 82       	std	Y+5, r1	; 0x05
    4fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa4:	86 30       	cpi	r24, 0x06	; 6
    4fa6:	0c f0       	brlt	.+2      	; 0x4faa <_ZN11TFT_ILI93418drawCharEiihjjh+0x2a8>
    4fa8:	d8 c0       	rjmp	.+432    	; 0x515a <_ZN11TFT_ILI93418drawCharEiihjjh+0x458>
    4faa:	8d 81       	ldd	r24, Y+5	; 0x05
    4fac:	85 30       	cpi	r24, 0x05	; 5
    4fae:	11 f4       	brne	.+4      	; 0x4fb4 <_ZN11TFT_ILI93418drawCharEiihjjh+0x2b2>
    4fb0:	1e 82       	std	Y+6, r1	; 0x06
    4fb2:	1c c0       	rjmp	.+56     	; 0x4fec <_ZN11TFT_ILI93418drawCharEiihjjh+0x2ea>
    4fb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4fb6:	28 2f       	mov	r18, r24
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	c9 01       	movw	r24, r18
    4fbc:	88 0f       	add	r24, r24
    4fbe:	99 1f       	adc	r25, r25
    4fc0:	88 0f       	add	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	82 0f       	add	r24, r18
    4fc6:	93 1f       	adc	r25, r19
    4fc8:	9c 01       	movw	r18, r24
    4fca:	8d 81       	ldd	r24, Y+5	; 0x05
    4fcc:	08 2e       	mov	r0, r24
    4fce:	00 0c       	add	r0, r0
    4fd0:	99 0b       	sbc	r25, r25
    4fd2:	82 0f       	add	r24, r18
    4fd4:	93 1f       	adc	r25, r19
    4fd6:	86 5c       	subi	r24, 0xC6	; 198
    4fd8:	9e 4f       	sbci	r25, 0xFE	; 254
    4fda:	9e 87       	std	Y+14, r25	; 0x0e
    4fdc:	8d 87       	std	Y+13, r24	; 0x0d
    4fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	84 91       	lpm	r24, Z
    4fe6:	8f 87       	std	Y+15, r24	; 0x0f
    4fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fea:	8e 83       	std	Y+6, r24	; 0x06
    4fec:	89 a1       	ldd	r24, Y+33	; 0x21
    4fee:	81 30       	cpi	r24, 0x01	; 1
    4ff0:	69 f5       	brne	.+90     	; 0x504c <_ZN11TFT_ILI93418drawCharEiihjjh+0x34a>
    4ff2:	1f 82       	std	Y+7, r1	; 0x07
    4ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ff6:	88 30       	cpi	r24, 0x08	; 8
    4ff8:	0c f0       	brlt	.+2      	; 0x4ffc <_ZN11TFT_ILI93418drawCharEiihjjh+0x2fa>
    4ffa:	aa c0       	rjmp	.+340    	; 0x5150 <_ZN11TFT_ILI93418drawCharEiihjjh+0x44e>
    4ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    4ffe:	88 2f       	mov	r24, r24
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	81 70       	andi	r24, 0x01	; 1
    5004:	99 27       	eor	r25, r25
    5006:	89 2b       	or	r24, r25
    5008:	b9 f0       	breq	.+46     	; 0x5038 <_ZN11TFT_ILI93418drawCharEiihjjh+0x336>
    500a:	8f 81       	ldd	r24, Y+7	; 0x07
    500c:	28 2f       	mov	r18, r24
    500e:	88 0f       	add	r24, r24
    5010:	33 0b       	sbc	r19, r19
    5012:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5014:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5016:	82 0f       	add	r24, r18
    5018:	93 1f       	adc	r25, r19
    501a:	ac 01       	movw	r20, r24
    501c:	8d 81       	ldd	r24, Y+5	; 0x05
    501e:	28 2f       	mov	r18, r24
    5020:	88 0f       	add	r24, r24
    5022:	33 0b       	sbc	r19, r19
    5024:	88 8d       	ldd	r24, Y+24	; 0x18
    5026:	99 8d       	ldd	r25, Y+25	; 0x19
    5028:	82 0f       	add	r24, r18
    502a:	93 1f       	adc	r25, r19
    502c:	bc 01       	movw	r22, r24
    502e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5030:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5032:	8e 89       	ldd	r24, Y+22	; 0x16
    5034:	9f 89       	ldd	r25, Y+23	; 0x17
    5036:	a0 d1       	rcall	.+832    	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    5038:	8e 81       	ldd	r24, Y+6	; 0x06
    503a:	88 2f       	mov	r24, r24
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	95 95       	asr	r25
    5040:	87 95       	ror	r24
    5042:	8e 83       	std	Y+6, r24	; 0x06
    5044:	8f 81       	ldd	r24, Y+7	; 0x07
    5046:	8f 5f       	subi	r24, 0xFF	; 255
    5048:	8f 83       	std	Y+7, r24	; 0x07
    504a:	d4 cf       	rjmp	.-88     	; 0x4ff4 <_ZN11TFT_ILI93418drawCharEiihjjh+0x2f2>
    504c:	18 86       	std	Y+8, r1	; 0x08
    504e:	88 85       	ldd	r24, Y+8	; 0x08
    5050:	88 30       	cpi	r24, 0x08	; 8
    5052:	0c f0       	brlt	.+2      	; 0x5056 <_ZN11TFT_ILI93418drawCharEiihjjh+0x354>
    5054:	7d c0       	rjmp	.+250    	; 0x5150 <_ZN11TFT_ILI93418drawCharEiihjjh+0x44e>
    5056:	8e 81       	ldd	r24, Y+6	; 0x06
    5058:	88 2f       	mov	r24, r24
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	81 70       	andi	r24, 0x01	; 1
    505e:	99 27       	eor	r25, r25
    5060:	89 2b       	or	r24, r25
    5062:	a9 f1       	breq	.+106    	; 0x50ce <_ZN11TFT_ILI93418drawCharEiihjjh+0x3cc>
    5064:	89 a1       	ldd	r24, Y+33	; 0x21
    5066:	08 2f       	mov	r16, r24
    5068:	10 e0       	ldi	r17, 0x00	; 0
    506a:	89 a1       	ldd	r24, Y+33	; 0x21
    506c:	a8 2f       	mov	r26, r24
    506e:	b0 e0       	ldi	r27, 0x00	; 0
    5070:	88 85       	ldd	r24, Y+8	; 0x08
    5072:	48 2f       	mov	r20, r24
    5074:	88 0f       	add	r24, r24
    5076:	55 0b       	sbc	r21, r21
    5078:	89 a1       	ldd	r24, Y+33	; 0x21
    507a:	88 2f       	mov	r24, r24
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	48 9f       	mul	r20, r24
    5080:	90 01       	movw	r18, r0
    5082:	49 9f       	mul	r20, r25
    5084:	30 0d       	add	r19, r0
    5086:	58 9f       	mul	r21, r24
    5088:	30 0d       	add	r19, r0
    508a:	11 24       	eor	r1, r1
    508c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    508e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5090:	f9 01       	movw	r30, r18
    5092:	e8 0f       	add	r30, r24
    5094:	f9 1f       	adc	r31, r25
    5096:	8d 81       	ldd	r24, Y+5	; 0x05
    5098:	48 2f       	mov	r20, r24
    509a:	88 0f       	add	r24, r24
    509c:	55 0b       	sbc	r21, r21
    509e:	89 a1       	ldd	r24, Y+33	; 0x21
    50a0:	88 2f       	mov	r24, r24
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	48 9f       	mul	r20, r24
    50a6:	90 01       	movw	r18, r0
    50a8:	49 9f       	mul	r20, r25
    50aa:	30 0d       	add	r19, r0
    50ac:	58 9f       	mul	r21, r24
    50ae:	30 0d       	add	r19, r0
    50b0:	11 24       	eor	r1, r1
    50b2:	88 8d       	ldd	r24, Y+24	; 0x18
    50b4:	99 8d       	ldd	r25, Y+25	; 0x19
    50b6:	b9 01       	movw	r22, r18
    50b8:	68 0f       	add	r22, r24
    50ba:	79 1f       	adc	r23, r25
    50bc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    50be:	3e 8d       	ldd	r19, Y+30	; 0x1e
    50c0:	8e 89       	ldd	r24, Y+22	; 0x16
    50c2:	9f 89       	ldd	r25, Y+23	; 0x17
    50c4:	79 01       	movw	r14, r18
    50c6:	9d 01       	movw	r18, r26
    50c8:	af 01       	movw	r20, r30
    50ca:	54 d3       	rcall	.+1704   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    50cc:	37 c0       	rjmp	.+110    	; 0x513c <_ZN11TFT_ILI93418drawCharEiihjjh+0x43a>
    50ce:	89 85       	ldd	r24, Y+9	; 0x09
    50d0:	88 23       	and	r24, r24
    50d2:	a1 f1       	breq	.+104    	; 0x513c <_ZN11TFT_ILI93418drawCharEiihjjh+0x43a>
    50d4:	89 a1       	ldd	r24, Y+33	; 0x21
    50d6:	08 2f       	mov	r16, r24
    50d8:	10 e0       	ldi	r17, 0x00	; 0
    50da:	89 a1       	ldd	r24, Y+33	; 0x21
    50dc:	a8 2f       	mov	r26, r24
    50de:	b0 e0       	ldi	r27, 0x00	; 0
    50e0:	88 85       	ldd	r24, Y+8	; 0x08
    50e2:	48 2f       	mov	r20, r24
    50e4:	88 0f       	add	r24, r24
    50e6:	55 0b       	sbc	r21, r21
    50e8:	89 a1       	ldd	r24, Y+33	; 0x21
    50ea:	88 2f       	mov	r24, r24
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	48 9f       	mul	r20, r24
    50f0:	90 01       	movw	r18, r0
    50f2:	49 9f       	mul	r20, r25
    50f4:	30 0d       	add	r19, r0
    50f6:	58 9f       	mul	r21, r24
    50f8:	30 0d       	add	r19, r0
    50fa:	11 24       	eor	r1, r1
    50fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    50fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5100:	f9 01       	movw	r30, r18
    5102:	e8 0f       	add	r30, r24
    5104:	f9 1f       	adc	r31, r25
    5106:	8d 81       	ldd	r24, Y+5	; 0x05
    5108:	48 2f       	mov	r20, r24
    510a:	88 0f       	add	r24, r24
    510c:	55 0b       	sbc	r21, r21
    510e:	89 a1       	ldd	r24, Y+33	; 0x21
    5110:	88 2f       	mov	r24, r24
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	48 9f       	mul	r20, r24
    5116:	90 01       	movw	r18, r0
    5118:	49 9f       	mul	r20, r25
    511a:	30 0d       	add	r19, r0
    511c:	58 9f       	mul	r21, r24
    511e:	30 0d       	add	r19, r0
    5120:	11 24       	eor	r1, r1
    5122:	88 8d       	ldd	r24, Y+24	; 0x18
    5124:	99 8d       	ldd	r25, Y+25	; 0x19
    5126:	b9 01       	movw	r22, r18
    5128:	68 0f       	add	r22, r24
    512a:	79 1f       	adc	r23, r25
    512c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    512e:	38 a1       	ldd	r19, Y+32	; 0x20
    5130:	8e 89       	ldd	r24, Y+22	; 0x16
    5132:	9f 89       	ldd	r25, Y+23	; 0x17
    5134:	79 01       	movw	r14, r18
    5136:	9d 01       	movw	r18, r26
    5138:	af 01       	movw	r20, r30
    513a:	1c d3       	rcall	.+1592   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    513c:	8e 81       	ldd	r24, Y+6	; 0x06
    513e:	88 2f       	mov	r24, r24
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	95 95       	asr	r25
    5144:	87 95       	ror	r24
    5146:	8e 83       	std	Y+6, r24	; 0x06
    5148:	88 85       	ldd	r24, Y+8	; 0x08
    514a:	8f 5f       	subi	r24, 0xFF	; 255
    514c:	88 87       	std	Y+8, r24	; 0x08
    514e:	7f cf       	rjmp	.-258    	; 0x504e <_ZN11TFT_ILI93418drawCharEiihjjh+0x34c>
    5150:	8d 81       	ldd	r24, Y+5	; 0x05
    5152:	8f 5f       	subi	r24, 0xFF	; 255
    5154:	8d 83       	std	Y+5, r24	; 0x05
    5156:	25 cf       	rjmp	.-438    	; 0x4fa2 <_ZN11TFT_ILI93418drawCharEiihjjh+0x2a0>
    5158:	00 00       	nop
    515a:	a1 96       	adiw	r28, 0x21	; 33
    515c:	0f b6       	in	r0, 0x3f	; 63
    515e:	f8 94       	cli
    5160:	de bf       	out	0x3e, r29	; 62
    5162:	0f be       	out	0x3f, r0	; 63
    5164:	cd bf       	out	0x3d, r28	; 61
    5166:	df 91       	pop	r29
    5168:	cf 91       	pop	r28
    516a:	1f 91       	pop	r17
    516c:	0f 91       	pop	r16
    516e:	ff 90       	pop	r15
    5170:	ef 90       	pop	r14
    5172:	cf 90       	pop	r12
    5174:	08 95       	ret

00005176 <_ZN11TFT_ILI934113setAddrWindowEiiii>:
    5176:	0f 93       	push	r16
    5178:	1f 93       	push	r17
    517a:	cf 93       	push	r28
    517c:	df 93       	push	r29
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
    5182:	2a 97       	sbiw	r28, 0x0a	; 10
    5184:	0f b6       	in	r0, 0x3f	; 63
    5186:	f8 94       	cli
    5188:	de bf       	out	0x3e, r29	; 62
    518a:	0f be       	out	0x3f, r0	; 63
    518c:	cd bf       	out	0x3d, r28	; 61
    518e:	9a 83       	std	Y+2, r25	; 0x02
    5190:	89 83       	std	Y+1, r24	; 0x01
    5192:	7c 83       	std	Y+4, r23	; 0x04
    5194:	6b 83       	std	Y+3, r22	; 0x03
    5196:	5e 83       	std	Y+6, r21	; 0x06
    5198:	4d 83       	std	Y+5, r20	; 0x05
    519a:	38 87       	std	Y+8, r19	; 0x08
    519c:	2f 83       	std	Y+7, r18	; 0x07
    519e:	1a 87       	std	Y+10, r17	; 0x0a
    51a0:	09 87       	std	Y+9, r16	; 0x09
    51a2:	63 da       	rcall	.-2874   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    51a4:	fc 01       	movw	r30, r24
    51a6:	20 81       	ld	r18, Z
    51a8:	2d 7f       	andi	r18, 0xFD	; 253
    51aa:	fc 01       	movw	r30, r24
    51ac:	20 83       	st	Z, r18
    51ae:	5d da       	rcall	.-2886   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    51b0:	fc 01       	movw	r30, r24
    51b2:	20 81       	ld	r18, Z
    51b4:	2b 7f       	andi	r18, 0xFB	; 251
    51b6:	fc 01       	movw	r30, r24
    51b8:	20 83       	st	Z, r18
    51ba:	8e e4       	ldi	r24, 0x4E	; 78
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	2a e2       	ldi	r18, 0x2A	; 42
    51c0:	fc 01       	movw	r30, r24
    51c2:	20 83       	st	Z, r18
    51c4:	00 96       	adiw	r24, 0x00	; 0
    51c6:	00 96       	adiw	r24, 0x00	; 0
    51c8:	00 96       	adiw	r24, 0x00	; 0
    51ca:	01 d0       	rcall	.+2      	; 0x51ce <_ZN11TFT_ILI934113setAddrWindowEiiii+0x58>
    51cc:	01 c0       	rjmp	.+2      	; 0x51d0 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x5a>
    51ce:	08 95       	ret
    51d0:	4c da       	rcall	.-2920   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    51d2:	fc 01       	movw	r30, r24
    51d4:	20 81       	ld	r18, Z
    51d6:	22 60       	ori	r18, 0x02	; 2
    51d8:	fc 01       	movw	r30, r24
    51da:	20 83       	st	Z, r18
    51dc:	8e e4       	ldi	r24, 0x4E	; 78
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	2b 81       	ldd	r18, Y+3	; 0x03
    51e2:	3c 81       	ldd	r19, Y+4	; 0x04
    51e4:	23 2f       	mov	r18, r19
    51e6:	33 0f       	add	r19, r19
    51e8:	33 0b       	sbc	r19, r19
    51ea:	fc 01       	movw	r30, r24
    51ec:	20 83       	st	Z, r18
    51ee:	00 00       	nop
    51f0:	00 96       	adiw	r24, 0x00	; 0
    51f2:	01 d0       	rcall	.+2      	; 0x51f6 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x80>
    51f4:	01 c0       	rjmp	.+2      	; 0x51f8 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x82>
    51f6:	08 95       	ret
    51f8:	89 81       	ldd	r24, Y+1	; 0x01
    51fa:	9a 81       	ldd	r25, Y+2	; 0x02
    51fc:	2f ef       	ldi	r18, 0xFF	; 255
    51fe:	3f ef       	ldi	r19, 0xFF	; 255
    5200:	fc 01       	movw	r30, r24
    5202:	37 8f       	std	Z+31, r19	; 0x1f
    5204:	26 8f       	std	Z+30, r18	; 0x1e
    5206:	8e e4       	ldi	r24, 0x4E	; 78
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	2b 81       	ldd	r18, Y+3	; 0x03
    520c:	fc 01       	movw	r30, r24
    520e:	20 83       	st	Z, r18
    5210:	00 00       	nop
    5212:	00 96       	adiw	r24, 0x00	; 0
    5214:	01 d0       	rcall	.+2      	; 0x5218 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xa2>
    5216:	01 c0       	rjmp	.+2      	; 0x521a <_ZN11TFT_ILI934113setAddrWindowEiiii+0xa4>
    5218:	08 95       	ret
    521a:	89 81       	ldd	r24, Y+1	; 0x01
    521c:	9a 81       	ldd	r25, Y+2	; 0x02
    521e:	fc 01       	movw	r30, r24
    5220:	24 85       	ldd	r18, Z+12	; 0x0c
    5222:	35 85       	ldd	r19, Z+13	; 0x0d
    5224:	8f 81       	ldd	r24, Y+7	; 0x07
    5226:	98 85       	ldd	r25, Y+8	; 0x08
    5228:	28 17       	cp	r18, r24
    522a:	39 07       	cpc	r19, r25
    522c:	09 f1       	breq	.+66     	; 0x5270 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xfa>
    522e:	8e e4       	ldi	r24, 0x4E	; 78
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	2f 81       	ldd	r18, Y+7	; 0x07
    5234:	38 85       	ldd	r19, Y+8	; 0x08
    5236:	23 2f       	mov	r18, r19
    5238:	33 0f       	add	r19, r19
    523a:	33 0b       	sbc	r19, r19
    523c:	fc 01       	movw	r30, r24
    523e:	20 83       	st	Z, r18
    5240:	00 00       	nop
    5242:	00 96       	adiw	r24, 0x00	; 0
    5244:	01 d0       	rcall	.+2      	; 0x5248 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xd2>
    5246:	01 c0       	rjmp	.+2      	; 0x524a <_ZN11TFT_ILI934113setAddrWindowEiiii+0xd4>
    5248:	08 95       	ret
    524a:	00 00       	nop
    524c:	89 81       	ldd	r24, Y+1	; 0x01
    524e:	9a 81       	ldd	r25, Y+2	; 0x02
    5250:	2f 81       	ldd	r18, Y+7	; 0x07
    5252:	38 85       	ldd	r19, Y+8	; 0x08
    5254:	fc 01       	movw	r30, r24
    5256:	35 87       	std	Z+13, r19	; 0x0d
    5258:	24 87       	std	Z+12, r18	; 0x0c
    525a:	8e e4       	ldi	r24, 0x4E	; 78
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	2f 81       	ldd	r18, Y+7	; 0x07
    5260:	fc 01       	movw	r30, r24
    5262:	20 83       	st	Z, r18
    5264:	00 00       	nop
    5266:	00 96       	adiw	r24, 0x00	; 0
    5268:	00 96       	adiw	r24, 0x00	; 0
    526a:	01 d0       	rcall	.+2      	; 0x526e <_ZN11TFT_ILI934113setAddrWindowEiiii+0xf8>
    526c:	01 c0       	rjmp	.+2      	; 0x5270 <_ZN11TFT_ILI934113setAddrWindowEiiii+0xfa>
    526e:	08 95       	ret
    5270:	fc d9       	rcall	.-3080   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5272:	fc 01       	movw	r30, r24
    5274:	20 81       	ld	r18, Z
    5276:	2d 7f       	andi	r18, 0xFD	; 253
    5278:	fc 01       	movw	r30, r24
    527a:	20 83       	st	Z, r18
    527c:	8e e4       	ldi	r24, 0x4E	; 78
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	2b e2       	ldi	r18, 0x2B	; 43
    5282:	fc 01       	movw	r30, r24
    5284:	20 83       	st	Z, r18
    5286:	00 96       	adiw	r24, 0x00	; 0
    5288:	00 96       	adiw	r24, 0x00	; 0
    528a:	00 96       	adiw	r24, 0x00	; 0
    528c:	01 d0       	rcall	.+2      	; 0x5290 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x11a>
    528e:	01 c0       	rjmp	.+2      	; 0x5292 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x11c>
    5290:	08 95       	ret
    5292:	eb d9       	rcall	.-3114   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5294:	fc 01       	movw	r30, r24
    5296:	20 81       	ld	r18, Z
    5298:	22 60       	ori	r18, 0x02	; 2
    529a:	fc 01       	movw	r30, r24
    529c:	20 83       	st	Z, r18
    529e:	8e e4       	ldi	r24, 0x4E	; 78
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	2d 81       	ldd	r18, Y+5	; 0x05
    52a4:	3e 81       	ldd	r19, Y+6	; 0x06
    52a6:	23 2f       	mov	r18, r19
    52a8:	33 0f       	add	r19, r19
    52aa:	33 0b       	sbc	r19, r19
    52ac:	fc 01       	movw	r30, r24
    52ae:	20 83       	st	Z, r18
    52b0:	00 00       	nop
    52b2:	00 96       	adiw	r24, 0x00	; 0
    52b4:	01 d0       	rcall	.+2      	; 0x52b8 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x142>
    52b6:	01 c0       	rjmp	.+2      	; 0x52ba <_ZN11TFT_ILI934113setAddrWindowEiiii+0x144>
    52b8:	08 95       	ret
    52ba:	89 81       	ldd	r24, Y+1	; 0x01
    52bc:	9a 81       	ldd	r25, Y+2	; 0x02
    52be:	2f ef       	ldi	r18, 0xFF	; 255
    52c0:	3f ef       	ldi	r19, 0xFF	; 255
    52c2:	fc 01       	movw	r30, r24
    52c4:	35 8f       	std	Z+29, r19	; 0x1d
    52c6:	24 8f       	std	Z+28, r18	; 0x1c
    52c8:	8e e4       	ldi	r24, 0x4E	; 78
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	2d 81       	ldd	r18, Y+5	; 0x05
    52ce:	fc 01       	movw	r30, r24
    52d0:	20 83       	st	Z, r18
    52d2:	00 00       	nop
    52d4:	00 96       	adiw	r24, 0x00	; 0
    52d6:	01 d0       	rcall	.+2      	; 0x52da <_ZN11TFT_ILI934113setAddrWindowEiiii+0x164>
    52d8:	01 c0       	rjmp	.+2      	; 0x52dc <_ZN11TFT_ILI934113setAddrWindowEiiii+0x166>
    52da:	08 95       	ret
    52dc:	89 81       	ldd	r24, Y+1	; 0x01
    52de:	9a 81       	ldd	r25, Y+2	; 0x02
    52e0:	fc 01       	movw	r30, r24
    52e2:	26 85       	ldd	r18, Z+14	; 0x0e
    52e4:	37 85       	ldd	r19, Z+15	; 0x0f
    52e6:	89 85       	ldd	r24, Y+9	; 0x09
    52e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ea:	28 17       	cp	r18, r24
    52ec:	39 07       	cpc	r19, r25
    52ee:	09 f1       	breq	.+66     	; 0x5332 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1bc>
    52f0:	8e e4       	ldi	r24, 0x4E	; 78
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	29 85       	ldd	r18, Y+9	; 0x09
    52f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    52f8:	23 2f       	mov	r18, r19
    52fa:	33 0f       	add	r19, r19
    52fc:	33 0b       	sbc	r19, r19
    52fe:	fc 01       	movw	r30, r24
    5300:	20 83       	st	Z, r18
    5302:	00 00       	nop
    5304:	00 96       	adiw	r24, 0x00	; 0
    5306:	01 d0       	rcall	.+2      	; 0x530a <_ZN11TFT_ILI934113setAddrWindowEiiii+0x194>
    5308:	01 c0       	rjmp	.+2      	; 0x530c <_ZN11TFT_ILI934113setAddrWindowEiiii+0x196>
    530a:	08 95       	ret
    530c:	00 00       	nop
    530e:	89 81       	ldd	r24, Y+1	; 0x01
    5310:	9a 81       	ldd	r25, Y+2	; 0x02
    5312:	29 85       	ldd	r18, Y+9	; 0x09
    5314:	3a 85       	ldd	r19, Y+10	; 0x0a
    5316:	fc 01       	movw	r30, r24
    5318:	37 87       	std	Z+15, r19	; 0x0f
    531a:	26 87       	std	Z+14, r18	; 0x0e
    531c:	8e e4       	ldi	r24, 0x4E	; 78
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	29 85       	ldd	r18, Y+9	; 0x09
    5322:	fc 01       	movw	r30, r24
    5324:	20 83       	st	Z, r18
    5326:	00 00       	nop
    5328:	00 96       	adiw	r24, 0x00	; 0
    532a:	00 96       	adiw	r24, 0x00	; 0
    532c:	01 d0       	rcall	.+2      	; 0x5330 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1ba>
    532e:	01 c0       	rjmp	.+2      	; 0x5332 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1bc>
    5330:	08 95       	ret
    5332:	9b d9       	rcall	.-3274   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5334:	fc 01       	movw	r30, r24
    5336:	20 81       	ld	r18, Z
    5338:	2d 7f       	andi	r18, 0xFD	; 253
    533a:	fc 01       	movw	r30, r24
    533c:	20 83       	st	Z, r18
    533e:	8e e4       	ldi	r24, 0x4E	; 78
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	2c e2       	ldi	r18, 0x2C	; 44
    5344:	fc 01       	movw	r30, r24
    5346:	20 83       	st	Z, r18
    5348:	00 00       	nop
    534a:	00 96       	adiw	r24, 0x00	; 0
    534c:	00 96       	adiw	r24, 0x00	; 0
    534e:	01 d0       	rcall	.+2      	; 0x5352 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1dc>
    5350:	01 c0       	rjmp	.+2      	; 0x5354 <_ZN11TFT_ILI934113setAddrWindowEiiii+0x1de>
    5352:	08 95       	ret
    5354:	8a d9       	rcall	.-3308   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5356:	fc 01       	movw	r30, r24
    5358:	20 81       	ld	r18, Z
    535a:	22 60       	ori	r18, 0x02	; 2
    535c:	fc 01       	movw	r30, r24
    535e:	20 83       	st	Z, r18
    5360:	00 00       	nop
    5362:	2a 96       	adiw	r28, 0x0a	; 10
    5364:	0f b6       	in	r0, 0x3f	; 63
    5366:	f8 94       	cli
    5368:	de bf       	out	0x3e, r29	; 62
    536a:	0f be       	out	0x3f, r0	; 63
    536c:	cd bf       	out	0x3d, r28	; 61
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	1f 91       	pop	r17
    5374:	0f 91       	pop	r16
    5376:	08 95       	ret

00005378 <_ZN11TFT_ILI93419drawPixelEjjj>:
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	cd b7       	in	r28, 0x3d	; 61
    537e:	de b7       	in	r29, 0x3e	; 62
    5380:	28 97       	sbiw	r28, 0x08	; 8
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	de bf       	out	0x3e, r29	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	9a 83       	std	Y+2, r25	; 0x02
    538e:	89 83       	std	Y+1, r24	; 0x01
    5390:	7c 83       	std	Y+4, r23	; 0x04
    5392:	6b 83       	std	Y+3, r22	; 0x03
    5394:	5e 83       	std	Y+6, r21	; 0x06
    5396:	4d 83       	std	Y+5, r20	; 0x05
    5398:	38 87       	std	Y+8, r19	; 0x08
    539a:	2f 83       	std	Y+7, r18	; 0x07
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	9a 81       	ldd	r25, Y+2	; 0x02
    53a0:	fc 01       	movw	r30, r24
    53a2:	22 89       	ldd	r18, Z+18	; 0x12
    53a4:	33 89       	ldd	r19, Z+19	; 0x13
    53a6:	8b 81       	ldd	r24, Y+3	; 0x03
    53a8:	9c 81       	ldd	r25, Y+4	; 0x04
    53aa:	82 17       	cp	r24, r18
    53ac:	93 07       	cpc	r25, r19
    53ae:	08 f0       	brcs	.+2      	; 0x53b2 <_ZN11TFT_ILI93419drawPixelEjjj+0x3a>
    53b0:	02 c1       	rjmp	.+516    	; 0x55b6 <_ZN11TFT_ILI93419drawPixelEjjj+0x23e>
    53b2:	89 81       	ldd	r24, Y+1	; 0x01
    53b4:	9a 81       	ldd	r25, Y+2	; 0x02
    53b6:	fc 01       	movw	r30, r24
    53b8:	24 89       	ldd	r18, Z+20	; 0x14
    53ba:	35 89       	ldd	r19, Z+21	; 0x15
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	82 17       	cp	r24, r18
    53c2:	93 07       	cpc	r25, r19
    53c4:	08 f0       	brcs	.+2      	; 0x53c8 <_ZN11TFT_ILI93419drawPixelEjjj+0x50>
    53c6:	f7 c0       	rjmp	.+494    	; 0x55b6 <_ZN11TFT_ILI93419drawPixelEjjj+0x23e>
    53c8:	50 d9       	rcall	.-3424   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    53ca:	fc 01       	movw	r30, r24
    53cc:	20 81       	ld	r18, Z
    53ce:	2b 7f       	andi	r18, 0xFB	; 251
    53d0:	fc 01       	movw	r30, r24
    53d2:	20 83       	st	Z, r18
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
    53d6:	9a 81       	ldd	r25, Y+2	; 0x02
    53d8:	fc 01       	movw	r30, r24
    53da:	26 8d       	ldd	r18, Z+30	; 0x1e
    53dc:	37 8d       	ldd	r19, Z+31	; 0x1f
    53de:	8b 81       	ldd	r24, Y+3	; 0x03
    53e0:	9c 81       	ldd	r25, Y+4	; 0x04
    53e2:	28 17       	cp	r18, r24
    53e4:	39 07       	cpc	r19, r25
    53e6:	09 f4       	brne	.+2      	; 0x53ea <_ZN11TFT_ILI93419drawPixelEjjj+0x72>
    53e8:	4b c0       	rjmp	.+150    	; 0x5480 <_ZN11TFT_ILI93419drawPixelEjjj+0x108>
    53ea:	3f d9       	rcall	.-3458   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    53ec:	fc 01       	movw	r30, r24
    53ee:	20 81       	ld	r18, Z
    53f0:	2d 7f       	andi	r18, 0xFD	; 253
    53f2:	fc 01       	movw	r30, r24
    53f4:	20 83       	st	Z, r18
    53f6:	8e e4       	ldi	r24, 0x4E	; 78
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	2a e2       	ldi	r18, 0x2A	; 42
    53fc:	fc 01       	movw	r30, r24
    53fe:	20 83       	st	Z, r18
    5400:	00 00       	nop
    5402:	00 96       	adiw	r24, 0x00	; 0
    5404:	01 d0       	rcall	.+2      	; 0x5408 <_ZN11TFT_ILI93419drawPixelEjjj+0x90>
    5406:	01 c0       	rjmp	.+2      	; 0x540a <_ZN11TFT_ILI93419drawPixelEjjj+0x92>
    5408:	08 95       	ret
    540a:	89 81       	ldd	r24, Y+1	; 0x01
    540c:	9a 81       	ldd	r25, Y+2	; 0x02
    540e:	2b 81       	ldd	r18, Y+3	; 0x03
    5410:	3c 81       	ldd	r19, Y+4	; 0x04
    5412:	fc 01       	movw	r30, r24
    5414:	37 8f       	std	Z+31, r19	; 0x1f
    5416:	26 8f       	std	Z+30, r18	; 0x1e
    5418:	28 d9       	rcall	.-3504   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    541a:	fc 01       	movw	r30, r24
    541c:	20 81       	ld	r18, Z
    541e:	22 60       	ori	r18, 0x02	; 2
    5420:	fc 01       	movw	r30, r24
    5422:	20 83       	st	Z, r18
    5424:	8e e4       	ldi	r24, 0x4E	; 78
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	2b 81       	ldd	r18, Y+3	; 0x03
    542a:	3c 81       	ldd	r19, Y+4	; 0x04
    542c:	23 2f       	mov	r18, r19
    542e:	33 27       	eor	r19, r19
    5430:	fc 01       	movw	r30, r24
    5432:	20 83       	st	Z, r18
    5434:	02 d0       	rcall	.+4      	; 0x543a <_ZN11TFT_ILI93419drawPixelEjjj+0xc2>
    5436:	01 d0       	rcall	.+2      	; 0x543a <_ZN11TFT_ILI93419drawPixelEjjj+0xc2>
    5438:	01 c0       	rjmp	.+2      	; 0x543c <_ZN11TFT_ILI93419drawPixelEjjj+0xc4>
    543a:	08 95       	ret
    543c:	00 00       	nop
    543e:	8e e4       	ldi	r24, 0x4E	; 78
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	2b 81       	ldd	r18, Y+3	; 0x03
    5444:	fc 01       	movw	r30, r24
    5446:	20 83       	st	Z, r18
    5448:	02 d0       	rcall	.+4      	; 0x544e <_ZN11TFT_ILI93419drawPixelEjjj+0xd6>
    544a:	01 d0       	rcall	.+2      	; 0x544e <_ZN11TFT_ILI93419drawPixelEjjj+0xd6>
    544c:	01 c0       	rjmp	.+2      	; 0x5450 <_ZN11TFT_ILI93419drawPixelEjjj+0xd8>
    544e:	08 95       	ret
    5450:	00 00       	nop
    5452:	8e e4       	ldi	r24, 0x4E	; 78
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	2b 81       	ldd	r18, Y+3	; 0x03
    5458:	3c 81       	ldd	r19, Y+4	; 0x04
    545a:	23 2f       	mov	r18, r19
    545c:	33 27       	eor	r19, r19
    545e:	fc 01       	movw	r30, r24
    5460:	20 83       	st	Z, r18
    5462:	02 d0       	rcall	.+4      	; 0x5468 <_ZN11TFT_ILI93419drawPixelEjjj+0xf0>
    5464:	01 d0       	rcall	.+2      	; 0x5468 <_ZN11TFT_ILI93419drawPixelEjjj+0xf0>
    5466:	01 c0       	rjmp	.+2      	; 0x546a <_ZN11TFT_ILI93419drawPixelEjjj+0xf2>
    5468:	08 95       	ret
    546a:	00 00       	nop
    546c:	8e e4       	ldi	r24, 0x4E	; 78
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	2b 81       	ldd	r18, Y+3	; 0x03
    5472:	fc 01       	movw	r30, r24
    5474:	20 83       	st	Z, r18
    5476:	00 00       	nop
    5478:	00 96       	adiw	r24, 0x00	; 0
    547a:	01 d0       	rcall	.+2      	; 0x547e <_ZN11TFT_ILI93419drawPixelEjjj+0x106>
    547c:	01 c0       	rjmp	.+2      	; 0x5480 <_ZN11TFT_ILI93419drawPixelEjjj+0x108>
    547e:	08 95       	ret
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	9a 81       	ldd	r25, Y+2	; 0x02
    5484:	fc 01       	movw	r30, r24
    5486:	24 8d       	ldd	r18, Z+28	; 0x1c
    5488:	35 8d       	ldd	r19, Z+29	; 0x1d
    548a:	8d 81       	ldd	r24, Y+5	; 0x05
    548c:	9e 81       	ldd	r25, Y+6	; 0x06
    548e:	28 17       	cp	r18, r24
    5490:	39 07       	cpc	r19, r25
    5492:	09 f4       	brne	.+2      	; 0x5496 <_ZN11TFT_ILI93419drawPixelEjjj+0x11e>
    5494:	4c c0       	rjmp	.+152    	; 0x552e <_ZN11TFT_ILI93419drawPixelEjjj+0x1b6>
    5496:	e9 d8       	rcall	.-3630   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5498:	fc 01       	movw	r30, r24
    549a:	20 81       	ld	r18, Z
    549c:	2d 7f       	andi	r18, 0xFD	; 253
    549e:	fc 01       	movw	r30, r24
    54a0:	20 83       	st	Z, r18
    54a2:	8e e4       	ldi	r24, 0x4E	; 78
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	2b e2       	ldi	r18, 0x2B	; 43
    54a8:	fc 01       	movw	r30, r24
    54aa:	20 83       	st	Z, r18
    54ac:	00 00       	nop
    54ae:	00 96       	adiw	r24, 0x00	; 0
    54b0:	01 d0       	rcall	.+2      	; 0x54b4 <_ZN11TFT_ILI93419drawPixelEjjj+0x13c>
    54b2:	01 c0       	rjmp	.+2      	; 0x54b6 <_ZN11TFT_ILI93419drawPixelEjjj+0x13e>
    54b4:	08 95       	ret
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ba:	2d 81       	ldd	r18, Y+5	; 0x05
    54bc:	3e 81       	ldd	r19, Y+6	; 0x06
    54be:	fc 01       	movw	r30, r24
    54c0:	35 8f       	std	Z+29, r19	; 0x1d
    54c2:	24 8f       	std	Z+28, r18	; 0x1c
    54c4:	d2 d8       	rcall	.-3676   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    54c6:	fc 01       	movw	r30, r24
    54c8:	20 81       	ld	r18, Z
    54ca:	22 60       	ori	r18, 0x02	; 2
    54cc:	fc 01       	movw	r30, r24
    54ce:	20 83       	st	Z, r18
    54d0:	8e e4       	ldi	r24, 0x4E	; 78
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	2d 81       	ldd	r18, Y+5	; 0x05
    54d6:	3e 81       	ldd	r19, Y+6	; 0x06
    54d8:	23 2f       	mov	r18, r19
    54da:	33 27       	eor	r19, r19
    54dc:	fc 01       	movw	r30, r24
    54de:	20 83       	st	Z, r18
    54e0:	02 d0       	rcall	.+4      	; 0x54e6 <_ZN11TFT_ILI93419drawPixelEjjj+0x16e>
    54e2:	01 d0       	rcall	.+2      	; 0x54e6 <_ZN11TFT_ILI93419drawPixelEjjj+0x16e>
    54e4:	01 c0       	rjmp	.+2      	; 0x54e8 <_ZN11TFT_ILI93419drawPixelEjjj+0x170>
    54e6:	08 95       	ret
    54e8:	00 00       	nop
    54ea:	8e e4       	ldi	r24, 0x4E	; 78
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	2d 81       	ldd	r18, Y+5	; 0x05
    54f0:	fc 01       	movw	r30, r24
    54f2:	20 83       	st	Z, r18
    54f4:	02 d0       	rcall	.+4      	; 0x54fa <_ZN11TFT_ILI93419drawPixelEjjj+0x182>
    54f6:	01 d0       	rcall	.+2      	; 0x54fa <_ZN11TFT_ILI93419drawPixelEjjj+0x182>
    54f8:	01 c0       	rjmp	.+2      	; 0x54fc <_ZN11TFT_ILI93419drawPixelEjjj+0x184>
    54fa:	08 95       	ret
    54fc:	00 00       	nop
    54fe:	8e e4       	ldi	r24, 0x4E	; 78
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	2d 81       	ldd	r18, Y+5	; 0x05
    5504:	3e 81       	ldd	r19, Y+6	; 0x06
    5506:	23 2f       	mov	r18, r19
    5508:	33 27       	eor	r19, r19
    550a:	fc 01       	movw	r30, r24
    550c:	20 83       	st	Z, r18
    550e:	02 d0       	rcall	.+4      	; 0x5514 <_ZN11TFT_ILI93419drawPixelEjjj+0x19c>
    5510:	01 d0       	rcall	.+2      	; 0x5514 <_ZN11TFT_ILI93419drawPixelEjjj+0x19c>
    5512:	01 c0       	rjmp	.+2      	; 0x5516 <_ZN11TFT_ILI93419drawPixelEjjj+0x19e>
    5514:	08 95       	ret
    5516:	00 00       	nop
    5518:	8e e4       	ldi	r24, 0x4E	; 78
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	2d 81       	ldd	r18, Y+5	; 0x05
    551e:	fc 01       	movw	r30, r24
    5520:	20 83       	st	Z, r18
    5522:	00 00       	nop
    5524:	00 96       	adiw	r24, 0x00	; 0
    5526:	00 96       	adiw	r24, 0x00	; 0
    5528:	01 d0       	rcall	.+2      	; 0x552c <_ZN11TFT_ILI93419drawPixelEjjj+0x1b4>
    552a:	01 c0       	rjmp	.+2      	; 0x552e <_ZN11TFT_ILI93419drawPixelEjjj+0x1b6>
    552c:	08 95       	ret
    552e:	9d d8       	rcall	.-3782   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5530:	fc 01       	movw	r30, r24
    5532:	20 81       	ld	r18, Z
    5534:	2d 7f       	andi	r18, 0xFD	; 253
    5536:	fc 01       	movw	r30, r24
    5538:	20 83       	st	Z, r18
    553a:	8e e4       	ldi	r24, 0x4E	; 78
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	2c e2       	ldi	r18, 0x2C	; 44
    5540:	fc 01       	movw	r30, r24
    5542:	20 83       	st	Z, r18
    5544:	00 96       	adiw	r24, 0x00	; 0
    5546:	00 96       	adiw	r24, 0x00	; 0
    5548:	00 96       	adiw	r24, 0x00	; 0
    554a:	01 d0       	rcall	.+2      	; 0x554e <_ZN11TFT_ILI93419drawPixelEjjj+0x1d6>
    554c:	01 c0       	rjmp	.+2      	; 0x5550 <_ZN11TFT_ILI93419drawPixelEjjj+0x1d8>
    554e:	08 95       	ret
    5550:	8c d8       	rcall	.-3816   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5552:	fc 01       	movw	r30, r24
    5554:	20 81       	ld	r18, Z
    5556:	22 60       	ori	r18, 0x02	; 2
    5558:	fc 01       	movw	r30, r24
    555a:	20 83       	st	Z, r18
    555c:	8e e4       	ldi	r24, 0x4E	; 78
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	2f 81       	ldd	r18, Y+7	; 0x07
    5562:	38 85       	ldd	r19, Y+8	; 0x08
    5564:	23 2f       	mov	r18, r19
    5566:	33 27       	eor	r19, r19
    5568:	fc 01       	movw	r30, r24
    556a:	20 83       	st	Z, r18
    556c:	00 96       	adiw	r24, 0x00	; 0
    556e:	00 96       	adiw	r24, 0x00	; 0
    5570:	00 96       	adiw	r24, 0x00	; 0
    5572:	01 d0       	rcall	.+2      	; 0x5576 <_ZN11TFT_ILI93419drawPixelEjjj+0x1fe>
    5574:	01 c0       	rjmp	.+2      	; 0x5578 <_ZN11TFT_ILI93419drawPixelEjjj+0x200>
    5576:	08 95       	ret
    5578:	2b 81       	ldd	r18, Y+3	; 0x03
    557a:	3c 81       	ldd	r19, Y+4	; 0x04
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	9a 81       	ldd	r25, Y+2	; 0x02
    5580:	fc 01       	movw	r30, r24
    5582:	35 87       	std	Z+13, r19	; 0x0d
    5584:	24 87       	std	Z+12, r18	; 0x0c
    5586:	8e e4       	ldi	r24, 0x4E	; 78
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	2f 81       	ldd	r18, Y+7	; 0x07
    558c:	fc 01       	movw	r30, r24
    558e:	20 83       	st	Z, r18
    5590:	00 00       	nop
    5592:	00 96       	adiw	r24, 0x00	; 0
    5594:	01 d0       	rcall	.+2      	; 0x5598 <_ZN11TFT_ILI93419drawPixelEjjj+0x220>
    5596:	01 c0       	rjmp	.+2      	; 0x559a <_ZN11TFT_ILI93419drawPixelEjjj+0x222>
    5598:	08 95       	ret
    559a:	2d 81       	ldd	r18, Y+5	; 0x05
    559c:	3e 81       	ldd	r19, Y+6	; 0x06
    559e:	89 81       	ldd	r24, Y+1	; 0x01
    55a0:	9a 81       	ldd	r25, Y+2	; 0x02
    55a2:	fc 01       	movw	r30, r24
    55a4:	37 87       	std	Z+15, r19	; 0x0f
    55a6:	26 87       	std	Z+14, r18	; 0x0e
    55a8:	60 d8       	rcall	.-3904   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    55aa:	fc 01       	movw	r30, r24
    55ac:	20 81       	ld	r18, Z
    55ae:	24 60       	ori	r18, 0x04	; 4
    55b0:	fc 01       	movw	r30, r24
    55b2:	20 83       	st	Z, r18
    55b4:	01 c0       	rjmp	.+2      	; 0x55b8 <_ZN11TFT_ILI93419drawPixelEjjj+0x240>
    55b6:	00 00       	nop
    55b8:	28 96       	adiw	r28, 0x08	; 8
    55ba:	0f b6       	in	r0, 0x3f	; 63
    55bc:	f8 94       	cli
    55be:	de bf       	out	0x3e, r29	; 62
    55c0:	0f be       	out	0x3f, r0	; 63
    55c2:	cd bf       	out	0x3d, r28	; 61
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	08 95       	ret

000055ca <_ZN11TFT_ILI93419fastSetupEv>:
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	1f 92       	push	r1
    55d0:	1f 92       	push	r1
    55d2:	cd b7       	in	r28, 0x3d	; 61
    55d4:	de b7       	in	r29, 0x3e	; 62
    55d6:	9a 83       	std	Y+2, r25	; 0x02
    55d8:	89 83       	std	Y+1, r24	; 0x01
    55da:	47 d8       	rcall	.-3954   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    55dc:	fc 01       	movw	r30, r24
    55de:	20 81       	ld	r18, Z
    55e0:	2d 7f       	andi	r18, 0xFD	; 253
    55e2:	fc 01       	movw	r30, r24
    55e4:	20 83       	st	Z, r18
    55e6:	41 d8       	rcall	.-3966   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    55e8:	fc 01       	movw	r30, r24
    55ea:	20 81       	ld	r18, Z
    55ec:	2b 7f       	andi	r18, 0xFB	; 251
    55ee:	fc 01       	movw	r30, r24
    55f0:	20 83       	st	Z, r18
    55f2:	8e e4       	ldi	r24, 0x4E	; 78
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	2a e2       	ldi	r18, 0x2A	; 42
    55f8:	fc 01       	movw	r30, r24
    55fa:	20 83       	st	Z, r18
    55fc:	00 96       	adiw	r24, 0x00	; 0
    55fe:	00 96       	adiw	r24, 0x00	; 0
    5600:	00 96       	adiw	r24, 0x00	; 0
    5602:	01 d0       	rcall	.+2      	; 0x5606 <_ZN11TFT_ILI93419fastSetupEv+0x3c>
    5604:	01 c0       	rjmp	.+2      	; 0x5608 <_ZN11TFT_ILI93419fastSetupEv+0x3e>
    5606:	08 95       	ret
    5608:	30 d8       	rcall	.-4000   	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    560a:	fc 01       	movw	r30, r24
    560c:	20 81       	ld	r18, Z
    560e:	22 60       	ori	r18, 0x02	; 2
    5610:	fc 01       	movw	r30, r24
    5612:	20 83       	st	Z, r18
    5614:	8e e4       	ldi	r24, 0x4E	; 78
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	fc 01       	movw	r30, r24
    561a:	10 82       	st	Z, r1
    561c:	00 00       	nop
    561e:	00 96       	adiw	r24, 0x00	; 0
    5620:	00 96       	adiw	r24, 0x00	; 0
    5622:	01 d0       	rcall	.+2      	; 0x5626 <_ZN11TFT_ILI93419fastSetupEv+0x5c>
    5624:	01 c0       	rjmp	.+2      	; 0x5628 <_ZN11TFT_ILI93419fastSetupEv+0x5e>
    5626:	08 95       	ret
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	9a 81       	ldd	r25, Y+2	; 0x02
    562c:	fc 01       	movw	r30, r24
    562e:	17 8e       	std	Z+31, r1	; 0x1f
    5630:	16 8e       	std	Z+30, r1	; 0x1e
    5632:	8e e4       	ldi	r24, 0x4E	; 78
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	fc 01       	movw	r30, r24
    5638:	10 82       	st	Z, r1
    563a:	00 00       	nop
    563c:	00 96       	adiw	r24, 0x00	; 0
    563e:	01 d0       	rcall	.+2      	; 0x5642 <_ZN11TFT_ILI93419fastSetupEv+0x78>
    5640:	01 c0       	rjmp	.+2      	; 0x5644 <_ZN11TFT_ILI93419fastSetupEv+0x7a>
    5642:	08 95       	ret
    5644:	89 81       	ldd	r24, Y+1	; 0x01
    5646:	9a 81       	ldd	r25, Y+2	; 0x02
    5648:	fc 01       	movw	r30, r24
    564a:	82 89       	ldd	r24, Z+18	; 0x12
    564c:	93 89       	ldd	r25, Z+19	; 0x13
    564e:	01 97       	sbiw	r24, 0x01	; 1
    5650:	9c 01       	movw	r18, r24
    5652:	89 81       	ldd	r24, Y+1	; 0x01
    5654:	9a 81       	ldd	r25, Y+2	; 0x02
    5656:	fc 01       	movw	r30, r24
    5658:	35 87       	std	Z+13, r19	; 0x0d
    565a:	24 87       	std	Z+12, r18	; 0x0c
    565c:	8e e4       	ldi	r24, 0x4E	; 78
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	29 81       	ldd	r18, Y+1	; 0x01
    5662:	3a 81       	ldd	r19, Y+2	; 0x02
    5664:	f9 01       	movw	r30, r18
    5666:	24 85       	ldd	r18, Z+12	; 0x0c
    5668:	35 85       	ldd	r19, Z+13	; 0x0d
    566a:	23 2f       	mov	r18, r19
    566c:	33 0f       	add	r19, r19
    566e:	33 0b       	sbc	r19, r19
    5670:	fc 01       	movw	r30, r24
    5672:	20 83       	st	Z, r18
    5674:	00 96       	adiw	r24, 0x00	; 0
    5676:	00 96       	adiw	r24, 0x00	; 0
    5678:	00 96       	adiw	r24, 0x00	; 0
    567a:	01 d0       	rcall	.+2      	; 0x567e <_ZN11TFT_ILI93419fastSetupEv+0xb4>
    567c:	01 c0       	rjmp	.+2      	; 0x5680 <_ZN11TFT_ILI93419fastSetupEv+0xb6>
    567e:	08 95       	ret
    5680:	8e e4       	ldi	r24, 0x4E	; 78
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	29 81       	ldd	r18, Y+1	; 0x01
    5686:	3a 81       	ldd	r19, Y+2	; 0x02
    5688:	f9 01       	movw	r30, r18
    568a:	24 85       	ldd	r18, Z+12	; 0x0c
    568c:	35 85       	ldd	r19, Z+13	; 0x0d
    568e:	fc 01       	movw	r30, r24
    5690:	20 83       	st	Z, r18
    5692:	00 00       	nop
    5694:	00 96       	adiw	r24, 0x00	; 0
    5696:	00 96       	adiw	r24, 0x00	; 0
    5698:	01 d0       	rcall	.+2      	; 0x569c <_ZN11TFT_ILI93419fastSetupEv+0xd2>
    569a:	01 c0       	rjmp	.+2      	; 0x569e <_ZN11TFT_ILI93419fastSetupEv+0xd4>
    569c:	08 95       	ret
    569e:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    56a2:	fc 01       	movw	r30, r24
    56a4:	20 81       	ld	r18, Z
    56a6:	2d 7f       	andi	r18, 0xFD	; 253
    56a8:	fc 01       	movw	r30, r24
    56aa:	20 83       	st	Z, r18
    56ac:	8e e4       	ldi	r24, 0x4E	; 78
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	2b e2       	ldi	r18, 0x2B	; 43
    56b2:	fc 01       	movw	r30, r24
    56b4:	20 83       	st	Z, r18
    56b6:	00 96       	adiw	r24, 0x00	; 0
    56b8:	00 96       	adiw	r24, 0x00	; 0
    56ba:	00 96       	adiw	r24, 0x00	; 0
    56bc:	01 d0       	rcall	.+2      	; 0x56c0 <_ZN11TFT_ILI93419fastSetupEv+0xf6>
    56be:	01 c0       	rjmp	.+2      	; 0x56c2 <_ZN11TFT_ILI93419fastSetupEv+0xf8>
    56c0:	08 95       	ret
    56c2:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    56c6:	fc 01       	movw	r30, r24
    56c8:	20 81       	ld	r18, Z
    56ca:	22 60       	ori	r18, 0x02	; 2
    56cc:	fc 01       	movw	r30, r24
    56ce:	20 83       	st	Z, r18
    56d0:	8e e4       	ldi	r24, 0x4E	; 78
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	fc 01       	movw	r30, r24
    56d6:	10 82       	st	Z, r1
    56d8:	00 00       	nop
    56da:	00 96       	adiw	r24, 0x00	; 0
    56dc:	00 96       	adiw	r24, 0x00	; 0
    56de:	01 d0       	rcall	.+2      	; 0x56e2 <_ZN11TFT_ILI93419fastSetupEv+0x118>
    56e0:	01 c0       	rjmp	.+2      	; 0x56e4 <_ZN11TFT_ILI93419fastSetupEv+0x11a>
    56e2:	08 95       	ret
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	9a 81       	ldd	r25, Y+2	; 0x02
    56e8:	fc 01       	movw	r30, r24
    56ea:	15 8e       	std	Z+29, r1	; 0x1d
    56ec:	14 8e       	std	Z+28, r1	; 0x1c
    56ee:	8e e4       	ldi	r24, 0x4E	; 78
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	fc 01       	movw	r30, r24
    56f4:	10 82       	st	Z, r1
    56f6:	00 00       	nop
    56f8:	00 96       	adiw	r24, 0x00	; 0
    56fa:	01 d0       	rcall	.+2      	; 0x56fe <_ZN11TFT_ILI93419fastSetupEv+0x134>
    56fc:	01 c0       	rjmp	.+2      	; 0x5700 <_ZN11TFT_ILI93419fastSetupEv+0x136>
    56fe:	08 95       	ret
    5700:	89 81       	ldd	r24, Y+1	; 0x01
    5702:	9a 81       	ldd	r25, Y+2	; 0x02
    5704:	fc 01       	movw	r30, r24
    5706:	84 89       	ldd	r24, Z+20	; 0x14
    5708:	95 89       	ldd	r25, Z+21	; 0x15
    570a:	01 97       	sbiw	r24, 0x01	; 1
    570c:	9c 01       	movw	r18, r24
    570e:	89 81       	ldd	r24, Y+1	; 0x01
    5710:	9a 81       	ldd	r25, Y+2	; 0x02
    5712:	fc 01       	movw	r30, r24
    5714:	37 87       	std	Z+15, r19	; 0x0f
    5716:	26 87       	std	Z+14, r18	; 0x0e
    5718:	8e e4       	ldi	r24, 0x4E	; 78
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	29 81       	ldd	r18, Y+1	; 0x01
    571e:	3a 81       	ldd	r19, Y+2	; 0x02
    5720:	f9 01       	movw	r30, r18
    5722:	26 85       	ldd	r18, Z+14	; 0x0e
    5724:	37 85       	ldd	r19, Z+15	; 0x0f
    5726:	23 2f       	mov	r18, r19
    5728:	33 0f       	add	r19, r19
    572a:	33 0b       	sbc	r19, r19
    572c:	fc 01       	movw	r30, r24
    572e:	20 83       	st	Z, r18
    5730:	00 96       	adiw	r24, 0x00	; 0
    5732:	00 96       	adiw	r24, 0x00	; 0
    5734:	00 96       	adiw	r24, 0x00	; 0
    5736:	01 d0       	rcall	.+2      	; 0x573a <_ZN11TFT_ILI93419fastSetupEv+0x170>
    5738:	01 c0       	rjmp	.+2      	; 0x573c <_ZN11TFT_ILI93419fastSetupEv+0x172>
    573a:	08 95       	ret
    573c:	8e e4       	ldi	r24, 0x4E	; 78
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	29 81       	ldd	r18, Y+1	; 0x01
    5742:	3a 81       	ldd	r19, Y+2	; 0x02
    5744:	f9 01       	movw	r30, r18
    5746:	26 85       	ldd	r18, Z+14	; 0x0e
    5748:	37 85       	ldd	r19, Z+15	; 0x0f
    574a:	fc 01       	movw	r30, r24
    574c:	20 83       	st	Z, r18
    574e:	00 00       	nop
    5750:	00 96       	adiw	r24, 0x00	; 0
    5752:	00 96       	adiw	r24, 0x00	; 0
    5754:	01 d0       	rcall	.+2      	; 0x5758 <_ZN11TFT_ILI93419fastSetupEv+0x18e>
    5756:	01 c0       	rjmp	.+2      	; 0x575a <_ZN11TFT_ILI93419fastSetupEv+0x190>
    5758:	08 95       	ret
    575a:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    575e:	fc 01       	movw	r30, r24
    5760:	20 81       	ld	r18, Z
    5762:	24 60       	ori	r18, 0x04	; 4
    5764:	fc 01       	movw	r30, r24
    5766:	20 83       	st	Z, r18
    5768:	00 00       	nop
    576a:	0f 90       	pop	r0
    576c:	0f 90       	pop	r0
    576e:	df 91       	pop	r29
    5770:	cf 91       	pop	r28
    5772:	08 95       	ret

00005774 <_ZN11TFT_ILI93418fillRectEiiiij>:
    5774:	ef 92       	push	r14
    5776:	ff 92       	push	r15
    5778:	0f 93       	push	r16
    577a:	1f 93       	push	r17
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	cd b7       	in	r28, 0x3d	; 61
    5782:	de b7       	in	r29, 0x3e	; 62
    5784:	61 97       	sbiw	r28, 0x11	; 17
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	de bf       	out	0x3e, r29	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	cd bf       	out	0x3d, r28	; 61
    5790:	9f 83       	std	Y+7, r25	; 0x07
    5792:	8e 83       	std	Y+6, r24	; 0x06
    5794:	79 87       	std	Y+9, r23	; 0x09
    5796:	68 87       	std	Y+8, r22	; 0x08
    5798:	5b 87       	std	Y+11, r21	; 0x0b
    579a:	4a 87       	std	Y+10, r20	; 0x0a
    579c:	3d 87       	std	Y+13, r19	; 0x0d
    579e:	2c 87       	std	Y+12, r18	; 0x0c
    57a0:	1f 87       	std	Y+15, r17	; 0x0f
    57a2:	0e 87       	std	Y+14, r16	; 0x0e
    57a4:	f9 8a       	std	Y+17, r15	; 0x11
    57a6:	e8 8a       	std	Y+16, r14	; 0x10
    57a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    57aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    57ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    57ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    57b0:	82 0f       	add	r24, r18
    57b2:	93 1f       	adc	r25, r19
    57b4:	fc 01       	movw	r30, r24
    57b6:	31 97       	sbiw	r30, 0x01	; 1
    57b8:	28 85       	ldd	r18, Y+8	; 0x08
    57ba:	39 85       	ldd	r19, Y+9	; 0x09
    57bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    57be:	9d 85       	ldd	r25, Y+13	; 0x0d
    57c0:	82 0f       	add	r24, r18
    57c2:	93 1f       	adc	r25, r19
    57c4:	9c 01       	movw	r18, r24
    57c6:	21 50       	subi	r18, 0x01	; 1
    57c8:	31 09       	sbc	r19, r1
    57ca:	4a 85       	ldd	r20, Y+10	; 0x0a
    57cc:	5b 85       	ldd	r21, Y+11	; 0x0b
    57ce:	68 85       	ldd	r22, Y+8	; 0x08
    57d0:	79 85       	ldd	r23, Y+9	; 0x09
    57d2:	8e 81       	ldd	r24, Y+6	; 0x06
    57d4:	9f 81       	ldd	r25, Y+7	; 0x07
    57d6:	8f 01       	movw	r16, r30
    57d8:	ce dc       	rcall	.-1636   	; 0x5176 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    57da:	8e 85       	ldd	r24, Y+14	; 0x0e
    57dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    57de:	9c 01       	movw	r18, r24
    57e0:	21 50       	subi	r18, 0x01	; 1
    57e2:	31 09       	sbc	r19, r1
    57e4:	3f 87       	std	Y+15, r19	; 0x0f
    57e6:	2e 87       	std	Y+14, r18	; 0x0e
    57e8:	21 e0       	ldi	r18, 0x01	; 1
    57ea:	89 2b       	or	r24, r25
    57ec:	09 f4       	brne	.+2      	; 0x57f0 <_ZN11TFT_ILI93418fillRectEiiiij+0x7c>
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	22 23       	and	r18, r18
    57f2:	21 f1       	breq	.+72     	; 0x583c <_ZN11TFT_ILI93418fillRectEiiiij+0xc8>
    57f4:	88 89       	ldd	r24, Y+16	; 0x10
    57f6:	99 89       	ldd	r25, Y+17	; 0x11
    57f8:	9a 83       	std	Y+2, r25	; 0x02
    57fa:	89 83       	std	Y+1, r24	; 0x01
    57fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    57fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    5800:	9c 83       	std	Y+4, r25	; 0x04
    5802:	8b 83       	std	Y+3, r24	; 0x03
    5804:	29 81       	ldd	r18, Y+1	; 0x01
    5806:	89 81       	ldd	r24, Y+1	; 0x01
    5808:	9a 81       	ldd	r25, Y+2	; 0x02
    580a:	89 2f       	mov	r24, r25
    580c:	99 27       	eor	r25, r25
    580e:	38 2f       	mov	r19, r24
    5810:	8b 81       	ldd	r24, Y+3	; 0x03
    5812:	9c 81       	ldd	r25, Y+4	; 0x04
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	71 f0       	breq	.+28     	; 0x5834 <_ZN11TFT_ILI93418fillRectEiiiij+0xc0>
    5818:	3e bd       	out	0x2e, r19	; 46
    581a:	02 d0       	rcall	.+4      	; 0x5820 <_ZN11TFT_ILI93418fillRectEiiiij+0xac>
    581c:	01 d0       	rcall	.+2      	; 0x5820 <_ZN11TFT_ILI93418fillRectEiiiij+0xac>
    581e:	01 c0       	rjmp	.+2      	; 0x5822 <_ZN11TFT_ILI93418fillRectEiiiij+0xae>
    5820:	08 95       	ret
    5822:	00 00       	nop
    5824:	2e bd       	out	0x2e, r18	; 46
    5826:	00 96       	adiw	r24, 0x00	; 0
    5828:	00 96       	adiw	r24, 0x00	; 0
    582a:	01 d0       	rcall	.+2      	; 0x582e <_ZN11TFT_ILI93418fillRectEiiiij+0xba>
    582c:	01 c0       	rjmp	.+2      	; 0x5830 <_ZN11TFT_ILI93418fillRectEiiiij+0xbc>
    582e:	08 95       	ret
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	91 f7       	brne	.-28     	; 0x5818 <_ZN11TFT_ILI93418fillRectEiiiij+0xa4>
    5834:	2d 83       	std	Y+5, r18	; 0x05
    5836:	9c 83       	std	Y+4, r25	; 0x04
    5838:	8b 83       	std	Y+3, r24	; 0x03
    583a:	cf cf       	rjmp	.-98     	; 0x57da <_ZN11TFT_ILI93418fillRectEiiiij+0x66>
    583c:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    5840:	fc 01       	movw	r30, r24
    5842:	20 81       	ld	r18, Z
    5844:	24 60       	ori	r18, 0x04	; 4
    5846:	fc 01       	movw	r30, r24
    5848:	20 83       	st	Z, r18
    584a:	00 00       	nop
    584c:	61 96       	adiw	r28, 0x11	; 17
    584e:	0f b6       	in	r0, 0x3f	; 63
    5850:	f8 94       	cli
    5852:	de bf       	out	0x3e, r29	; 62
    5854:	0f be       	out	0x3f, r0	; 63
    5856:	cd bf       	out	0x3d, r28	; 61
    5858:	df 91       	pop	r29
    585a:	cf 91       	pop	r28
    585c:	1f 91       	pop	r17
    585e:	0f 91       	pop	r16
    5860:	ff 90       	pop	r15
    5862:	ef 90       	pop	r14
    5864:	08 95       	ret

00005866 <_ZN11TFT_ILI934111setRotationEh>:
    5866:	cf 93       	push	r28
    5868:	df 93       	push	r29
    586a:	00 d0       	rcall	.+0      	; 0x586c <_ZN11TFT_ILI934111setRotationEh+0x6>
    586c:	cd b7       	in	r28, 0x3d	; 61
    586e:	de b7       	in	r29, 0x3e	; 62
    5870:	9a 83       	std	Y+2, r25	; 0x02
    5872:	89 83       	std	Y+1, r24	; 0x01
    5874:	6b 83       	std	Y+3, r22	; 0x03
    5876:	8b 81       	ldd	r24, Y+3	; 0x03
    5878:	28 2f       	mov	r18, r24
    587a:	27 70       	andi	r18, 0x07	; 7
    587c:	89 81       	ldd	r24, Y+1	; 0x01
    587e:	9a 81       	ldd	r25, Y+2	; 0x02
    5880:	fc 01       	movw	r30, r24
    5882:	23 a3       	std	Z+35, r18	; 0x23
    5884:	89 81       	ldd	r24, Y+1	; 0x01
    5886:	9a 81       	ldd	r25, Y+2	; 0x02
    5888:	66 e3       	ldi	r22, 0x36	; 54
    588a:	68 d8       	rcall	.-3888   	; 0x495c <_ZN11TFT_ILI934112writecommandEh>
    588c:	89 81       	ldd	r24, Y+1	; 0x01
    588e:	9a 81       	ldd	r25, Y+2	; 0x02
    5890:	fc 01       	movw	r30, r24
    5892:	83 a1       	ldd	r24, Z+35	; 0x23
    5894:	88 2f       	mov	r24, r24
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	09 2e       	mov	r0, r25
    589a:	00 0c       	add	r0, r0
    589c:	aa 0b       	sbc	r26, r26
    589e:	bb 0b       	sbc	r27, r27
    58a0:	40 e0       	ldi	r20, 0x00	; 0
    58a2:	50 e0       	ldi	r21, 0x00	; 0
    58a4:	27 e0       	ldi	r18, 0x07	; 7
    58a6:	30 e0       	ldi	r19, 0x00	; 0
    58a8:	84 1b       	sub	r24, r20
    58aa:	95 0b       	sbc	r25, r21
    58ac:	28 17       	cp	r18, r24
    58ae:	39 07       	cpc	r19, r25
    58b0:	08 f4       	brcc	.+2      	; 0x58b4 <_ZN11TFT_ILI934111setRotationEh+0x4e>
    58b2:	a0 c0       	rjmp	.+320    	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    58b4:	fc 01       	movw	r30, r24
    58b6:	88 27       	eor	r24, r24
    58b8:	ee 58       	subi	r30, 0x8E	; 142
    58ba:	ff 4f       	sbci	r31, 0xFF	; 255
    58bc:	8f 4f       	sbci	r24, 0xFF	; 255
    58be:	0c 94 ef 61 	jmp	0xc3de	; 0xc3de <__tablejump2__>
    58c2:	89 81       	ldd	r24, Y+1	; 0x01
    58c4:	9a 81       	ldd	r25, Y+2	; 0x02
    58c6:	68 e4       	ldi	r22, 0x48	; 72
    58c8:	76 d8       	rcall	.-3860   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	9a 81       	ldd	r25, Y+2	; 0x02
    58ce:	20 ef       	ldi	r18, 0xF0	; 240
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	fc 01       	movw	r30, r24
    58d4:	33 8b       	std	Z+19, r19	; 0x13
    58d6:	22 8b       	std	Z+18, r18	; 0x12
    58d8:	89 81       	ldd	r24, Y+1	; 0x01
    58da:	9a 81       	ldd	r25, Y+2	; 0x02
    58dc:	20 e4       	ldi	r18, 0x40	; 64
    58de:	31 e0       	ldi	r19, 0x01	; 1
    58e0:	fc 01       	movw	r30, r24
    58e2:	35 8b       	std	Z+21, r19	; 0x15
    58e4:	24 8b       	std	Z+20, r18	; 0x14
    58e6:	86 c0       	rjmp	.+268    	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	9a 81       	ldd	r25, Y+2	; 0x02
    58ec:	68 e2       	ldi	r22, 0x28	; 40
    58ee:	63 d8       	rcall	.-3898   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    58f0:	89 81       	ldd	r24, Y+1	; 0x01
    58f2:	9a 81       	ldd	r25, Y+2	; 0x02
    58f4:	20 e4       	ldi	r18, 0x40	; 64
    58f6:	31 e0       	ldi	r19, 0x01	; 1
    58f8:	fc 01       	movw	r30, r24
    58fa:	33 8b       	std	Z+19, r19	; 0x13
    58fc:	22 8b       	std	Z+18, r18	; 0x12
    58fe:	89 81       	ldd	r24, Y+1	; 0x01
    5900:	9a 81       	ldd	r25, Y+2	; 0x02
    5902:	20 ef       	ldi	r18, 0xF0	; 240
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	fc 01       	movw	r30, r24
    5908:	35 8b       	std	Z+21, r19	; 0x15
    590a:	24 8b       	std	Z+20, r18	; 0x14
    590c:	73 c0       	rjmp	.+230    	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    590e:	89 81       	ldd	r24, Y+1	; 0x01
    5910:	9a 81       	ldd	r25, Y+2	; 0x02
    5912:	68 e8       	ldi	r22, 0x88	; 136
    5914:	50 d8       	rcall	.-3936   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    5916:	89 81       	ldd	r24, Y+1	; 0x01
    5918:	9a 81       	ldd	r25, Y+2	; 0x02
    591a:	20 ef       	ldi	r18, 0xF0	; 240
    591c:	30 e0       	ldi	r19, 0x00	; 0
    591e:	fc 01       	movw	r30, r24
    5920:	33 8b       	std	Z+19, r19	; 0x13
    5922:	22 8b       	std	Z+18, r18	; 0x12
    5924:	89 81       	ldd	r24, Y+1	; 0x01
    5926:	9a 81       	ldd	r25, Y+2	; 0x02
    5928:	20 e4       	ldi	r18, 0x40	; 64
    592a:	31 e0       	ldi	r19, 0x01	; 1
    592c:	fc 01       	movw	r30, r24
    592e:	35 8b       	std	Z+21, r19	; 0x15
    5930:	24 8b       	std	Z+20, r18	; 0x14
    5932:	60 c0       	rjmp	.+192    	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    5934:	89 81       	ldd	r24, Y+1	; 0x01
    5936:	9a 81       	ldd	r25, Y+2	; 0x02
    5938:	68 ee       	ldi	r22, 0xE8	; 232
    593a:	3d d8       	rcall	.-3974   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    593c:	89 81       	ldd	r24, Y+1	; 0x01
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
    5940:	20 e4       	ldi	r18, 0x40	; 64
    5942:	31 e0       	ldi	r19, 0x01	; 1
    5944:	fc 01       	movw	r30, r24
    5946:	33 8b       	std	Z+19, r19	; 0x13
    5948:	22 8b       	std	Z+18, r18	; 0x12
    594a:	89 81       	ldd	r24, Y+1	; 0x01
    594c:	9a 81       	ldd	r25, Y+2	; 0x02
    594e:	20 ef       	ldi	r18, 0xF0	; 240
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	fc 01       	movw	r30, r24
    5954:	35 8b       	std	Z+21, r19	; 0x15
    5956:	24 8b       	std	Z+20, r18	; 0x14
    5958:	4d c0       	rjmp	.+154    	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    595a:	89 81       	ldd	r24, Y+1	; 0x01
    595c:	9a 81       	ldd	r25, Y+2	; 0x02
    595e:	68 ec       	ldi	r22, 0xC8	; 200
    5960:	2a d8       	rcall	.-4012   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    5962:	89 81       	ldd	r24, Y+1	; 0x01
    5964:	9a 81       	ldd	r25, Y+2	; 0x02
    5966:	20 ef       	ldi	r18, 0xF0	; 240
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	fc 01       	movw	r30, r24
    596c:	33 8b       	std	Z+19, r19	; 0x13
    596e:	22 8b       	std	Z+18, r18	; 0x12
    5970:	89 81       	ldd	r24, Y+1	; 0x01
    5972:	9a 81       	ldd	r25, Y+2	; 0x02
    5974:	20 e4       	ldi	r18, 0x40	; 64
    5976:	31 e0       	ldi	r19, 0x01	; 1
    5978:	fc 01       	movw	r30, r24
    597a:	35 8b       	std	Z+21, r19	; 0x15
    597c:	24 8b       	std	Z+20, r18	; 0x14
    597e:	3a c0       	rjmp	.+116    	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    5980:	89 81       	ldd	r24, Y+1	; 0x01
    5982:	9a 81       	ldd	r25, Y+2	; 0x02
    5984:	68 e6       	ldi	r22, 0x68	; 104
    5986:	17 d8       	rcall	.-4050   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    5988:	89 81       	ldd	r24, Y+1	; 0x01
    598a:	9a 81       	ldd	r25, Y+2	; 0x02
    598c:	20 e4       	ldi	r18, 0x40	; 64
    598e:	31 e0       	ldi	r19, 0x01	; 1
    5990:	fc 01       	movw	r30, r24
    5992:	33 8b       	std	Z+19, r19	; 0x13
    5994:	22 8b       	std	Z+18, r18	; 0x12
    5996:	89 81       	ldd	r24, Y+1	; 0x01
    5998:	9a 81       	ldd	r25, Y+2	; 0x02
    599a:	20 ef       	ldi	r18, 0xF0	; 240
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	fc 01       	movw	r30, r24
    59a0:	35 8b       	std	Z+21, r19	; 0x15
    59a2:	24 8b       	std	Z+20, r18	; 0x14
    59a4:	27 c0       	rjmp	.+78     	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
    59a8:	9a 81       	ldd	r25, Y+2	; 0x02
    59aa:	68 e0       	ldi	r22, 0x08	; 8
    59ac:	04 d8       	rcall	.-4088   	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    59ae:	89 81       	ldd	r24, Y+1	; 0x01
    59b0:	9a 81       	ldd	r25, Y+2	; 0x02
    59b2:	20 ef       	ldi	r18, 0xF0	; 240
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	fc 01       	movw	r30, r24
    59b8:	33 8b       	std	Z+19, r19	; 0x13
    59ba:	22 8b       	std	Z+18, r18	; 0x12
    59bc:	89 81       	ldd	r24, Y+1	; 0x01
    59be:	9a 81       	ldd	r25, Y+2	; 0x02
    59c0:	20 e4       	ldi	r18, 0x40	; 64
    59c2:	31 e0       	ldi	r19, 0x01	; 1
    59c4:	fc 01       	movw	r30, r24
    59c6:	35 8b       	std	Z+21, r19	; 0x15
    59c8:	24 8b       	std	Z+20, r18	; 0x14
    59ca:	14 c0       	rjmp	.+40     	; 0x59f4 <_ZN11TFT_ILI934111setRotationEh+0x18e>
    59cc:	89 81       	ldd	r24, Y+1	; 0x01
    59ce:	9a 81       	ldd	r25, Y+2	; 0x02
    59d0:	68 ea       	ldi	r22, 0xA8	; 168
    59d2:	0e 94 db 24 	call	0x49b6	; 0x49b6 <_ZN11TFT_ILI93419writedataEh>
    59d6:	89 81       	ldd	r24, Y+1	; 0x01
    59d8:	9a 81       	ldd	r25, Y+2	; 0x02
    59da:	20 e4       	ldi	r18, 0x40	; 64
    59dc:	31 e0       	ldi	r19, 0x01	; 1
    59de:	fc 01       	movw	r30, r24
    59e0:	33 8b       	std	Z+19, r19	; 0x13
    59e2:	22 8b       	std	Z+18, r18	; 0x12
    59e4:	89 81       	ldd	r24, Y+1	; 0x01
    59e6:	9a 81       	ldd	r25, Y+2	; 0x02
    59e8:	20 ef       	ldi	r18, 0xF0	; 240
    59ea:	30 e0       	ldi	r19, 0x00	; 0
    59ec:	fc 01       	movw	r30, r24
    59ee:	35 8b       	std	Z+21, r19	; 0x15
    59f0:	24 8b       	std	Z+20, r18	; 0x14
    59f2:	00 00       	nop
    59f4:	89 81       	ldd	r24, Y+1	; 0x01
    59f6:	9a 81       	ldd	r25, Y+2	; 0x02
    59f8:	e8 dd       	rcall	.-1072   	; 0x55ca <_ZN11TFT_ILI93419fastSetupEv>
    59fa:	89 81       	ldd	r24, Y+1	; 0x01
    59fc:	9a 81       	ldd	r25, Y+2	; 0x02
    59fe:	2f ef       	ldi	r18, 0xFF	; 255
    5a00:	3f ef       	ldi	r19, 0xFF	; 255
    5a02:	fc 01       	movw	r30, r24
    5a04:	35 8f       	std	Z+29, r19	; 0x1d
    5a06:	24 8f       	std	Z+28, r18	; 0x1c
    5a08:	89 81       	ldd	r24, Y+1	; 0x01
    5a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0c:	2f ef       	ldi	r18, 0xFF	; 255
    5a0e:	3f ef       	ldi	r19, 0xFF	; 255
    5a10:	fc 01       	movw	r30, r24
    5a12:	37 8f       	std	Z+31, r19	; 0x1f
    5a14:	26 8f       	std	Z+30, r18	; 0x1e
    5a16:	89 81       	ldd	r24, Y+1	; 0x01
    5a18:	9a 81       	ldd	r25, Y+2	; 0x02
    5a1a:	2f ef       	ldi	r18, 0xFF	; 255
    5a1c:	3f ef       	ldi	r19, 0xFF	; 255
    5a1e:	fc 01       	movw	r30, r24
    5a20:	35 87       	std	Z+13, r19	; 0x0d
    5a22:	24 87       	std	Z+12, r18	; 0x0c
    5a24:	89 81       	ldd	r24, Y+1	; 0x01
    5a26:	9a 81       	ldd	r25, Y+2	; 0x02
    5a28:	2f ef       	ldi	r18, 0xFF	; 255
    5a2a:	3f ef       	ldi	r19, 0xFF	; 255
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	37 87       	std	Z+15, r19	; 0x0f
    5a30:	26 87       	std	Z+14, r18	; 0x0e
    5a32:	00 00       	nop
    5a34:	0f 90       	pop	r0
    5a36:	0f 90       	pop	r0
    5a38:	0f 90       	pop	r0
    5a3a:	df 91       	pop	r29
    5a3c:	cf 91       	pop	r28
    5a3e:	08 95       	ret

00005a40 <_ZN11TFT_ILI93415writeEh>:
    5a40:	0f 93       	push	r16
    5a42:	1f 93       	push	r17
    5a44:	cf 93       	push	r28
    5a46:	df 93       	push	r29
    5a48:	cd b7       	in	r28, 0x3d	; 61
    5a4a:	de b7       	in	r29, 0x3e	; 62
    5a4c:	64 97       	sbiw	r28, 0x14	; 20
    5a4e:	0f b6       	in	r0, 0x3f	; 63
    5a50:	f8 94       	cli
    5a52:	de bf       	out	0x3e, r29	; 62
    5a54:	0f be       	out	0x3f, r0	; 63
    5a56:	cd bf       	out	0x3d, r28	; 61
    5a58:	9b 8b       	std	Y+19, r25	; 0x13
    5a5a:	8a 8b       	std	Y+18, r24	; 0x12
    5a5c:	6c 8b       	std	Y+20, r22	; 0x14
    5a5e:	8c 89       	ldd	r24, Y+20	; 0x14
    5a60:	8d 30       	cpi	r24, 0x0D	; 13
    5a62:	19 f4       	brne	.+6      	; 0x5a6a <_ZN11TFT_ILI93415writeEh+0x2a>
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	30 c1       	rjmp	.+608    	; 0x5cca <_ZN11TFT_ILI93415writeEh+0x28a>
    5a6a:	1a 82       	std	Y+2, r1	; 0x02
    5a6c:	19 82       	std	Y+1, r1	; 0x01
    5a6e:	1c 82       	std	Y+4, r1	; 0x04
    5a70:	1b 82       	std	Y+3, r1	; 0x03
    5a72:	8a 89       	ldd	r24, Y+18	; 0x12
    5a74:	9b 89       	ldd	r25, Y+19	; 0x13
    5a76:	dc 01       	movw	r26, r24
    5a78:	90 96       	adiw	r26, 0x20	; 32
    5a7a:	8c 91       	ld	r24, X
    5a7c:	82 30       	cpi	r24, 0x02	; 2
    5a7e:	61 f5       	brne	.+88     	; 0x5ad8 <_ZN11TFT_ILI93415writeEh+0x98>
    5a80:	8c 89       	ldd	r24, Y+20	; 0x14
    5a82:	88 2f       	mov	r24, r24
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	80 97       	sbiw	r24, 0x20	; 32
    5a88:	8b 5c       	subi	r24, 0xCB	; 203
    5a8a:	99 4f       	sbci	r25, 0xF9	; 249
    5a8c:	9e 83       	std	Y+6, r25	; 0x06
    5a8e:	8d 83       	std	Y+5, r24	; 0x05
    5a90:	8d 81       	ldd	r24, Y+5	; 0x05
    5a92:	9e 81       	ldd	r25, Y+6	; 0x06
    5a94:	fc 01       	movw	r30, r24
    5a96:	84 91       	lpm	r24, Z
    5a98:	8f 83       	std	Y+7, r24	; 0x07
    5a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    5a9c:	88 2f       	mov	r24, r24
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	9a 83       	std	Y+2, r25	; 0x02
    5aa2:	89 83       	std	Y+1, r24	; 0x01
    5aa4:	80 e1       	ldi	r24, 0x10	; 16
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	9c 83       	std	Y+4, r25	; 0x04
    5aaa:	8b 83       	std	Y+3, r24	; 0x03
    5aac:	89 81       	ldd	r24, Y+1	; 0x01
    5aae:	9a 81       	ldd	r25, Y+2	; 0x02
    5ab0:	06 96       	adiw	r24, 0x06	; 6
    5ab2:	96 95       	lsr	r25
    5ab4:	87 95       	ror	r24
    5ab6:	96 95       	lsr	r25
    5ab8:	87 95       	ror	r24
    5aba:	96 95       	lsr	r25
    5abc:	87 95       	ror	r24
    5abe:	9a 83       	std	Y+2, r25	; 0x02
    5ac0:	89 83       	std	Y+1, r24	; 0x01
    5ac2:	89 81       	ldd	r24, Y+1	; 0x01
    5ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac6:	88 0f       	add	r24, r24
    5ac8:	99 1f       	adc	r25, r25
    5aca:	88 0f       	add	r24, r24
    5acc:	99 1f       	adc	r25, r25
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	9a 83       	std	Y+2, r25	; 0x02
    5ad4:	89 83       	std	Y+1, r24	; 0x01
    5ad6:	4e c0       	rjmp	.+156    	; 0x5b74 <_ZN11TFT_ILI93415writeEh+0x134>
    5ad8:	8a 89       	ldd	r24, Y+18	; 0x12
    5ada:	9b 89       	ldd	r25, Y+19	; 0x13
    5adc:	dc 01       	movw	r26, r24
    5ade:	90 96       	adiw	r26, 0x20	; 32
    5ae0:	8c 91       	ld	r24, X
    5ae2:	28 2f       	mov	r18, r24
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	c9 01       	movw	r24, r18
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	82 0f       	add	r24, r18
    5af2:	93 1f       	adc	r25, r19
    5af4:	02 96       	adiw	r24, 0x02	; 2
    5af6:	88 53       	subi	r24, 0x38	; 56
    5af8:	92 4d       	sbci	r25, 0xD2	; 210
    5afa:	99 87       	std	Y+9, r25	; 0x09
    5afc:	88 87       	std	Y+8, r24	; 0x08
    5afe:	88 85       	ldd	r24, Y+8	; 0x08
    5b00:	99 85       	ldd	r25, Y+9	; 0x09
    5b02:	fc 01       	movw	r30, r24
    5b04:	25 91       	lpm	r18, Z+
    5b06:	34 91       	lpm	r19, Z
    5b08:	cf 01       	movw	r24, r30
    5b0a:	3b 87       	std	Y+11, r19	; 0x0b
    5b0c:	2a 87       	std	Y+10, r18	; 0x0a
    5b0e:	99 87       	std	Y+9, r25	; 0x09
    5b10:	88 87       	std	Y+8, r24	; 0x08
    5b12:	2a 85       	ldd	r18, Y+10	; 0x0a
    5b14:	3b 85       	ldd	r19, Y+11	; 0x0b
    5b16:	8c 89       	ldd	r24, Y+20	; 0x14
    5b18:	88 2f       	mov	r24, r24
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	82 0f       	add	r24, r18
    5b1e:	93 1f       	adc	r25, r19
    5b20:	80 97       	sbiw	r24, 0x20	; 32
    5b22:	9d 87       	std	Y+13, r25	; 0x0d
    5b24:	8c 87       	std	Y+12, r24	; 0x0c
    5b26:	8c 85       	ldd	r24, Y+12	; 0x0c
    5b28:	9d 85       	ldd	r25, Y+13	; 0x0d
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	84 91       	lpm	r24, Z
    5b2e:	8e 87       	std	Y+14, r24	; 0x0e
    5b30:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b32:	88 2f       	mov	r24, r24
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	9a 83       	std	Y+2, r25	; 0x02
    5b38:	89 83       	std	Y+1, r24	; 0x01
    5b3a:	8a 89       	ldd	r24, Y+18	; 0x12
    5b3c:	9b 89       	ldd	r25, Y+19	; 0x13
    5b3e:	dc 01       	movw	r26, r24
    5b40:	90 96       	adiw	r26, 0x20	; 32
    5b42:	8c 91       	ld	r24, X
    5b44:	28 2f       	mov	r18, r24
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	c9 01       	movw	r24, r18
    5b4a:	88 0f       	add	r24, r24
    5b4c:	99 1f       	adc	r25, r25
    5b4e:	88 0f       	add	r24, r24
    5b50:	99 1f       	adc	r25, r25
    5b52:	82 0f       	add	r24, r18
    5b54:	93 1f       	adc	r25, r19
    5b56:	04 96       	adiw	r24, 0x04	; 4
    5b58:	88 53       	subi	r24, 0x38	; 56
    5b5a:	92 4d       	sbci	r25, 0xD2	; 210
    5b5c:	98 8b       	std	Y+16, r25	; 0x10
    5b5e:	8f 87       	std	Y+15, r24	; 0x0f
    5b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b62:	98 89       	ldd	r25, Y+16	; 0x10
    5b64:	fc 01       	movw	r30, r24
    5b66:	84 91       	lpm	r24, Z
    5b68:	89 8b       	std	Y+17, r24	; 0x11
    5b6a:	89 89       	ldd	r24, Y+17	; 0x11
    5b6c:	88 2f       	mov	r24, r24
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	9c 83       	std	Y+4, r25	; 0x04
    5b72:	8b 83       	std	Y+3, r24	; 0x03
    5b74:	8a 89       	ldd	r24, Y+18	; 0x12
    5b76:	9b 89       	ldd	r25, Y+19	; 0x13
    5b78:	dc 01       	movw	r26, r24
    5b7a:	90 96       	adiw	r26, 0x20	; 32
    5b7c:	8c 91       	ld	r24, X
    5b7e:	81 30       	cpi	r24, 0x01	; 1
    5b80:	41 f4       	brne	.+16     	; 0x5b92 <_ZN11TFT_ILI93415writeEh+0x152>
    5b82:	86 e0       	ldi	r24, 0x06	; 6
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	9a 83       	std	Y+2, r25	; 0x02
    5b88:	89 83       	std	Y+1, r24	; 0x01
    5b8a:	88 e0       	ldi	r24, 0x08	; 8
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	9c 83       	std	Y+4, r25	; 0x04
    5b90:	8b 83       	std	Y+3, r24	; 0x03
    5b92:	8a 89       	ldd	r24, Y+18	; 0x12
    5b94:	9b 89       	ldd	r25, Y+19	; 0x13
    5b96:	fc 01       	movw	r30, r24
    5b98:	81 a1       	ldd	r24, Z+33	; 0x21
    5b9a:	28 2f       	mov	r18, r24
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	4b 81       	ldd	r20, Y+3	; 0x03
    5ba0:	5c 81       	ldd	r21, Y+4	; 0x04
    5ba2:	42 9f       	mul	r20, r18
    5ba4:	c0 01       	movw	r24, r0
    5ba6:	43 9f       	mul	r20, r19
    5ba8:	90 0d       	add	r25, r0
    5baa:	52 9f       	mul	r21, r18
    5bac:	90 0d       	add	r25, r0
    5bae:	11 24       	eor	r1, r1
    5bb0:	9c 83       	std	Y+4, r25	; 0x04
    5bb2:	8b 83       	std	Y+3, r24	; 0x03
    5bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    5bb6:	8a 30       	cpi	r24, 0x0A	; 10
    5bb8:	d1 f4       	brne	.+52     	; 0x5bee <_ZN11TFT_ILI93415writeEh+0x1ae>
    5bba:	8a 89       	ldd	r24, Y+18	; 0x12
    5bbc:	9b 89       	ldd	r25, Y+19	; 0x13
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	1a 96       	adiw	r26, 0x0a	; 10
    5bc2:	8d 91       	ld	r24, X+
    5bc4:	9c 91       	ld	r25, X
    5bc6:	1b 97       	sbiw	r26, 0x0b	; 11
    5bc8:	9c 01       	movw	r18, r24
    5bca:	8b 81       	ldd	r24, Y+3	; 0x03
    5bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    5bce:	82 0f       	add	r24, r18
    5bd0:	93 1f       	adc	r25, r19
    5bd2:	9c 01       	movw	r18, r24
    5bd4:	8a 89       	ldd	r24, Y+18	; 0x12
    5bd6:	9b 89       	ldd	r25, Y+19	; 0x13
    5bd8:	fc 01       	movw	r30, r24
    5bda:	33 87       	std	Z+11, r19	; 0x0b
    5bdc:	22 87       	std	Z+10, r18	; 0x0a
    5bde:	8a 89       	ldd	r24, Y+18	; 0x12
    5be0:	9b 89       	ldd	r25, Y+19	; 0x13
    5be2:	dc 01       	movw	r26, r24
    5be4:	19 96       	adiw	r26, 0x09	; 9
    5be6:	1c 92       	st	X, r1
    5be8:	1e 92       	st	-X, r1
    5bea:	18 97       	sbiw	r26, 0x08	; 8
    5bec:	6c c0       	rjmp	.+216    	; 0x5cc6 <_ZN11TFT_ILI93415writeEh+0x286>
    5bee:	8a 89       	ldd	r24, Y+18	; 0x12
    5bf0:	9b 89       	ldd	r25, Y+19	; 0x13
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	84 a1       	ldd	r24, Z+36	; 0x24
    5bf6:	88 23       	and	r24, r24
    5bf8:	d9 f1       	breq	.+118    	; 0x5c70 <_ZN11TFT_ILI93415writeEh+0x230>
    5bfa:	8a 89       	ldd	r24, Y+18	; 0x12
    5bfc:	9b 89       	ldd	r25, Y+19	; 0x13
    5bfe:	dc 01       	movw	r26, r24
    5c00:	18 96       	adiw	r26, 0x08	; 8
    5c02:	8d 91       	ld	r24, X+
    5c04:	9c 91       	ld	r25, X
    5c06:	19 97       	sbiw	r26, 0x09	; 9
    5c08:	bc 01       	movw	r22, r24
    5c0a:	8a 89       	ldd	r24, Y+18	; 0x12
    5c0c:	9b 89       	ldd	r25, Y+19	; 0x13
    5c0e:	fc 01       	movw	r30, r24
    5c10:	81 a1       	ldd	r24, Z+33	; 0x21
    5c12:	48 2f       	mov	r20, r24
    5c14:	50 e0       	ldi	r21, 0x00	; 0
    5c16:	29 81       	ldd	r18, Y+1	; 0x01
    5c18:	3a 81       	ldd	r19, Y+2	; 0x02
    5c1a:	42 9f       	mul	r20, r18
    5c1c:	c0 01       	movw	r24, r0
    5c1e:	43 9f       	mul	r20, r19
    5c20:	90 0d       	add	r25, r0
    5c22:	52 9f       	mul	r21, r18
    5c24:	90 0d       	add	r25, r0
    5c26:	11 24       	eor	r1, r1
    5c28:	9b 01       	movw	r18, r22
    5c2a:	28 0f       	add	r18, r24
    5c2c:	39 1f       	adc	r19, r25
    5c2e:	8a 89       	ldd	r24, Y+18	; 0x12
    5c30:	9b 89       	ldd	r25, Y+19	; 0x13
    5c32:	dc 01       	movw	r26, r24
    5c34:	52 96       	adiw	r26, 0x12	; 18
    5c36:	8d 91       	ld	r24, X+
    5c38:	9c 91       	ld	r25, X
    5c3a:	53 97       	sbiw	r26, 0x13	; 19
    5c3c:	28 17       	cp	r18, r24
    5c3e:	39 07       	cpc	r19, r25
    5c40:	b8 f0       	brcs	.+46     	; 0x5c70 <_ZN11TFT_ILI93415writeEh+0x230>
    5c42:	8a 89       	ldd	r24, Y+18	; 0x12
    5c44:	9b 89       	ldd	r25, Y+19	; 0x13
    5c46:	fc 01       	movw	r30, r24
    5c48:	82 85       	ldd	r24, Z+10	; 0x0a
    5c4a:	93 85       	ldd	r25, Z+11	; 0x0b
    5c4c:	9c 01       	movw	r18, r24
    5c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c50:	9c 81       	ldd	r25, Y+4	; 0x04
    5c52:	82 0f       	add	r24, r18
    5c54:	93 1f       	adc	r25, r19
    5c56:	9c 01       	movw	r18, r24
    5c58:	8a 89       	ldd	r24, Y+18	; 0x12
    5c5a:	9b 89       	ldd	r25, Y+19	; 0x13
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	1b 96       	adiw	r26, 0x0b	; 11
    5c60:	3c 93       	st	X, r19
    5c62:	2e 93       	st	-X, r18
    5c64:	1a 97       	sbiw	r26, 0x0a	; 10
    5c66:	8a 89       	ldd	r24, Y+18	; 0x12
    5c68:	9b 89       	ldd	r25, Y+19	; 0x13
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	11 86       	std	Z+9, r1	; 0x09
    5c6e:	10 86       	std	Z+8, r1	; 0x08
    5c70:	8a 89       	ldd	r24, Y+18	; 0x12
    5c72:	9b 89       	ldd	r25, Y+19	; 0x13
    5c74:	dc 01       	movw	r26, r24
    5c76:	90 96       	adiw	r26, 0x20	; 32
    5c78:	8c 91       	ld	r24, X
    5c7a:	e8 2f       	mov	r30, r24
    5c7c:	f0 e0       	ldi	r31, 0x00	; 0
    5c7e:	8a 89       	ldd	r24, Y+18	; 0x12
    5c80:	9b 89       	ldd	r25, Y+19	; 0x13
    5c82:	dc 01       	movw	r26, r24
    5c84:	1a 96       	adiw	r26, 0x0a	; 10
    5c86:	2d 91       	ld	r18, X+
    5c88:	3c 91       	ld	r19, X
    5c8a:	1b 97       	sbiw	r26, 0x0b	; 11
    5c8c:	8a 89       	ldd	r24, Y+18	; 0x12
    5c8e:	9b 89       	ldd	r25, Y+19	; 0x13
    5c90:	dc 01       	movw	r26, r24
    5c92:	18 96       	adiw	r26, 0x08	; 8
    5c94:	4d 91       	ld	r20, X+
    5c96:	5c 91       	ld	r21, X
    5c98:	19 97       	sbiw	r26, 0x09	; 9
    5c9a:	8c 89       	ldd	r24, Y+20	; 0x14
    5c9c:	68 2f       	mov	r22, r24
    5c9e:	70 e0       	ldi	r23, 0x00	; 0
    5ca0:	8a 89       	ldd	r24, Y+18	; 0x12
    5ca2:	9b 89       	ldd	r25, Y+19	; 0x13
    5ca4:	8f 01       	movw	r16, r30
    5ca6:	1c d0       	rcall	.+56     	; 0x5ce0 <_ZN11TFT_ILI93418drawCharEjiii>
    5ca8:	9c 01       	movw	r18, r24
    5caa:	8a 89       	ldd	r24, Y+18	; 0x12
    5cac:	9b 89       	ldd	r25, Y+19	; 0x13
    5cae:	fc 01       	movw	r30, r24
    5cb0:	80 85       	ldd	r24, Z+8	; 0x08
    5cb2:	91 85       	ldd	r25, Z+9	; 0x09
    5cb4:	28 0f       	add	r18, r24
    5cb6:	39 1f       	adc	r19, r25
    5cb8:	8a 89       	ldd	r24, Y+18	; 0x12
    5cba:	9b 89       	ldd	r25, Y+19	; 0x13
    5cbc:	dc 01       	movw	r26, r24
    5cbe:	19 96       	adiw	r26, 0x09	; 9
    5cc0:	3c 93       	st	X, r19
    5cc2:	2e 93       	st	-X, r18
    5cc4:	18 97       	sbiw	r26, 0x08	; 8
    5cc6:	81 e0       	ldi	r24, 0x01	; 1
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	64 96       	adiw	r28, 0x14	; 20
    5ccc:	0f b6       	in	r0, 0x3f	; 63
    5cce:	f8 94       	cli
    5cd0:	de bf       	out	0x3e, r29	; 62
    5cd2:	0f be       	out	0x3f, r0	; 63
    5cd4:	cd bf       	out	0x3d, r28	; 61
    5cd6:	df 91       	pop	r29
    5cd8:	cf 91       	pop	r28
    5cda:	1f 91       	pop	r17
    5cdc:	0f 91       	pop	r16
    5cde:	08 95       	ret

00005ce0 <_ZN11TFT_ILI93418drawCharEjiii>:
    5ce0:	cf 92       	push	r12
    5ce2:	ef 92       	push	r14
    5ce4:	ff 92       	push	r15
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	cf 93       	push	r28
    5cec:	df 93       	push	r29
    5cee:	cd b7       	in	r28, 0x3d	; 61
    5cf0:	de b7       	in	r29, 0x3e	; 62
    5cf2:	ce 55       	subi	r28, 0x5E	; 94
    5cf4:	d1 09       	sbc	r29, r1
    5cf6:	0f b6       	in	r0, 0x3f	; 63
    5cf8:	f8 94       	cli
    5cfa:	de bf       	out	0x3e, r29	; 62
    5cfc:	0f be       	out	0x3f, r0	; 63
    5cfe:	cd bf       	out	0x3d, r28	; 61
    5d00:	fe 01       	movw	r30, r28
    5d02:	ed 5a       	subi	r30, 0xAD	; 173
    5d04:	ff 4f       	sbci	r31, 0xFF	; 255
    5d06:	91 83       	std	Z+1, r25	; 0x01
    5d08:	80 83       	st	Z, r24
    5d0a:	ce 01       	movw	r24, r28
    5d0c:	8b 5a       	subi	r24, 0xAB	; 171
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d10:	dc 01       	movw	r26, r24
    5d12:	6d 93       	st	X+, r22
    5d14:	7c 93       	st	X, r23
    5d16:	ce 01       	movw	r24, r28
    5d18:	89 5a       	subi	r24, 0xA9	; 169
    5d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1c:	fc 01       	movw	r30, r24
    5d1e:	51 83       	std	Z+1, r21	; 0x01
    5d20:	40 83       	st	Z, r20
    5d22:	ce 01       	movw	r24, r28
    5d24:	87 5a       	subi	r24, 0xA7	; 167
    5d26:	9f 4f       	sbci	r25, 0xFF	; 255
    5d28:	dc 01       	movw	r26, r24
    5d2a:	2d 93       	st	X+, r18
    5d2c:	3c 93       	st	X, r19
    5d2e:	ce 01       	movw	r24, r28
    5d30:	85 5a       	subi	r24, 0xA5	; 165
    5d32:	9f 4f       	sbci	r25, 0xFF	; 255
    5d34:	fc 01       	movw	r30, r24
    5d36:	11 83       	std	Z+1, r17	; 0x01
    5d38:	00 83       	st	Z, r16
    5d3a:	ce 01       	movw	r24, r28
    5d3c:	85 5a       	subi	r24, 0xA5	; 165
    5d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d40:	dc 01       	movw	r26, r24
    5d42:	8d 91       	ld	r24, X+
    5d44:	9c 91       	ld	r25, X
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	09 f0       	breq	.+2      	; 0x5d4c <_ZN11TFT_ILI93418drawCharEjiii+0x6c>
    5d4a:	52 c0       	rjmp	.+164    	; 0x5df0 <_ZN11TFT_ILI93418drawCharEjiii+0x110>
    5d4c:	ce 01       	movw	r24, r28
    5d4e:	8d 5a       	subi	r24, 0xAD	; 173
    5d50:	9f 4f       	sbci	r25, 0xFF	; 255
    5d52:	fc 01       	movw	r30, r24
    5d54:	80 81       	ld	r24, Z
    5d56:	91 81       	ldd	r25, Z+1	; 0x01
    5d58:	fc 01       	movw	r30, r24
    5d5a:	b1 a1       	ldd	r27, Z+33	; 0x21
    5d5c:	ce 01       	movw	r24, r28
    5d5e:	8d 5a       	subi	r24, 0xAD	; 173
    5d60:	9f 4f       	sbci	r25, 0xFF	; 255
    5d62:	fc 01       	movw	r30, r24
    5d64:	80 81       	ld	r24, Z
    5d66:	91 81       	ldd	r25, Z+1	; 0x01
    5d68:	fc 01       	movw	r30, r24
    5d6a:	00 8c       	ldd	r0, Z+24	; 0x18
    5d6c:	f1 8d       	ldd	r31, Z+25	; 0x19
    5d6e:	e0 2d       	mov	r30, r0
    5d70:	6f 96       	adiw	r28, 0x1f	; 31
    5d72:	ff af       	std	Y+63, r31	; 0x3f
    5d74:	ee af       	std	Y+62, r30	; 0x3e
    5d76:	6f 97       	sbiw	r28, 0x1f	; 31
    5d78:	ce 01       	movw	r24, r28
    5d7a:	8d 5a       	subi	r24, 0xAD	; 173
    5d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d7e:	fc 01       	movw	r30, r24
    5d80:	80 81       	ld	r24, Z
    5d82:	91 81       	ldd	r25, Z+1	; 0x01
    5d84:	fc 01       	movw	r30, r24
    5d86:	26 89       	ldd	r18, Z+22	; 0x16
    5d88:	37 89       	ldd	r19, Z+23	; 0x17
    5d8a:	ce 01       	movw	r24, r28
    5d8c:	8b 5a       	subi	r24, 0xAB	; 171
    5d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d90:	fc 01       	movw	r30, r24
    5d92:	a0 81       	ld	r26, Z
    5d94:	ce 01       	movw	r24, r28
    5d96:	87 5a       	subi	r24, 0xA7	; 167
    5d98:	9f 4f       	sbci	r25, 0xFF	; 255
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	40 81       	ld	r20, Z
    5d9e:	51 81       	ldd	r21, Z+1	; 0x01
    5da0:	ce 01       	movw	r24, r28
    5da2:	89 5a       	subi	r24, 0xA9	; 169
    5da4:	9f 4f       	sbci	r25, 0xFF	; 255
    5da6:	fc 01       	movw	r30, r24
    5da8:	60 81       	ld	r22, Z
    5daa:	71 81       	ldd	r23, Z+1	; 0x01
    5dac:	ce 01       	movw	r24, r28
    5dae:	8d 5a       	subi	r24, 0xAD	; 173
    5db0:	9f 4f       	sbci	r25, 0xFF	; 255
    5db2:	fc 01       	movw	r30, r24
    5db4:	80 81       	ld	r24, Z
    5db6:	91 81       	ldd	r25, Z+1	; 0x01
    5db8:	cb 2e       	mov	r12, r27
    5dba:	6f 96       	adiw	r28, 0x1f	; 31
    5dbc:	ee ac       	ldd	r14, Y+62	; 0x3e
    5dbe:	ff ac       	ldd	r15, Y+63	; 0x3f
    5dc0:	6f 97       	sbiw	r28, 0x1f	; 31
    5dc2:	89 01       	movw	r16, r18
    5dc4:	2a 2f       	mov	r18, r26
    5dc6:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN11TFT_ILI93418drawCharEiihjjh>
    5dca:	ce 01       	movw	r24, r28
    5dcc:	8d 5a       	subi	r24, 0xAD	; 173
    5dce:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd0:	dc 01       	movw	r26, r24
    5dd2:	8d 91       	ld	r24, X+
    5dd4:	9c 91       	ld	r25, X
    5dd6:	fc 01       	movw	r30, r24
    5dd8:	81 a1       	ldd	r24, Z+33	; 0x21
    5dda:	28 2f       	mov	r18, r24
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	c9 01       	movw	r24, r18
    5de0:	88 0f       	add	r24, r24
    5de2:	99 1f       	adc	r25, r25
    5de4:	82 0f       	add	r24, r18
    5de6:	93 1f       	adc	r25, r19
    5de8:	88 0f       	add	r24, r24
    5dea:	99 1f       	adc	r25, r25
    5dec:	0c 94 69 39 	jmp	0x72d2	; 0x72d2 <_ZN11TFT_ILI93418drawCharEjiii+0x15f2>
    5df0:	1a 82       	std	Y+2, r1	; 0x02
    5df2:	19 82       	std	Y+1, r1	; 0x01
    5df4:	1c 82       	std	Y+4, r1	; 0x04
    5df6:	1b 82       	std	Y+3, r1	; 0x03
    5df8:	1e 82       	std	Y+6, r1	; 0x06
    5dfa:	1d 82       	std	Y+5, r1	; 0x05
    5dfc:	ce 01       	movw	r24, r28
    5dfe:	8b 5a       	subi	r24, 0xAB	; 171
    5e00:	9f 4f       	sbci	r25, 0xFF	; 255
    5e02:	9e 01       	movw	r18, r28
    5e04:	2b 5a       	subi	r18, 0xAB	; 171
    5e06:	3f 4f       	sbci	r19, 0xFF	; 255
    5e08:	d9 01       	movw	r26, r18
    5e0a:	2d 91       	ld	r18, X+
    5e0c:	3c 91       	ld	r19, X
    5e0e:	20 52       	subi	r18, 0x20	; 32
    5e10:	31 09       	sbc	r19, r1
    5e12:	fc 01       	movw	r30, r24
    5e14:	31 83       	std	Z+1, r19	; 0x01
    5e16:	20 83       	st	Z, r18
    5e18:	ce 01       	movw	r24, r28
    5e1a:	85 5a       	subi	r24, 0xA5	; 165
    5e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1e:	dc 01       	movw	r26, r24
    5e20:	8d 91       	ld	r24, X+
    5e22:	9c 91       	ld	r25, X
    5e24:	02 97       	sbiw	r24, 0x02	; 2
    5e26:	99 f5       	brne	.+102    	; 0x5e8e <_ZN11TFT_ILI93418drawCharEjiii+0x1ae>
    5e28:	ce 01       	movw	r24, r28
    5e2a:	8b 5a       	subi	r24, 0xAB	; 171
    5e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2e:	fc 01       	movw	r30, r24
    5e30:	80 81       	ld	r24, Z
    5e32:	91 81       	ldd	r25, Z+1	; 0x01
    5e34:	88 0f       	add	r24, r24
    5e36:	99 1f       	adc	r25, r25
    5e38:	8b 52       	subi	r24, 0x2B	; 43
    5e3a:	93 4f       	sbci	r25, 0xF3	; 243
    5e3c:	9d 8f       	std	Y+29, r25	; 0x1d
    5e3e:	8c 8f       	std	Y+28, r24	; 0x1c
    5e40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5e42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5e44:	fc 01       	movw	r30, r24
    5e46:	25 91       	lpm	r18, Z+
    5e48:	34 91       	lpm	r19, Z
    5e4a:	cf 01       	movw	r24, r30
    5e4c:	3f 8f       	std	Y+31, r19	; 0x1f
    5e4e:	2e 8f       	std	Y+30, r18	; 0x1e
    5e50:	9d 8f       	std	Y+29, r25	; 0x1d
    5e52:	8c 8f       	std	Y+28, r24	; 0x1c
    5e54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5e56:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5e58:	9e 83       	std	Y+6, r25	; 0x06
    5e5a:	8d 83       	std	Y+5, r24	; 0x05
    5e5c:	ce 01       	movw	r24, r28
    5e5e:	8b 5a       	subi	r24, 0xAB	; 171
    5e60:	9f 4f       	sbci	r25, 0xFF	; 255
    5e62:	dc 01       	movw	r26, r24
    5e64:	8d 91       	ld	r24, X+
    5e66:	9c 91       	ld	r25, X
    5e68:	8b 5c       	subi	r24, 0xCB	; 203
    5e6a:	99 4f       	sbci	r25, 0xF9	; 249
    5e6c:	99 a3       	std	Y+33, r25	; 0x21
    5e6e:	88 a3       	std	Y+32, r24	; 0x20
    5e70:	88 a1       	ldd	r24, Y+32	; 0x20
    5e72:	99 a1       	ldd	r25, Y+33	; 0x21
    5e74:	fc 01       	movw	r30, r24
    5e76:	84 91       	lpm	r24, Z
    5e78:	8a a3       	std	Y+34, r24	; 0x22
    5e7a:	8a a1       	ldd	r24, Y+34	; 0x22
    5e7c:	88 2f       	mov	r24, r24
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	9a 83       	std	Y+2, r25	; 0x02
    5e82:	89 83       	std	Y+1, r24	; 0x01
    5e84:	80 e1       	ldi	r24, 0x10	; 16
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	9c 83       	std	Y+4, r25	; 0x04
    5e8a:	8b 83       	std	Y+3, r24	; 0x03
    5e8c:	85 c0       	rjmp	.+266    	; 0x5f98 <_ZN11TFT_ILI93418drawCharEjiii+0x2b8>
    5e8e:	ce 01       	movw	r24, r28
    5e90:	85 5a       	subi	r24, 0xA5	; 165
    5e92:	9f 4f       	sbci	r25, 0xFF	; 255
    5e94:	dc 01       	movw	r26, r24
    5e96:	2d 91       	ld	r18, X+
    5e98:	3c 91       	ld	r19, X
    5e9a:	c9 01       	movw	r24, r18
    5e9c:	88 0f       	add	r24, r24
    5e9e:	99 1f       	adc	r25, r25
    5ea0:	88 0f       	add	r24, r24
    5ea2:	99 1f       	adc	r25, r25
    5ea4:	82 0f       	add	r24, r18
    5ea6:	93 1f       	adc	r25, r19
    5ea8:	88 53       	subi	r24, 0x38	; 56
    5eaa:	92 4d       	sbci	r25, 0xD2	; 210
    5eac:	9c a3       	std	Y+36, r25	; 0x24
    5eae:	8b a3       	std	Y+35, r24	; 0x23
    5eb0:	8b a1       	ldd	r24, Y+35	; 0x23
    5eb2:	9c a1       	ldd	r25, Y+36	; 0x24
    5eb4:	fc 01       	movw	r30, r24
    5eb6:	25 91       	lpm	r18, Z+
    5eb8:	34 91       	lpm	r19, Z
    5eba:	cf 01       	movw	r24, r30
    5ebc:	3e a3       	std	Y+38, r19	; 0x26
    5ebe:	2d a3       	std	Y+37, r18	; 0x25
    5ec0:	9c a3       	std	Y+36, r25	; 0x24
    5ec2:	8b a3       	std	Y+35, r24	; 0x23
    5ec4:	2d a1       	ldd	r18, Y+37	; 0x25
    5ec6:	3e a1       	ldd	r19, Y+38	; 0x26
    5ec8:	ce 01       	movw	r24, r28
    5eca:	8b 5a       	subi	r24, 0xAB	; 171
    5ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ece:	dc 01       	movw	r26, r24
    5ed0:	8d 91       	ld	r24, X+
    5ed2:	9c 91       	ld	r25, X
    5ed4:	88 0f       	add	r24, r24
    5ed6:	99 1f       	adc	r25, r25
    5ed8:	82 0f       	add	r24, r18
    5eda:	93 1f       	adc	r25, r19
    5edc:	98 a7       	std	Y+40, r25	; 0x28
    5ede:	8f a3       	std	Y+39, r24	; 0x27
    5ee0:	8f a1       	ldd	r24, Y+39	; 0x27
    5ee2:	98 a5       	ldd	r25, Y+40	; 0x28
    5ee4:	fc 01       	movw	r30, r24
    5ee6:	25 91       	lpm	r18, Z+
    5ee8:	34 91       	lpm	r19, Z
    5eea:	cf 01       	movw	r24, r30
    5eec:	3a a7       	std	Y+42, r19	; 0x2a
    5eee:	29 a7       	std	Y+41, r18	; 0x29
    5ef0:	98 a7       	std	Y+40, r25	; 0x28
    5ef2:	8f a3       	std	Y+39, r24	; 0x27
    5ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    5ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ef8:	9e 83       	std	Y+6, r25	; 0x06
    5efa:	8d 83       	std	Y+5, r24	; 0x05
    5efc:	ce 01       	movw	r24, r28
    5efe:	85 5a       	subi	r24, 0xA5	; 165
    5f00:	9f 4f       	sbci	r25, 0xFF	; 255
    5f02:	dc 01       	movw	r26, r24
    5f04:	2d 91       	ld	r18, X+
    5f06:	3c 91       	ld	r19, X
    5f08:	c9 01       	movw	r24, r18
    5f0a:	88 0f       	add	r24, r24
    5f0c:	99 1f       	adc	r25, r25
    5f0e:	88 0f       	add	r24, r24
    5f10:	99 1f       	adc	r25, r25
    5f12:	82 0f       	add	r24, r18
    5f14:	93 1f       	adc	r25, r19
    5f16:	02 96       	adiw	r24, 0x02	; 2
    5f18:	88 53       	subi	r24, 0x38	; 56
    5f1a:	92 4d       	sbci	r25, 0xD2	; 210
    5f1c:	9c a7       	std	Y+44, r25	; 0x2c
    5f1e:	8b a7       	std	Y+43, r24	; 0x2b
    5f20:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f22:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f24:	fc 01       	movw	r30, r24
    5f26:	25 91       	lpm	r18, Z+
    5f28:	34 91       	lpm	r19, Z
    5f2a:	cf 01       	movw	r24, r30
    5f2c:	3e a7       	std	Y+46, r19	; 0x2e
    5f2e:	2d a7       	std	Y+45, r18	; 0x2d
    5f30:	9c a7       	std	Y+44, r25	; 0x2c
    5f32:	8b a7       	std	Y+43, r24	; 0x2b
    5f34:	2d a5       	ldd	r18, Y+45	; 0x2d
    5f36:	3e a5       	ldd	r19, Y+46	; 0x2e
    5f38:	ce 01       	movw	r24, r28
    5f3a:	8b 5a       	subi	r24, 0xAB	; 171
    5f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f3e:	dc 01       	movw	r26, r24
    5f40:	8d 91       	ld	r24, X+
    5f42:	9c 91       	ld	r25, X
    5f44:	82 0f       	add	r24, r18
    5f46:	93 1f       	adc	r25, r19
    5f48:	98 ab       	std	Y+48, r25	; 0x30
    5f4a:	8f a7       	std	Y+47, r24	; 0x2f
    5f4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f4e:	98 a9       	ldd	r25, Y+48	; 0x30
    5f50:	fc 01       	movw	r30, r24
    5f52:	84 91       	lpm	r24, Z
    5f54:	89 ab       	std	Y+49, r24	; 0x31
    5f56:	89 a9       	ldd	r24, Y+49	; 0x31
    5f58:	88 2f       	mov	r24, r24
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	9a 83       	std	Y+2, r25	; 0x02
    5f5e:	89 83       	std	Y+1, r24	; 0x01
    5f60:	ce 01       	movw	r24, r28
    5f62:	85 5a       	subi	r24, 0xA5	; 165
    5f64:	9f 4f       	sbci	r25, 0xFF	; 255
    5f66:	dc 01       	movw	r26, r24
    5f68:	2d 91       	ld	r18, X+
    5f6a:	3c 91       	ld	r19, X
    5f6c:	c9 01       	movw	r24, r18
    5f6e:	88 0f       	add	r24, r24
    5f70:	99 1f       	adc	r25, r25
    5f72:	88 0f       	add	r24, r24
    5f74:	99 1f       	adc	r25, r25
    5f76:	82 0f       	add	r24, r18
    5f78:	93 1f       	adc	r25, r19
    5f7a:	04 96       	adiw	r24, 0x04	; 4
    5f7c:	88 53       	subi	r24, 0x38	; 56
    5f7e:	92 4d       	sbci	r25, 0xD2	; 210
    5f80:	9b ab       	std	Y+51, r25	; 0x33
    5f82:	8a ab       	std	Y+50, r24	; 0x32
    5f84:	8a a9       	ldd	r24, Y+50	; 0x32
    5f86:	9b a9       	ldd	r25, Y+51	; 0x33
    5f88:	fc 01       	movw	r30, r24
    5f8a:	84 91       	lpm	r24, Z
    5f8c:	8c ab       	std	Y+52, r24	; 0x34
    5f8e:	8c a9       	ldd	r24, Y+52	; 0x34
    5f90:	88 2f       	mov	r24, r24
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	9c 83       	std	Y+4, r25	; 0x04
    5f96:	8b 83       	std	Y+3, r24	; 0x03
    5f98:	89 81       	ldd	r24, Y+1	; 0x01
    5f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f9c:	98 87       	std	Y+8, r25	; 0x08
    5f9e:	8f 83       	std	Y+7, r24	; 0x07
    5fa0:	1e aa       	std	Y+54, r1	; 0x36
    5fa2:	1d aa       	std	Y+53, r1	; 0x35
    5fa4:	ce 01       	movw	r24, r28
    5fa6:	87 5a       	subi	r24, 0xA7	; 167
    5fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    5faa:	dc 01       	movw	r26, r24
    5fac:	8d 91       	ld	r24, X+
    5fae:	9c 91       	ld	r25, X
    5fb0:	9a 87       	std	Y+10, r25	; 0x0a
    5fb2:	89 87       	std	Y+9, r24	; 0x09
    5fb4:	1b 86       	std	Y+11, r1	; 0x0b
    5fb6:	ce 01       	movw	r24, r28
    5fb8:	8d 5a       	subi	r24, 0xAD	; 173
    5fba:	9f 4f       	sbci	r25, 0xFF	; 255
    5fbc:	fc 01       	movw	r30, r24
    5fbe:	80 81       	ld	r24, Z
    5fc0:	91 81       	ldd	r25, Z+1	; 0x01
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	56 96       	adiw	r26, 0x16	; 22
    5fc6:	8d 91       	ld	r24, X+
    5fc8:	9c 91       	ld	r25, X
    5fca:	57 97       	sbiw	r26, 0x17	; 23
    5fcc:	8f ab       	std	Y+55, r24	; 0x37
    5fce:	ce 01       	movw	r24, r28
    5fd0:	8d 5a       	subi	r24, 0xAD	; 173
    5fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd4:	fc 01       	movw	r30, r24
    5fd6:	80 81       	ld	r24, Z
    5fd8:	91 81       	ldd	r25, Z+1	; 0x01
    5fda:	dc 01       	movw	r26, r24
    5fdc:	56 96       	adiw	r26, 0x16	; 22
    5fde:	8d 91       	ld	r24, X+
    5fe0:	9c 91       	ld	r25, X
    5fe2:	57 97       	sbiw	r26, 0x17	; 23
    5fe4:	89 2f       	mov	r24, r25
    5fe6:	99 27       	eor	r25, r25
    5fe8:	88 af       	std	Y+56, r24	; 0x38
    5fea:	ce 01       	movw	r24, r28
    5fec:	8d 5a       	subi	r24, 0xAD	; 173
    5fee:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff0:	fc 01       	movw	r30, r24
    5ff2:	80 81       	ld	r24, Z
    5ff4:	91 81       	ldd	r25, Z+1	; 0x01
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	58 96       	adiw	r26, 0x18	; 24
    5ffa:	8d 91       	ld	r24, X+
    5ffc:	9c 91       	ld	r25, X
    5ffe:	59 97       	sbiw	r26, 0x19	; 25
    6000:	89 af       	std	Y+57, r24	; 0x39
    6002:	ce 01       	movw	r24, r28
    6004:	8d 5a       	subi	r24, 0xAD	; 173
    6006:	9f 4f       	sbci	r25, 0xFF	; 255
    6008:	fc 01       	movw	r30, r24
    600a:	80 81       	ld	r24, Z
    600c:	91 81       	ldd	r25, Z+1	; 0x01
    600e:	dc 01       	movw	r26, r24
    6010:	58 96       	adiw	r26, 0x18	; 24
    6012:	8d 91       	ld	r24, X+
    6014:	9c 91       	ld	r25, X
    6016:	59 97       	sbiw	r26, 0x19	; 25
    6018:	89 2f       	mov	r24, r25
    601a:	99 27       	eor	r25, r25
    601c:	8a af       	std	Y+58, r24	; 0x3a
    601e:	ce 01       	movw	r24, r28
    6020:	85 5a       	subi	r24, 0xA5	; 165
    6022:	9f 4f       	sbci	r25, 0xFF	; 255
    6024:	fc 01       	movw	r30, r24
    6026:	80 81       	ld	r24, Z
    6028:	91 81       	ldd	r25, Z+1	; 0x01
    602a:	02 97       	sbiw	r24, 0x02	; 2
    602c:	09 f0       	breq	.+2      	; 0x6030 <_ZN11TFT_ILI93418drawCharEjiii+0x350>
    602e:	ac c5       	rjmp	.+2904   	; 0x6b88 <_ZN11TFT_ILI93418drawCharEjiii+0xea8>
    6030:	8f 81       	ldd	r24, Y+7	; 0x07
    6032:	98 85       	ldd	r25, Y+8	; 0x08
    6034:	06 96       	adiw	r24, 0x06	; 6
    6036:	98 87       	std	Y+8, r25	; 0x08
    6038:	8f 83       	std	Y+7, r24	; 0x07
    603a:	8f 81       	ldd	r24, Y+7	; 0x07
    603c:	98 85       	ldd	r25, Y+8	; 0x08
    603e:	99 23       	and	r25, r25
    6040:	0c f4       	brge	.+2      	; 0x6044 <_ZN11TFT_ILI93418drawCharEjiii+0x364>
    6042:	07 96       	adiw	r24, 0x07	; 7
    6044:	95 95       	asr	r25
    6046:	87 95       	ror	r24
    6048:	95 95       	asr	r25
    604a:	87 95       	ror	r24
    604c:	95 95       	asr	r25
    604e:	87 95       	ror	r24
    6050:	98 87       	std	Y+8, r25	; 0x08
    6052:	8f 83       	std	Y+7, r24	; 0x07
    6054:	ce 01       	movw	r24, r28
    6056:	8d 5a       	subi	r24, 0xAD	; 173
    6058:	9f 4f       	sbci	r25, 0xFF	; 255
    605a:	dc 01       	movw	r26, r24
    605c:	8d 91       	ld	r24, X+
    605e:	9c 91       	ld	r25, X
    6060:	fc 01       	movw	r30, r24
    6062:	81 a1       	ldd	r24, Z+33	; 0x21
    6064:	48 2f       	mov	r20, r24
    6066:	50 e0       	ldi	r21, 0x00	; 0
    6068:	89 81       	ldd	r24, Y+1	; 0x01
    606a:	9a 81       	ldd	r25, Y+2	; 0x02
    606c:	48 9f       	mul	r20, r24
    606e:	90 01       	movw	r18, r0
    6070:	49 9f       	mul	r20, r25
    6072:	30 0d       	add	r19, r0
    6074:	58 9f       	mul	r21, r24
    6076:	30 0d       	add	r19, r0
    6078:	11 24       	eor	r1, r1
    607a:	ce 01       	movw	r24, r28
    607c:	89 5a       	subi	r24, 0xA9	; 169
    607e:	9f 4f       	sbci	r25, 0xFF	; 255
    6080:	dc 01       	movw	r26, r24
    6082:	8d 91       	ld	r24, X+
    6084:	9c 91       	ld	r25, X
    6086:	82 0f       	add	r24, r18
    6088:	93 1f       	adc	r25, r19
    608a:	9e 01       	movw	r18, r28
    608c:	2d 5a       	subi	r18, 0xAD	; 173
    608e:	3f 4f       	sbci	r19, 0xFF	; 255
    6090:	f9 01       	movw	r30, r18
    6092:	20 81       	ld	r18, Z
    6094:	31 81       	ldd	r19, Z+1	; 0x01
    6096:	d9 01       	movw	r26, r18
    6098:	52 96       	adiw	r26, 0x12	; 18
    609a:	2d 91       	ld	r18, X+
    609c:	3c 91       	ld	r19, X
    609e:	53 97       	sbiw	r26, 0x13	; 19
    60a0:	82 17       	cp	r24, r18
    60a2:	93 07       	cpc	r25, r19
    60a4:	b4 f0       	brlt	.+44     	; 0x60d2 <_ZN11TFT_ILI93418drawCharEjiii+0x3f2>
    60a6:	ce 01       	movw	r24, r28
    60a8:	8d 5a       	subi	r24, 0xAD	; 173
    60aa:	9f 4f       	sbci	r25, 0xFF	; 255
    60ac:	fc 01       	movw	r30, r24
    60ae:	80 81       	ld	r24, Z
    60b0:	91 81       	ldd	r25, Z+1	; 0x01
    60b2:	dc 01       	movw	r26, r24
    60b4:	91 96       	adiw	r26, 0x21	; 33
    60b6:	8c 91       	ld	r24, X
    60b8:	48 2f       	mov	r20, r24
    60ba:	50 e0       	ldi	r21, 0x00	; 0
    60bc:	29 81       	ldd	r18, Y+1	; 0x01
    60be:	3a 81       	ldd	r19, Y+2	; 0x02
    60c0:	42 9f       	mul	r20, r18
    60c2:	c0 01       	movw	r24, r0
    60c4:	43 9f       	mul	r20, r19
    60c6:	90 0d       	add	r25, r0
    60c8:	52 9f       	mul	r21, r18
    60ca:	90 0d       	add	r25, r0
    60cc:	11 24       	eor	r1, r1
    60ce:	0c 94 69 39 	jmp	0x72d2	; 0x72d2 <_ZN11TFT_ILI93418drawCharEjiii+0x15f2>
    60d2:	ce 01       	movw	r24, r28
    60d4:	8d 5a       	subi	r24, 0xAD	; 173
    60d6:	9f 4f       	sbci	r25, 0xFF	; 255
    60d8:	fc 01       	movw	r30, r24
    60da:	80 81       	ld	r24, Z
    60dc:	91 81       	ldd	r25, Z+1	; 0x01
    60de:	dc 01       	movw	r26, r24
    60e0:	56 96       	adiw	r26, 0x16	; 22
    60e2:	2d 91       	ld	r18, X+
    60e4:	3c 91       	ld	r19, X
    60e6:	57 97       	sbiw	r26, 0x17	; 23
    60e8:	ce 01       	movw	r24, r28
    60ea:	8d 5a       	subi	r24, 0xAD	; 173
    60ec:	9f 4f       	sbci	r25, 0xFF	; 255
    60ee:	fc 01       	movw	r30, r24
    60f0:	80 81       	ld	r24, Z
    60f2:	91 81       	ldd	r25, Z+1	; 0x01
    60f4:	dc 01       	movw	r26, r24
    60f6:	58 96       	adiw	r26, 0x18	; 24
    60f8:	8d 91       	ld	r24, X+
    60fa:	9c 91       	ld	r25, X
    60fc:	59 97       	sbiw	r26, 0x19	; 25
    60fe:	28 17       	cp	r18, r24
    6100:	39 07       	cpc	r19, r25
    6102:	61 f0       	breq	.+24     	; 0x611c <_ZN11TFT_ILI93418drawCharEjiii+0x43c>
    6104:	ce 01       	movw	r24, r28
    6106:	8d 5a       	subi	r24, 0xAD	; 173
    6108:	9f 4f       	sbci	r25, 0xFF	; 255
    610a:	fc 01       	movw	r30, r24
    610c:	80 81       	ld	r24, Z
    610e:	91 81       	ldd	r25, Z+1	; 0x01
    6110:	dc 01       	movw	r26, r24
    6112:	91 96       	adiw	r26, 0x21	; 33
    6114:	8c 91       	ld	r24, X
    6116:	81 30       	cpi	r24, 0x01	; 1
    6118:	09 f4       	brne	.+2      	; 0x611c <_ZN11TFT_ILI93418drawCharEjiii+0x43c>
    611a:	38 c4       	rjmp	.+2160   	; 0x698c <_ZN11TFT_ILI93418drawCharEjiii+0xcac>
    611c:	1d 86       	std	Y+13, r1	; 0x0d
    611e:	1c 86       	std	Y+12, r1	; 0x0c
    6120:	2c 85       	ldd	r18, Y+12	; 0x0c
    6122:	3d 85       	ldd	r19, Y+13	; 0x0d
    6124:	8b 81       	ldd	r24, Y+3	; 0x03
    6126:	9c 81       	ldd	r25, Y+4	; 0x04
    6128:	28 17       	cp	r18, r24
    612a:	39 07       	cpc	r19, r25
    612c:	14 f0       	brlt	.+4      	; 0x6132 <_ZN11TFT_ILI93418drawCharEjiii+0x452>
    612e:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <_ZN11TFT_ILI93418drawCharEjiii+0x15ca>
    6132:	ce 01       	movw	r24, r28
    6134:	8d 5a       	subi	r24, 0xAD	; 173
    6136:	9f 4f       	sbci	r25, 0xFF	; 255
    6138:	fc 01       	movw	r30, r24
    613a:	80 81       	ld	r24, Z
    613c:	91 81       	ldd	r25, Z+1	; 0x01
    613e:	dc 01       	movw	r26, r24
    6140:	56 96       	adiw	r26, 0x16	; 22
    6142:	2d 91       	ld	r18, X+
    6144:	3c 91       	ld	r19, X
    6146:	57 97       	sbiw	r26, 0x17	; 23
    6148:	ce 01       	movw	r24, r28
    614a:	8d 5a       	subi	r24, 0xAD	; 173
    614c:	9f 4f       	sbci	r25, 0xFF	; 255
    614e:	fc 01       	movw	r30, r24
    6150:	80 81       	ld	r24, Z
    6152:	91 81       	ldd	r25, Z+1	; 0x01
    6154:	dc 01       	movw	r26, r24
    6156:	58 96       	adiw	r26, 0x18	; 24
    6158:	8d 91       	ld	r24, X+
    615a:	9c 91       	ld	r25, X
    615c:	59 97       	sbiw	r26, 0x19	; 25
    615e:	28 17       	cp	r18, r24
    6160:	39 07       	cpc	r19, r25
    6162:	09 f4       	brne	.+2      	; 0x6166 <_ZN11TFT_ILI93418drawCharEjiii+0x486>
    6164:	42 c0       	rjmp	.+132    	; 0x61ea <_ZN11TFT_ILI93418drawCharEjiii+0x50a>
    6166:	ce 01       	movw	r24, r28
    6168:	8d 5a       	subi	r24, 0xAD	; 173
    616a:	9f 4f       	sbci	r25, 0xFF	; 255
    616c:	fc 01       	movw	r30, r24
    616e:	80 81       	ld	r24, Z
    6170:	91 81       	ldd	r25, Z+1	; 0x01
    6172:	dc 01       	movw	r26, r24
    6174:	58 96       	adiw	r26, 0x18	; 24
    6176:	0d 91       	ld	r16, X+
    6178:	1c 91       	ld	r17, X
    617a:	59 97       	sbiw	r26, 0x19	; 25
    617c:	ce 01       	movw	r24, r28
    617e:	8d 5a       	subi	r24, 0xAD	; 173
    6180:	9f 4f       	sbci	r25, 0xFF	; 255
    6182:	fc 01       	movw	r30, r24
    6184:	80 81       	ld	r24, Z
    6186:	91 81       	ldd	r25, Z+1	; 0x01
    6188:	dc 01       	movw	r26, r24
    618a:	91 96       	adiw	r26, 0x21	; 33
    618c:	8c 91       	ld	r24, X
    618e:	a8 2f       	mov	r26, r24
    6190:	b0 e0       	ldi	r27, 0x00	; 0
    6192:	ce 01       	movw	r24, r28
    6194:	8d 5a       	subi	r24, 0xAD	; 173
    6196:	9f 4f       	sbci	r25, 0xFF	; 255
    6198:	fc 01       	movw	r30, r24
    619a:	80 81       	ld	r24, Z
    619c:	91 81       	ldd	r25, Z+1	; 0x01
    619e:	fc 01       	movw	r30, r24
    61a0:	81 a1       	ldd	r24, Z+33	; 0x21
    61a2:	28 2f       	mov	r18, r24
    61a4:	30 e0       	ldi	r19, 0x00	; 0
    61a6:	89 81       	ldd	r24, Y+1	; 0x01
    61a8:	9a 81       	ldd	r25, Y+2	; 0x02
    61aa:	28 9f       	mul	r18, r24
    61ac:	a0 01       	movw	r20, r0
    61ae:	29 9f       	mul	r18, r25
    61b0:	50 0d       	add	r21, r0
    61b2:	38 9f       	mul	r19, r24
    61b4:	50 0d       	add	r21, r0
    61b6:	11 24       	eor	r1, r1
    61b8:	6f 96       	adiw	r28, 0x1f	; 31
    61ba:	5f af       	std	Y+63, r21	; 0x3f
    61bc:	4e af       	std	Y+62, r20	; 0x3e
    61be:	6f 97       	sbiw	r28, 0x1f	; 31
    61c0:	49 85       	ldd	r20, Y+9	; 0x09
    61c2:	5a 85       	ldd	r21, Y+10	; 0x0a
    61c4:	ce 01       	movw	r24, r28
    61c6:	89 5a       	subi	r24, 0xA9	; 169
    61c8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ca:	fc 01       	movw	r30, r24
    61cc:	60 81       	ld	r22, Z
    61ce:	71 81       	ldd	r23, Z+1	; 0x01
    61d0:	ce 01       	movw	r24, r28
    61d2:	8d 5a       	subi	r24, 0xAD	; 173
    61d4:	9f 4f       	sbci	r25, 0xFF	; 255
    61d6:	fc 01       	movw	r30, r24
    61d8:	80 81       	ld	r24, Z
    61da:	91 81       	ldd	r25, Z+1	; 0x01
    61dc:	78 01       	movw	r14, r16
    61de:	8d 01       	movw	r16, r26
    61e0:	6f 96       	adiw	r28, 0x1f	; 31
    61e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    61e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    61e6:	6f 97       	sbiw	r28, 0x1f	; 31
    61e8:	c5 da       	rcall	.-2678   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    61ea:	1f 86       	std	Y+15, r1	; 0x0f
    61ec:	1e 86       	std	Y+14, r1	; 0x0e
    61ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    61f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    61f2:	8f 81       	ldd	r24, Y+7	; 0x07
    61f4:	98 85       	ldd	r25, Y+8	; 0x08
    61f6:	28 17       	cp	r18, r24
    61f8:	39 07       	cpc	r19, r25
    61fa:	0c f0       	brlt	.+2      	; 0x61fe <_ZN11TFT_ILI93418drawCharEjiii+0x51e>
    61fc:	b1 c3       	rjmp	.+1890   	; 0x6960 <_ZN11TFT_ILI93418drawCharEjiii+0xc80>
    61fe:	2f 81       	ldd	r18, Y+7	; 0x07
    6200:	38 85       	ldd	r19, Y+8	; 0x08
    6202:	8c 85       	ldd	r24, Y+12	; 0x0c
    6204:	9d 85       	ldd	r25, Y+13	; 0x0d
    6206:	28 9f       	mul	r18, r24
    6208:	a0 01       	movw	r20, r0
    620a:	29 9f       	mul	r18, r25
    620c:	50 0d       	add	r21, r0
    620e:	38 9f       	mul	r19, r24
    6210:	50 0d       	add	r21, r0
    6212:	11 24       	eor	r1, r1
    6214:	9a 01       	movw	r18, r20
    6216:	8d 81       	ldd	r24, Y+5	; 0x05
    6218:	9e 81       	ldd	r25, Y+6	; 0x06
    621a:	28 0f       	add	r18, r24
    621c:	39 1f       	adc	r19, r25
    621e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6220:	9f 85       	ldd	r25, Y+15	; 0x0f
    6222:	82 0f       	add	r24, r18
    6224:	93 1f       	adc	r25, r19
    6226:	9f af       	std	Y+63, r25	; 0x3f
    6228:	8e af       	std	Y+62, r24	; 0x3e
    622a:	8e ad       	ldd	r24, Y+62	; 0x3e
    622c:	9f ad       	ldd	r25, Y+63	; 0x3f
    622e:	fc 01       	movw	r30, r24
    6230:	24 91       	lpm	r18, Z
    6232:	ce 01       	movw	r24, r28
    6234:	80 5c       	subi	r24, 0xC0	; 192
    6236:	9f 4f       	sbci	r25, 0xFF	; 255
    6238:	dc 01       	movw	r26, r24
    623a:	2c 93       	st	X, r18
    623c:	ce 01       	movw	r24, r28
    623e:	80 5c       	subi	r24, 0xC0	; 192
    6240:	9f 4f       	sbci	r25, 0xFF	; 255
    6242:	fc 01       	movw	r30, r24
    6244:	80 81       	ld	r24, Z
    6246:	8b 87       	std	Y+11, r24	; 0x0b
    6248:	8b 85       	ldd	r24, Y+11	; 0x0b
    624a:	88 23       	and	r24, r24
    624c:	09 f4       	brne	.+2      	; 0x6250 <_ZN11TFT_ILI93418drawCharEjiii+0x570>
    624e:	82 c3       	rjmp	.+1796   	; 0x6954 <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
    6250:	ce 01       	movw	r24, r28
    6252:	8d 5a       	subi	r24, 0xAD	; 173
    6254:	9f 4f       	sbci	r25, 0xFF	; 255
    6256:	dc 01       	movw	r26, r24
    6258:	8d 91       	ld	r24, X+
    625a:	9c 91       	ld	r25, X
    625c:	fc 01       	movw	r30, r24
    625e:	81 a1       	ldd	r24, Z+33	; 0x21
    6260:	81 30       	cpi	r24, 0x01	; 1
    6262:	09 f0       	breq	.+2      	; 0x6266 <_ZN11TFT_ILI93418drawCharEjiii+0x586>
    6264:	03 c1       	rjmp	.+518    	; 0x646c <_ZN11TFT_ILI93418drawCharEjiii+0x78c>
    6266:	8e 85       	ldd	r24, Y+14	; 0x0e
    6268:	9f 85       	ldd	r25, Y+15	; 0x0f
    626a:	9c 01       	movw	r18, r24
    626c:	22 0f       	add	r18, r18
    626e:	33 1f       	adc	r19, r19
    6270:	22 0f       	add	r18, r18
    6272:	33 1f       	adc	r19, r19
    6274:	22 0f       	add	r18, r18
    6276:	33 1f       	adc	r19, r19
    6278:	ce 01       	movw	r24, r28
    627a:	89 5a       	subi	r24, 0xA9	; 169
    627c:	9f 4f       	sbci	r25, 0xFF	; 255
    627e:	dc 01       	movw	r26, r24
    6280:	8d 91       	ld	r24, X+
    6282:	9c 91       	ld	r25, X
    6284:	82 0f       	add	r24, r18
    6286:	93 1f       	adc	r25, r19
    6288:	9e ab       	std	Y+54, r25	; 0x36
    628a:	8d ab       	std	Y+53, r24	; 0x35
    628c:	8b 85       	ldd	r24, Y+11	; 0x0b
    628e:	88 23       	and	r24, r24
    6290:	b4 f4       	brge	.+44     	; 0x62be <_ZN11TFT_ILI93418drawCharEjiii+0x5de>
    6292:	ce 01       	movw	r24, r28
    6294:	8d 5a       	subi	r24, 0xAD	; 173
    6296:	9f 4f       	sbci	r25, 0xFF	; 255
    6298:	fc 01       	movw	r30, r24
    629a:	80 81       	ld	r24, Z
    629c:	91 81       	ldd	r25, Z+1	; 0x01
    629e:	dc 01       	movw	r26, r24
    62a0:	56 96       	adiw	r26, 0x16	; 22
    62a2:	2d 91       	ld	r18, X+
    62a4:	3c 91       	ld	r19, X
    62a6:	57 97       	sbiw	r26, 0x17	; 23
    62a8:	49 85       	ldd	r20, Y+9	; 0x09
    62aa:	5a 85       	ldd	r21, Y+10	; 0x0a
    62ac:	6d a9       	ldd	r22, Y+53	; 0x35
    62ae:	7e a9       	ldd	r23, Y+54	; 0x36
    62b0:	ce 01       	movw	r24, r28
    62b2:	8d 5a       	subi	r24, 0xAD	; 173
    62b4:	9f 4f       	sbci	r25, 0xFF	; 255
    62b6:	fc 01       	movw	r30, r24
    62b8:	80 81       	ld	r24, Z
    62ba:	91 81       	ldd	r25, Z+1	; 0x01
    62bc:	5d d8       	rcall	.-3910   	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    62be:	8b 85       	ldd	r24, Y+11	; 0x0b
    62c0:	88 2f       	mov	r24, r24
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	80 74       	andi	r24, 0x40	; 64
    62c6:	99 27       	eor	r25, r25
    62c8:	89 2b       	or	r24, r25
    62ca:	b1 f0       	breq	.+44     	; 0x62f8 <_ZN11TFT_ILI93418drawCharEjiii+0x618>
    62cc:	ce 01       	movw	r24, r28
    62ce:	8d 5a       	subi	r24, 0xAD	; 173
    62d0:	9f 4f       	sbci	r25, 0xFF	; 255
    62d2:	dc 01       	movw	r26, r24
    62d4:	8d 91       	ld	r24, X+
    62d6:	9c 91       	ld	r25, X
    62d8:	fc 01       	movw	r30, r24
    62da:	26 89       	ldd	r18, Z+22	; 0x16
    62dc:	37 89       	ldd	r19, Z+23	; 0x17
    62de:	49 85       	ldd	r20, Y+9	; 0x09
    62e0:	5a 85       	ldd	r21, Y+10	; 0x0a
    62e2:	8d a9       	ldd	r24, Y+53	; 0x35
    62e4:	9e a9       	ldd	r25, Y+54	; 0x36
    62e6:	01 96       	adiw	r24, 0x01	; 1
    62e8:	bc 01       	movw	r22, r24
    62ea:	ce 01       	movw	r24, r28
    62ec:	8d 5a       	subi	r24, 0xAD	; 173
    62ee:	9f 4f       	sbci	r25, 0xFF	; 255
    62f0:	dc 01       	movw	r26, r24
    62f2:	8d 91       	ld	r24, X+
    62f4:	9c 91       	ld	r25, X
    62f6:	40 d8       	rcall	.-3968   	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    62f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    62fa:	88 2f       	mov	r24, r24
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	80 72       	andi	r24, 0x20	; 32
    6300:	99 27       	eor	r25, r25
    6302:	89 2b       	or	r24, r25
    6304:	c1 f0       	breq	.+48     	; 0x6336 <_ZN11TFT_ILI93418drawCharEjiii+0x656>
    6306:	ce 01       	movw	r24, r28
    6308:	8d 5a       	subi	r24, 0xAD	; 173
    630a:	9f 4f       	sbci	r25, 0xFF	; 255
    630c:	fc 01       	movw	r30, r24
    630e:	80 81       	ld	r24, Z
    6310:	91 81       	ldd	r25, Z+1	; 0x01
    6312:	dc 01       	movw	r26, r24
    6314:	56 96       	adiw	r26, 0x16	; 22
    6316:	2d 91       	ld	r18, X+
    6318:	3c 91       	ld	r19, X
    631a:	57 97       	sbiw	r26, 0x17	; 23
    631c:	49 85       	ldd	r20, Y+9	; 0x09
    631e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6320:	8d a9       	ldd	r24, Y+53	; 0x35
    6322:	9e a9       	ldd	r25, Y+54	; 0x36
    6324:	02 96       	adiw	r24, 0x02	; 2
    6326:	bc 01       	movw	r22, r24
    6328:	ce 01       	movw	r24, r28
    632a:	8d 5a       	subi	r24, 0xAD	; 173
    632c:	9f 4f       	sbci	r25, 0xFF	; 255
    632e:	fc 01       	movw	r30, r24
    6330:	80 81       	ld	r24, Z
    6332:	91 81       	ldd	r25, Z+1	; 0x01
    6334:	21 d8       	rcall	.-4030   	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    6336:	8b 85       	ldd	r24, Y+11	; 0x0b
    6338:	88 2f       	mov	r24, r24
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	80 71       	andi	r24, 0x10	; 16
    633e:	99 27       	eor	r25, r25
    6340:	89 2b       	or	r24, r25
    6342:	b1 f0       	breq	.+44     	; 0x6370 <_ZN11TFT_ILI93418drawCharEjiii+0x690>
    6344:	ce 01       	movw	r24, r28
    6346:	8d 5a       	subi	r24, 0xAD	; 173
    6348:	9f 4f       	sbci	r25, 0xFF	; 255
    634a:	dc 01       	movw	r26, r24
    634c:	8d 91       	ld	r24, X+
    634e:	9c 91       	ld	r25, X
    6350:	fc 01       	movw	r30, r24
    6352:	26 89       	ldd	r18, Z+22	; 0x16
    6354:	37 89       	ldd	r19, Z+23	; 0x17
    6356:	49 85       	ldd	r20, Y+9	; 0x09
    6358:	5a 85       	ldd	r21, Y+10	; 0x0a
    635a:	8d a9       	ldd	r24, Y+53	; 0x35
    635c:	9e a9       	ldd	r25, Y+54	; 0x36
    635e:	03 96       	adiw	r24, 0x03	; 3
    6360:	bc 01       	movw	r22, r24
    6362:	ce 01       	movw	r24, r28
    6364:	8d 5a       	subi	r24, 0xAD	; 173
    6366:	9f 4f       	sbci	r25, 0xFF	; 255
    6368:	dc 01       	movw	r26, r24
    636a:	8d 91       	ld	r24, X+
    636c:	9c 91       	ld	r25, X
    636e:	04 d8       	rcall	.-4088   	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    6370:	8b 85       	ldd	r24, Y+11	; 0x0b
    6372:	88 2f       	mov	r24, r24
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	88 70       	andi	r24, 0x08	; 8
    6378:	99 27       	eor	r25, r25
    637a:	89 2b       	or	r24, r25
    637c:	c9 f0       	breq	.+50     	; 0x63b0 <_ZN11TFT_ILI93418drawCharEjiii+0x6d0>
    637e:	ce 01       	movw	r24, r28
    6380:	8d 5a       	subi	r24, 0xAD	; 173
    6382:	9f 4f       	sbci	r25, 0xFF	; 255
    6384:	fc 01       	movw	r30, r24
    6386:	80 81       	ld	r24, Z
    6388:	91 81       	ldd	r25, Z+1	; 0x01
    638a:	dc 01       	movw	r26, r24
    638c:	56 96       	adiw	r26, 0x16	; 22
    638e:	2d 91       	ld	r18, X+
    6390:	3c 91       	ld	r19, X
    6392:	57 97       	sbiw	r26, 0x17	; 23
    6394:	49 85       	ldd	r20, Y+9	; 0x09
    6396:	5a 85       	ldd	r21, Y+10	; 0x0a
    6398:	8d a9       	ldd	r24, Y+53	; 0x35
    639a:	9e a9       	ldd	r25, Y+54	; 0x36
    639c:	04 96       	adiw	r24, 0x04	; 4
    639e:	bc 01       	movw	r22, r24
    63a0:	ce 01       	movw	r24, r28
    63a2:	8d 5a       	subi	r24, 0xAD	; 173
    63a4:	9f 4f       	sbci	r25, 0xFF	; 255
    63a6:	fc 01       	movw	r30, r24
    63a8:	80 81       	ld	r24, Z
    63aa:	91 81       	ldd	r25, Z+1	; 0x01
    63ac:	0e 94 bc 29 	call	0x5378	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    63b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    63b2:	88 2f       	mov	r24, r24
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	84 70       	andi	r24, 0x04	; 4
    63b8:	99 27       	eor	r25, r25
    63ba:	89 2b       	or	r24, r25
    63bc:	b9 f0       	breq	.+46     	; 0x63ec <_ZN11TFT_ILI93418drawCharEjiii+0x70c>
    63be:	ce 01       	movw	r24, r28
    63c0:	8d 5a       	subi	r24, 0xAD	; 173
    63c2:	9f 4f       	sbci	r25, 0xFF	; 255
    63c4:	dc 01       	movw	r26, r24
    63c6:	8d 91       	ld	r24, X+
    63c8:	9c 91       	ld	r25, X
    63ca:	fc 01       	movw	r30, r24
    63cc:	26 89       	ldd	r18, Z+22	; 0x16
    63ce:	37 89       	ldd	r19, Z+23	; 0x17
    63d0:	49 85       	ldd	r20, Y+9	; 0x09
    63d2:	5a 85       	ldd	r21, Y+10	; 0x0a
    63d4:	8d a9       	ldd	r24, Y+53	; 0x35
    63d6:	9e a9       	ldd	r25, Y+54	; 0x36
    63d8:	05 96       	adiw	r24, 0x05	; 5
    63da:	bc 01       	movw	r22, r24
    63dc:	ce 01       	movw	r24, r28
    63de:	8d 5a       	subi	r24, 0xAD	; 173
    63e0:	9f 4f       	sbci	r25, 0xFF	; 255
    63e2:	dc 01       	movw	r26, r24
    63e4:	8d 91       	ld	r24, X+
    63e6:	9c 91       	ld	r25, X
    63e8:	0e 94 bc 29 	call	0x5378	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    63ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    63ee:	88 2f       	mov	r24, r24
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	82 70       	andi	r24, 0x02	; 2
    63f4:	99 27       	eor	r25, r25
    63f6:	89 2b       	or	r24, r25
    63f8:	c9 f0       	breq	.+50     	; 0x642c <_ZN11TFT_ILI93418drawCharEjiii+0x74c>
    63fa:	ce 01       	movw	r24, r28
    63fc:	8d 5a       	subi	r24, 0xAD	; 173
    63fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6400:	fc 01       	movw	r30, r24
    6402:	80 81       	ld	r24, Z
    6404:	91 81       	ldd	r25, Z+1	; 0x01
    6406:	dc 01       	movw	r26, r24
    6408:	56 96       	adiw	r26, 0x16	; 22
    640a:	2d 91       	ld	r18, X+
    640c:	3c 91       	ld	r19, X
    640e:	57 97       	sbiw	r26, 0x17	; 23
    6410:	49 85       	ldd	r20, Y+9	; 0x09
    6412:	5a 85       	ldd	r21, Y+10	; 0x0a
    6414:	8d a9       	ldd	r24, Y+53	; 0x35
    6416:	9e a9       	ldd	r25, Y+54	; 0x36
    6418:	06 96       	adiw	r24, 0x06	; 6
    641a:	bc 01       	movw	r22, r24
    641c:	ce 01       	movw	r24, r28
    641e:	8d 5a       	subi	r24, 0xAD	; 173
    6420:	9f 4f       	sbci	r25, 0xFF	; 255
    6422:	fc 01       	movw	r30, r24
    6424:	80 81       	ld	r24, Z
    6426:	91 81       	ldd	r25, Z+1	; 0x01
    6428:	0e 94 bc 29 	call	0x5378	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    642c:	8b 85       	ldd	r24, Y+11	; 0x0b
    642e:	88 2f       	mov	r24, r24
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	81 70       	andi	r24, 0x01	; 1
    6434:	99 27       	eor	r25, r25
    6436:	89 2b       	or	r24, r25
    6438:	09 f4       	brne	.+2      	; 0x643c <_ZN11TFT_ILI93418drawCharEjiii+0x75c>
    643a:	8c c2       	rjmp	.+1304   	; 0x6954 <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
    643c:	ce 01       	movw	r24, r28
    643e:	8d 5a       	subi	r24, 0xAD	; 173
    6440:	9f 4f       	sbci	r25, 0xFF	; 255
    6442:	dc 01       	movw	r26, r24
    6444:	8d 91       	ld	r24, X+
    6446:	9c 91       	ld	r25, X
    6448:	fc 01       	movw	r30, r24
    644a:	26 89       	ldd	r18, Z+22	; 0x16
    644c:	37 89       	ldd	r19, Z+23	; 0x17
    644e:	49 85       	ldd	r20, Y+9	; 0x09
    6450:	5a 85       	ldd	r21, Y+10	; 0x0a
    6452:	8d a9       	ldd	r24, Y+53	; 0x35
    6454:	9e a9       	ldd	r25, Y+54	; 0x36
    6456:	07 96       	adiw	r24, 0x07	; 7
    6458:	bc 01       	movw	r22, r24
    645a:	ce 01       	movw	r24, r28
    645c:	8d 5a       	subi	r24, 0xAD	; 173
    645e:	9f 4f       	sbci	r25, 0xFF	; 255
    6460:	dc 01       	movw	r26, r24
    6462:	8d 91       	ld	r24, X+
    6464:	9c 91       	ld	r25, X
    6466:	0e 94 bc 29 	call	0x5378	; 0x5378 <_ZN11TFT_ILI93419drawPixelEjjj>
    646a:	74 c2       	rjmp	.+1256   	; 0x6954 <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
    646c:	8e 85       	ldd	r24, Y+14	; 0x0e
    646e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6470:	ac 01       	movw	r20, r24
    6472:	44 0f       	add	r20, r20
    6474:	55 1f       	adc	r21, r21
    6476:	44 0f       	add	r20, r20
    6478:	55 1f       	adc	r21, r21
    647a:	44 0f       	add	r20, r20
    647c:	55 1f       	adc	r21, r21
    647e:	ce 01       	movw	r24, r28
    6480:	8d 5a       	subi	r24, 0xAD	; 173
    6482:	9f 4f       	sbci	r25, 0xFF	; 255
    6484:	fc 01       	movw	r30, r24
    6486:	80 81       	ld	r24, Z
    6488:	91 81       	ldd	r25, Z+1	; 0x01
    648a:	dc 01       	movw	r26, r24
    648c:	91 96       	adiw	r26, 0x21	; 33
    648e:	8c 91       	ld	r24, X
    6490:	88 2f       	mov	r24, r24
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	48 9f       	mul	r20, r24
    6496:	90 01       	movw	r18, r0
    6498:	49 9f       	mul	r20, r25
    649a:	30 0d       	add	r19, r0
    649c:	58 9f       	mul	r21, r24
    649e:	30 0d       	add	r19, r0
    64a0:	11 24       	eor	r1, r1
    64a2:	ce 01       	movw	r24, r28
    64a4:	89 5a       	subi	r24, 0xA9	; 169
    64a6:	9f 4f       	sbci	r25, 0xFF	; 255
    64a8:	fc 01       	movw	r30, r24
    64aa:	80 81       	ld	r24, Z
    64ac:	91 81       	ldd	r25, Z+1	; 0x01
    64ae:	82 0f       	add	r24, r18
    64b0:	93 1f       	adc	r25, r19
    64b2:	9e ab       	std	Y+54, r25	; 0x36
    64b4:	8d ab       	std	Y+53, r24	; 0x35
    64b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    64b8:	88 23       	and	r24, r24
    64ba:	8c f5       	brge	.+98     	; 0x651e <_ZN11TFT_ILI93418drawCharEjiii+0x83e>
    64bc:	ce 01       	movw	r24, r28
    64be:	8d 5a       	subi	r24, 0xAD	; 173
    64c0:	9f 4f       	sbci	r25, 0xFF	; 255
    64c2:	dc 01       	movw	r26, r24
    64c4:	8d 91       	ld	r24, X+
    64c6:	9c 91       	ld	r25, X
    64c8:	fc 01       	movw	r30, r24
    64ca:	a6 89       	ldd	r26, Z+22	; 0x16
    64cc:	b7 89       	ldd	r27, Z+23	; 0x17
    64ce:	ce 01       	movw	r24, r28
    64d0:	8d 5a       	subi	r24, 0xAD	; 173
    64d2:	9f 4f       	sbci	r25, 0xFF	; 255
    64d4:	fc 01       	movw	r30, r24
    64d6:	80 81       	ld	r24, Z
    64d8:	91 81       	ldd	r25, Z+1	; 0x01
    64da:	fc 01       	movw	r30, r24
    64dc:	81 a1       	ldd	r24, Z+33	; 0x21
    64de:	28 2f       	mov	r18, r24
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	6f 96       	adiw	r28, 0x1f	; 31
    64e4:	3f af       	std	Y+63, r19	; 0x3f
    64e6:	2e af       	std	Y+62, r18	; 0x3e
    64e8:	6f 97       	sbiw	r28, 0x1f	; 31
    64ea:	ce 01       	movw	r24, r28
    64ec:	8d 5a       	subi	r24, 0xAD	; 173
    64ee:	9f 4f       	sbci	r25, 0xFF	; 255
    64f0:	fc 01       	movw	r30, r24
    64f2:	80 81       	ld	r24, Z
    64f4:	91 81       	ldd	r25, Z+1	; 0x01
    64f6:	fc 01       	movw	r30, r24
    64f8:	81 a1       	ldd	r24, Z+33	; 0x21
    64fa:	28 2f       	mov	r18, r24
    64fc:	30 e0       	ldi	r19, 0x00	; 0
    64fe:	49 85       	ldd	r20, Y+9	; 0x09
    6500:	5a 85       	ldd	r21, Y+10	; 0x0a
    6502:	6d a9       	ldd	r22, Y+53	; 0x35
    6504:	7e a9       	ldd	r23, Y+54	; 0x36
    6506:	ce 01       	movw	r24, r28
    6508:	8d 5a       	subi	r24, 0xAD	; 173
    650a:	9f 4f       	sbci	r25, 0xFF	; 255
    650c:	fc 01       	movw	r30, r24
    650e:	80 81       	ld	r24, Z
    6510:	91 81       	ldd	r25, Z+1	; 0x01
    6512:	7d 01       	movw	r14, r26
    6514:	6f 96       	adiw	r28, 0x1f	; 31
    6516:	0e ad       	ldd	r16, Y+62	; 0x3e
    6518:	1f ad       	ldd	r17, Y+63	; 0x3f
    651a:	6f 97       	sbiw	r28, 0x1f	; 31
    651c:	2b d9       	rcall	.-3498   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    651e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6520:	88 2f       	mov	r24, r24
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	80 74       	andi	r24, 0x40	; 64
    6526:	99 27       	eor	r25, r25
    6528:	89 2b       	or	r24, r25
    652a:	09 f4       	brne	.+2      	; 0x652e <_ZN11TFT_ILI93418drawCharEjiii+0x84e>
    652c:	3f c0       	rjmp	.+126    	; 0x65ac <_ZN11TFT_ILI93418drawCharEjiii+0x8cc>
    652e:	ce 01       	movw	r24, r28
    6530:	8d 5a       	subi	r24, 0xAD	; 173
    6532:	9f 4f       	sbci	r25, 0xFF	; 255
    6534:	dc 01       	movw	r26, r24
    6536:	8d 91       	ld	r24, X+
    6538:	9c 91       	ld	r25, X
    653a:	fc 01       	movw	r30, r24
    653c:	06 89       	ldd	r16, Z+22	; 0x16
    653e:	17 89       	ldd	r17, Z+23	; 0x17
    6540:	ce 01       	movw	r24, r28
    6542:	8d 5a       	subi	r24, 0xAD	; 173
    6544:	9f 4f       	sbci	r25, 0xFF	; 255
    6546:	dc 01       	movw	r26, r24
    6548:	8d 91       	ld	r24, X+
    654a:	9c 91       	ld	r25, X
    654c:	fc 01       	movw	r30, r24
    654e:	81 a1       	ldd	r24, Z+33	; 0x21
    6550:	a8 2f       	mov	r26, r24
    6552:	b0 e0       	ldi	r27, 0x00	; 0
    6554:	ce 01       	movw	r24, r28
    6556:	8d 5a       	subi	r24, 0xAD	; 173
    6558:	9f 4f       	sbci	r25, 0xFF	; 255
    655a:	fc 01       	movw	r30, r24
    655c:	80 81       	ld	r24, Z
    655e:	91 81       	ldd	r25, Z+1	; 0x01
    6560:	fc 01       	movw	r30, r24
    6562:	81 a1       	ldd	r24, Z+33	; 0x21
    6564:	28 2f       	mov	r18, r24
    6566:	30 e0       	ldi	r19, 0x00	; 0
    6568:	6f 96       	adiw	r28, 0x1f	; 31
    656a:	3f af       	std	Y+63, r19	; 0x3f
    656c:	2e af       	std	Y+62, r18	; 0x3e
    656e:	6f 97       	sbiw	r28, 0x1f	; 31
    6570:	ce 01       	movw	r24, r28
    6572:	8d 5a       	subi	r24, 0xAD	; 173
    6574:	9f 4f       	sbci	r25, 0xFF	; 255
    6576:	fc 01       	movw	r30, r24
    6578:	80 81       	ld	r24, Z
    657a:	91 81       	ldd	r25, Z+1	; 0x01
    657c:	fc 01       	movw	r30, r24
    657e:	81 a1       	ldd	r24, Z+33	; 0x21
    6580:	28 2f       	mov	r18, r24
    6582:	30 e0       	ldi	r19, 0x00	; 0
    6584:	8d a9       	ldd	r24, Y+53	; 0x35
    6586:	9e a9       	ldd	r25, Y+54	; 0x36
    6588:	b9 01       	movw	r22, r18
    658a:	68 0f       	add	r22, r24
    658c:	79 1f       	adc	r23, r25
    658e:	49 85       	ldd	r20, Y+9	; 0x09
    6590:	5a 85       	ldd	r21, Y+10	; 0x0a
    6592:	ce 01       	movw	r24, r28
    6594:	8d 5a       	subi	r24, 0xAD	; 173
    6596:	9f 4f       	sbci	r25, 0xFF	; 255
    6598:	fc 01       	movw	r30, r24
    659a:	80 81       	ld	r24, Z
    659c:	91 81       	ldd	r25, Z+1	; 0x01
    659e:	78 01       	movw	r14, r16
    65a0:	8d 01       	movw	r16, r26
    65a2:	6f 96       	adiw	r28, 0x1f	; 31
    65a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    65a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    65a8:	6f 97       	sbiw	r28, 0x1f	; 31
    65aa:	e4 d8       	rcall	.-3640   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    65ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    65ae:	88 2f       	mov	r24, r24
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	80 72       	andi	r24, 0x20	; 32
    65b4:	99 27       	eor	r25, r25
    65b6:	89 2b       	or	r24, r25
    65b8:	09 f4       	brne	.+2      	; 0x65bc <_ZN11TFT_ILI93418drawCharEjiii+0x8dc>
    65ba:	42 c0       	rjmp	.+132    	; 0x6640 <_ZN11TFT_ILI93418drawCharEjiii+0x960>
    65bc:	ce 01       	movw	r24, r28
    65be:	8d 5a       	subi	r24, 0xAD	; 173
    65c0:	9f 4f       	sbci	r25, 0xFF	; 255
    65c2:	dc 01       	movw	r26, r24
    65c4:	8d 91       	ld	r24, X+
    65c6:	9c 91       	ld	r25, X
    65c8:	fc 01       	movw	r30, r24
    65ca:	06 89       	ldd	r16, Z+22	; 0x16
    65cc:	17 89       	ldd	r17, Z+23	; 0x17
    65ce:	ce 01       	movw	r24, r28
    65d0:	8d 5a       	subi	r24, 0xAD	; 173
    65d2:	9f 4f       	sbci	r25, 0xFF	; 255
    65d4:	dc 01       	movw	r26, r24
    65d6:	8d 91       	ld	r24, X+
    65d8:	9c 91       	ld	r25, X
    65da:	fc 01       	movw	r30, r24
    65dc:	81 a1       	ldd	r24, Z+33	; 0x21
    65de:	a8 2f       	mov	r26, r24
    65e0:	b0 e0       	ldi	r27, 0x00	; 0
    65e2:	ce 01       	movw	r24, r28
    65e4:	8d 5a       	subi	r24, 0xAD	; 173
    65e6:	9f 4f       	sbci	r25, 0xFF	; 255
    65e8:	fc 01       	movw	r30, r24
    65ea:	80 81       	ld	r24, Z
    65ec:	91 81       	ldd	r25, Z+1	; 0x01
    65ee:	fc 01       	movw	r30, r24
    65f0:	81 a1       	ldd	r24, Z+33	; 0x21
    65f2:	28 2f       	mov	r18, r24
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	6f 96       	adiw	r28, 0x1f	; 31
    65f8:	3f af       	std	Y+63, r19	; 0x3f
    65fa:	2e af       	std	Y+62, r18	; 0x3e
    65fc:	6f 97       	sbiw	r28, 0x1f	; 31
    65fe:	ce 01       	movw	r24, r28
    6600:	8d 5a       	subi	r24, 0xAD	; 173
    6602:	9f 4f       	sbci	r25, 0xFF	; 255
    6604:	fc 01       	movw	r30, r24
    6606:	80 81       	ld	r24, Z
    6608:	91 81       	ldd	r25, Z+1	; 0x01
    660a:	fc 01       	movw	r30, r24
    660c:	81 a1       	ldd	r24, Z+33	; 0x21
    660e:	88 2f       	mov	r24, r24
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	9c 01       	movw	r18, r24
    6614:	22 0f       	add	r18, r18
    6616:	33 1f       	adc	r19, r19
    6618:	8d a9       	ldd	r24, Y+53	; 0x35
    661a:	9e a9       	ldd	r25, Y+54	; 0x36
    661c:	b9 01       	movw	r22, r18
    661e:	68 0f       	add	r22, r24
    6620:	79 1f       	adc	r23, r25
    6622:	49 85       	ldd	r20, Y+9	; 0x09
    6624:	5a 85       	ldd	r21, Y+10	; 0x0a
    6626:	ce 01       	movw	r24, r28
    6628:	8d 5a       	subi	r24, 0xAD	; 173
    662a:	9f 4f       	sbci	r25, 0xFF	; 255
    662c:	fc 01       	movw	r30, r24
    662e:	80 81       	ld	r24, Z
    6630:	91 81       	ldd	r25, Z+1	; 0x01
    6632:	78 01       	movw	r14, r16
    6634:	8d 01       	movw	r16, r26
    6636:	6f 96       	adiw	r28, 0x1f	; 31
    6638:	2e ad       	ldd	r18, Y+62	; 0x3e
    663a:	3f ad       	ldd	r19, Y+63	; 0x3f
    663c:	6f 97       	sbiw	r28, 0x1f	; 31
    663e:	9a d8       	rcall	.-3788   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    6640:	8b 85       	ldd	r24, Y+11	; 0x0b
    6642:	88 2f       	mov	r24, r24
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	80 71       	andi	r24, 0x10	; 16
    6648:	99 27       	eor	r25, r25
    664a:	89 2b       	or	r24, r25
    664c:	09 f4       	brne	.+2      	; 0x6650 <_ZN11TFT_ILI93418drawCharEjiii+0x970>
    664e:	44 c0       	rjmp	.+136    	; 0x66d8 <_ZN11TFT_ILI93418drawCharEjiii+0x9f8>
    6650:	ce 01       	movw	r24, r28
    6652:	8d 5a       	subi	r24, 0xAD	; 173
    6654:	9f 4f       	sbci	r25, 0xFF	; 255
    6656:	dc 01       	movw	r26, r24
    6658:	8d 91       	ld	r24, X+
    665a:	9c 91       	ld	r25, X
    665c:	fc 01       	movw	r30, r24
    665e:	06 89       	ldd	r16, Z+22	; 0x16
    6660:	17 89       	ldd	r17, Z+23	; 0x17
    6662:	ce 01       	movw	r24, r28
    6664:	8d 5a       	subi	r24, 0xAD	; 173
    6666:	9f 4f       	sbci	r25, 0xFF	; 255
    6668:	dc 01       	movw	r26, r24
    666a:	8d 91       	ld	r24, X+
    666c:	9c 91       	ld	r25, X
    666e:	fc 01       	movw	r30, r24
    6670:	81 a1       	ldd	r24, Z+33	; 0x21
    6672:	a8 2f       	mov	r26, r24
    6674:	b0 e0       	ldi	r27, 0x00	; 0
    6676:	ce 01       	movw	r24, r28
    6678:	8d 5a       	subi	r24, 0xAD	; 173
    667a:	9f 4f       	sbci	r25, 0xFF	; 255
    667c:	fc 01       	movw	r30, r24
    667e:	80 81       	ld	r24, Z
    6680:	91 81       	ldd	r25, Z+1	; 0x01
    6682:	fc 01       	movw	r30, r24
    6684:	81 a1       	ldd	r24, Z+33	; 0x21
    6686:	28 2f       	mov	r18, r24
    6688:	30 e0       	ldi	r19, 0x00	; 0
    668a:	6f 96       	adiw	r28, 0x1f	; 31
    668c:	3f af       	std	Y+63, r19	; 0x3f
    668e:	2e af       	std	Y+62, r18	; 0x3e
    6690:	6f 97       	sbiw	r28, 0x1f	; 31
    6692:	ce 01       	movw	r24, r28
    6694:	8d 5a       	subi	r24, 0xAD	; 173
    6696:	9f 4f       	sbci	r25, 0xFF	; 255
    6698:	fc 01       	movw	r30, r24
    669a:	80 81       	ld	r24, Z
    669c:	91 81       	ldd	r25, Z+1	; 0x01
    669e:	fc 01       	movw	r30, r24
    66a0:	81 a1       	ldd	r24, Z+33	; 0x21
    66a2:	28 2f       	mov	r18, r24
    66a4:	30 e0       	ldi	r19, 0x00	; 0
    66a6:	c9 01       	movw	r24, r18
    66a8:	88 0f       	add	r24, r24
    66aa:	99 1f       	adc	r25, r25
    66ac:	28 0f       	add	r18, r24
    66ae:	39 1f       	adc	r19, r25
    66b0:	8d a9       	ldd	r24, Y+53	; 0x35
    66b2:	9e a9       	ldd	r25, Y+54	; 0x36
    66b4:	b9 01       	movw	r22, r18
    66b6:	68 0f       	add	r22, r24
    66b8:	79 1f       	adc	r23, r25
    66ba:	49 85       	ldd	r20, Y+9	; 0x09
    66bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    66be:	ce 01       	movw	r24, r28
    66c0:	8d 5a       	subi	r24, 0xAD	; 173
    66c2:	9f 4f       	sbci	r25, 0xFF	; 255
    66c4:	fc 01       	movw	r30, r24
    66c6:	80 81       	ld	r24, Z
    66c8:	91 81       	ldd	r25, Z+1	; 0x01
    66ca:	78 01       	movw	r14, r16
    66cc:	8d 01       	movw	r16, r26
    66ce:	6f 96       	adiw	r28, 0x1f	; 31
    66d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    66d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    66d4:	6f 97       	sbiw	r28, 0x1f	; 31
    66d6:	4e d8       	rcall	.-3940   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    66d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    66da:	88 2f       	mov	r24, r24
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	88 70       	andi	r24, 0x08	; 8
    66e0:	99 27       	eor	r25, r25
    66e2:	89 2b       	or	r24, r25
    66e4:	09 f4       	brne	.+2      	; 0x66e8 <_ZN11TFT_ILI93418drawCharEjiii+0xa08>
    66e6:	44 c0       	rjmp	.+136    	; 0x6770 <_ZN11TFT_ILI93418drawCharEjiii+0xa90>
    66e8:	ce 01       	movw	r24, r28
    66ea:	8d 5a       	subi	r24, 0xAD	; 173
    66ec:	9f 4f       	sbci	r25, 0xFF	; 255
    66ee:	dc 01       	movw	r26, r24
    66f0:	8d 91       	ld	r24, X+
    66f2:	9c 91       	ld	r25, X
    66f4:	fc 01       	movw	r30, r24
    66f6:	06 89       	ldd	r16, Z+22	; 0x16
    66f8:	17 89       	ldd	r17, Z+23	; 0x17
    66fa:	ce 01       	movw	r24, r28
    66fc:	8d 5a       	subi	r24, 0xAD	; 173
    66fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6700:	dc 01       	movw	r26, r24
    6702:	8d 91       	ld	r24, X+
    6704:	9c 91       	ld	r25, X
    6706:	fc 01       	movw	r30, r24
    6708:	81 a1       	ldd	r24, Z+33	; 0x21
    670a:	a8 2f       	mov	r26, r24
    670c:	b0 e0       	ldi	r27, 0x00	; 0
    670e:	ce 01       	movw	r24, r28
    6710:	8d 5a       	subi	r24, 0xAD	; 173
    6712:	9f 4f       	sbci	r25, 0xFF	; 255
    6714:	fc 01       	movw	r30, r24
    6716:	80 81       	ld	r24, Z
    6718:	91 81       	ldd	r25, Z+1	; 0x01
    671a:	fc 01       	movw	r30, r24
    671c:	81 a1       	ldd	r24, Z+33	; 0x21
    671e:	28 2f       	mov	r18, r24
    6720:	30 e0       	ldi	r19, 0x00	; 0
    6722:	6f 96       	adiw	r28, 0x1f	; 31
    6724:	3f af       	std	Y+63, r19	; 0x3f
    6726:	2e af       	std	Y+62, r18	; 0x3e
    6728:	6f 97       	sbiw	r28, 0x1f	; 31
    672a:	ce 01       	movw	r24, r28
    672c:	8d 5a       	subi	r24, 0xAD	; 173
    672e:	9f 4f       	sbci	r25, 0xFF	; 255
    6730:	fc 01       	movw	r30, r24
    6732:	80 81       	ld	r24, Z
    6734:	91 81       	ldd	r25, Z+1	; 0x01
    6736:	fc 01       	movw	r30, r24
    6738:	81 a1       	ldd	r24, Z+33	; 0x21
    673a:	88 2f       	mov	r24, r24
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	9c 01       	movw	r18, r24
    6740:	22 0f       	add	r18, r18
    6742:	33 1f       	adc	r19, r19
    6744:	22 0f       	add	r18, r18
    6746:	33 1f       	adc	r19, r19
    6748:	8d a9       	ldd	r24, Y+53	; 0x35
    674a:	9e a9       	ldd	r25, Y+54	; 0x36
    674c:	b9 01       	movw	r22, r18
    674e:	68 0f       	add	r22, r24
    6750:	79 1f       	adc	r23, r25
    6752:	49 85       	ldd	r20, Y+9	; 0x09
    6754:	5a 85       	ldd	r21, Y+10	; 0x0a
    6756:	ce 01       	movw	r24, r28
    6758:	8d 5a       	subi	r24, 0xAD	; 173
    675a:	9f 4f       	sbci	r25, 0xFF	; 255
    675c:	fc 01       	movw	r30, r24
    675e:	80 81       	ld	r24, Z
    6760:	91 81       	ldd	r25, Z+1	; 0x01
    6762:	78 01       	movw	r14, r16
    6764:	8d 01       	movw	r16, r26
    6766:	6f 96       	adiw	r28, 0x1f	; 31
    6768:	2e ad       	ldd	r18, Y+62	; 0x3e
    676a:	3f ad       	ldd	r19, Y+63	; 0x3f
    676c:	6f 97       	sbiw	r28, 0x1f	; 31
    676e:	02 d8       	rcall	.-4092   	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    6770:	8b 85       	ldd	r24, Y+11	; 0x0b
    6772:	88 2f       	mov	r24, r24
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	84 70       	andi	r24, 0x04	; 4
    6778:	99 27       	eor	r25, r25
    677a:	89 2b       	or	r24, r25
    677c:	09 f4       	brne	.+2      	; 0x6780 <_ZN11TFT_ILI93418drawCharEjiii+0xaa0>
    677e:	47 c0       	rjmp	.+142    	; 0x680e <_ZN11TFT_ILI93418drawCharEjiii+0xb2e>
    6780:	ce 01       	movw	r24, r28
    6782:	8d 5a       	subi	r24, 0xAD	; 173
    6784:	9f 4f       	sbci	r25, 0xFF	; 255
    6786:	dc 01       	movw	r26, r24
    6788:	8d 91       	ld	r24, X+
    678a:	9c 91       	ld	r25, X
    678c:	fc 01       	movw	r30, r24
    678e:	06 89       	ldd	r16, Z+22	; 0x16
    6790:	17 89       	ldd	r17, Z+23	; 0x17
    6792:	ce 01       	movw	r24, r28
    6794:	8d 5a       	subi	r24, 0xAD	; 173
    6796:	9f 4f       	sbci	r25, 0xFF	; 255
    6798:	dc 01       	movw	r26, r24
    679a:	8d 91       	ld	r24, X+
    679c:	9c 91       	ld	r25, X
    679e:	fc 01       	movw	r30, r24
    67a0:	81 a1       	ldd	r24, Z+33	; 0x21
    67a2:	a8 2f       	mov	r26, r24
    67a4:	b0 e0       	ldi	r27, 0x00	; 0
    67a6:	ce 01       	movw	r24, r28
    67a8:	8d 5a       	subi	r24, 0xAD	; 173
    67aa:	9f 4f       	sbci	r25, 0xFF	; 255
    67ac:	fc 01       	movw	r30, r24
    67ae:	80 81       	ld	r24, Z
    67b0:	91 81       	ldd	r25, Z+1	; 0x01
    67b2:	fc 01       	movw	r30, r24
    67b4:	81 a1       	ldd	r24, Z+33	; 0x21
    67b6:	28 2f       	mov	r18, r24
    67b8:	30 e0       	ldi	r19, 0x00	; 0
    67ba:	6f 96       	adiw	r28, 0x1f	; 31
    67bc:	3f af       	std	Y+63, r19	; 0x3f
    67be:	2e af       	std	Y+62, r18	; 0x3e
    67c0:	6f 97       	sbiw	r28, 0x1f	; 31
    67c2:	ce 01       	movw	r24, r28
    67c4:	8d 5a       	subi	r24, 0xAD	; 173
    67c6:	9f 4f       	sbci	r25, 0xFF	; 255
    67c8:	fc 01       	movw	r30, r24
    67ca:	80 81       	ld	r24, Z
    67cc:	91 81       	ldd	r25, Z+1	; 0x01
    67ce:	fc 01       	movw	r30, r24
    67d0:	81 a1       	ldd	r24, Z+33	; 0x21
    67d2:	28 2f       	mov	r18, r24
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	c9 01       	movw	r24, r18
    67d8:	88 0f       	add	r24, r24
    67da:	99 1f       	adc	r25, r25
    67dc:	88 0f       	add	r24, r24
    67de:	99 1f       	adc	r25, r25
    67e0:	28 0f       	add	r18, r24
    67e2:	39 1f       	adc	r19, r25
    67e4:	8d a9       	ldd	r24, Y+53	; 0x35
    67e6:	9e a9       	ldd	r25, Y+54	; 0x36
    67e8:	b9 01       	movw	r22, r18
    67ea:	68 0f       	add	r22, r24
    67ec:	79 1f       	adc	r23, r25
    67ee:	49 85       	ldd	r20, Y+9	; 0x09
    67f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    67f2:	ce 01       	movw	r24, r28
    67f4:	8d 5a       	subi	r24, 0xAD	; 173
    67f6:	9f 4f       	sbci	r25, 0xFF	; 255
    67f8:	fc 01       	movw	r30, r24
    67fa:	80 81       	ld	r24, Z
    67fc:	91 81       	ldd	r25, Z+1	; 0x01
    67fe:	78 01       	movw	r14, r16
    6800:	8d 01       	movw	r16, r26
    6802:	6f 96       	adiw	r28, 0x1f	; 31
    6804:	2e ad       	ldd	r18, Y+62	; 0x3e
    6806:	3f ad       	ldd	r19, Y+63	; 0x3f
    6808:	6f 97       	sbiw	r28, 0x1f	; 31
    680a:	0e 94 ba 2b 	call	0x5774	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    680e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6810:	88 2f       	mov	r24, r24
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	82 70       	andi	r24, 0x02	; 2
    6816:	99 27       	eor	r25, r25
    6818:	89 2b       	or	r24, r25
    681a:	09 f4       	brne	.+2      	; 0x681e <_ZN11TFT_ILI93418drawCharEjiii+0xb3e>
    681c:	48 c0       	rjmp	.+144    	; 0x68ae <_ZN11TFT_ILI93418drawCharEjiii+0xbce>
    681e:	ce 01       	movw	r24, r28
    6820:	8d 5a       	subi	r24, 0xAD	; 173
    6822:	9f 4f       	sbci	r25, 0xFF	; 255
    6824:	dc 01       	movw	r26, r24
    6826:	8d 91       	ld	r24, X+
    6828:	9c 91       	ld	r25, X
    682a:	fc 01       	movw	r30, r24
    682c:	06 89       	ldd	r16, Z+22	; 0x16
    682e:	17 89       	ldd	r17, Z+23	; 0x17
    6830:	ce 01       	movw	r24, r28
    6832:	8d 5a       	subi	r24, 0xAD	; 173
    6834:	9f 4f       	sbci	r25, 0xFF	; 255
    6836:	dc 01       	movw	r26, r24
    6838:	8d 91       	ld	r24, X+
    683a:	9c 91       	ld	r25, X
    683c:	fc 01       	movw	r30, r24
    683e:	81 a1       	ldd	r24, Z+33	; 0x21
    6840:	a8 2f       	mov	r26, r24
    6842:	b0 e0       	ldi	r27, 0x00	; 0
    6844:	ce 01       	movw	r24, r28
    6846:	8d 5a       	subi	r24, 0xAD	; 173
    6848:	9f 4f       	sbci	r25, 0xFF	; 255
    684a:	fc 01       	movw	r30, r24
    684c:	80 81       	ld	r24, Z
    684e:	91 81       	ldd	r25, Z+1	; 0x01
    6850:	fc 01       	movw	r30, r24
    6852:	81 a1       	ldd	r24, Z+33	; 0x21
    6854:	28 2f       	mov	r18, r24
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	6f 96       	adiw	r28, 0x1f	; 31
    685a:	3f af       	std	Y+63, r19	; 0x3f
    685c:	2e af       	std	Y+62, r18	; 0x3e
    685e:	6f 97       	sbiw	r28, 0x1f	; 31
    6860:	ce 01       	movw	r24, r28
    6862:	8d 5a       	subi	r24, 0xAD	; 173
    6864:	9f 4f       	sbci	r25, 0xFF	; 255
    6866:	fc 01       	movw	r30, r24
    6868:	80 81       	ld	r24, Z
    686a:	91 81       	ldd	r25, Z+1	; 0x01
    686c:	fc 01       	movw	r30, r24
    686e:	81 a1       	ldd	r24, Z+33	; 0x21
    6870:	28 2f       	mov	r18, r24
    6872:	30 e0       	ldi	r19, 0x00	; 0
    6874:	c9 01       	movw	r24, r18
    6876:	88 0f       	add	r24, r24
    6878:	99 1f       	adc	r25, r25
    687a:	82 0f       	add	r24, r18
    687c:	93 1f       	adc	r25, r19
    687e:	88 0f       	add	r24, r24
    6880:	99 1f       	adc	r25, r25
    6882:	9c 01       	movw	r18, r24
    6884:	8d a9       	ldd	r24, Y+53	; 0x35
    6886:	9e a9       	ldd	r25, Y+54	; 0x36
    6888:	b9 01       	movw	r22, r18
    688a:	68 0f       	add	r22, r24
    688c:	79 1f       	adc	r23, r25
    688e:	49 85       	ldd	r20, Y+9	; 0x09
    6890:	5a 85       	ldd	r21, Y+10	; 0x0a
    6892:	ce 01       	movw	r24, r28
    6894:	8d 5a       	subi	r24, 0xAD	; 173
    6896:	9f 4f       	sbci	r25, 0xFF	; 255
    6898:	fc 01       	movw	r30, r24
    689a:	80 81       	ld	r24, Z
    689c:	91 81       	ldd	r25, Z+1	; 0x01
    689e:	78 01       	movw	r14, r16
    68a0:	8d 01       	movw	r16, r26
    68a2:	6f 96       	adiw	r28, 0x1f	; 31
    68a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    68a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    68a8:	6f 97       	sbiw	r28, 0x1f	; 31
    68aa:	0e 94 ba 2b 	call	0x5774	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    68ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    68b0:	88 2f       	mov	r24, r24
    68b2:	90 e0       	ldi	r25, 0x00	; 0
    68b4:	81 70       	andi	r24, 0x01	; 1
    68b6:	99 27       	eor	r25, r25
    68b8:	89 2b       	or	r24, r25
    68ba:	09 f4       	brne	.+2      	; 0x68be <_ZN11TFT_ILI93418drawCharEjiii+0xbde>
    68bc:	4b c0       	rjmp	.+150    	; 0x6954 <_ZN11TFT_ILI93418drawCharEjiii+0xc74>
    68be:	ce 01       	movw	r24, r28
    68c0:	8d 5a       	subi	r24, 0xAD	; 173
    68c2:	9f 4f       	sbci	r25, 0xFF	; 255
    68c4:	dc 01       	movw	r26, r24
    68c6:	8d 91       	ld	r24, X+
    68c8:	9c 91       	ld	r25, X
    68ca:	fc 01       	movw	r30, r24
    68cc:	06 89       	ldd	r16, Z+22	; 0x16
    68ce:	17 89       	ldd	r17, Z+23	; 0x17
    68d0:	ce 01       	movw	r24, r28
    68d2:	8d 5a       	subi	r24, 0xAD	; 173
    68d4:	9f 4f       	sbci	r25, 0xFF	; 255
    68d6:	dc 01       	movw	r26, r24
    68d8:	8d 91       	ld	r24, X+
    68da:	9c 91       	ld	r25, X
    68dc:	fc 01       	movw	r30, r24
    68de:	81 a1       	ldd	r24, Z+33	; 0x21
    68e0:	a8 2f       	mov	r26, r24
    68e2:	b0 e0       	ldi	r27, 0x00	; 0
    68e4:	ce 01       	movw	r24, r28
    68e6:	8d 5a       	subi	r24, 0xAD	; 173
    68e8:	9f 4f       	sbci	r25, 0xFF	; 255
    68ea:	fc 01       	movw	r30, r24
    68ec:	80 81       	ld	r24, Z
    68ee:	91 81       	ldd	r25, Z+1	; 0x01
    68f0:	fc 01       	movw	r30, r24
    68f2:	81 a1       	ldd	r24, Z+33	; 0x21
    68f4:	28 2f       	mov	r18, r24
    68f6:	30 e0       	ldi	r19, 0x00	; 0
    68f8:	6f 96       	adiw	r28, 0x1f	; 31
    68fa:	3f af       	std	Y+63, r19	; 0x3f
    68fc:	2e af       	std	Y+62, r18	; 0x3e
    68fe:	6f 97       	sbiw	r28, 0x1f	; 31
    6900:	ce 01       	movw	r24, r28
    6902:	8d 5a       	subi	r24, 0xAD	; 173
    6904:	9f 4f       	sbci	r25, 0xFF	; 255
    6906:	fc 01       	movw	r30, r24
    6908:	80 81       	ld	r24, Z
    690a:	91 81       	ldd	r25, Z+1	; 0x01
    690c:	fc 01       	movw	r30, r24
    690e:	81 a1       	ldd	r24, Z+33	; 0x21
    6910:	28 2f       	mov	r18, r24
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	c9 01       	movw	r24, r18
    6916:	88 0f       	add	r24, r24
    6918:	99 1f       	adc	r25, r25
    691a:	88 0f       	add	r24, r24
    691c:	99 1f       	adc	r25, r25
    691e:	88 0f       	add	r24, r24
    6920:	99 1f       	adc	r25, r25
    6922:	ac 01       	movw	r20, r24
    6924:	42 1b       	sub	r20, r18
    6926:	53 0b       	sbc	r21, r19
    6928:	9a 01       	movw	r18, r20
    692a:	8d a9       	ldd	r24, Y+53	; 0x35
    692c:	9e a9       	ldd	r25, Y+54	; 0x36
    692e:	b9 01       	movw	r22, r18
    6930:	68 0f       	add	r22, r24
    6932:	79 1f       	adc	r23, r25
    6934:	49 85       	ldd	r20, Y+9	; 0x09
    6936:	5a 85       	ldd	r21, Y+10	; 0x0a
    6938:	ce 01       	movw	r24, r28
    693a:	8d 5a       	subi	r24, 0xAD	; 173
    693c:	9f 4f       	sbci	r25, 0xFF	; 255
    693e:	fc 01       	movw	r30, r24
    6940:	80 81       	ld	r24, Z
    6942:	91 81       	ldd	r25, Z+1	; 0x01
    6944:	78 01       	movw	r14, r16
    6946:	8d 01       	movw	r16, r26
    6948:	6f 96       	adiw	r28, 0x1f	; 31
    694a:	2e ad       	ldd	r18, Y+62	; 0x3e
    694c:	3f ad       	ldd	r19, Y+63	; 0x3f
    694e:	6f 97       	sbiw	r28, 0x1f	; 31
    6950:	0e 94 ba 2b 	call	0x5774	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    6954:	8e 85       	ldd	r24, Y+14	; 0x0e
    6956:	9f 85       	ldd	r25, Y+15	; 0x0f
    6958:	01 96       	adiw	r24, 0x01	; 1
    695a:	9f 87       	std	Y+15, r25	; 0x0f
    695c:	8e 87       	std	Y+14, r24	; 0x0e
    695e:	47 cc       	rjmp	.-1906   	; 0x61ee <_ZN11TFT_ILI93418drawCharEjiii+0x50e>
    6960:	ce 01       	movw	r24, r28
    6962:	8d 5a       	subi	r24, 0xAD	; 173
    6964:	9f 4f       	sbci	r25, 0xFF	; 255
    6966:	dc 01       	movw	r26, r24
    6968:	8d 91       	ld	r24, X+
    696a:	9c 91       	ld	r25, X
    696c:	fc 01       	movw	r30, r24
    696e:	81 a1       	ldd	r24, Z+33	; 0x21
    6970:	88 2f       	mov	r24, r24
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	29 85       	ldd	r18, Y+9	; 0x09
    6976:	3a 85       	ldd	r19, Y+10	; 0x0a
    6978:	82 0f       	add	r24, r18
    697a:	93 1f       	adc	r25, r19
    697c:	9a 87       	std	Y+10, r25	; 0x0a
    697e:	89 87       	std	Y+9, r24	; 0x09
    6980:	8c 85       	ldd	r24, Y+12	; 0x0c
    6982:	9d 85       	ldd	r25, Y+13	; 0x0d
    6984:	01 96       	adiw	r24, 0x01	; 1
    6986:	9d 87       	std	Y+13, r25	; 0x0d
    6988:	8c 87       	std	Y+12, r24	; 0x0c
    698a:	ca cb       	rjmp	.-2156   	; 0x6120 <_ZN11TFT_ILI93418drawCharEjiii+0x440>
    698c:	ce 01       	movw	r24, r28
    698e:	87 5a       	subi	r24, 0xA7	; 167
    6990:	9f 4f       	sbci	r25, 0xFF	; 255
    6992:	dc 01       	movw	r26, r24
    6994:	2d 91       	ld	r18, X+
    6996:	3c 91       	ld	r19, X
    6998:	8b 81       	ldd	r24, Y+3	; 0x03
    699a:	9c 81       	ldd	r25, Y+4	; 0x04
    699c:	82 0f       	add	r24, r18
    699e:	93 1f       	adc	r25, r19
    69a0:	fc 01       	movw	r30, r24
    69a2:	31 97       	sbiw	r30, 0x01	; 1
    69a4:	8f 81       	ldd	r24, Y+7	; 0x07
    69a6:	98 85       	ldd	r25, Y+8	; 0x08
    69a8:	9c 01       	movw	r18, r24
    69aa:	22 0f       	add	r18, r18
    69ac:	33 1f       	adc	r19, r19
    69ae:	22 0f       	add	r18, r18
    69b0:	33 1f       	adc	r19, r19
    69b2:	22 0f       	add	r18, r18
    69b4:	33 1f       	adc	r19, r19
    69b6:	ce 01       	movw	r24, r28
    69b8:	89 5a       	subi	r24, 0xA9	; 169
    69ba:	9f 4f       	sbci	r25, 0xFF	; 255
    69bc:	dc 01       	movw	r26, r24
    69be:	8d 91       	ld	r24, X+
    69c0:	9c 91       	ld	r25, X
    69c2:	82 0f       	add	r24, r18
    69c4:	93 1f       	adc	r25, r19
    69c6:	9c 01       	movw	r18, r24
    69c8:	21 50       	subi	r18, 0x01	; 1
    69ca:	31 09       	sbc	r19, r1
    69cc:	ce 01       	movw	r24, r28
    69ce:	87 5a       	subi	r24, 0xA7	; 167
    69d0:	9f 4f       	sbci	r25, 0xFF	; 255
    69d2:	dc 01       	movw	r26, r24
    69d4:	4d 91       	ld	r20, X+
    69d6:	5c 91       	ld	r21, X
    69d8:	ce 01       	movw	r24, r28
    69da:	89 5a       	subi	r24, 0xA9	; 169
    69dc:	9f 4f       	sbci	r25, 0xFF	; 255
    69de:	dc 01       	movw	r26, r24
    69e0:	6d 91       	ld	r22, X+
    69e2:	7c 91       	ld	r23, X
    69e4:	ce 01       	movw	r24, r28
    69e6:	8d 5a       	subi	r24, 0xAD	; 173
    69e8:	9f 4f       	sbci	r25, 0xFF	; 255
    69ea:	dc 01       	movw	r26, r24
    69ec:	8d 91       	ld	r24, X+
    69ee:	9c 91       	ld	r25, X
    69f0:	8f 01       	movw	r16, r30
    69f2:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    69f6:	1a 8a       	std	Y+18, r1	; 0x12
    69f8:	19 8a       	std	Y+17, r1	; 0x11
    69fa:	29 89       	ldd	r18, Y+17	; 0x11
    69fc:	3a 89       	ldd	r19, Y+18	; 0x12
    69fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6a00:	9c 81       	ldd	r25, Y+4	; 0x04
    6a02:	28 17       	cp	r18, r24
    6a04:	39 07       	cpc	r19, r25
    6a06:	0c f0       	brlt	.+2      	; 0x6a0a <_ZN11TFT_ILI93418drawCharEjiii+0xd2a>
    6a08:	ac c0       	rjmp	.+344    	; 0x6b62 <_ZN11TFT_ILI93418drawCharEjiii+0xe82>
    6a0a:	1c 8a       	std	Y+20, r1	; 0x14
    6a0c:	1b 8a       	std	Y+19, r1	; 0x13
    6a0e:	2b 89       	ldd	r18, Y+19	; 0x13
    6a10:	3c 89       	ldd	r19, Y+20	; 0x14
    6a12:	8f 81       	ldd	r24, Y+7	; 0x07
    6a14:	98 85       	ldd	r25, Y+8	; 0x08
    6a16:	28 17       	cp	r18, r24
    6a18:	39 07       	cpc	r19, r25
    6a1a:	0c f0       	brlt	.+2      	; 0x6a1e <_ZN11TFT_ILI93418drawCharEjiii+0xd3e>
    6a1c:	8b c0       	rjmp	.+278    	; 0x6b34 <_ZN11TFT_ILI93418drawCharEjiii+0xe54>
    6a1e:	2f 81       	ldd	r18, Y+7	; 0x07
    6a20:	38 85       	ldd	r19, Y+8	; 0x08
    6a22:	89 89       	ldd	r24, Y+17	; 0x11
    6a24:	9a 89       	ldd	r25, Y+18	; 0x12
    6a26:	28 9f       	mul	r18, r24
    6a28:	a0 01       	movw	r20, r0
    6a2a:	29 9f       	mul	r18, r25
    6a2c:	50 0d       	add	r21, r0
    6a2e:	38 9f       	mul	r19, r24
    6a30:	50 0d       	add	r21, r0
    6a32:	11 24       	eor	r1, r1
    6a34:	9a 01       	movw	r18, r20
    6a36:	8d 81       	ldd	r24, Y+5	; 0x05
    6a38:	9e 81       	ldd	r25, Y+6	; 0x06
    6a3a:	28 0f       	add	r18, r24
    6a3c:	39 1f       	adc	r19, r25
    6a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    6a40:	9c 89       	ldd	r25, Y+20	; 0x14
    6a42:	82 0f       	add	r24, r18
    6a44:	93 1f       	adc	r25, r19
    6a46:	9c af       	std	Y+60, r25	; 0x3c
    6a48:	8b af       	std	Y+59, r24	; 0x3b
    6a4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    6a4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    6a4e:	fc 01       	movw	r30, r24
    6a50:	84 91       	lpm	r24, Z
    6a52:	8d af       	std	Y+61, r24	; 0x3d
    6a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    6a56:	8b 87       	std	Y+11, r24	; 0x0b
    6a58:	8b 89       	ldd	r24, Y+19	; 0x13
    6a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a5c:	9c 01       	movw	r18, r24
    6a5e:	22 0f       	add	r18, r18
    6a60:	33 1f       	adc	r19, r19
    6a62:	22 0f       	add	r18, r18
    6a64:	33 1f       	adc	r19, r19
    6a66:	22 0f       	add	r18, r18
    6a68:	33 1f       	adc	r19, r19
    6a6a:	ce 01       	movw	r24, r28
    6a6c:	89 5a       	subi	r24, 0xA9	; 169
    6a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a70:	dc 01       	movw	r26, r24
    6a72:	8d 91       	ld	r24, X+
    6a74:	9c 91       	ld	r25, X
    6a76:	82 0f       	add	r24, r18
    6a78:	93 1f       	adc	r25, r19
    6a7a:	9e ab       	std	Y+54, r25	; 0x36
    6a7c:	8d ab       	std	Y+53, r24	; 0x35
    6a7e:	80 e8       	ldi	r24, 0x80	; 128
    6a80:	88 8b       	std	Y+16, r24	; 0x10
    6a82:	88 89       	ldd	r24, Y+16	; 0x10
    6a84:	88 23       	and	r24, r24
    6a86:	09 f4       	brne	.+2      	; 0x6a8a <_ZN11TFT_ILI93418drawCharEjiii+0xdaa>
    6a88:	4f c0       	rjmp	.+158    	; 0x6b28 <_ZN11TFT_ILI93418drawCharEjiii+0xe48>
    6a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a8c:	88 89       	ldd	r24, Y+16	; 0x10
    6a8e:	89 23       	and	r24, r25
    6a90:	88 23       	and	r24, r24
    6a92:	11 f1       	breq	.+68     	; 0x6ad8 <_ZN11TFT_ILI93418drawCharEjiii+0xdf8>
    6a94:	8d e4       	ldi	r24, 0x4D	; 77
    6a96:	90 e0       	ldi	r25, 0x00	; 0
    6a98:	fc 01       	movw	r30, r24
    6a9a:	80 81       	ld	r24, Z
    6a9c:	80 95       	com	r24
    6a9e:	88 1f       	adc	r24, r24
    6aa0:	88 27       	eor	r24, r24
    6aa2:	88 1f       	adc	r24, r24
    6aa4:	88 23       	and	r24, r24
    6aa6:	09 f0       	breq	.+2      	; 0x6aaa <_ZN11TFT_ILI93418drawCharEjiii+0xdca>
    6aa8:	f5 cf       	rjmp	.-22     	; 0x6a94 <_ZN11TFT_ILI93418drawCharEjiii+0xdb4>
    6aaa:	8e e4       	ldi	r24, 0x4E	; 78
    6aac:	90 e0       	ldi	r25, 0x00	; 0
    6aae:	28 ad       	ldd	r18, Y+56	; 0x38
    6ab0:	dc 01       	movw	r26, r24
    6ab2:	2c 93       	st	X, r18
    6ab4:	00 00       	nop
    6ab6:	8d e4       	ldi	r24, 0x4D	; 77
    6ab8:	90 e0       	ldi	r25, 0x00	; 0
    6aba:	fc 01       	movw	r30, r24
    6abc:	80 81       	ld	r24, Z
    6abe:	80 95       	com	r24
    6ac0:	88 1f       	adc	r24, r24
    6ac2:	88 27       	eor	r24, r24
    6ac4:	88 1f       	adc	r24, r24
    6ac6:	88 23       	and	r24, r24
    6ac8:	09 f0       	breq	.+2      	; 0x6acc <_ZN11TFT_ILI93418drawCharEjiii+0xdec>
    6aca:	f5 cf       	rjmp	.-22     	; 0x6ab6 <_ZN11TFT_ILI93418drawCharEjiii+0xdd6>
    6acc:	8e e4       	ldi	r24, 0x4E	; 78
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	2f a9       	ldd	r18, Y+55	; 0x37
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	2c 93       	st	X, r18
    6ad6:	21 c0       	rjmp	.+66     	; 0x6b1a <_ZN11TFT_ILI93418drawCharEjiii+0xe3a>
    6ad8:	8d e4       	ldi	r24, 0x4D	; 77
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	fc 01       	movw	r30, r24
    6ade:	80 81       	ld	r24, Z
    6ae0:	80 95       	com	r24
    6ae2:	88 1f       	adc	r24, r24
    6ae4:	88 27       	eor	r24, r24
    6ae6:	88 1f       	adc	r24, r24
    6ae8:	88 23       	and	r24, r24
    6aea:	09 f0       	breq	.+2      	; 0x6aee <_ZN11TFT_ILI93418drawCharEjiii+0xe0e>
    6aec:	f5 cf       	rjmp	.-22     	; 0x6ad8 <_ZN11TFT_ILI93418drawCharEjiii+0xdf8>
    6aee:	8e e4       	ldi	r24, 0x4E	; 78
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	2a ad       	ldd	r18, Y+58	; 0x3a
    6af4:	dc 01       	movw	r26, r24
    6af6:	2c 93       	st	X, r18
    6af8:	00 00       	nop
    6afa:	8d e4       	ldi	r24, 0x4D	; 77
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	fc 01       	movw	r30, r24
    6b00:	80 81       	ld	r24, Z
    6b02:	80 95       	com	r24
    6b04:	88 1f       	adc	r24, r24
    6b06:	88 27       	eor	r24, r24
    6b08:	88 1f       	adc	r24, r24
    6b0a:	88 23       	and	r24, r24
    6b0c:	09 f0       	breq	.+2      	; 0x6b10 <_ZN11TFT_ILI93418drawCharEjiii+0xe30>
    6b0e:	f5 cf       	rjmp	.-22     	; 0x6afa <_ZN11TFT_ILI93418drawCharEjiii+0xe1a>
    6b10:	8e e4       	ldi	r24, 0x4E	; 78
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	29 ad       	ldd	r18, Y+57	; 0x39
    6b16:	dc 01       	movw	r26, r24
    6b18:	2c 93       	st	X, r18
    6b1a:	88 89       	ldd	r24, Y+16	; 0x10
    6b1c:	88 2f       	mov	r24, r24
    6b1e:	90 e0       	ldi	r25, 0x00	; 0
    6b20:	95 95       	asr	r25
    6b22:	87 95       	ror	r24
    6b24:	88 8b       	std	Y+16, r24	; 0x10
    6b26:	ad cf       	rjmp	.-166    	; 0x6a82 <_ZN11TFT_ILI93418drawCharEjiii+0xda2>
    6b28:	8b 89       	ldd	r24, Y+19	; 0x13
    6b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    6b2c:	01 96       	adiw	r24, 0x01	; 1
    6b2e:	9c 8b       	std	Y+20, r25	; 0x14
    6b30:	8b 8b       	std	Y+19, r24	; 0x13
    6b32:	6d cf       	rjmp	.-294    	; 0x6a0e <_ZN11TFT_ILI93418drawCharEjiii+0xd2e>
    6b34:	ce 01       	movw	r24, r28
    6b36:	8d 5a       	subi	r24, 0xAD	; 173
    6b38:	9f 4f       	sbci	r25, 0xFF	; 255
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	80 81       	ld	r24, Z
    6b3e:	91 81       	ldd	r25, Z+1	; 0x01
    6b40:	dc 01       	movw	r26, r24
    6b42:	91 96       	adiw	r26, 0x21	; 33
    6b44:	8c 91       	ld	r24, X
    6b46:	88 2f       	mov	r24, r24
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	29 85       	ldd	r18, Y+9	; 0x09
    6b4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    6b4e:	82 0f       	add	r24, r18
    6b50:	93 1f       	adc	r25, r19
    6b52:	9a 87       	std	Y+10, r25	; 0x0a
    6b54:	89 87       	std	Y+9, r24	; 0x09
    6b56:	89 89       	ldd	r24, Y+17	; 0x11
    6b58:	9a 89       	ldd	r25, Y+18	; 0x12
    6b5a:	01 96       	adiw	r24, 0x01	; 1
    6b5c:	9a 8b       	std	Y+18, r25	; 0x12
    6b5e:	89 8b       	std	Y+17, r24	; 0x11
    6b60:	4c cf       	rjmp	.-360    	; 0x69fa <_ZN11TFT_ILI93418drawCharEjiii+0xd1a>
    6b62:	8d e4       	ldi	r24, 0x4D	; 77
    6b64:	90 e0       	ldi	r25, 0x00	; 0
    6b66:	fc 01       	movw	r30, r24
    6b68:	80 81       	ld	r24, Z
    6b6a:	80 95       	com	r24
    6b6c:	88 1f       	adc	r24, r24
    6b6e:	88 27       	eor	r24, r24
    6b70:	88 1f       	adc	r24, r24
    6b72:	88 23       	and	r24, r24
    6b74:	09 f0       	breq	.+2      	; 0x6b78 <_ZN11TFT_ILI93418drawCharEjiii+0xe98>
    6b76:	f5 cf       	rjmp	.-22     	; 0x6b62 <_ZN11TFT_ILI93418drawCharEjiii+0xe82>
    6b78:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    6b7c:	dc 01       	movw	r26, r24
    6b7e:	2c 91       	ld	r18, X
    6b80:	24 60       	ori	r18, 0x04	; 4
    6b82:	fc 01       	movw	r30, r24
    6b84:	20 83       	st	Z, r18
    6b86:	92 c3       	rjmp	.+1828   	; 0x72ac <_ZN11TFT_ILI93418drawCharEjiii+0x15cc>
    6b88:	8e e4       	ldi	r24, 0x4E	; 78
    6b8a:	90 e0       	ldi	r25, 0x00	; 0
    6b8c:	dc 01       	movw	r26, r24
    6b8e:	1c 92       	st	X, r1
    6b90:	4f 81       	ldd	r20, Y+7	; 0x07
    6b92:	58 85       	ldd	r21, Y+8	; 0x08
    6b94:	2b 81       	ldd	r18, Y+3	; 0x03
    6b96:	3c 81       	ldd	r19, Y+4	; 0x04
    6b98:	42 9f       	mul	r20, r18
    6b9a:	c0 01       	movw	r24, r0
    6b9c:	43 9f       	mul	r20, r19
    6b9e:	90 0d       	add	r25, r0
    6ba0:	52 9f       	mul	r21, r18
    6ba2:	90 0d       	add	r25, r0
    6ba4:	11 24       	eor	r1, r1
    6ba6:	98 87       	std	Y+8, r25	; 0x08
    6ba8:	8f 83       	std	Y+7, r24	; 0x07
    6baa:	ce 01       	movw	r24, r28
    6bac:	8d 5a       	subi	r24, 0xAD	; 173
    6bae:	9f 4f       	sbci	r25, 0xFF	; 255
    6bb0:	fc 01       	movw	r30, r24
    6bb2:	80 81       	ld	r24, Z
    6bb4:	91 81       	ldd	r25, Z+1	; 0x01
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	91 96       	adiw	r26, 0x21	; 33
    6bba:	8c 91       	ld	r24, X
    6bbc:	81 30       	cpi	r24, 0x01	; 1
    6bbe:	d1 f4       	brne	.+52     	; 0x6bf4 <_ZN11TFT_ILI93418drawCharEjiii+0xf14>
    6bc0:	ce 01       	movw	r24, r28
    6bc2:	8d 5a       	subi	r24, 0xAD	; 173
    6bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    6bc6:	fc 01       	movw	r30, r24
    6bc8:	80 81       	ld	r24, Z
    6bca:	91 81       	ldd	r25, Z+1	; 0x01
    6bcc:	dc 01       	movw	r26, r24
    6bce:	56 96       	adiw	r26, 0x16	; 22
    6bd0:	2d 91       	ld	r18, X+
    6bd2:	3c 91       	ld	r19, X
    6bd4:	57 97       	sbiw	r26, 0x17	; 23
    6bd6:	ce 01       	movw	r24, r28
    6bd8:	8d 5a       	subi	r24, 0xAD	; 173
    6bda:	9f 4f       	sbci	r25, 0xFF	; 255
    6bdc:	fc 01       	movw	r30, r24
    6bde:	80 81       	ld	r24, Z
    6be0:	91 81       	ldd	r25, Z+1	; 0x01
    6be2:	dc 01       	movw	r26, r24
    6be4:	58 96       	adiw	r26, 0x18	; 24
    6be6:	8d 91       	ld	r24, X+
    6be8:	9c 91       	ld	r25, X
    6bea:	59 97       	sbiw	r26, 0x19	; 25
    6bec:	28 17       	cp	r18, r24
    6bee:	39 07       	cpc	r19, r25
    6bf0:	09 f0       	breq	.+2      	; 0x6bf4 <_ZN11TFT_ILI93418drawCharEjiii+0xf14>
    6bf2:	41 c2       	rjmp	.+1154   	; 0x7076 <_ZN11TFT_ILI93418drawCharEjiii+0x1396>
    6bf4:	ce 01       	movw	r24, r28
    6bf6:	8d 5a       	subi	r24, 0xAD	; 173
    6bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    6bfa:	fc 01       	movw	r30, r24
    6bfc:	80 81       	ld	r24, Z
    6bfe:	91 81       	ldd	r25, Z+1	; 0x01
    6c00:	dc 01       	movw	r26, r24
    6c02:	56 96       	adiw	r26, 0x16	; 22
    6c04:	2d 91       	ld	r18, X+
    6c06:	3c 91       	ld	r19, X
    6c08:	57 97       	sbiw	r26, 0x17	; 23
    6c0a:	ce 01       	movw	r24, r28
    6c0c:	8d 5a       	subi	r24, 0xAD	; 173
    6c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c10:	fc 01       	movw	r30, r24
    6c12:	80 81       	ld	r24, Z
    6c14:	91 81       	ldd	r25, Z+1	; 0x01
    6c16:	dc 01       	movw	r26, r24
    6c18:	58 96       	adiw	r26, 0x18	; 24
    6c1a:	8d 91       	ld	r24, X+
    6c1c:	9c 91       	ld	r25, X
    6c1e:	59 97       	sbiw	r26, 0x19	; 25
    6c20:	28 17       	cp	r18, r24
    6c22:	39 07       	cpc	r19, r25
    6c24:	09 f4       	brne	.+2      	; 0x6c28 <_ZN11TFT_ILI93418drawCharEjiii+0xf48>
    6c26:	4c c0       	rjmp	.+152    	; 0x6cc0 <_ZN11TFT_ILI93418drawCharEjiii+0xfe0>
    6c28:	ce 01       	movw	r24, r28
    6c2a:	8d 5a       	subi	r24, 0xAD	; 173
    6c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c2e:	fc 01       	movw	r30, r24
    6c30:	80 81       	ld	r24, Z
    6c32:	91 81       	ldd	r25, Z+1	; 0x01
    6c34:	dc 01       	movw	r26, r24
    6c36:	58 96       	adiw	r26, 0x18	; 24
    6c38:	0d 91       	ld	r16, X+
    6c3a:	1c 91       	ld	r17, X
    6c3c:	59 97       	sbiw	r26, 0x19	; 25
    6c3e:	ce 01       	movw	r24, r28
    6c40:	8d 5a       	subi	r24, 0xAD	; 173
    6c42:	9f 4f       	sbci	r25, 0xFF	; 255
    6c44:	fc 01       	movw	r30, r24
    6c46:	80 81       	ld	r24, Z
    6c48:	91 81       	ldd	r25, Z+1	; 0x01
    6c4a:	dc 01       	movw	r26, r24
    6c4c:	91 96       	adiw	r26, 0x21	; 33
    6c4e:	8c 91       	ld	r24, X
    6c50:	28 2f       	mov	r18, r24
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	8b 81       	ldd	r24, Y+3	; 0x03
    6c56:	9c 81       	ldd	r25, Y+4	; 0x04
    6c58:	28 9f       	mul	r18, r24
    6c5a:	d0 01       	movw	r26, r0
    6c5c:	29 9f       	mul	r18, r25
    6c5e:	b0 0d       	add	r27, r0
    6c60:	38 9f       	mul	r19, r24
    6c62:	b0 0d       	add	r27, r0
    6c64:	11 24       	eor	r1, r1
    6c66:	ce 01       	movw	r24, r28
    6c68:	8d 5a       	subi	r24, 0xAD	; 173
    6c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c6c:	fc 01       	movw	r30, r24
    6c6e:	80 81       	ld	r24, Z
    6c70:	91 81       	ldd	r25, Z+1	; 0x01
    6c72:	fc 01       	movw	r30, r24
    6c74:	81 a1       	ldd	r24, Z+33	; 0x21
    6c76:	28 2f       	mov	r18, r24
    6c78:	30 e0       	ldi	r19, 0x00	; 0
    6c7a:	89 81       	ldd	r24, Y+1	; 0x01
    6c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c7e:	28 9f       	mul	r18, r24
    6c80:	a0 01       	movw	r20, r0
    6c82:	29 9f       	mul	r18, r25
    6c84:	50 0d       	add	r21, r0
    6c86:	38 9f       	mul	r19, r24
    6c88:	50 0d       	add	r21, r0
    6c8a:	11 24       	eor	r1, r1
    6c8c:	6f 96       	adiw	r28, 0x1f	; 31
    6c8e:	5f af       	std	Y+63, r21	; 0x3f
    6c90:	4e af       	std	Y+62, r20	; 0x3e
    6c92:	6f 97       	sbiw	r28, 0x1f	; 31
    6c94:	49 85       	ldd	r20, Y+9	; 0x09
    6c96:	5a 85       	ldd	r21, Y+10	; 0x0a
    6c98:	ce 01       	movw	r24, r28
    6c9a:	89 5a       	subi	r24, 0xA9	; 169
    6c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c9e:	fc 01       	movw	r30, r24
    6ca0:	60 81       	ld	r22, Z
    6ca2:	71 81       	ldd	r23, Z+1	; 0x01
    6ca4:	ce 01       	movw	r24, r28
    6ca6:	8d 5a       	subi	r24, 0xAD	; 173
    6ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    6caa:	fc 01       	movw	r30, r24
    6cac:	80 81       	ld	r24, Z
    6cae:	91 81       	ldd	r25, Z+1	; 0x01
    6cb0:	78 01       	movw	r14, r16
    6cb2:	8d 01       	movw	r16, r26
    6cb4:	6f 96       	adiw	r28, 0x1f	; 31
    6cb6:	2e ad       	ldd	r18, Y+62	; 0x3e
    6cb8:	3f ad       	ldd	r19, Y+63	; 0x3f
    6cba:	6f 97       	sbiw	r28, 0x1f	; 31
    6cbc:	0e 94 ba 2b 	call	0x5774	; 0x5774 <_ZN11TFT_ILI93418fillRectEiiiij>
    6cc0:	1e 8a       	std	Y+22, r1	; 0x16
    6cc2:	1d 8a       	std	Y+21, r1	; 0x15
    6cc4:	89 85       	ldd	r24, Y+9	; 0x09
    6cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cc8:	98 8f       	std	Y+24, r25	; 0x18
    6cca:	8f 8b       	std	Y+23, r24	; 0x17
    6ccc:	1a 8e       	std	Y+26, r1	; 0x1a
    6cce:	19 8e       	std	Y+25, r1	; 0x19
    6cd0:	ce 01       	movw	r24, r28
    6cd2:	8d 5a       	subi	r24, 0xAD	; 173
    6cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    6cd6:	dc 01       	movw	r26, r24
    6cd8:	8d 91       	ld	r24, X+
    6cda:	9c 91       	ld	r25, X
    6cdc:	fc 01       	movw	r30, r24
    6cde:	31 a1       	ldd	r19, Z+33	; 0x21
    6ce0:	ce 01       	movw	r24, r28
    6ce2:	8d 5a       	subi	r24, 0xAD	; 173
    6ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ce6:	dc 01       	movw	r26, r24
    6ce8:	8d 91       	ld	r24, X+
    6cea:	9c 91       	ld	r25, X
    6cec:	fc 01       	movw	r30, r24
    6cee:	21 a1       	ldd	r18, Z+33	; 0x21
    6cf0:	ce 01       	movw	r24, r28
    6cf2:	8a 5b       	subi	r24, 0xBA	; 186
    6cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    6cf6:	32 9f       	mul	r19, r18
    6cf8:	20 2d       	mov	r18, r0
    6cfa:	11 24       	eor	r1, r1
    6cfc:	dc 01       	movw	r26, r24
    6cfe:	2c 93       	st	X, r18
    6d00:	1b 8e       	std	Y+27, r1	; 0x1b
    6d02:	ce 01       	movw	r24, r28
    6d04:	8d 5a       	subi	r24, 0xAD	; 173
    6d06:	9f 4f       	sbci	r25, 0xFF	; 255
    6d08:	fc 01       	movw	r30, r24
    6d0a:	80 81       	ld	r24, Z
    6d0c:	91 81       	ldd	r25, Z+1	; 0x01
    6d0e:	dc 01       	movw	r26, r24
    6d10:	91 96       	adiw	r26, 0x21	; 33
    6d12:	2c 91       	ld	r18, X
    6d14:	ce 01       	movw	r24, r28
    6d16:	89 5b       	subi	r24, 0xB9	; 185
    6d18:	9f 4f       	sbci	r25, 0xFF	; 255
    6d1a:	21 50       	subi	r18, 0x01	; 1
    6d1c:	fc 01       	movw	r30, r24
    6d1e:	20 83       	st	Z, r18
    6d20:	29 8d       	ldd	r18, Y+25	; 0x19
    6d22:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6d24:	8f 81       	ldd	r24, Y+7	; 0x07
    6d26:	98 85       	ldd	r25, Y+8	; 0x08
    6d28:	28 17       	cp	r18, r24
    6d2a:	39 07       	cpc	r19, r25
    6d2c:	0c f0       	brlt	.+2      	; 0x6d30 <_ZN11TFT_ILI93418drawCharEjiii+0x1050>
    6d2e:	90 c1       	rjmp	.+800    	; 0x7050 <_ZN11TFT_ILI93418drawCharEjiii+0x1370>
    6d30:	ce 01       	movw	r24, r28
    6d32:	88 5b       	subi	r24, 0xB8	; 184
    6d34:	9f 4f       	sbci	r25, 0xFF	; 255
    6d36:	2d 81       	ldd	r18, Y+5	; 0x05
    6d38:	3e 81       	ldd	r19, Y+6	; 0x06
    6d3a:	dc 01       	movw	r26, r24
    6d3c:	2d 93       	st	X+, r18
    6d3e:	3c 93       	st	X, r19
    6d40:	ce 01       	movw	r24, r28
    6d42:	88 5b       	subi	r24, 0xB8	; 184
    6d44:	9f 4f       	sbci	r25, 0xFF	; 255
    6d46:	fc 01       	movw	r30, r24
    6d48:	80 81       	ld	r24, Z
    6d4a:	91 81       	ldd	r25, Z+1	; 0x01
    6d4c:	fc 01       	movw	r30, r24
    6d4e:	24 91       	lpm	r18, Z
    6d50:	ce 01       	movw	r24, r28
    6d52:	86 5b       	subi	r24, 0xB6	; 182
    6d54:	9f 4f       	sbci	r25, 0xFF	; 255
    6d56:	dc 01       	movw	r26, r24
    6d58:	2c 93       	st	X, r18
    6d5a:	ce 01       	movw	r24, r28
    6d5c:	86 5b       	subi	r24, 0xB6	; 182
    6d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d60:	fc 01       	movw	r30, r24
    6d62:	80 81       	ld	r24, Z
    6d64:	8b 87       	std	Y+11, r24	; 0x0b
    6d66:	8d 81       	ldd	r24, Y+5	; 0x05
    6d68:	9e 81       	ldd	r25, Y+6	; 0x06
    6d6a:	01 96       	adiw	r24, 0x01	; 1
    6d6c:	9e 83       	std	Y+6, r25	; 0x06
    6d6e:	8d 83       	std	Y+5, r24	; 0x05
    6d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d72:	88 23       	and	r24, r24
    6d74:	0c f0       	brlt	.+2      	; 0x6d78 <_ZN11TFT_ILI93418drawCharEjiii+0x1098>
    6d76:	5f c1       	rjmp	.+702    	; 0x7036 <_ZN11TFT_ILI93418drawCharEjiii+0x1356>
    6d78:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d7a:	8f 77       	andi	r24, 0x7F	; 127
    6d7c:	8b 87       	std	Y+11, r24	; 0x0b
    6d7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d80:	8f 5f       	subi	r24, 0xFF	; 255
    6d82:	8b 87       	std	Y+11, r24	; 0x0b
    6d84:	ce 01       	movw	r24, r28
    6d86:	89 5b       	subi	r24, 0xB9	; 185
    6d88:	9f 4f       	sbci	r25, 0xFF	; 255
    6d8a:	dc 01       	movw	r26, r24
    6d8c:	8c 91       	ld	r24, X
    6d8e:	88 23       	and	r24, r24
    6d90:	09 f4       	brne	.+2      	; 0x6d94 <_ZN11TFT_ILI93418drawCharEjiii+0x10b4>
    6d92:	47 c0       	rjmp	.+142    	; 0x6e22 <_ZN11TFT_ILI93418drawCharEjiii+0x1142>
    6d94:	ce 01       	movw	r24, r28
    6d96:	8d 5a       	subi	r24, 0xAD	; 173
    6d98:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9a:	fc 01       	movw	r30, r24
    6d9c:	80 81       	ld	r24, Z
    6d9e:	91 81       	ldd	r25, Z+1	; 0x01
    6da0:	dc 01       	movw	r26, r24
    6da2:	91 96       	adiw	r26, 0x21	; 33
    6da4:	8c 91       	ld	r24, X
    6da6:	e8 2f       	mov	r30, r24
    6da8:	f0 e0       	ldi	r31, 0x00	; 0
    6daa:	89 8d       	ldd	r24, Y+25	; 0x19
    6dac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6dae:	29 81       	ldd	r18, Y+1	; 0x01
    6db0:	3a 81       	ldd	r19, Y+2	; 0x02
    6db2:	b9 01       	movw	r22, r18
    6db4:	0e 94 9e 61 	call	0xc33c	; 0xc33c <__divmodhi4>
    6db8:	e8 9f       	mul	r30, r24
    6dba:	90 01       	movw	r18, r0
    6dbc:	e9 9f       	mul	r30, r25
    6dbe:	30 0d       	add	r19, r0
    6dc0:	f8 9f       	mul	r31, r24
    6dc2:	30 0d       	add	r19, r0
    6dc4:	11 24       	eor	r1, r1
    6dc6:	ce 01       	movw	r24, r28
    6dc8:	89 5a       	subi	r24, 0xA9	; 169
    6dca:	9f 4f       	sbci	r25, 0xFF	; 255
    6dcc:	fc 01       	movw	r30, r24
    6dce:	80 81       	ld	r24, Z
    6dd0:	91 81       	ldd	r25, Z+1	; 0x01
    6dd2:	82 0f       	add	r24, r18
    6dd4:	93 1f       	adc	r25, r19
    6dd6:	9e 8b       	std	Y+22, r25	; 0x16
    6dd8:	8d 8b       	std	Y+21, r24	; 0x15
    6dda:	ce 01       	movw	r24, r28
    6ddc:	8d 5a       	subi	r24, 0xAD	; 173
    6dde:	9f 4f       	sbci	r25, 0xFF	; 255
    6de0:	dc 01       	movw	r26, r24
    6de2:	8d 91       	ld	r24, X+
    6de4:	9c 91       	ld	r25, X
    6de6:	fc 01       	movw	r30, r24
    6de8:	81 a1       	ldd	r24, Z+33	; 0x21
    6dea:	e8 2f       	mov	r30, r24
    6dec:	f0 e0       	ldi	r31, 0x00	; 0
    6dee:	89 8d       	ldd	r24, Y+25	; 0x19
    6df0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6df2:	29 81       	ldd	r18, Y+1	; 0x01
    6df4:	3a 81       	ldd	r19, Y+2	; 0x02
    6df6:	b9 01       	movw	r22, r18
    6df8:	0e 94 9e 61 	call	0xc33c	; 0xc33c <__divmodhi4>
    6dfc:	cb 01       	movw	r24, r22
    6dfe:	e8 9f       	mul	r30, r24
    6e00:	90 01       	movw	r18, r0
    6e02:	e9 9f       	mul	r30, r25
    6e04:	30 0d       	add	r19, r0
    6e06:	f8 9f       	mul	r31, r24
    6e08:	30 0d       	add	r19, r0
    6e0a:	11 24       	eor	r1, r1
    6e0c:	ce 01       	movw	r24, r28
    6e0e:	87 5a       	subi	r24, 0xA7	; 167
    6e10:	9f 4f       	sbci	r25, 0xFF	; 255
    6e12:	dc 01       	movw	r26, r24
    6e14:	8d 91       	ld	r24, X+
    6e16:	9c 91       	ld	r25, X
    6e18:	82 0f       	add	r24, r18
    6e1a:	93 1f       	adc	r25, r19
    6e1c:	98 8f       	std	Y+24, r25	; 0x18
    6e1e:	8f 8b       	std	Y+23, r24	; 0x17
    6e20:	25 c0       	rjmp	.+74     	; 0x6e6c <_ZN11TFT_ILI93418drawCharEjiii+0x118c>
    6e22:	89 8d       	ldd	r24, Y+25	; 0x19
    6e24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e26:	29 81       	ldd	r18, Y+1	; 0x01
    6e28:	3a 81       	ldd	r19, Y+2	; 0x02
    6e2a:	b9 01       	movw	r22, r18
    6e2c:	0e 94 9e 61 	call	0xc33c	; 0xc33c <__divmodhi4>
    6e30:	9c 01       	movw	r18, r24
    6e32:	ce 01       	movw	r24, r28
    6e34:	89 5a       	subi	r24, 0xA9	; 169
    6e36:	9f 4f       	sbci	r25, 0xFF	; 255
    6e38:	fc 01       	movw	r30, r24
    6e3a:	80 81       	ld	r24, Z
    6e3c:	91 81       	ldd	r25, Z+1	; 0x01
    6e3e:	82 0f       	add	r24, r18
    6e40:	93 1f       	adc	r25, r19
    6e42:	9e 8b       	std	Y+22, r25	; 0x16
    6e44:	8d 8b       	std	Y+21, r24	; 0x15
    6e46:	89 8d       	ldd	r24, Y+25	; 0x19
    6e48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e4a:	29 81       	ldd	r18, Y+1	; 0x01
    6e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    6e4e:	b9 01       	movw	r22, r18
    6e50:	0e 94 9e 61 	call	0xc33c	; 0xc33c <__divmodhi4>
    6e54:	cb 01       	movw	r24, r22
    6e56:	9c 01       	movw	r18, r24
    6e58:	ce 01       	movw	r24, r28
    6e5a:	87 5a       	subi	r24, 0xA7	; 167
    6e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e5e:	dc 01       	movw	r26, r24
    6e60:	8d 91       	ld	r24, X+
    6e62:	9c 91       	ld	r25, X
    6e64:	82 0f       	add	r24, r18
    6e66:	93 1f       	adc	r25, r19
    6e68:	98 8f       	std	Y+24, r25	; 0x18
    6e6a:	8f 8b       	std	Y+23, r24	; 0x17
    6e6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e6e:	9f ef       	ldi	r25, 0xFF	; 255
    6e70:	98 0f       	add	r25, r24
    6e72:	9b 87       	std	Y+11, r25	; 0x0b
    6e74:	91 e0       	ldi	r25, 0x01	; 1
    6e76:	88 23       	and	r24, r24
    6e78:	09 f4       	brne	.+2      	; 0x6e7c <_ZN11TFT_ILI93418drawCharEjiii+0x119c>
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	99 23       	and	r25, r25
    6e7e:	09 f4       	brne	.+2      	; 0x6e82 <_ZN11TFT_ILI93418drawCharEjiii+0x11a2>
    6e80:	4f cf       	rjmp	.-354    	; 0x6d20 <_ZN11TFT_ILI93418drawCharEjiii+0x1040>
    6e82:	89 8d       	ldd	r24, Y+25	; 0x19
    6e84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e86:	01 96       	adiw	r24, 0x01	; 1
    6e88:	9a 8f       	std	Y+26, r25	; 0x1a
    6e8a:	89 8f       	std	Y+25, r24	; 0x19
    6e8c:	8d e4       	ldi	r24, 0x4D	; 77
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	fc 01       	movw	r30, r24
    6e92:	80 81       	ld	r24, Z
    6e94:	80 95       	com	r24
    6e96:	88 1f       	adc	r24, r24
    6e98:	88 27       	eor	r24, r24
    6e9a:	88 1f       	adc	r24, r24
    6e9c:	88 23       	and	r24, r24
    6e9e:	09 f0       	breq	.+2      	; 0x6ea2 <_ZN11TFT_ILI93418drawCharEjiii+0x11c2>
    6ea0:	f5 cf       	rjmp	.-22     	; 0x6e8c <_ZN11TFT_ILI93418drawCharEjiii+0x11ac>
    6ea2:	ce 01       	movw	r24, r28
    6ea4:	89 5b       	subi	r24, 0xB9	; 185
    6ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ea8:	dc 01       	movw	r26, r24
    6eaa:	8c 91       	ld	r24, X
    6eac:	28 2f       	mov	r18, r24
    6eae:	30 e0       	ldi	r19, 0x00	; 0
    6eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    6eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    6eb4:	f9 01       	movw	r30, r18
    6eb6:	e8 0f       	add	r30, r24
    6eb8:	f9 1f       	adc	r31, r25
    6eba:	ce 01       	movw	r24, r28
    6ebc:	89 5b       	subi	r24, 0xB9	; 185
    6ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec0:	dc 01       	movw	r26, r24
    6ec2:	8c 91       	ld	r24, X
    6ec4:	28 2f       	mov	r18, r24
    6ec6:	30 e0       	ldi	r19, 0x00	; 0
    6ec8:	8d 89       	ldd	r24, Y+21	; 0x15
    6eca:	9e 89       	ldd	r25, Y+22	; 0x16
    6ecc:	28 0f       	add	r18, r24
    6ece:	39 1f       	adc	r19, r25
    6ed0:	4f 89       	ldd	r20, Y+23	; 0x17
    6ed2:	58 8d       	ldd	r21, Y+24	; 0x18
    6ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    6ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    6ed8:	ce 01       	movw	r24, r28
    6eda:	8d 5a       	subi	r24, 0xAD	; 173
    6edc:	9f 4f       	sbci	r25, 0xFF	; 255
    6ede:	dc 01       	movw	r26, r24
    6ee0:	8d 91       	ld	r24, X+
    6ee2:	9c 91       	ld	r25, X
    6ee4:	8f 01       	movw	r16, r30
    6ee6:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    6eea:	ce 01       	movw	r24, r28
    6eec:	89 5b       	subi	r24, 0xB9	; 185
    6eee:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	80 81       	ld	r24, Z
    6ef4:	88 23       	and	r24, r24
    6ef6:	91 f1       	breq	.+100    	; 0x6f5c <_ZN11TFT_ILI93418drawCharEjiii+0x127c>
    6ef8:	ce 01       	movw	r24, r28
    6efa:	8a 5b       	subi	r24, 0xBA	; 186
    6efc:	9f 4f       	sbci	r25, 0xFF	; 255
    6efe:	dc 01       	movw	r26, r24
    6f00:	8c 91       	ld	r24, X
    6f02:	8b 8f       	std	Y+27, r24	; 0x1b
    6f04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f06:	9f ef       	ldi	r25, 0xFF	; 255
    6f08:	98 0f       	add	r25, r24
    6f0a:	9b 8f       	std	Y+27, r25	; 0x1b
    6f0c:	91 e0       	ldi	r25, 0x01	; 1
    6f0e:	88 23       	and	r24, r24
    6f10:	09 f4       	brne	.+2      	; 0x6f14 <_ZN11TFT_ILI93418drawCharEjiii+0x1234>
    6f12:	90 e0       	ldi	r25, 0x00	; 0
    6f14:	99 23       	and	r25, r25
    6f16:	09 f4       	brne	.+2      	; 0x6f1a <_ZN11TFT_ILI93418drawCharEjiii+0x123a>
    6f18:	41 c0       	rjmp	.+130    	; 0x6f9c <_ZN11TFT_ILI93418drawCharEjiii+0x12bc>
    6f1a:	8d e4       	ldi	r24, 0x4D	; 77
    6f1c:	90 e0       	ldi	r25, 0x00	; 0
    6f1e:	fc 01       	movw	r30, r24
    6f20:	80 81       	ld	r24, Z
    6f22:	80 95       	com	r24
    6f24:	88 1f       	adc	r24, r24
    6f26:	88 27       	eor	r24, r24
    6f28:	88 1f       	adc	r24, r24
    6f2a:	88 23       	and	r24, r24
    6f2c:	09 f0       	breq	.+2      	; 0x6f30 <_ZN11TFT_ILI93418drawCharEjiii+0x1250>
    6f2e:	f5 cf       	rjmp	.-22     	; 0x6f1a <_ZN11TFT_ILI93418drawCharEjiii+0x123a>
    6f30:	8e e4       	ldi	r24, 0x4E	; 78
    6f32:	90 e0       	ldi	r25, 0x00	; 0
    6f34:	28 ad       	ldd	r18, Y+56	; 0x38
    6f36:	dc 01       	movw	r26, r24
    6f38:	2c 93       	st	X, r18
    6f3a:	8d e4       	ldi	r24, 0x4D	; 77
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	fc 01       	movw	r30, r24
    6f40:	80 81       	ld	r24, Z
    6f42:	80 95       	com	r24
    6f44:	88 1f       	adc	r24, r24
    6f46:	88 27       	eor	r24, r24
    6f48:	88 1f       	adc	r24, r24
    6f4a:	88 23       	and	r24, r24
    6f4c:	09 f0       	breq	.+2      	; 0x6f50 <_ZN11TFT_ILI93418drawCharEjiii+0x1270>
    6f4e:	f5 cf       	rjmp	.-22     	; 0x6f3a <_ZN11TFT_ILI93418drawCharEjiii+0x125a>
    6f50:	8e e4       	ldi	r24, 0x4E	; 78
    6f52:	90 e0       	ldi	r25, 0x00	; 0
    6f54:	2f a9       	ldd	r18, Y+55	; 0x37
    6f56:	dc 01       	movw	r26, r24
    6f58:	2c 93       	st	X, r18
    6f5a:	d4 cf       	rjmp	.-88     	; 0x6f04 <_ZN11TFT_ILI93418drawCharEjiii+0x1224>
    6f5c:	8d e4       	ldi	r24, 0x4D	; 77
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
    6f60:	fc 01       	movw	r30, r24
    6f62:	80 81       	ld	r24, Z
    6f64:	80 95       	com	r24
    6f66:	88 1f       	adc	r24, r24
    6f68:	88 27       	eor	r24, r24
    6f6a:	88 1f       	adc	r24, r24
    6f6c:	88 23       	and	r24, r24
    6f6e:	09 f0       	breq	.+2      	; 0x6f72 <_ZN11TFT_ILI93418drawCharEjiii+0x1292>
    6f70:	f5 cf       	rjmp	.-22     	; 0x6f5c <_ZN11TFT_ILI93418drawCharEjiii+0x127c>
    6f72:	8e e4       	ldi	r24, 0x4E	; 78
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	28 ad       	ldd	r18, Y+56	; 0x38
    6f78:	dc 01       	movw	r26, r24
    6f7a:	2c 93       	st	X, r18
    6f7c:	8d e4       	ldi	r24, 0x4D	; 77
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	fc 01       	movw	r30, r24
    6f82:	80 81       	ld	r24, Z
    6f84:	80 95       	com	r24
    6f86:	88 1f       	adc	r24, r24
    6f88:	88 27       	eor	r24, r24
    6f8a:	88 1f       	adc	r24, r24
    6f8c:	88 23       	and	r24, r24
    6f8e:	09 f0       	breq	.+2      	; 0x6f92 <_ZN11TFT_ILI93418drawCharEjiii+0x12b2>
    6f90:	f5 cf       	rjmp	.-22     	; 0x6f7c <_ZN11TFT_ILI93418drawCharEjiii+0x129c>
    6f92:	8e e4       	ldi	r24, 0x4E	; 78
    6f94:	90 e0       	ldi	r25, 0x00	; 0
    6f96:	2f a9       	ldd	r18, Y+55	; 0x37
    6f98:	dc 01       	movw	r26, r24
    6f9a:	2c 93       	st	X, r18
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	8d 5a       	subi	r24, 0xAD	; 173
    6fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    6fa2:	fc 01       	movw	r30, r24
    6fa4:	80 81       	ld	r24, Z
    6fa6:	91 81       	ldd	r25, Z+1	; 0x01
    6fa8:	dc 01       	movw	r26, r24
    6faa:	91 96       	adiw	r26, 0x21	; 33
    6fac:	8c 91       	ld	r24, X
    6fae:	88 2f       	mov	r24, r24
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	2d 89       	ldd	r18, Y+21	; 0x15
    6fb4:	3e 89       	ldd	r19, Y+22	; 0x16
    6fb6:	82 0f       	add	r24, r18
    6fb8:	93 1f       	adc	r25, r19
    6fba:	9e 8b       	std	Y+22, r25	; 0x16
    6fbc:	8d 8b       	std	Y+21, r24	; 0x15
    6fbe:	ce 01       	movw	r24, r28
    6fc0:	8d 5a       	subi	r24, 0xAD	; 173
    6fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc4:	fc 01       	movw	r30, r24
    6fc6:	80 81       	ld	r24, Z
    6fc8:	91 81       	ldd	r25, Z+1	; 0x01
    6fca:	dc 01       	movw	r26, r24
    6fcc:	91 96       	adiw	r26, 0x21	; 33
    6fce:	8c 91       	ld	r24, X
    6fd0:	48 2f       	mov	r20, r24
    6fd2:	50 e0       	ldi	r21, 0x00	; 0
    6fd4:	89 81       	ldd	r24, Y+1	; 0x01
    6fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd8:	48 9f       	mul	r20, r24
    6fda:	90 01       	movw	r18, r0
    6fdc:	49 9f       	mul	r20, r25
    6fde:	30 0d       	add	r19, r0
    6fe0:	58 9f       	mul	r21, r24
    6fe2:	30 0d       	add	r19, r0
    6fe4:	11 24       	eor	r1, r1
    6fe6:	ce 01       	movw	r24, r28
    6fe8:	89 5a       	subi	r24, 0xA9	; 169
    6fea:	9f 4f       	sbci	r25, 0xFF	; 255
    6fec:	fc 01       	movw	r30, r24
    6fee:	80 81       	ld	r24, Z
    6ff0:	91 81       	ldd	r25, Z+1	; 0x01
    6ff2:	28 0f       	add	r18, r24
    6ff4:	39 1f       	adc	r19, r25
    6ff6:	8d 89       	ldd	r24, Y+21	; 0x15
    6ff8:	9e 89       	ldd	r25, Y+22	; 0x16
    6ffa:	82 17       	cp	r24, r18
    6ffc:	93 07       	cpc	r25, r19
    6ffe:	0c f4       	brge	.+2      	; 0x7002 <_ZN11TFT_ILI93418drawCharEjiii+0x1322>
    7000:	35 cf       	rjmp	.-406    	; 0x6e6c <_ZN11TFT_ILI93418drawCharEjiii+0x118c>
    7002:	ce 01       	movw	r24, r28
    7004:	89 5a       	subi	r24, 0xA9	; 169
    7006:	9f 4f       	sbci	r25, 0xFF	; 255
    7008:	dc 01       	movw	r26, r24
    700a:	8d 91       	ld	r24, X+
    700c:	9c 91       	ld	r25, X
    700e:	9e 8b       	std	Y+22, r25	; 0x16
    7010:	8d 8b       	std	Y+21, r24	; 0x15
    7012:	ce 01       	movw	r24, r28
    7014:	8d 5a       	subi	r24, 0xAD	; 173
    7016:	9f 4f       	sbci	r25, 0xFF	; 255
    7018:	fc 01       	movw	r30, r24
    701a:	80 81       	ld	r24, Z
    701c:	91 81       	ldd	r25, Z+1	; 0x01
    701e:	dc 01       	movw	r26, r24
    7020:	91 96       	adiw	r26, 0x21	; 33
    7022:	8c 91       	ld	r24, X
    7024:	88 2f       	mov	r24, r24
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	2f 89       	ldd	r18, Y+23	; 0x17
    702a:	38 8d       	ldd	r19, Y+24	; 0x18
    702c:	82 0f       	add	r24, r18
    702e:	93 1f       	adc	r25, r19
    7030:	98 8f       	std	Y+24, r25	; 0x18
    7032:	8f 8b       	std	Y+23, r24	; 0x17
    7034:	1b cf       	rjmp	.-458    	; 0x6e6c <_ZN11TFT_ILI93418drawCharEjiii+0x118c>
    7036:	8b 85       	ldd	r24, Y+11	; 0x0b
    7038:	8f 5f       	subi	r24, 0xFF	; 255
    703a:	8b 87       	std	Y+11, r24	; 0x0b
    703c:	8b 85       	ldd	r24, Y+11	; 0x0b
    703e:	88 2f       	mov	r24, r24
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	29 8d       	ldd	r18, Y+25	; 0x19
    7044:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7046:	82 0f       	add	r24, r18
    7048:	93 1f       	adc	r25, r19
    704a:	9a 8f       	std	Y+26, r25	; 0x1a
    704c:	89 8f       	std	Y+25, r24	; 0x19
    704e:	68 ce       	rjmp	.-816    	; 0x6d20 <_ZN11TFT_ILI93418drawCharEjiii+0x1040>
    7050:	8d e4       	ldi	r24, 0x4D	; 77
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	fc 01       	movw	r30, r24
    7056:	80 81       	ld	r24, Z
    7058:	80 95       	com	r24
    705a:	88 1f       	adc	r24, r24
    705c:	88 27       	eor	r24, r24
    705e:	88 1f       	adc	r24, r24
    7060:	88 23       	and	r24, r24
    7062:	09 f0       	breq	.+2      	; 0x7066 <_ZN11TFT_ILI93418drawCharEjiii+0x1386>
    7064:	f5 cf       	rjmp	.-22     	; 0x7050 <_ZN11TFT_ILI93418drawCharEjiii+0x1370>
    7066:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    706a:	dc 01       	movw	r26, r24
    706c:	2c 91       	ld	r18, X
    706e:	24 60       	ori	r18, 0x04	; 4
    7070:	fc 01       	movw	r30, r24
    7072:	20 83       	st	Z, r18
    7074:	1b c1       	rjmp	.+566    	; 0x72ac <_ZN11TFT_ILI93418drawCharEjiii+0x15cc>
    7076:	ce 01       	movw	r24, r28
    7078:	87 5a       	subi	r24, 0xA7	; 167
    707a:	9f 4f       	sbci	r25, 0xFF	; 255
    707c:	dc 01       	movw	r26, r24
    707e:	2d 91       	ld	r18, X+
    7080:	3c 91       	ld	r19, X
    7082:	8b 81       	ldd	r24, Y+3	; 0x03
    7084:	9c 81       	ldd	r25, Y+4	; 0x04
    7086:	82 0f       	add	r24, r18
    7088:	93 1f       	adc	r25, r19
    708a:	fc 01       	movw	r30, r24
    708c:	31 97       	sbiw	r30, 0x01	; 1
    708e:	ce 01       	movw	r24, r28
    7090:	89 5a       	subi	r24, 0xA9	; 169
    7092:	9f 4f       	sbci	r25, 0xFF	; 255
    7094:	dc 01       	movw	r26, r24
    7096:	2d 91       	ld	r18, X+
    7098:	3c 91       	ld	r19, X
    709a:	89 81       	ldd	r24, Y+1	; 0x01
    709c:	9a 81       	ldd	r25, Y+2	; 0x02
    709e:	82 0f       	add	r24, r18
    70a0:	93 1f       	adc	r25, r19
    70a2:	9c 01       	movw	r18, r24
    70a4:	21 50       	subi	r18, 0x01	; 1
    70a6:	31 09       	sbc	r19, r1
    70a8:	ce 01       	movw	r24, r28
    70aa:	87 5a       	subi	r24, 0xA7	; 167
    70ac:	9f 4f       	sbci	r25, 0xFF	; 255
    70ae:	dc 01       	movw	r26, r24
    70b0:	4d 91       	ld	r20, X+
    70b2:	5c 91       	ld	r21, X
    70b4:	ce 01       	movw	r24, r28
    70b6:	89 5a       	subi	r24, 0xA9	; 169
    70b8:	9f 4f       	sbci	r25, 0xFF	; 255
    70ba:	dc 01       	movw	r26, r24
    70bc:	6d 91       	ld	r22, X+
    70be:	7c 91       	ld	r23, X
    70c0:	ce 01       	movw	r24, r28
    70c2:	8d 5a       	subi	r24, 0xAD	; 173
    70c4:	9f 4f       	sbci	r25, 0xFF	; 255
    70c6:	dc 01       	movw	r26, r24
    70c8:	8d 91       	ld	r24, X+
    70ca:	9c 91       	ld	r25, X
    70cc:	8f 01       	movw	r16, r30
    70ce:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN11TFT_ILI934113setAddrWindowEiiii>
    70d2:	8f 81       	ldd	r24, Y+7	; 0x07
    70d4:	98 85       	ldd	r25, Y+8	; 0x08
    70d6:	18 16       	cp	r1, r24
    70d8:	19 06       	cpc	r1, r25
    70da:	0c f0       	brlt	.+2      	; 0x70de <_ZN11TFT_ILI93418drawCharEjiii+0x13fe>
    70dc:	d3 c0       	rjmp	.+422    	; 0x7284 <_ZN11TFT_ILI93418drawCharEjiii+0x15a4>
    70de:	8d 81       	ldd	r24, Y+5	; 0x05
    70e0:	9e 81       	ldd	r25, Y+6	; 0x06
    70e2:	9c 01       	movw	r18, r24
    70e4:	2f 5f       	subi	r18, 0xFF	; 255
    70e6:	3f 4f       	sbci	r19, 0xFF	; 255
    70e8:	3e 83       	std	Y+6, r19	; 0x06
    70ea:	2d 83       	std	Y+5, r18	; 0x05
    70ec:	9e 01       	movw	r18, r28
    70ee:	2f 5b       	subi	r18, 0xBF	; 191
    70f0:	3f 4f       	sbci	r19, 0xFF	; 255
    70f2:	f9 01       	movw	r30, r18
    70f4:	91 83       	std	Z+1, r25	; 0x01
    70f6:	80 83       	st	Z, r24
    70f8:	ce 01       	movw	r24, r28
    70fa:	8f 5b       	subi	r24, 0xBF	; 191
    70fc:	9f 4f       	sbci	r25, 0xFF	; 255
    70fe:	dc 01       	movw	r26, r24
    7100:	8d 91       	ld	r24, X+
    7102:	9c 91       	ld	r25, X
    7104:	fc 01       	movw	r30, r24
    7106:	24 91       	lpm	r18, Z
    7108:	ce 01       	movw	r24, r28
    710a:	8d 5b       	subi	r24, 0xBD	; 189
    710c:	9f 4f       	sbci	r25, 0xFF	; 255
    710e:	dc 01       	movw	r26, r24
    7110:	2c 93       	st	X, r18
    7112:	ce 01       	movw	r24, r28
    7114:	8d 5b       	subi	r24, 0xBD	; 189
    7116:	9f 4f       	sbci	r25, 0xFF	; 255
    7118:	fc 01       	movw	r30, r24
    711a:	80 81       	ld	r24, Z
    711c:	8b 87       	std	Y+11, r24	; 0x0b
    711e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7120:	88 23       	and	r24, r24
    7122:	0c f0       	brlt	.+2      	; 0x7126 <_ZN11TFT_ILI93418drawCharEjiii+0x1446>
    7124:	59 c0       	rjmp	.+178    	; 0x71d8 <_ZN11TFT_ILI93418drawCharEjiii+0x14f8>
    7126:	8b 85       	ldd	r24, Y+11	; 0x0b
    7128:	8f 77       	andi	r24, 0x7F	; 127
    712a:	8b 87       	std	Y+11, r24	; 0x0b
    712c:	8b 85       	ldd	r24, Y+11	; 0x0b
    712e:	8f 5f       	subi	r24, 0xFF	; 255
    7130:	8b 87       	std	Y+11, r24	; 0x0b
    7132:	8b 85       	ldd	r24, Y+11	; 0x0b
    7134:	88 2f       	mov	r24, r24
    7136:	90 e0       	ldi	r25, 0x00	; 0
    7138:	2f 81       	ldd	r18, Y+7	; 0x07
    713a:	38 85       	ldd	r19, Y+8	; 0x08
    713c:	a9 01       	movw	r20, r18
    713e:	48 1b       	sub	r20, r24
    7140:	59 0b       	sbc	r21, r25
    7142:	ca 01       	movw	r24, r20
    7144:	98 87       	std	Y+8, r25	; 0x08
    7146:	8f 83       	std	Y+7, r24	; 0x07
    7148:	8b 85       	ldd	r24, Y+11	; 0x0b
    714a:	28 2f       	mov	r18, r24
    714c:	30 e0       	ldi	r19, 0x00	; 0
    714e:	ce 01       	movw	r24, r28
    7150:	8d 5a       	subi	r24, 0xAD	; 173
    7152:	9f 4f       	sbci	r25, 0xFF	; 255
    7154:	dc 01       	movw	r26, r24
    7156:	8d 91       	ld	r24, X+
    7158:	9c 91       	ld	r25, X
    715a:	fc 01       	movw	r30, r24
    715c:	46 89       	ldd	r20, Z+22	; 0x16
    715e:	57 89       	ldd	r21, Z+23	; 0x17
    7160:	ce 01       	movw	r24, r28
    7162:	85 5b       	subi	r24, 0xB5	; 181
    7164:	9f 4f       	sbci	r25, 0xFF	; 255
    7166:	dc 01       	movw	r26, r24
    7168:	4d 93       	st	X+, r20
    716a:	5c 93       	st	X, r21
    716c:	ce 01       	movw	r24, r28
    716e:	83 5b       	subi	r24, 0xB3	; 179
    7170:	9f 4f       	sbci	r25, 0xFF	; 255
    7172:	fc 01       	movw	r30, r24
    7174:	31 83       	std	Z+1, r19	; 0x01
    7176:	20 83       	st	Z, r18
    7178:	ce 01       	movw	r24, r28
    717a:	85 5b       	subi	r24, 0xB5	; 181
    717c:	9f 4f       	sbci	r25, 0xFF	; 255
    717e:	dc 01       	movw	r26, r24
    7180:	2c 91       	ld	r18, X
    7182:	ce 01       	movw	r24, r28
    7184:	85 5b       	subi	r24, 0xB5	; 181
    7186:	9f 4f       	sbci	r25, 0xFF	; 255
    7188:	fc 01       	movw	r30, r24
    718a:	80 81       	ld	r24, Z
    718c:	91 81       	ldd	r25, Z+1	; 0x01
    718e:	89 2f       	mov	r24, r25
    7190:	99 27       	eor	r25, r25
    7192:	38 2f       	mov	r19, r24
    7194:	ce 01       	movw	r24, r28
    7196:	83 5b       	subi	r24, 0xB3	; 179
    7198:	9f 4f       	sbci	r25, 0xFF	; 255
    719a:	dc 01       	movw	r26, r24
    719c:	8d 91       	ld	r24, X+
    719e:	9c 91       	ld	r25, X
    71a0:	00 97       	sbiw	r24, 0x00	; 0
    71a2:	71 f0       	breq	.+28     	; 0x71c0 <_ZN11TFT_ILI93418drawCharEjiii+0x14e0>
    71a4:	3e bd       	out	0x2e, r19	; 46
    71a6:	02 d0       	rcall	.+4      	; 0x71ac <_ZN11TFT_ILI93418drawCharEjiii+0x14cc>
    71a8:	01 d0       	rcall	.+2      	; 0x71ac <_ZN11TFT_ILI93418drawCharEjiii+0x14cc>
    71aa:	01 c0       	rjmp	.+2      	; 0x71ae <_ZN11TFT_ILI93418drawCharEjiii+0x14ce>
    71ac:	08 95       	ret
    71ae:	00 00       	nop
    71b0:	2e bd       	out	0x2e, r18	; 46
    71b2:	00 96       	adiw	r24, 0x00	; 0
    71b4:	00 96       	adiw	r24, 0x00	; 0
    71b6:	01 d0       	rcall	.+2      	; 0x71ba <_ZN11TFT_ILI93418drawCharEjiii+0x14da>
    71b8:	01 c0       	rjmp	.+2      	; 0x71bc <_ZN11TFT_ILI93418drawCharEjiii+0x14dc>
    71ba:	08 95       	ret
    71bc:	01 97       	sbiw	r24, 0x01	; 1
    71be:	91 f7       	brne	.-28     	; 0x71a4 <_ZN11TFT_ILI93418drawCharEjiii+0x14c4>
    71c0:	9e 01       	movw	r18, r28
    71c2:	21 5b       	subi	r18, 0xB1	; 177
    71c4:	3f 4f       	sbci	r19, 0xFF	; 255
    71c6:	f9 01       	movw	r30, r18
    71c8:	40 83       	st	Z, r20
    71ca:	9e 01       	movw	r18, r28
    71cc:	23 5b       	subi	r18, 0xB3	; 179
    71ce:	3f 4f       	sbci	r19, 0xFF	; 255
    71d0:	d9 01       	movw	r26, r18
    71d2:	8d 93       	st	X+, r24
    71d4:	9c 93       	st	X, r25
    71d6:	7d cf       	rjmp	.-262    	; 0x70d2 <_ZN11TFT_ILI93418drawCharEjiii+0x13f2>
    71d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    71da:	8f 5f       	subi	r24, 0xFF	; 255
    71dc:	8b 87       	std	Y+11, r24	; 0x0b
    71de:	8b 85       	ldd	r24, Y+11	; 0x0b
    71e0:	88 2f       	mov	r24, r24
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	2f 81       	ldd	r18, Y+7	; 0x07
    71e6:	38 85       	ldd	r19, Y+8	; 0x08
    71e8:	f9 01       	movw	r30, r18
    71ea:	e8 1b       	sub	r30, r24
    71ec:	f9 0b       	sbc	r31, r25
    71ee:	cf 01       	movw	r24, r30
    71f0:	98 87       	std	Y+8, r25	; 0x08
    71f2:	8f 83       	std	Y+7, r24	; 0x07
    71f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    71f6:	28 2f       	mov	r18, r24
    71f8:	30 e0       	ldi	r19, 0x00	; 0
    71fa:	ce 01       	movw	r24, r28
    71fc:	8d 5a       	subi	r24, 0xAD	; 173
    71fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7200:	dc 01       	movw	r26, r24
    7202:	8d 91       	ld	r24, X+
    7204:	9c 91       	ld	r25, X
    7206:	fc 01       	movw	r30, r24
    7208:	40 8d       	ldd	r20, Z+24	; 0x18
    720a:	51 8d       	ldd	r21, Z+25	; 0x19
    720c:	ce 01       	movw	r24, r28
    720e:	8c 5b       	subi	r24, 0xBC	; 188
    7210:	9f 4f       	sbci	r25, 0xFF	; 255
    7212:	dc 01       	movw	r26, r24
    7214:	4d 93       	st	X+, r20
    7216:	5c 93       	st	X, r21
    7218:	ce 01       	movw	r24, r28
    721a:	80 5b       	subi	r24, 0xB0	; 176
    721c:	9f 4f       	sbci	r25, 0xFF	; 255
    721e:	fc 01       	movw	r30, r24
    7220:	31 83       	std	Z+1, r19	; 0x01
    7222:	20 83       	st	Z, r18
    7224:	ce 01       	movw	r24, r28
    7226:	8c 5b       	subi	r24, 0xBC	; 188
    7228:	9f 4f       	sbci	r25, 0xFF	; 255
    722a:	dc 01       	movw	r26, r24
    722c:	2c 91       	ld	r18, X
    722e:	ce 01       	movw	r24, r28
    7230:	8c 5b       	subi	r24, 0xBC	; 188
    7232:	9f 4f       	sbci	r25, 0xFF	; 255
    7234:	fc 01       	movw	r30, r24
    7236:	80 81       	ld	r24, Z
    7238:	91 81       	ldd	r25, Z+1	; 0x01
    723a:	89 2f       	mov	r24, r25
    723c:	99 27       	eor	r25, r25
    723e:	38 2f       	mov	r19, r24
    7240:	ce 01       	movw	r24, r28
    7242:	80 5b       	subi	r24, 0xB0	; 176
    7244:	9f 4f       	sbci	r25, 0xFF	; 255
    7246:	dc 01       	movw	r26, r24
    7248:	8d 91       	ld	r24, X+
    724a:	9c 91       	ld	r25, X
    724c:	00 97       	sbiw	r24, 0x00	; 0
    724e:	71 f0       	breq	.+28     	; 0x726c <_ZN11TFT_ILI93418drawCharEjiii+0x158c>
    7250:	3e bd       	out	0x2e, r19	; 46
    7252:	02 d0       	rcall	.+4      	; 0x7258 <_ZN11TFT_ILI93418drawCharEjiii+0x1578>
    7254:	01 d0       	rcall	.+2      	; 0x7258 <_ZN11TFT_ILI93418drawCharEjiii+0x1578>
    7256:	01 c0       	rjmp	.+2      	; 0x725a <_ZN11TFT_ILI93418drawCharEjiii+0x157a>
    7258:	08 95       	ret
    725a:	00 00       	nop
    725c:	2e bd       	out	0x2e, r18	; 46
    725e:	00 96       	adiw	r24, 0x00	; 0
    7260:	00 96       	adiw	r24, 0x00	; 0
    7262:	01 d0       	rcall	.+2      	; 0x7266 <_ZN11TFT_ILI93418drawCharEjiii+0x1586>
    7264:	01 c0       	rjmp	.+2      	; 0x7268 <_ZN11TFT_ILI93418drawCharEjiii+0x1588>
    7266:	08 95       	ret
    7268:	01 97       	sbiw	r24, 0x01	; 1
    726a:	91 f7       	brne	.-28     	; 0x7250 <_ZN11TFT_ILI93418drawCharEjiii+0x1570>
    726c:	9e 01       	movw	r18, r28
    726e:	2e 5a       	subi	r18, 0xAE	; 174
    7270:	3f 4f       	sbci	r19, 0xFF	; 255
    7272:	f9 01       	movw	r30, r18
    7274:	40 83       	st	Z, r20
    7276:	9e 01       	movw	r18, r28
    7278:	20 5b       	subi	r18, 0xB0	; 176
    727a:	3f 4f       	sbci	r19, 0xFF	; 255
    727c:	d9 01       	movw	r26, r18
    727e:	8d 93       	st	X+, r24
    7280:	9c 93       	st	X, r25
    7282:	27 cf       	rjmp	.-434    	; 0x70d2 <_ZN11TFT_ILI93418drawCharEjiii+0x13f2>
    7284:	8d e4       	ldi	r24, 0x4D	; 77
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	fc 01       	movw	r30, r24
    728a:	80 81       	ld	r24, Z
    728c:	80 95       	com	r24
    728e:	88 1f       	adc	r24, r24
    7290:	88 27       	eor	r24, r24
    7292:	88 1f       	adc	r24, r24
    7294:	88 23       	and	r24, r24
    7296:	09 f0       	breq	.+2      	; 0x729a <_ZN11TFT_ILI93418drawCharEjiii+0x15ba>
    7298:	f5 cf       	rjmp	.-22     	; 0x7284 <_ZN11TFT_ILI93418drawCharEjiii+0x15a4>
    729a:	0e 94 35 23 	call	0x466a	; 0x466a <_ZN18__gen_struct_PORTL1rEv>
    729e:	dc 01       	movw	r26, r24
    72a0:	2c 91       	ld	r18, X
    72a2:	24 60       	ori	r18, 0x04	; 4
    72a4:	fc 01       	movw	r30, r24
    72a6:	20 83       	st	Z, r18
    72a8:	01 c0       	rjmp	.+2      	; 0x72ac <_ZN11TFT_ILI93418drawCharEjiii+0x15cc>
    72aa:	00 00       	nop
    72ac:	ce 01       	movw	r24, r28
    72ae:	8d 5a       	subi	r24, 0xAD	; 173
    72b0:	9f 4f       	sbci	r25, 0xFF	; 255
    72b2:	dc 01       	movw	r26, r24
    72b4:	8d 91       	ld	r24, X+
    72b6:	9c 91       	ld	r25, X
    72b8:	fc 01       	movw	r30, r24
    72ba:	81 a1       	ldd	r24, Z+33	; 0x21
    72bc:	48 2f       	mov	r20, r24
    72be:	50 e0       	ldi	r21, 0x00	; 0
    72c0:	29 81       	ldd	r18, Y+1	; 0x01
    72c2:	3a 81       	ldd	r19, Y+2	; 0x02
    72c4:	42 9f       	mul	r20, r18
    72c6:	c0 01       	movw	r24, r0
    72c8:	43 9f       	mul	r20, r19
    72ca:	90 0d       	add	r25, r0
    72cc:	52 9f       	mul	r21, r18
    72ce:	90 0d       	add	r25, r0
    72d0:	11 24       	eor	r1, r1
    72d2:	c2 5a       	subi	r28, 0xA2	; 162
    72d4:	df 4f       	sbci	r29, 0xFF	; 255
    72d6:	0f b6       	in	r0, 0x3f	; 63
    72d8:	f8 94       	cli
    72da:	de bf       	out	0x3e, r29	; 62
    72dc:	0f be       	out	0x3f, r0	; 63
    72de:	cd bf       	out	0x3d, r28	; 61
    72e0:	df 91       	pop	r29
    72e2:	cf 91       	pop	r28
    72e4:	1f 91       	pop	r17
    72e6:	0f 91       	pop	r16
    72e8:	ff 90       	pop	r15
    72ea:	ef 90       	pop	r14
    72ec:	cf 90       	pop	r12
    72ee:	08 95       	ret

000072f0 <__fixunssfsi>:
    72f0:	5b d0       	rcall	.+182    	; 0x73a8 <__fp_splitA>
    72f2:	88 f0       	brcs	.+34     	; 0x7316 <__fixunssfsi+0x26>
    72f4:	9f 57       	subi	r25, 0x7F	; 127
    72f6:	90 f0       	brcs	.+36     	; 0x731c <__fixunssfsi+0x2c>
    72f8:	b9 2f       	mov	r27, r25
    72fa:	99 27       	eor	r25, r25
    72fc:	b7 51       	subi	r27, 0x17	; 23
    72fe:	a0 f0       	brcs	.+40     	; 0x7328 <__fixunssfsi+0x38>
    7300:	d1 f0       	breq	.+52     	; 0x7336 <__fixunssfsi+0x46>
    7302:	66 0f       	add	r22, r22
    7304:	77 1f       	adc	r23, r23
    7306:	88 1f       	adc	r24, r24
    7308:	99 1f       	adc	r25, r25
    730a:	1a f0       	brmi	.+6      	; 0x7312 <__fixunssfsi+0x22>
    730c:	ba 95       	dec	r27
    730e:	c9 f7       	brne	.-14     	; 0x7302 <__fixunssfsi+0x12>
    7310:	12 c0       	rjmp	.+36     	; 0x7336 <__fixunssfsi+0x46>
    7312:	b1 30       	cpi	r27, 0x01	; 1
    7314:	81 f0       	breq	.+32     	; 0x7336 <__fixunssfsi+0x46>
    7316:	62 d0       	rcall	.+196    	; 0x73dc <__fp_zero>
    7318:	b1 e0       	ldi	r27, 0x01	; 1
    731a:	08 95       	ret
    731c:	5f c0       	rjmp	.+190    	; 0x73dc <__fp_zero>
    731e:	67 2f       	mov	r22, r23
    7320:	78 2f       	mov	r23, r24
    7322:	88 27       	eor	r24, r24
    7324:	b8 5f       	subi	r27, 0xF8	; 248
    7326:	39 f0       	breq	.+14     	; 0x7336 <__fixunssfsi+0x46>
    7328:	b9 3f       	cpi	r27, 0xF9	; 249
    732a:	cc f3       	brlt	.-14     	; 0x731e <__fixunssfsi+0x2e>
    732c:	86 95       	lsr	r24
    732e:	77 95       	ror	r23
    7330:	67 95       	ror	r22
    7332:	b3 95       	inc	r27
    7334:	d9 f7       	brne	.-10     	; 0x732c <__fixunssfsi+0x3c>
    7336:	3e f4       	brtc	.+14     	; 0x7346 <__fixunssfsi+0x56>
    7338:	90 95       	com	r25
    733a:	80 95       	com	r24
    733c:	70 95       	com	r23
    733e:	61 95       	neg	r22
    7340:	7f 4f       	sbci	r23, 0xFF	; 255
    7342:	8f 4f       	sbci	r24, 0xFF	; 255
    7344:	9f 4f       	sbci	r25, 0xFF	; 255
    7346:	08 95       	ret

00007348 <__fp_inf>:
    7348:	97 f9       	bld	r25, 7
    734a:	9f 67       	ori	r25, 0x7F	; 127
    734c:	80 e8       	ldi	r24, 0x80	; 128
    734e:	70 e0       	ldi	r23, 0x00	; 0
    7350:	60 e0       	ldi	r22, 0x00	; 0
    7352:	08 95       	ret

00007354 <__fp_nan>:
    7354:	9f ef       	ldi	r25, 0xFF	; 255
    7356:	80 ec       	ldi	r24, 0xC0	; 192
    7358:	08 95       	ret

0000735a <__fp_pscA>:
    735a:	00 24       	eor	r0, r0
    735c:	0a 94       	dec	r0
    735e:	16 16       	cp	r1, r22
    7360:	17 06       	cpc	r1, r23
    7362:	18 06       	cpc	r1, r24
    7364:	09 06       	cpc	r0, r25
    7366:	08 95       	ret

00007368 <__fp_pscB>:
    7368:	00 24       	eor	r0, r0
    736a:	0a 94       	dec	r0
    736c:	12 16       	cp	r1, r18
    736e:	13 06       	cpc	r1, r19
    7370:	14 06       	cpc	r1, r20
    7372:	05 06       	cpc	r0, r21
    7374:	08 95       	ret

00007376 <__fp_round>:
    7376:	09 2e       	mov	r0, r25
    7378:	03 94       	inc	r0
    737a:	00 0c       	add	r0, r0
    737c:	11 f4       	brne	.+4      	; 0x7382 <__fp_round+0xc>
    737e:	88 23       	and	r24, r24
    7380:	52 f0       	brmi	.+20     	; 0x7396 <__fp_round+0x20>
    7382:	bb 0f       	add	r27, r27
    7384:	40 f4       	brcc	.+16     	; 0x7396 <__fp_round+0x20>
    7386:	bf 2b       	or	r27, r31
    7388:	11 f4       	brne	.+4      	; 0x738e <__fp_round+0x18>
    738a:	60 ff       	sbrs	r22, 0
    738c:	04 c0       	rjmp	.+8      	; 0x7396 <__fp_round+0x20>
    738e:	6f 5f       	subi	r22, 0xFF	; 255
    7390:	7f 4f       	sbci	r23, 0xFF	; 255
    7392:	8f 4f       	sbci	r24, 0xFF	; 255
    7394:	9f 4f       	sbci	r25, 0xFF	; 255
    7396:	08 95       	ret

00007398 <__fp_split3>:
    7398:	57 fd       	sbrc	r21, 7
    739a:	90 58       	subi	r25, 0x80	; 128
    739c:	44 0f       	add	r20, r20
    739e:	55 1f       	adc	r21, r21
    73a0:	59 f0       	breq	.+22     	; 0x73b8 <__fp_splitA+0x10>
    73a2:	5f 3f       	cpi	r21, 0xFF	; 255
    73a4:	71 f0       	breq	.+28     	; 0x73c2 <__fp_splitA+0x1a>
    73a6:	47 95       	ror	r20

000073a8 <__fp_splitA>:
    73a8:	88 0f       	add	r24, r24
    73aa:	97 fb       	bst	r25, 7
    73ac:	99 1f       	adc	r25, r25
    73ae:	61 f0       	breq	.+24     	; 0x73c8 <__fp_splitA+0x20>
    73b0:	9f 3f       	cpi	r25, 0xFF	; 255
    73b2:	79 f0       	breq	.+30     	; 0x73d2 <__fp_splitA+0x2a>
    73b4:	87 95       	ror	r24
    73b6:	08 95       	ret
    73b8:	12 16       	cp	r1, r18
    73ba:	13 06       	cpc	r1, r19
    73bc:	14 06       	cpc	r1, r20
    73be:	55 1f       	adc	r21, r21
    73c0:	f2 cf       	rjmp	.-28     	; 0x73a6 <__fp_split3+0xe>
    73c2:	46 95       	lsr	r20
    73c4:	f1 df       	rcall	.-30     	; 0x73a8 <__fp_splitA>
    73c6:	08 c0       	rjmp	.+16     	; 0x73d8 <__fp_splitA+0x30>
    73c8:	16 16       	cp	r1, r22
    73ca:	17 06       	cpc	r1, r23
    73cc:	18 06       	cpc	r1, r24
    73ce:	99 1f       	adc	r25, r25
    73d0:	f1 cf       	rjmp	.-30     	; 0x73b4 <__fp_splitA+0xc>
    73d2:	86 95       	lsr	r24
    73d4:	71 05       	cpc	r23, r1
    73d6:	61 05       	cpc	r22, r1
    73d8:	08 94       	sec
    73da:	08 95       	ret

000073dc <__fp_zero>:
    73dc:	e8 94       	clt

000073de <__fp_szero>:
    73de:	bb 27       	eor	r27, r27
    73e0:	66 27       	eor	r22, r22
    73e2:	77 27       	eor	r23, r23
    73e4:	cb 01       	movw	r24, r22
    73e6:	97 f9       	bld	r25, 7
    73e8:	08 95       	ret

000073ea <__gesf2>:
    73ea:	66 d0       	rcall	.+204    	; 0x74b8 <__fp_cmp>
    73ec:	08 f4       	brcc	.+2      	; 0x73f0 <__gesf2+0x6>
    73ee:	8f ef       	ldi	r24, 0xFF	; 255
    73f0:	08 95       	ret

000073f2 <__mulsf3>:
    73f2:	0b d0       	rcall	.+22     	; 0x740a <__mulsf3x>
    73f4:	c0 cf       	rjmp	.-128    	; 0x7376 <__fp_round>
    73f6:	b1 df       	rcall	.-158    	; 0x735a <__fp_pscA>
    73f8:	28 f0       	brcs	.+10     	; 0x7404 <__mulsf3+0x12>
    73fa:	b6 df       	rcall	.-148    	; 0x7368 <__fp_pscB>
    73fc:	18 f0       	brcs	.+6      	; 0x7404 <__mulsf3+0x12>
    73fe:	95 23       	and	r25, r21
    7400:	09 f0       	breq	.+2      	; 0x7404 <__mulsf3+0x12>
    7402:	a2 cf       	rjmp	.-188    	; 0x7348 <__fp_inf>
    7404:	a7 cf       	rjmp	.-178    	; 0x7354 <__fp_nan>
    7406:	11 24       	eor	r1, r1
    7408:	ea cf       	rjmp	.-44     	; 0x73de <__fp_szero>

0000740a <__mulsf3x>:
    740a:	c6 df       	rcall	.-116    	; 0x7398 <__fp_split3>
    740c:	a0 f3       	brcs	.-24     	; 0x73f6 <__mulsf3+0x4>

0000740e <__mulsf3_pse>:
    740e:	95 9f       	mul	r25, r21
    7410:	d1 f3       	breq	.-12     	; 0x7406 <__mulsf3+0x14>
    7412:	95 0f       	add	r25, r21
    7414:	50 e0       	ldi	r21, 0x00	; 0
    7416:	55 1f       	adc	r21, r21
    7418:	62 9f       	mul	r22, r18
    741a:	f0 01       	movw	r30, r0
    741c:	72 9f       	mul	r23, r18
    741e:	bb 27       	eor	r27, r27
    7420:	f0 0d       	add	r31, r0
    7422:	b1 1d       	adc	r27, r1
    7424:	63 9f       	mul	r22, r19
    7426:	aa 27       	eor	r26, r26
    7428:	f0 0d       	add	r31, r0
    742a:	b1 1d       	adc	r27, r1
    742c:	aa 1f       	adc	r26, r26
    742e:	64 9f       	mul	r22, r20
    7430:	66 27       	eor	r22, r22
    7432:	b0 0d       	add	r27, r0
    7434:	a1 1d       	adc	r26, r1
    7436:	66 1f       	adc	r22, r22
    7438:	82 9f       	mul	r24, r18
    743a:	22 27       	eor	r18, r18
    743c:	b0 0d       	add	r27, r0
    743e:	a1 1d       	adc	r26, r1
    7440:	62 1f       	adc	r22, r18
    7442:	73 9f       	mul	r23, r19
    7444:	b0 0d       	add	r27, r0
    7446:	a1 1d       	adc	r26, r1
    7448:	62 1f       	adc	r22, r18
    744a:	83 9f       	mul	r24, r19
    744c:	a0 0d       	add	r26, r0
    744e:	61 1d       	adc	r22, r1
    7450:	22 1f       	adc	r18, r18
    7452:	74 9f       	mul	r23, r20
    7454:	33 27       	eor	r19, r19
    7456:	a0 0d       	add	r26, r0
    7458:	61 1d       	adc	r22, r1
    745a:	23 1f       	adc	r18, r19
    745c:	84 9f       	mul	r24, r20
    745e:	60 0d       	add	r22, r0
    7460:	21 1d       	adc	r18, r1
    7462:	82 2f       	mov	r24, r18
    7464:	76 2f       	mov	r23, r22
    7466:	6a 2f       	mov	r22, r26
    7468:	11 24       	eor	r1, r1
    746a:	9f 57       	subi	r25, 0x7F	; 127
    746c:	50 40       	sbci	r21, 0x00	; 0
    746e:	8a f0       	brmi	.+34     	; 0x7492 <__mulsf3_pse+0x84>
    7470:	e1 f0       	breq	.+56     	; 0x74aa <__mulsf3_pse+0x9c>
    7472:	88 23       	and	r24, r24
    7474:	4a f0       	brmi	.+18     	; 0x7488 <__mulsf3_pse+0x7a>
    7476:	ee 0f       	add	r30, r30
    7478:	ff 1f       	adc	r31, r31
    747a:	bb 1f       	adc	r27, r27
    747c:	66 1f       	adc	r22, r22
    747e:	77 1f       	adc	r23, r23
    7480:	88 1f       	adc	r24, r24
    7482:	91 50       	subi	r25, 0x01	; 1
    7484:	50 40       	sbci	r21, 0x00	; 0
    7486:	a9 f7       	brne	.-22     	; 0x7472 <__mulsf3_pse+0x64>
    7488:	9e 3f       	cpi	r25, 0xFE	; 254
    748a:	51 05       	cpc	r21, r1
    748c:	70 f0       	brcs	.+28     	; 0x74aa <__mulsf3_pse+0x9c>
    748e:	5c cf       	rjmp	.-328    	; 0x7348 <__fp_inf>
    7490:	a6 cf       	rjmp	.-180    	; 0x73de <__fp_szero>
    7492:	5f 3f       	cpi	r21, 0xFF	; 255
    7494:	ec f3       	brlt	.-6      	; 0x7490 <__mulsf3_pse+0x82>
    7496:	98 3e       	cpi	r25, 0xE8	; 232
    7498:	dc f3       	brlt	.-10     	; 0x7490 <__mulsf3_pse+0x82>
    749a:	86 95       	lsr	r24
    749c:	77 95       	ror	r23
    749e:	67 95       	ror	r22
    74a0:	b7 95       	ror	r27
    74a2:	f7 95       	ror	r31
    74a4:	e7 95       	ror	r30
    74a6:	9f 5f       	subi	r25, 0xFF	; 255
    74a8:	c1 f7       	brne	.-16     	; 0x749a <__mulsf3_pse+0x8c>
    74aa:	fe 2b       	or	r31, r30
    74ac:	88 0f       	add	r24, r24
    74ae:	91 1d       	adc	r25, r1
    74b0:	96 95       	lsr	r25
    74b2:	87 95       	ror	r24
    74b4:	97 f9       	bld	r25, 7
    74b6:	08 95       	ret

000074b8 <__fp_cmp>:
    74b8:	99 0f       	add	r25, r25
    74ba:	00 08       	sbc	r0, r0
    74bc:	55 0f       	add	r21, r21
    74be:	aa 0b       	sbc	r26, r26
    74c0:	e0 e8       	ldi	r30, 0x80	; 128
    74c2:	fe ef       	ldi	r31, 0xFE	; 254
    74c4:	16 16       	cp	r1, r22
    74c6:	17 06       	cpc	r1, r23
    74c8:	e8 07       	cpc	r30, r24
    74ca:	f9 07       	cpc	r31, r25
    74cc:	c0 f0       	brcs	.+48     	; 0x74fe <__fp_cmp+0x46>
    74ce:	12 16       	cp	r1, r18
    74d0:	13 06       	cpc	r1, r19
    74d2:	e4 07       	cpc	r30, r20
    74d4:	f5 07       	cpc	r31, r21
    74d6:	98 f0       	brcs	.+38     	; 0x74fe <__fp_cmp+0x46>
    74d8:	62 1b       	sub	r22, r18
    74da:	73 0b       	sbc	r23, r19
    74dc:	84 0b       	sbc	r24, r20
    74de:	95 0b       	sbc	r25, r21
    74e0:	39 f4       	brne	.+14     	; 0x74f0 <__fp_cmp+0x38>
    74e2:	0a 26       	eor	r0, r26
    74e4:	61 f0       	breq	.+24     	; 0x74fe <__fp_cmp+0x46>
    74e6:	23 2b       	or	r18, r19
    74e8:	24 2b       	or	r18, r20
    74ea:	25 2b       	or	r18, r21
    74ec:	21 f4       	brne	.+8      	; 0x74f6 <__fp_cmp+0x3e>
    74ee:	08 95       	ret
    74f0:	0a 26       	eor	r0, r26
    74f2:	09 f4       	brne	.+2      	; 0x74f6 <__fp_cmp+0x3e>
    74f4:	a1 40       	sbci	r26, 0x01	; 1
    74f6:	a6 95       	lsr	r26
    74f8:	8f ef       	ldi	r24, 0xFF	; 255
    74fa:	81 1d       	adc	r24, r1
    74fc:	81 1d       	adc	r24, r1
    74fe:	08 95       	ret

00007500 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    7500:	cf 93       	push	r28
    7502:	df 93       	push	r29
    7504:	cd b7       	in	r28, 0x3d	; 61
    7506:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    7508:	0e 94 c1 64 	call	0xc982	; 0xc982 <abort>

0000750c <_ZL12__iCliRetValv>:
  cbi(*_ucsrb, RXCIE0);
  cbi(*_ucsrb, UDRIE0);
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}
    750c:	cf 93       	push	r28
    750e:	df 93       	push	r29
    7510:	cd b7       	in	r28, 0x3d	; 61
    7512:	de b7       	in	r29, 0x3e	; 62
    7514:	f8 94       	cli
    7516:	81 e0       	ldi	r24, 0x01	; 1
    7518:	df 91       	pop	r29
    751a:	cf 91       	pop	r28
    751c:	08 95       	ret

0000751e <_ZL10__iRestorePKh>:
    751e:	cf 93       	push	r28
    7520:	df 93       	push	r29
    7522:	1f 92       	push	r1
    7524:	1f 92       	push	r1
    7526:	cd b7       	in	r28, 0x3d	; 61
    7528:	de b7       	in	r29, 0x3e	; 62
    752a:	9a 83       	std	Y+2, r25	; 0x02
    752c:	89 83       	std	Y+1, r24	; 0x01
    752e:	8f e5       	ldi	r24, 0x5F	; 95
    7530:	90 e0       	ldi	r25, 0x00	; 0
    7532:	29 81       	ldd	r18, Y+1	; 0x01
    7534:	3a 81       	ldd	r19, Y+2	; 0x02
    7536:	f9 01       	movw	r30, r18
    7538:	20 81       	ld	r18, Z
    753a:	fc 01       	movw	r30, r24
    753c:	20 83       	st	Z, r18
    753e:	00 00       	nop
    7540:	0f 90       	pop	r0
    7542:	0f 90       	pop	r0
    7544:	df 91       	pop	r29
    7546:	cf 91       	pop	r28
    7548:	08 95       	ret

0000754a <_Z14serialEventRunv>:
    754a:	cf 93       	push	r28
    754c:	df 93       	push	r29
    754e:	cd b7       	in	r28, 0x3d	; 61
    7550:	de b7       	in	r29, 0x3e	; 62
    7552:	83 e6       	ldi	r24, 0x63	; 99
    7554:	9f e3       	ldi	r25, 0x3F	; 63
    7556:	89 2b       	or	r24, r25
    7558:	49 f0       	breq	.+18     	; 0x756c <_Z14serialEventRunv+0x22>
    755a:	80 e0       	ldi	r24, 0x00	; 0
    755c:	90 e0       	ldi	r25, 0x00	; 0
    755e:	89 2b       	or	r24, r25
    7560:	29 f0       	breq	.+10     	; 0x756c <_Z14serialEventRunv+0x22>
    7562:	b1 d4       	rcall	.+2402   	; 0x7ec6 <_Z17Serial0_availablev>
    7564:	88 23       	and	r24, r24
    7566:	11 f0       	breq	.+4      	; 0x756c <_Z14serialEventRunv+0x22>
    7568:	81 e0       	ldi	r24, 0x01	; 1
    756a:	01 c0       	rjmp	.+2      	; 0x756e <_Z14serialEventRunv+0x24>
    756c:	80 e0       	ldi	r24, 0x00	; 0
    756e:	88 23       	and	r24, r24
    7570:	11 f0       	breq	.+4      	; 0x7576 <_Z14serialEventRunv+0x2c>
    7572:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    7576:	81 e2       	ldi	r24, 0x21	; 33
    7578:	90 e4       	ldi	r25, 0x40	; 64
    757a:	89 2b       	or	r24, r25
    757c:	49 f0       	breq	.+18     	; 0x7590 <_Z14serialEventRunv+0x46>
    757e:	80 e0       	ldi	r24, 0x00	; 0
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	89 2b       	or	r24, r25
    7584:	29 f0       	breq	.+10     	; 0x7590 <_Z14serialEventRunv+0x46>
    7586:	5d d5       	rcall	.+2746   	; 0x8042 <_Z17Serial1_availablev>
    7588:	88 23       	and	r24, r24
    758a:	11 f0       	breq	.+4      	; 0x7590 <_Z14serialEventRunv+0x46>
    758c:	81 e0       	ldi	r24, 0x01	; 1
    758e:	01 c0       	rjmp	.+2      	; 0x7592 <_Z14serialEventRunv+0x48>
    7590:	80 e0       	ldi	r24, 0x00	; 0
    7592:	88 23       	and	r24, r24
    7594:	11 f0       	breq	.+4      	; 0x759a <_Z14serialEventRunv+0x50>
    7596:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    759a:	80 e0       	ldi	r24, 0x00	; 0
    759c:	90 e0       	ldi	r25, 0x00	; 0
    759e:	89 2b       	or	r24, r25
    75a0:	51 f0       	breq	.+20     	; 0x75b6 <_Z14serialEventRunv+0x6c>
    75a2:	80 e0       	ldi	r24, 0x00	; 0
    75a4:	90 e0       	ldi	r25, 0x00	; 0
    75a6:	89 2b       	or	r24, r25
    75a8:	31 f0       	breq	.+12     	; 0x75b6 <_Z14serialEventRunv+0x6c>
    75aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    75ae:	88 23       	and	r24, r24
    75b0:	11 f0       	breq	.+4      	; 0x75b6 <_Z14serialEventRunv+0x6c>
    75b2:	81 e0       	ldi	r24, 0x01	; 1
    75b4:	01 c0       	rjmp	.+2      	; 0x75b8 <_Z14serialEventRunv+0x6e>
    75b6:	80 e0       	ldi	r24, 0x00	; 0
    75b8:	88 23       	and	r24, r24
    75ba:	11 f0       	breq	.+4      	; 0x75c0 <_Z14serialEventRunv+0x76>
    75bc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    75c0:	80 e0       	ldi	r24, 0x00	; 0
    75c2:	90 e0       	ldi	r25, 0x00	; 0
    75c4:	89 2b       	or	r24, r25
    75c6:	51 f0       	breq	.+20     	; 0x75dc <_Z14serialEventRunv+0x92>
    75c8:	80 e0       	ldi	r24, 0x00	; 0
    75ca:	90 e0       	ldi	r25, 0x00	; 0
    75cc:	89 2b       	or	r24, r25
    75ce:	31 f0       	breq	.+12     	; 0x75dc <_Z14serialEventRunv+0x92>
    75d0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    75d4:	88 23       	and	r24, r24
    75d6:	11 f0       	breq	.+4      	; 0x75dc <_Z14serialEventRunv+0x92>
    75d8:	81 e0       	ldi	r24, 0x01	; 1
    75da:	01 c0       	rjmp	.+2      	; 0x75de <_Z14serialEventRunv+0x94>
    75dc:	80 e0       	ldi	r24, 0x00	; 0
    75de:	88 23       	and	r24, r24
    75e0:	11 f0       	breq	.+4      	; 0x75e6 <_Z14serialEventRunv+0x9c>
    75e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    75e6:	00 00       	nop
    75e8:	df 91       	pop	r29
    75ea:	cf 91       	pop	r28
    75ec:	08 95       	ret

000075ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    75ee:	cf 93       	push	r28
    75f0:	df 93       	push	r29
    75f2:	00 d0       	rcall	.+0      	; 0x75f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
    75f4:	cd b7       	in	r28, 0x3d	; 61
    75f6:	de b7       	in	r29, 0x3e	; 62
    75f8:	9b 83       	std	Y+3, r25	; 0x03
    75fa:	8a 83       	std	Y+2, r24	; 0x02
    75fc:	8a 81       	ldd	r24, Y+2	; 0x02
    75fe:	9b 81       	ldd	r25, Y+3	; 0x03
    7600:	fc 01       	movw	r30, r24
    7602:	84 8d       	ldd	r24, Z+28	; 0x1c
    7604:	88 2f       	mov	r24, r24
    7606:	90 e0       	ldi	r25, 0x00	; 0
    7608:	2a 81       	ldd	r18, Y+2	; 0x02
    760a:	3b 81       	ldd	r19, Y+3	; 0x03
    760c:	82 0f       	add	r24, r18
    760e:	93 1f       	adc	r25, r19
    7610:	83 5a       	subi	r24, 0xA3	; 163
    7612:	9f 4f       	sbci	r25, 0xFF	; 255
    7614:	fc 01       	movw	r30, r24
    7616:	80 81       	ld	r24, Z
    7618:	89 83       	std	Y+1, r24	; 0x01
    761a:	8a 81       	ldd	r24, Y+2	; 0x02
    761c:	9b 81       	ldd	r25, Y+3	; 0x03
    761e:	fc 01       	movw	r30, r24
    7620:	84 8d       	ldd	r24, Z+28	; 0x1c
    7622:	88 2f       	mov	r24, r24
    7624:	90 e0       	ldi	r25, 0x00	; 0
    7626:	01 96       	adiw	r24, 0x01	; 1
    7628:	8f 73       	andi	r24, 0x3F	; 63
    762a:	90 78       	andi	r25, 0x80	; 128
    762c:	99 23       	and	r25, r25
    762e:	24 f4       	brge	.+8      	; 0x7638 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4a>
    7630:	01 97       	sbiw	r24, 0x01	; 1
    7632:	80 6c       	ori	r24, 0xC0	; 192
    7634:	9f 6f       	ori	r25, 0xFF	; 255
    7636:	01 96       	adiw	r24, 0x01	; 1
    7638:	28 2f       	mov	r18, r24
    763a:	8a 81       	ldd	r24, Y+2	; 0x02
    763c:	9b 81       	ldd	r25, Y+3	; 0x03
    763e:	fc 01       	movw	r30, r24
    7640:	24 8f       	std	Z+28, r18	; 0x1c
    7642:	8a 81       	ldd	r24, Y+2	; 0x02
    7644:	9b 81       	ldd	r25, Y+3	; 0x03
    7646:	fc 01       	movw	r30, r24
    7648:	86 89       	ldd	r24, Z+22	; 0x16
    764a:	97 89       	ldd	r25, Z+23	; 0x17
    764c:	29 81       	ldd	r18, Y+1	; 0x01
    764e:	fc 01       	movw	r30, r24
    7650:	20 83       	st	Z, r18
    7652:	8a 81       	ldd	r24, Y+2	; 0x02
    7654:	9b 81       	ldd	r25, Y+3	; 0x03
    7656:	fc 01       	movw	r30, r24
    7658:	80 89       	ldd	r24, Z+16	; 0x10
    765a:	91 89       	ldd	r25, Z+17	; 0x11
    765c:	2a 81       	ldd	r18, Y+2	; 0x02
    765e:	3b 81       	ldd	r19, Y+3	; 0x03
    7660:	f9 01       	movw	r30, r18
    7662:	20 89       	ldd	r18, Z+16	; 0x10
    7664:	31 89       	ldd	r19, Z+17	; 0x11
    7666:	f9 01       	movw	r30, r18
    7668:	20 81       	ld	r18, Z
    766a:	23 70       	andi	r18, 0x03	; 3
    766c:	20 64       	ori	r18, 0x40	; 64
    766e:	fc 01       	movw	r30, r24
    7670:	20 83       	st	Z, r18
    7672:	8a 81       	ldd	r24, Y+2	; 0x02
    7674:	9b 81       	ldd	r25, Y+3	; 0x03
    7676:	fc 01       	movw	r30, r24
    7678:	23 8d       	ldd	r18, Z+27	; 0x1b
    767a:	8a 81       	ldd	r24, Y+2	; 0x02
    767c:	9b 81       	ldd	r25, Y+3	; 0x03
    767e:	fc 01       	movw	r30, r24
    7680:	94 8d       	ldd	r25, Z+28	; 0x1c
    7682:	81 e0       	ldi	r24, 0x01	; 1
    7684:	29 17       	cp	r18, r25
    7686:	09 f0       	breq	.+2      	; 0x768a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9c>
    7688:	80 e0       	ldi	r24, 0x00	; 0
    768a:	88 23       	and	r24, r24
    768c:	79 f0       	breq	.+30     	; 0x76ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbe>
    768e:	8a 81       	ldd	r24, Y+2	; 0x02
    7690:	9b 81       	ldd	r25, Y+3	; 0x03
    7692:	fc 01       	movw	r30, r24
    7694:	82 89       	ldd	r24, Z+18	; 0x12
    7696:	93 89       	ldd	r25, Z+19	; 0x13
    7698:	2a 81       	ldd	r18, Y+2	; 0x02
    769a:	3b 81       	ldd	r19, Y+3	; 0x03
    769c:	f9 01       	movw	r30, r18
    769e:	22 89       	ldd	r18, Z+18	; 0x12
    76a0:	33 89       	ldd	r19, Z+19	; 0x13
    76a2:	f9 01       	movw	r30, r18
    76a4:	20 81       	ld	r18, Z
    76a6:	2f 7d       	andi	r18, 0xDF	; 223
    76a8:	fc 01       	movw	r30, r24
    76aa:	20 83       	st	Z, r18
    76ac:	00 00       	nop
    76ae:	0f 90       	pop	r0
    76b0:	0f 90       	pop	r0
    76b2:	0f 90       	pop	r0
    76b4:	df 91       	pop	r29
    76b6:	cf 91       	pop	r28
    76b8:	08 95       	ret

000076ba <_ZN14HardwareSerial5beginEmh>:
    76ba:	cf 93       	push	r28
    76bc:	df 93       	push	r29
    76be:	cd b7       	in	r28, 0x3d	; 61
    76c0:	de b7       	in	r29, 0x3e	; 62
    76c2:	29 97       	sbiw	r28, 0x09	; 9
    76c4:	0f b6       	in	r0, 0x3f	; 63
    76c6:	f8 94       	cli
    76c8:	de bf       	out	0x3e, r29	; 62
    76ca:	0f be       	out	0x3f, r0	; 63
    76cc:	cd bf       	out	0x3d, r28	; 61
    76ce:	9c 83       	std	Y+4, r25	; 0x04
    76d0:	8b 83       	std	Y+3, r24	; 0x03
    76d2:	4d 83       	std	Y+5, r20	; 0x05
    76d4:	5e 83       	std	Y+6, r21	; 0x06
    76d6:	6f 83       	std	Y+7, r22	; 0x07
    76d8:	78 87       	std	Y+8, r23	; 0x08
    76da:	29 87       	std	Y+9, r18	; 0x09
    76dc:	80 e0       	ldi	r24, 0x00	; 0
    76de:	99 e0       	ldi	r25, 0x09	; 9
    76e0:	ad e3       	ldi	r26, 0x3D	; 61
    76e2:	b0 e0       	ldi	r27, 0x00	; 0
    76e4:	2d 81       	ldd	r18, Y+5	; 0x05
    76e6:	3e 81       	ldd	r19, Y+6	; 0x06
    76e8:	4f 81       	ldd	r20, Y+7	; 0x07
    76ea:	58 85       	ldd	r21, Y+8	; 0x08
    76ec:	bc 01       	movw	r22, r24
    76ee:	cd 01       	movw	r24, r26
    76f0:	0e 94 b1 61 	call	0xc362	; 0xc362 <__udivmodsi4>
    76f4:	da 01       	movw	r26, r20
    76f6:	c9 01       	movw	r24, r18
    76f8:	01 97       	sbiw	r24, 0x01	; 1
    76fa:	a1 09       	sbc	r26, r1
    76fc:	b1 09       	sbc	r27, r1
    76fe:	b6 95       	lsr	r27
    7700:	a7 95       	ror	r26
    7702:	97 95       	ror	r25
    7704:	87 95       	ror	r24
    7706:	9a 83       	std	Y+2, r25	; 0x02
    7708:	89 83       	std	Y+1, r24	; 0x01
    770a:	8b 81       	ldd	r24, Y+3	; 0x03
    770c:	9c 81       	ldd	r25, Y+4	; 0x04
    770e:	fc 01       	movw	r30, r24
    7710:	80 89       	ldd	r24, Z+16	; 0x10
    7712:	91 89       	ldd	r25, Z+17	; 0x11
    7714:	22 e0       	ldi	r18, 0x02	; 2
    7716:	fc 01       	movw	r30, r24
    7718:	20 83       	st	Z, r18
    771a:	8d 81       	ldd	r24, Y+5	; 0x05
    771c:	9e 81       	ldd	r25, Y+6	; 0x06
    771e:	af 81       	ldd	r26, Y+7	; 0x07
    7720:	b8 85       	ldd	r27, Y+8	; 0x08
    7722:	81 15       	cp	r24, r1
    7724:	91 4e       	sbci	r25, 0xE1	; 225
    7726:	a1 05       	cpc	r26, r1
    7728:	b1 05       	cpc	r27, r1
    772a:	29 f0       	breq	.+10     	; 0x7736 <_ZN14HardwareSerial5beginEmh+0x7c>
    772c:	89 81       	ldd	r24, Y+1	; 0x01
    772e:	9a 81       	ldd	r25, Y+2	; 0x02
    7730:	81 15       	cp	r24, r1
    7732:	90 41       	sbci	r25, 0x10	; 16
    7734:	f0 f0       	brcs	.+60     	; 0x7772 <_ZN14HardwareSerial5beginEmh+0xb8>
    7736:	8b 81       	ldd	r24, Y+3	; 0x03
    7738:	9c 81       	ldd	r25, Y+4	; 0x04
    773a:	fc 01       	movw	r30, r24
    773c:	80 89       	ldd	r24, Z+16	; 0x10
    773e:	91 89       	ldd	r25, Z+17	; 0x11
    7740:	fc 01       	movw	r30, r24
    7742:	10 82       	st	Z, r1
    7744:	80 e8       	ldi	r24, 0x80	; 128
    7746:	94 e8       	ldi	r25, 0x84	; 132
    7748:	ae e1       	ldi	r26, 0x1E	; 30
    774a:	b0 e0       	ldi	r27, 0x00	; 0
    774c:	2d 81       	ldd	r18, Y+5	; 0x05
    774e:	3e 81       	ldd	r19, Y+6	; 0x06
    7750:	4f 81       	ldd	r20, Y+7	; 0x07
    7752:	58 85       	ldd	r21, Y+8	; 0x08
    7754:	bc 01       	movw	r22, r24
    7756:	cd 01       	movw	r24, r26
    7758:	0e 94 b1 61 	call	0xc362	; 0xc362 <__udivmodsi4>
    775c:	da 01       	movw	r26, r20
    775e:	c9 01       	movw	r24, r18
    7760:	01 97       	sbiw	r24, 0x01	; 1
    7762:	a1 09       	sbc	r26, r1
    7764:	b1 09       	sbc	r27, r1
    7766:	b6 95       	lsr	r27
    7768:	a7 95       	ror	r26
    776a:	97 95       	ror	r25
    776c:	87 95       	ror	r24
    776e:	9a 83       	std	Y+2, r25	; 0x02
    7770:	89 83       	std	Y+1, r24	; 0x01
    7772:	8b 81       	ldd	r24, Y+3	; 0x03
    7774:	9c 81       	ldd	r25, Y+4	; 0x04
    7776:	fc 01       	movw	r30, r24
    7778:	84 85       	ldd	r24, Z+12	; 0x0c
    777a:	95 85       	ldd	r25, Z+13	; 0x0d
    777c:	29 81       	ldd	r18, Y+1	; 0x01
    777e:	3a 81       	ldd	r19, Y+2	; 0x02
    7780:	23 2f       	mov	r18, r19
    7782:	33 27       	eor	r19, r19
    7784:	fc 01       	movw	r30, r24
    7786:	20 83       	st	Z, r18
    7788:	8b 81       	ldd	r24, Y+3	; 0x03
    778a:	9c 81       	ldd	r25, Y+4	; 0x04
    778c:	fc 01       	movw	r30, r24
    778e:	86 85       	ldd	r24, Z+14	; 0x0e
    7790:	97 85       	ldd	r25, Z+15	; 0x0f
    7792:	29 81       	ldd	r18, Y+1	; 0x01
    7794:	fc 01       	movw	r30, r24
    7796:	20 83       	st	Z, r18
    7798:	8b 81       	ldd	r24, Y+3	; 0x03
    779a:	9c 81       	ldd	r25, Y+4	; 0x04
    779c:	fc 01       	movw	r30, r24
    779e:	10 8e       	std	Z+24, r1	; 0x18
    77a0:	8b 81       	ldd	r24, Y+3	; 0x03
    77a2:	9c 81       	ldd	r25, Y+4	; 0x04
    77a4:	fc 01       	movw	r30, r24
    77a6:	84 89       	ldd	r24, Z+20	; 0x14
    77a8:	95 89       	ldd	r25, Z+21	; 0x15
    77aa:	29 85       	ldd	r18, Y+9	; 0x09
    77ac:	fc 01       	movw	r30, r24
    77ae:	20 83       	st	Z, r18
    77b0:	8b 81       	ldd	r24, Y+3	; 0x03
    77b2:	9c 81       	ldd	r25, Y+4	; 0x04
    77b4:	fc 01       	movw	r30, r24
    77b6:	82 89       	ldd	r24, Z+18	; 0x12
    77b8:	93 89       	ldd	r25, Z+19	; 0x13
    77ba:	2b 81       	ldd	r18, Y+3	; 0x03
    77bc:	3c 81       	ldd	r19, Y+4	; 0x04
    77be:	f9 01       	movw	r30, r18
    77c0:	22 89       	ldd	r18, Z+18	; 0x12
    77c2:	33 89       	ldd	r19, Z+19	; 0x13
    77c4:	f9 01       	movw	r30, r18
    77c6:	20 81       	ld	r18, Z
    77c8:	20 61       	ori	r18, 0x10	; 16
    77ca:	fc 01       	movw	r30, r24
    77cc:	20 83       	st	Z, r18
    77ce:	8b 81       	ldd	r24, Y+3	; 0x03
    77d0:	9c 81       	ldd	r25, Y+4	; 0x04
    77d2:	fc 01       	movw	r30, r24
    77d4:	82 89       	ldd	r24, Z+18	; 0x12
    77d6:	93 89       	ldd	r25, Z+19	; 0x13
    77d8:	2b 81       	ldd	r18, Y+3	; 0x03
    77da:	3c 81       	ldd	r19, Y+4	; 0x04
    77dc:	f9 01       	movw	r30, r18
    77de:	22 89       	ldd	r18, Z+18	; 0x12
    77e0:	33 89       	ldd	r19, Z+19	; 0x13
    77e2:	f9 01       	movw	r30, r18
    77e4:	20 81       	ld	r18, Z
    77e6:	28 60       	ori	r18, 0x08	; 8
    77e8:	fc 01       	movw	r30, r24
    77ea:	20 83       	st	Z, r18
    77ec:	8b 81       	ldd	r24, Y+3	; 0x03
    77ee:	9c 81       	ldd	r25, Y+4	; 0x04
    77f0:	fc 01       	movw	r30, r24
    77f2:	82 89       	ldd	r24, Z+18	; 0x12
    77f4:	93 89       	ldd	r25, Z+19	; 0x13
    77f6:	2b 81       	ldd	r18, Y+3	; 0x03
    77f8:	3c 81       	ldd	r19, Y+4	; 0x04
    77fa:	f9 01       	movw	r30, r18
    77fc:	22 89       	ldd	r18, Z+18	; 0x12
    77fe:	33 89       	ldd	r19, Z+19	; 0x13
    7800:	f9 01       	movw	r30, r18
    7802:	20 81       	ld	r18, Z
    7804:	20 68       	ori	r18, 0x80	; 128
    7806:	fc 01       	movw	r30, r24
    7808:	20 83       	st	Z, r18
    780a:	8b 81       	ldd	r24, Y+3	; 0x03
    780c:	9c 81       	ldd	r25, Y+4	; 0x04
    780e:	fc 01       	movw	r30, r24
    7810:	82 89       	ldd	r24, Z+18	; 0x12
    7812:	93 89       	ldd	r25, Z+19	; 0x13
    7814:	2b 81       	ldd	r18, Y+3	; 0x03
    7816:	3c 81       	ldd	r19, Y+4	; 0x04
    7818:	f9 01       	movw	r30, r18
    781a:	22 89       	ldd	r18, Z+18	; 0x12
    781c:	33 89       	ldd	r19, Z+19	; 0x13
    781e:	f9 01       	movw	r30, r18
    7820:	20 81       	ld	r18, Z
    7822:	2f 7d       	andi	r18, 0xDF	; 223
    7824:	fc 01       	movw	r30, r24
    7826:	20 83       	st	Z, r18
    7828:	00 00       	nop
    782a:	29 96       	adiw	r28, 0x09	; 9
    782c:	0f b6       	in	r0, 0x3f	; 63
    782e:	f8 94       	cli
    7830:	de bf       	out	0x3e, r29	; 62
    7832:	0f be       	out	0x3f, r0	; 63
    7834:	cd bf       	out	0x3d, r28	; 61
    7836:	df 91       	pop	r29
    7838:	cf 91       	pop	r28
    783a:	08 95       	ret

0000783c <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
    783c:	cf 93       	push	r28
    783e:	df 93       	push	r29
    7840:	1f 92       	push	r1
    7842:	1f 92       	push	r1
    7844:	cd b7       	in	r28, 0x3d	; 61
    7846:	de b7       	in	r29, 0x3e	; 62
    7848:	9a 83       	std	Y+2, r25	; 0x02
    784a:	89 83       	std	Y+1, r24	; 0x01
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    784c:	89 81       	ldd	r24, Y+1	; 0x01
    784e:	9a 81       	ldd	r25, Y+2	; 0x02
    7850:	fc 01       	movw	r30, r24
    7852:	81 8d       	ldd	r24, Z+25	; 0x19
    7854:	88 2f       	mov	r24, r24
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	9c 01       	movw	r18, r24
    785a:	20 5c       	subi	r18, 0xC0	; 192
    785c:	3f 4f       	sbci	r19, 0xFF	; 255
    785e:	89 81       	ldd	r24, Y+1	; 0x01
    7860:	9a 81       	ldd	r25, Y+2	; 0x02
    7862:	fc 01       	movw	r30, r24
    7864:	82 8d       	ldd	r24, Z+26	; 0x1a
    7866:	88 2f       	mov	r24, r24
    7868:	90 e0       	ldi	r25, 0x00	; 0
    786a:	a9 01       	movw	r20, r18
    786c:	48 1b       	sub	r20, r24
    786e:	59 0b       	sbc	r21, r25
    7870:	ca 01       	movw	r24, r20
    7872:	8f 73       	andi	r24, 0x3F	; 63
    7874:	99 27       	eor	r25, r25
}
    7876:	0f 90       	pop	r0
    7878:	0f 90       	pop	r0
    787a:	df 91       	pop	r29
    787c:	cf 91       	pop	r28
    787e:	08 95       	ret

00007880 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7880:	cf 93       	push	r28
    7882:	df 93       	push	r29
    7884:	1f 92       	push	r1
    7886:	1f 92       	push	r1
    7888:	cd b7       	in	r28, 0x3d	; 61
    788a:	de b7       	in	r29, 0x3e	; 62
    788c:	9a 83       	std	Y+2, r25	; 0x02
    788e:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer_head == _rx_buffer_tail) {
    7890:	89 81       	ldd	r24, Y+1	; 0x01
    7892:	9a 81       	ldd	r25, Y+2	; 0x02
    7894:	fc 01       	movw	r30, r24
    7896:	21 8d       	ldd	r18, Z+25	; 0x19
    7898:	89 81       	ldd	r24, Y+1	; 0x01
    789a:	9a 81       	ldd	r25, Y+2	; 0x02
    789c:	fc 01       	movw	r30, r24
    789e:	92 8d       	ldd	r25, Z+26	; 0x1a
    78a0:	81 e0       	ldi	r24, 0x01	; 1
    78a2:	29 17       	cp	r18, r25
    78a4:	09 f0       	breq	.+2      	; 0x78a8 <_ZN14HardwareSerial4peekEv+0x28>
    78a6:	80 e0       	ldi	r24, 0x00	; 0
    78a8:	88 23       	and	r24, r24
    78aa:	19 f0       	breq	.+6      	; 0x78b2 <_ZN14HardwareSerial4peekEv+0x32>
    return -1;
    78ac:	8f ef       	ldi	r24, 0xFF	; 255
    78ae:	9f ef       	ldi	r25, 0xFF	; 255
    78b0:	0f c0       	rjmp	.+30     	; 0x78d0 <_ZN14HardwareSerial4peekEv+0x50>
  } else {
    return _rx_buffer[_rx_buffer_tail];
    78b2:	89 81       	ldd	r24, Y+1	; 0x01
    78b4:	9a 81       	ldd	r25, Y+2	; 0x02
    78b6:	fc 01       	movw	r30, r24
    78b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    78ba:	88 2f       	mov	r24, r24
    78bc:	90 e0       	ldi	r25, 0x00	; 0
    78be:	29 81       	ldd	r18, Y+1	; 0x01
    78c0:	3a 81       	ldd	r19, Y+2	; 0x02
    78c2:	82 0f       	add	r24, r18
    78c4:	93 1f       	adc	r25, r19
    78c6:	4d 96       	adiw	r24, 0x1d	; 29
    78c8:	fc 01       	movw	r30, r24
    78ca:	80 81       	ld	r24, Z
    78cc:	88 2f       	mov	r24, r24
    78ce:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    78d0:	0f 90       	pop	r0
    78d2:	0f 90       	pop	r0
    78d4:	df 91       	pop	r29
    78d6:	cf 91       	pop	r28
    78d8:	08 95       	ret

000078da <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    78da:	cf 93       	push	r28
    78dc:	df 93       	push	r29
    78de:	00 d0       	rcall	.+0      	; 0x78e0 <_ZN14HardwareSerial4readEv+0x6>
    78e0:	cd b7       	in	r28, 0x3d	; 61
    78e2:	de b7       	in	r29, 0x3e	; 62
    78e4:	9b 83       	std	Y+3, r25	; 0x03
    78e6:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    78e8:	8a 81       	ldd	r24, Y+2	; 0x02
    78ea:	9b 81       	ldd	r25, Y+3	; 0x03
    78ec:	fc 01       	movw	r30, r24
    78ee:	21 8d       	ldd	r18, Z+25	; 0x19
    78f0:	8a 81       	ldd	r24, Y+2	; 0x02
    78f2:	9b 81       	ldd	r25, Y+3	; 0x03
    78f4:	fc 01       	movw	r30, r24
    78f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    78f8:	81 e0       	ldi	r24, 0x01	; 1
    78fa:	29 17       	cp	r18, r25
    78fc:	09 f0       	breq	.+2      	; 0x7900 <_ZN14HardwareSerial4readEv+0x26>
    78fe:	80 e0       	ldi	r24, 0x00	; 0
    7900:	88 23       	and	r24, r24
    7902:	19 f0       	breq	.+6      	; 0x790a <_ZN14HardwareSerial4readEv+0x30>
    return -1;
    7904:	8f ef       	ldi	r24, 0xFF	; 255
    7906:	9f ef       	ldi	r25, 0xFF	; 255
    7908:	1c c0       	rjmp	.+56     	; 0x7942 <_ZN14HardwareSerial4readEv+0x68>
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    790a:	8a 81       	ldd	r24, Y+2	; 0x02
    790c:	9b 81       	ldd	r25, Y+3	; 0x03
    790e:	fc 01       	movw	r30, r24
    7910:	82 8d       	ldd	r24, Z+26	; 0x1a
    7912:	88 2f       	mov	r24, r24
    7914:	90 e0       	ldi	r25, 0x00	; 0
    7916:	2a 81       	ldd	r18, Y+2	; 0x02
    7918:	3b 81       	ldd	r19, Y+3	; 0x03
    791a:	82 0f       	add	r24, r18
    791c:	93 1f       	adc	r25, r19
    791e:	4d 96       	adiw	r24, 0x1d	; 29
    7920:	fc 01       	movw	r30, r24
    7922:	80 81       	ld	r24, Z
    7924:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7926:	8a 81       	ldd	r24, Y+2	; 0x02
    7928:	9b 81       	ldd	r25, Y+3	; 0x03
    792a:	fc 01       	movw	r30, r24
    792c:	82 8d       	ldd	r24, Z+26	; 0x1a
    792e:	8f 5f       	subi	r24, 0xFF	; 255
    7930:	28 2f       	mov	r18, r24
    7932:	2f 73       	andi	r18, 0x3F	; 63
    7934:	8a 81       	ldd	r24, Y+2	; 0x02
    7936:	9b 81       	ldd	r25, Y+3	; 0x03
    7938:	fc 01       	movw	r30, r24
    793a:	22 8f       	std	Z+26, r18	; 0x1a
    return c;
    793c:	89 81       	ldd	r24, Y+1	; 0x01
    793e:	88 2f       	mov	r24, r24
    7940:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    7942:	0f 90       	pop	r0
    7944:	0f 90       	pop	r0
    7946:	0f 90       	pop	r0
    7948:	df 91       	pop	r29
    794a:	cf 91       	pop	r28
    794c:	08 95       	ret

0000794e <_ZN14HardwareSerial17availableForWriteEv>:

int HardwareSerial::availableForWrite(void)
{
    794e:	cf 93       	push	r28
    7950:	df 93       	push	r29
    7952:	00 d0       	rcall	.+0      	; 0x7954 <_ZN14HardwareSerial17availableForWriteEv+0x6>
    7954:	1f 92       	push	r1
    7956:	cd b7       	in	r28, 0x3d	; 61
    7958:	de b7       	in	r29, 0x3e	; 62
    795a:	9c 83       	std	Y+4, r25	; 0x04
    795c:	8b 83       	std	Y+3, r24	; 0x03
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    795e:	8b 81       	ldd	r24, Y+3	; 0x03
    7960:	9c 81       	ldd	r25, Y+4	; 0x04
    7962:	fc 01       	movw	r30, r24
    7964:	83 8d       	ldd	r24, Z+27	; 0x1b
    7966:	89 83       	std	Y+1, r24	; 0x01
    tail = _tx_buffer_tail;
    7968:	8b 81       	ldd	r24, Y+3	; 0x03
    796a:	9c 81       	ldd	r25, Y+4	; 0x04
    796c:	fc 01       	movw	r30, r24
    796e:	84 8d       	ldd	r24, Z+28	; 0x1c
    7970:	8a 83       	std	Y+2, r24	; 0x02
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7972:	99 81       	ldd	r25, Y+1	; 0x01
    7974:	8a 81       	ldd	r24, Y+2	; 0x02
    7976:	98 17       	cp	r25, r24
    7978:	68 f0       	brcs	.+26     	; 0x7994 <_ZN14HardwareSerial17availableForWriteEv+0x46>
    797a:	89 81       	ldd	r24, Y+1	; 0x01
    797c:	88 2f       	mov	r24, r24
    797e:	90 e0       	ldi	r25, 0x00	; 0
    7980:	2f e3       	ldi	r18, 0x3F	; 63
    7982:	30 e0       	ldi	r19, 0x00	; 0
    7984:	28 1b       	sub	r18, r24
    7986:	39 0b       	sbc	r19, r25
    7988:	8a 81       	ldd	r24, Y+2	; 0x02
    798a:	88 2f       	mov	r24, r24
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	82 0f       	add	r24, r18
    7990:	93 1f       	adc	r25, r19
    7992:	0b c0       	rjmp	.+22     	; 0x79aa <_ZN14HardwareSerial17availableForWriteEv+0x5c>
  return tail - head - 1;
    7994:	8a 81       	ldd	r24, Y+2	; 0x02
    7996:	28 2f       	mov	r18, r24
    7998:	30 e0       	ldi	r19, 0x00	; 0
    799a:	89 81       	ldd	r24, Y+1	; 0x01
    799c:	88 2f       	mov	r24, r24
    799e:	90 e0       	ldi	r25, 0x00	; 0
    79a0:	a9 01       	movw	r20, r18
    79a2:	48 1b       	sub	r20, r24
    79a4:	59 0b       	sbc	r21, r25
    79a6:	ca 01       	movw	r24, r20
    79a8:	01 97       	sbiw	r24, 0x01	; 1
}
    79aa:	0f 90       	pop	r0
    79ac:	0f 90       	pop	r0
    79ae:	0f 90       	pop	r0
    79b0:	0f 90       	pop	r0
    79b2:	df 91       	pop	r29
    79b4:	cf 91       	pop	r28
    79b6:	08 95       	ret

000079b8 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
    79b8:	cf 93       	push	r28
    79ba:	df 93       	push	r29
    79bc:	1f 92       	push	r1
    79be:	1f 92       	push	r1
    79c0:	cd b7       	in	r28, 0x3d	; 61
    79c2:	de b7       	in	r29, 0x3e	; 62
    79c4:	9a 83       	std	Y+2, r25	; 0x02
    79c6:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    79c8:	89 81       	ldd	r24, Y+1	; 0x01
    79ca:	9a 81       	ldd	r25, Y+2	; 0x02
    79cc:	fc 01       	movw	r30, r24
    79ce:	90 8d       	ldd	r25, Z+24	; 0x18
    79d0:	81 e0       	ldi	r24, 0x01	; 1
    79d2:	89 27       	eor	r24, r25
    79d4:	88 23       	and	r24, r24
    79d6:	09 f0       	breq	.+2      	; 0x79da <_ZN14HardwareSerial5flushEv+0x22>
    79d8:	4d c0       	rjmp	.+154    	; 0x7a74 <_ZN14HardwareSerial5flushEv+0xbc>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    79da:	89 81       	ldd	r24, Y+1	; 0x01
    79dc:	9a 81       	ldd	r25, Y+2	; 0x02
    79de:	fc 01       	movw	r30, r24
    79e0:	82 89       	ldd	r24, Z+18	; 0x12
    79e2:	93 89       	ldd	r25, Z+19	; 0x13
    79e4:	fc 01       	movw	r30, r24
    79e6:	80 81       	ld	r24, Z
    79e8:	88 2f       	mov	r24, r24
    79ea:	90 e0       	ldi	r25, 0x00	; 0
    79ec:	80 72       	andi	r24, 0x20	; 32
    79ee:	99 27       	eor	r25, r25
    79f0:	89 2b       	or	r24, r25
    79f2:	69 f4       	brne	.+26     	; 0x7a0e <_ZN14HardwareSerial5flushEv+0x56>
    79f4:	89 81       	ldd	r24, Y+1	; 0x01
    79f6:	9a 81       	ldd	r25, Y+2	; 0x02
    79f8:	fc 01       	movw	r30, r24
    79fa:	80 89       	ldd	r24, Z+16	; 0x10
    79fc:	91 89       	ldd	r25, Z+17	; 0x11
    79fe:	fc 01       	movw	r30, r24
    7a00:	80 81       	ld	r24, Z
    7a02:	88 2f       	mov	r24, r24
    7a04:	90 e0       	ldi	r25, 0x00	; 0
    7a06:	80 74       	andi	r24, 0x40	; 64
    7a08:	99 27       	eor	r25, r25
    7a0a:	89 2b       	or	r24, r25
    7a0c:	11 f4       	brne	.+4      	; 0x7a12 <_ZN14HardwareSerial5flushEv+0x5a>
    7a0e:	81 e0       	ldi	r24, 0x01	; 1
    7a10:	01 c0       	rjmp	.+2      	; 0x7a14 <_ZN14HardwareSerial5flushEv+0x5c>
    7a12:	80 e0       	ldi	r24, 0x00	; 0
    7a14:	88 23       	and	r24, r24
    7a16:	79 f1       	breq	.+94     	; 0x7a76 <_ZN14HardwareSerial5flushEv+0xbe>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7a18:	8f e5       	ldi	r24, 0x5F	; 95
    7a1a:	90 e0       	ldi	r25, 0x00	; 0
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	80 81       	ld	r24, Z
    7a20:	88 23       	and	r24, r24
    7a22:	7c f0       	brlt	.+30     	; 0x7a42 <_ZN14HardwareSerial5flushEv+0x8a>
    7a24:	89 81       	ldd	r24, Y+1	; 0x01
    7a26:	9a 81       	ldd	r25, Y+2	; 0x02
    7a28:	fc 01       	movw	r30, r24
    7a2a:	82 89       	ldd	r24, Z+18	; 0x12
    7a2c:	93 89       	ldd	r25, Z+19	; 0x13
    7a2e:	fc 01       	movw	r30, r24
    7a30:	80 81       	ld	r24, Z
    7a32:	88 2f       	mov	r24, r24
    7a34:	90 e0       	ldi	r25, 0x00	; 0
    7a36:	80 72       	andi	r24, 0x20	; 32
    7a38:	99 27       	eor	r25, r25
    7a3a:	89 2b       	or	r24, r25
    7a3c:	11 f0       	breq	.+4      	; 0x7a42 <_ZN14HardwareSerial5flushEv+0x8a>
    7a3e:	81 e0       	ldi	r24, 0x01	; 1
    7a40:	01 c0       	rjmp	.+2      	; 0x7a44 <_ZN14HardwareSerial5flushEv+0x8c>
    7a42:	80 e0       	ldi	r24, 0x00	; 0
    7a44:	88 23       	and	r24, r24
    7a46:	49 f2       	breq	.-110    	; 0x79da <_ZN14HardwareSerial5flushEv+0x22>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7a48:	89 81       	ldd	r24, Y+1	; 0x01
    7a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    7a4c:	fc 01       	movw	r30, r24
    7a4e:	80 89       	ldd	r24, Z+16	; 0x10
    7a50:	91 89       	ldd	r25, Z+17	; 0x11
    7a52:	fc 01       	movw	r30, r24
    7a54:	80 81       	ld	r24, Z
    7a56:	88 2f       	mov	r24, r24
    7a58:	90 e0       	ldi	r25, 0x00	; 0
    7a5a:	80 72       	andi	r24, 0x20	; 32
    7a5c:	99 27       	eor	r25, r25
    7a5e:	21 e0       	ldi	r18, 0x01	; 1
    7a60:	89 2b       	or	r24, r25
    7a62:	09 f4       	brne	.+2      	; 0x7a66 <_ZN14HardwareSerial5flushEv+0xae>
    7a64:	20 e0       	ldi	r18, 0x00	; 0
    7a66:	22 23       	and	r18, r18
    7a68:	09 f4       	brne	.+2      	; 0x7a6c <_ZN14HardwareSerial5flushEv+0xb4>
    7a6a:	b7 cf       	rjmp	.-146    	; 0x79da <_ZN14HardwareSerial5flushEv+0x22>
	  _tx_udr_empty_irq();
    7a6c:	89 81       	ldd	r24, Y+1	; 0x01
    7a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    7a70:	be dd       	rcall	.-1156   	; 0x75ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    7a72:	b3 cf       	rjmp	.-154    	; 0x79da <_ZN14HardwareSerial5flushEv+0x22>
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;
    7a74:	00 00       	nop
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7a76:	0f 90       	pop	r0
    7a78:	0f 90       	pop	r0
    7a7a:	df 91       	pop	r29
    7a7c:	cf 91       	pop	r28
    7a7e:	08 95       	ret

00007a80 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    7a80:	cf 93       	push	r28
    7a82:	df 93       	push	r29
    7a84:	cd b7       	in	r28, 0x3d	; 61
    7a86:	de b7       	in	r29, 0x3e	; 62
    7a88:	28 97       	sbiw	r28, 0x08	; 8
    7a8a:	0f b6       	in	r0, 0x3f	; 63
    7a8c:	f8 94       	cli
    7a8e:	de bf       	out	0x3e, r29	; 62
    7a90:	0f be       	out	0x3f, r0	; 63
    7a92:	cd bf       	out	0x3d, r28	; 61
    7a94:	9f 83       	std	Y+7, r25	; 0x07
    7a96:	8e 83       	std	Y+6, r24	; 0x06
    7a98:	68 87       	std	Y+8, r22	; 0x08
  _written = true;
    7a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    7a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    7a9e:	21 e0       	ldi	r18, 0x01	; 1
    7aa0:	fc 01       	movw	r30, r24
    7aa2:	20 8f       	std	Z+24, r18	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    7aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    7aa8:	fc 01       	movw	r30, r24
    7aaa:	23 8d       	ldd	r18, Z+27	; 0x1b
    7aac:	8e 81       	ldd	r24, Y+6	; 0x06
    7aae:	9f 81       	ldd	r25, Y+7	; 0x07
    7ab0:	fc 01       	movw	r30, r24
    7ab2:	84 8d       	ldd	r24, Z+28	; 0x1c
    7ab4:	28 17       	cp	r18, r24
    7ab6:	79 f4       	brne	.+30     	; 0x7ad6 <_ZN14HardwareSerial5writeEh+0x56>
    7ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    7aba:	9f 81       	ldd	r25, Y+7	; 0x07
    7abc:	fc 01       	movw	r30, r24
    7abe:	80 89       	ldd	r24, Z+16	; 0x10
    7ac0:	91 89       	ldd	r25, Z+17	; 0x11
    7ac2:	fc 01       	movw	r30, r24
    7ac4:	80 81       	ld	r24, Z
    7ac6:	88 2f       	mov	r24, r24
    7ac8:	90 e0       	ldi	r25, 0x00	; 0
    7aca:	80 72       	andi	r24, 0x20	; 32
    7acc:	99 27       	eor	r25, r25
    7ace:	89 2b       	or	r24, r25
    7ad0:	11 f0       	breq	.+4      	; 0x7ad6 <_ZN14HardwareSerial5writeEh+0x56>
    7ad2:	81 e0       	ldi	r24, 0x01	; 1
    7ad4:	01 c0       	rjmp	.+2      	; 0x7ad8 <_ZN14HardwareSerial5writeEh+0x58>
    7ad6:	80 e0       	ldi	r24, 0x00	; 0
    7ad8:	88 23       	and	r24, r24
    7ada:	51 f1       	breq	.+84     	; 0x7b30 <_ZN14HardwareSerial5writeEh+0xb0>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7adc:	8f e5       	ldi	r24, 0x5F	; 95
    7ade:	90 e0       	ldi	r25, 0x00	; 0
    7ae0:	fc 01       	movw	r30, r24
    7ae2:	80 81       	ld	r24, Z
    7ae4:	8c 83       	std	Y+4, r24	; 0x04
    7ae6:	12 dd       	rcall	.-1500   	; 0x750c <_ZL12__iCliRetValv>
    7ae8:	89 83       	std	Y+1, r24	; 0x01
    7aea:	89 81       	ldd	r24, Y+1	; 0x01
    7aec:	88 23       	and	r24, r24
    7aee:	d1 f0       	breq	.+52     	; 0x7b24 <_ZN14HardwareSerial5writeEh+0xa4>
      *_udr = c;
    7af0:	8e 81       	ldd	r24, Y+6	; 0x06
    7af2:	9f 81       	ldd	r25, Y+7	; 0x07
    7af4:	fc 01       	movw	r30, r24
    7af6:	86 89       	ldd	r24, Z+22	; 0x16
    7af8:	97 89       	ldd	r25, Z+23	; 0x17
    7afa:	28 85       	ldd	r18, Y+8	; 0x08
    7afc:	fc 01       	movw	r30, r24
    7afe:	20 83       	st	Z, r18
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7b00:	8e 81       	ldd	r24, Y+6	; 0x06
    7b02:	9f 81       	ldd	r25, Y+7	; 0x07
    7b04:	fc 01       	movw	r30, r24
    7b06:	80 89       	ldd	r24, Z+16	; 0x10
    7b08:	91 89       	ldd	r25, Z+17	; 0x11
    7b0a:	2e 81       	ldd	r18, Y+6	; 0x06
    7b0c:	3f 81       	ldd	r19, Y+7	; 0x07
    7b0e:	f9 01       	movw	r30, r18
    7b10:	20 89       	ldd	r18, Z+16	; 0x10
    7b12:	31 89       	ldd	r19, Z+17	; 0x11
    7b14:	f9 01       	movw	r30, r18
    7b16:	20 81       	ld	r18, Z
    7b18:	23 70       	andi	r18, 0x03	; 3
    7b1a:	20 64       	ori	r18, 0x40	; 64
    7b1c:	fc 01       	movw	r30, r24
    7b1e:	20 83       	st	Z, r18
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7b20:	19 82       	std	Y+1, r1	; 0x01
    7b22:	e3 cf       	rjmp	.-58     	; 0x7aea <_ZN14HardwareSerial5writeEh+0x6a>
    7b24:	ce 01       	movw	r24, r28
    7b26:	04 96       	adiw	r24, 0x04	; 4
    7b28:	fa dc       	rcall	.-1548   	; 0x751e <_ZL10__iRestorePKh>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
    7b2a:	81 e0       	ldi	r24, 0x01	; 1
    7b2c:	90 e0       	ldi	r25, 0x00	; 0
    7b2e:	6e c0       	rjmp	.+220    	; 0x7c0c <_ZN14HardwareSerial5writeEh+0x18c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7b30:	8e 81       	ldd	r24, Y+6	; 0x06
    7b32:	9f 81       	ldd	r25, Y+7	; 0x07
    7b34:	fc 01       	movw	r30, r24
    7b36:	83 8d       	ldd	r24, Z+27	; 0x1b
    7b38:	88 2f       	mov	r24, r24
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	01 96       	adiw	r24, 0x01	; 1
    7b3e:	8f 73       	andi	r24, 0x3F	; 63
    7b40:	90 78       	andi	r25, 0x80	; 128
    7b42:	99 23       	and	r25, r25
    7b44:	24 f4       	brge	.+8      	; 0x7b4e <_ZN14HardwareSerial5writeEh+0xce>
    7b46:	01 97       	sbiw	r24, 0x01	; 1
    7b48:	80 6c       	ori	r24, 0xC0	; 192
    7b4a:	9f 6f       	ori	r25, 0xFF	; 255
    7b4c:	01 96       	adiw	r24, 0x01	; 1
    7b4e:	8b 83       	std	Y+3, r24	; 0x03
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7b50:	8e 81       	ldd	r24, Y+6	; 0x06
    7b52:	9f 81       	ldd	r25, Y+7	; 0x07
    7b54:	fc 01       	movw	r30, r24
    7b56:	24 8d       	ldd	r18, Z+28	; 0x1c
    7b58:	81 e0       	ldi	r24, 0x01	; 1
    7b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    7b5c:	29 17       	cp	r18, r25
    7b5e:	09 f0       	breq	.+2      	; 0x7b62 <_ZN14HardwareSerial5writeEh+0xe2>
    7b60:	80 e0       	ldi	r24, 0x00	; 0
    7b62:	88 23       	and	r24, r24
    7b64:	f9 f0       	breq	.+62     	; 0x7ba4 <_ZN14HardwareSerial5writeEh+0x124>
    if (bit_is_clear(SREG, SREG_I)) {
    7b66:	8f e5       	ldi	r24, 0x5F	; 95
    7b68:	90 e0       	ldi	r25, 0x00	; 0
    7b6a:	fc 01       	movw	r30, r24
    7b6c:	80 81       	ld	r24, Z
    7b6e:	80 95       	com	r24
    7b70:	88 1f       	adc	r24, r24
    7b72:	88 27       	eor	r24, r24
    7b74:	88 1f       	adc	r24, r24
    7b76:	88 23       	and	r24, r24
    7b78:	59 f3       	breq	.-42     	; 0x7b50 <_ZN14HardwareSerial5writeEh+0xd0>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    7b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    7b7e:	fc 01       	movw	r30, r24
    7b80:	80 89       	ldd	r24, Z+16	; 0x10
    7b82:	91 89       	ldd	r25, Z+17	; 0x11
    7b84:	fc 01       	movw	r30, r24
    7b86:	80 81       	ld	r24, Z
    7b88:	88 2f       	mov	r24, r24
    7b8a:	90 e0       	ldi	r25, 0x00	; 0
    7b8c:	80 72       	andi	r24, 0x20	; 32
    7b8e:	99 27       	eor	r25, r25
    7b90:	21 e0       	ldi	r18, 0x01	; 1
    7b92:	89 2b       	or	r24, r25
    7b94:	09 f4       	brne	.+2      	; 0x7b98 <_ZN14HardwareSerial5writeEh+0x118>
    7b96:	20 e0       	ldi	r18, 0x00	; 0
    7b98:	22 23       	and	r18, r18
    7b9a:	d1 f2       	breq	.-76     	; 0x7b50 <_ZN14HardwareSerial5writeEh+0xd0>
	_tx_udr_empty_irq();
    7b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    7b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    7ba0:	26 dd       	rcall	.-1460   	; 0x75ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7ba2:	d6 cf       	rjmp	.-84     	; 0x7b50 <_ZN14HardwareSerial5writeEh+0xd0>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    7ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    7ba8:	fc 01       	movw	r30, r24
    7baa:	83 8d       	ldd	r24, Z+27	; 0x1b
    7bac:	88 2f       	mov	r24, r24
    7bae:	90 e0       	ldi	r25, 0x00	; 0
    7bb0:	2e 81       	ldd	r18, Y+6	; 0x06
    7bb2:	3f 81       	ldd	r19, Y+7	; 0x07
    7bb4:	82 0f       	add	r24, r18
    7bb6:	93 1f       	adc	r25, r19
    7bb8:	83 5a       	subi	r24, 0xA3	; 163
    7bba:	9f 4f       	sbci	r25, 0xFF	; 255
    7bbc:	28 85       	ldd	r18, Y+8	; 0x08
    7bbe:	fc 01       	movw	r30, r24
    7bc0:	20 83       	st	Z, r18

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7bc2:	8f e5       	ldi	r24, 0x5F	; 95
    7bc4:	90 e0       	ldi	r25, 0x00	; 0
    7bc6:	fc 01       	movw	r30, r24
    7bc8:	80 81       	ld	r24, Z
    7bca:	8d 83       	std	Y+5, r24	; 0x05
    7bcc:	9f dc       	rcall	.-1730   	; 0x750c <_ZL12__iCliRetValv>
    7bce:	8a 83       	std	Y+2, r24	; 0x02
    7bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    7bd2:	88 23       	and	r24, r24
    7bd4:	b1 f0       	breq	.+44     	; 0x7c02 <_ZN14HardwareSerial5writeEh+0x182>
    _tx_buffer_head = i;
    7bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    7bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    7bda:	2b 81       	ldd	r18, Y+3	; 0x03
    7bdc:	fc 01       	movw	r30, r24
    7bde:	23 8f       	std	Z+27, r18	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7be0:	8e 81       	ldd	r24, Y+6	; 0x06
    7be2:	9f 81       	ldd	r25, Y+7	; 0x07
    7be4:	fc 01       	movw	r30, r24
    7be6:	82 89       	ldd	r24, Z+18	; 0x12
    7be8:	93 89       	ldd	r25, Z+19	; 0x13
    7bea:	2e 81       	ldd	r18, Y+6	; 0x06
    7bec:	3f 81       	ldd	r19, Y+7	; 0x07
    7bee:	f9 01       	movw	r30, r18
    7bf0:	22 89       	ldd	r18, Z+18	; 0x12
    7bf2:	33 89       	ldd	r19, Z+19	; 0x13
    7bf4:	f9 01       	movw	r30, r18
    7bf6:	20 81       	ld	r18, Z
    7bf8:	20 62       	ori	r18, 0x20	; 32
    7bfa:	fc 01       	movw	r30, r24
    7bfc:	20 83       	st	Z, r18
  _tx_buffer[_tx_buffer_head] = c;

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7bfe:	1a 82       	std	Y+2, r1	; 0x02
    7c00:	e7 cf       	rjmp	.-50     	; 0x7bd0 <_ZN14HardwareSerial5writeEh+0x150>
    7c02:	ce 01       	movw	r24, r28
    7c04:	05 96       	adiw	r24, 0x05	; 5
    7c06:	8b dc       	rcall	.-1770   	; 0x751e <_ZL10__iRestorePKh>
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
    7c08:	81 e0       	ldi	r24, 0x01	; 1
    7c0a:	90 e0       	ldi	r25, 0x00	; 0
}
    7c0c:	28 96       	adiw	r28, 0x08	; 8
    7c0e:	0f b6       	in	r0, 0x3f	; 63
    7c10:	f8 94       	cli
    7c12:	de bf       	out	0x3e, r29	; 62
    7c14:	0f be       	out	0x3f, r0	; 63
    7c16:	cd bf       	out	0x3d, r28	; 61
    7c18:	df 91       	pop	r29
    7c1a:	cf 91       	pop	r28
    7c1c:	08 95       	ret

00007c1e <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    7c1e:	cf 93       	push	r28
    7c20:	df 93       	push	r29
    7c22:	1f 92       	push	r1
    7c24:	1f 92       	push	r1
    7c26:	cd b7       	in	r28, 0x3d	; 61
    7c28:	de b7       	in	r29, 0x3e	; 62
    7c2a:	9a 83       	std	Y+2, r25	; 0x02
    7c2c:	89 83       	std	Y+1, r24	; 0x01
    7c2e:	89 81       	ldd	r24, Y+1	; 0x01
    7c30:	9a 81       	ldd	r25, Y+2	; 0x02
    7c32:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN5PrintC1Ev>
    7c36:	28 ed       	ldi	r18, 0xD8	; 216
    7c38:	32 e0       	ldi	r19, 0x02	; 2
    7c3a:	89 81       	ldd	r24, Y+1	; 0x01
    7c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    7c3e:	fc 01       	movw	r30, r24
    7c40:	31 83       	std	Z+1, r19	; 0x01
    7c42:	20 83       	st	Z, r18
    7c44:	29 81       	ldd	r18, Y+1	; 0x01
    7c46:	3a 81       	ldd	r19, Y+2	; 0x02
    7c48:	88 ee       	ldi	r24, 0xE8	; 232
    7c4a:	93 e0       	ldi	r25, 0x03	; 3
    7c4c:	a0 e0       	ldi	r26, 0x00	; 0
    7c4e:	b0 e0       	ldi	r27, 0x00	; 0
    7c50:	f9 01       	movw	r30, r18
    7c52:	84 83       	std	Z+4, r24	; 0x04
    7c54:	95 83       	std	Z+5, r25	; 0x05
    7c56:	a6 83       	std	Z+6, r26	; 0x06
    7c58:	b7 83       	std	Z+7, r27	; 0x07
    7c5a:	00 00       	nop
    7c5c:	0f 90       	pop	r0
    7c5e:	0f 90       	pop	r0
    7c60:	df 91       	pop	r29
    7c62:	cf 91       	pop	r28
    7c64:	08 95       	ret

00007c66 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
    7c66:	cf 92       	push	r12
    7c68:	df 92       	push	r13
    7c6a:	ef 92       	push	r14
    7c6c:	ff 92       	push	r15
    7c6e:	0f 93       	push	r16
    7c70:	1f 93       	push	r17
    7c72:	cf 93       	push	r28
    7c74:	df 93       	push	r29
    7c76:	cd b7       	in	r28, 0x3d	; 61
    7c78:	de b7       	in	r29, 0x3e	; 62
    7c7a:	2e 97       	sbiw	r28, 0x0e	; 14
    7c7c:	0f b6       	in	r0, 0x3f	; 63
    7c7e:	f8 94       	cli
    7c80:	de bf       	out	0x3e, r29	; 62
    7c82:	0f be       	out	0x3f, r0	; 63
    7c84:	cd bf       	out	0x3d, r28	; 61
    7c86:	9a 83       	std	Y+2, r25	; 0x02
    7c88:	89 83       	std	Y+1, r24	; 0x01
    7c8a:	7c 83       	std	Y+4, r23	; 0x04
    7c8c:	6b 83       	std	Y+3, r22	; 0x03
    7c8e:	5e 83       	std	Y+6, r21	; 0x06
    7c90:	4d 83       	std	Y+5, r20	; 0x05
    7c92:	38 87       	std	Y+8, r19	; 0x08
    7c94:	2f 83       	std	Y+7, r18	; 0x07
    7c96:	1a 87       	std	Y+10, r17	; 0x0a
    7c98:	09 87       	std	Y+9, r16	; 0x09
    7c9a:	fc 86       	std	Y+12, r15	; 0x0c
    7c9c:	eb 86       	std	Y+11, r14	; 0x0b
    7c9e:	de 86       	std	Y+14, r13	; 0x0e
    7ca0:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    7ca2:	89 81       	ldd	r24, Y+1	; 0x01
    7ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    7ca6:	bb df       	rcall	.-138    	; 0x7c1e <_ZN6StreamC1Ev>
    7ca8:	26 ef       	ldi	r18, 0xF6	; 246
    7caa:	32 e0       	ldi	r19, 0x02	; 2
    7cac:	89 81       	ldd	r24, Y+1	; 0x01
    7cae:	9a 81       	ldd	r25, Y+2	; 0x02
    7cb0:	fc 01       	movw	r30, r24
    7cb2:	31 83       	std	Z+1, r19	; 0x01
    7cb4:	20 83       	st	Z, r18
    7cb6:	89 81       	ldd	r24, Y+1	; 0x01
    7cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    7cba:	2b 81       	ldd	r18, Y+3	; 0x03
    7cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    7cbe:	fc 01       	movw	r30, r24
    7cc0:	35 87       	std	Z+13, r19	; 0x0d
    7cc2:	24 87       	std	Z+12, r18	; 0x0c
    7cc4:	89 81       	ldd	r24, Y+1	; 0x01
    7cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    7cc8:	2d 81       	ldd	r18, Y+5	; 0x05
    7cca:	3e 81       	ldd	r19, Y+6	; 0x06
    7ccc:	fc 01       	movw	r30, r24
    7cce:	37 87       	std	Z+15, r19	; 0x0f
    7cd0:	26 87       	std	Z+14, r18	; 0x0e
    7cd2:	89 81       	ldd	r24, Y+1	; 0x01
    7cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    7cd6:	2f 81       	ldd	r18, Y+7	; 0x07
    7cd8:	38 85       	ldd	r19, Y+8	; 0x08
    7cda:	fc 01       	movw	r30, r24
    7cdc:	31 8b       	std	Z+17, r19	; 0x11
    7cde:	20 8b       	std	Z+16, r18	; 0x10
    7ce0:	89 81       	ldd	r24, Y+1	; 0x01
    7ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    7ce4:	29 85       	ldd	r18, Y+9	; 0x09
    7ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
    7ce8:	fc 01       	movw	r30, r24
    7cea:	33 8b       	std	Z+19, r19	; 0x13
    7cec:	22 8b       	std	Z+18, r18	; 0x12
    7cee:	89 81       	ldd	r24, Y+1	; 0x01
    7cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    7cf2:	2b 85       	ldd	r18, Y+11	; 0x0b
    7cf4:	3c 85       	ldd	r19, Y+12	; 0x0c
    7cf6:	fc 01       	movw	r30, r24
    7cf8:	35 8b       	std	Z+21, r19	; 0x15
    7cfa:	24 8b       	std	Z+20, r18	; 0x14
    7cfc:	89 81       	ldd	r24, Y+1	; 0x01
    7cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    7d00:	2d 85       	ldd	r18, Y+13	; 0x0d
    7d02:	3e 85       	ldd	r19, Y+14	; 0x0e
    7d04:	fc 01       	movw	r30, r24
    7d06:	37 8b       	std	Z+23, r19	; 0x17
    7d08:	26 8b       	std	Z+22, r18	; 0x16
    7d0a:	89 81       	ldd	r24, Y+1	; 0x01
    7d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d0e:	fc 01       	movw	r30, r24
    7d10:	11 8e       	std	Z+25, r1	; 0x19
    7d12:	89 81       	ldd	r24, Y+1	; 0x01
    7d14:	9a 81       	ldd	r25, Y+2	; 0x02
    7d16:	fc 01       	movw	r30, r24
    7d18:	12 8e       	std	Z+26, r1	; 0x1a
    7d1a:	89 81       	ldd	r24, Y+1	; 0x01
    7d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d1e:	fc 01       	movw	r30, r24
    7d20:	13 8e       	std	Z+27, r1	; 0x1b
    7d22:	89 81       	ldd	r24, Y+1	; 0x01
    7d24:	9a 81       	ldd	r25, Y+2	; 0x02
    7d26:	fc 01       	movw	r30, r24
    7d28:	14 8e       	std	Z+28, r1	; 0x1c
{
}
    7d2a:	00 00       	nop
    7d2c:	2e 96       	adiw	r28, 0x0e	; 14
    7d2e:	0f b6       	in	r0, 0x3f	; 63
    7d30:	f8 94       	cli
    7d32:	de bf       	out	0x3e, r29	; 62
    7d34:	0f be       	out	0x3f, r0	; 63
    7d36:	cd bf       	out	0x3d, r28	; 61
    7d38:	df 91       	pop	r29
    7d3a:	cf 91       	pop	r28
    7d3c:	1f 91       	pop	r17
    7d3e:	0f 91       	pop	r16
    7d40:	ff 90       	pop	r15
    7d42:	ef 90       	pop	r14
    7d44:	df 90       	pop	r13
    7d46:	cf 90       	pop	r12
    7d48:	08 95       	ret

00007d4a <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
    7d4a:	cf 93       	push	r28
    7d4c:	df 93       	push	r29
    7d4e:	00 d0       	rcall	.+0      	; 0x7d50 <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
    7d50:	1f 92       	push	r1
    7d52:	cd b7       	in	r28, 0x3d	; 61
    7d54:	de b7       	in	r29, 0x3e	; 62
    7d56:	9c 83       	std	Y+4, r25	; 0x04
    7d58:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
    7d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    7d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    7d5e:	fc 01       	movw	r30, r24
    7d60:	80 89       	ldd	r24, Z+16	; 0x10
    7d62:	91 89       	ldd	r25, Z+17	; 0x11
    7d64:	fc 01       	movw	r30, r24
    7d66:	80 81       	ld	r24, Z
    7d68:	88 2f       	mov	r24, r24
    7d6a:	90 e0       	ldi	r25, 0x00	; 0
    7d6c:	84 70       	andi	r24, 0x04	; 4
    7d6e:	99 27       	eor	r25, r25
    7d70:	21 e0       	ldi	r18, 0x01	; 1
    7d72:	89 2b       	or	r24, r25
    7d74:	09 f0       	breq	.+2      	; 0x7d78 <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
    7d76:	20 e0       	ldi	r18, 0x00	; 0
    7d78:	22 23       	and	r18, r18
    7d7a:	71 f1       	breq	.+92     	; 0x7dd8 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    7d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    7d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    7d80:	fc 01       	movw	r30, r24
    7d82:	86 89       	ldd	r24, Z+22	; 0x16
    7d84:	97 89       	ldd	r25, Z+23	; 0x17
    7d86:	fc 01       	movw	r30, r24
    7d88:	80 81       	ld	r24, Z
    7d8a:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    7d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    7d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    7d90:	fc 01       	movw	r30, r24
    7d92:	81 8d       	ldd	r24, Z+25	; 0x19
    7d94:	8f 5f       	subi	r24, 0xFF	; 255
    7d96:	8f 73       	andi	r24, 0x3F	; 63
    7d98:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    7d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    7d9e:	fc 01       	movw	r30, r24
    7da0:	22 8d       	ldd	r18, Z+26	; 0x1a
    7da2:	81 e0       	ldi	r24, 0x01	; 1
    7da4:	9a 81       	ldd	r25, Y+2	; 0x02
    7da6:	29 17       	cp	r18, r25
    7da8:	09 f4       	brne	.+2      	; 0x7dac <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
    7daa:	80 e0       	ldi	r24, 0x00	; 0
    7dac:	88 23       	and	r24, r24
    7dae:	d9 f0       	breq	.+54     	; 0x7de6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
    7db0:	8b 81       	ldd	r24, Y+3	; 0x03
    7db2:	9c 81       	ldd	r25, Y+4	; 0x04
    7db4:	fc 01       	movw	r30, r24
    7db6:	81 8d       	ldd	r24, Z+25	; 0x19
    7db8:	88 2f       	mov	r24, r24
    7dba:	90 e0       	ldi	r25, 0x00	; 0
    7dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    7dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    7dc0:	82 0f       	add	r24, r18
    7dc2:	93 1f       	adc	r25, r19
    7dc4:	4d 96       	adiw	r24, 0x1d	; 29
    7dc6:	29 81       	ldd	r18, Y+1	; 0x01
    7dc8:	fc 01       	movw	r30, r24
    7dca:	20 83       	st	Z, r18
      _rx_buffer_head = i;
    7dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    7dce:	9c 81       	ldd	r25, Y+4	; 0x04
    7dd0:	2a 81       	ldd	r18, Y+2	; 0x02
    7dd2:	fc 01       	movw	r30, r24
    7dd4:	21 8f       	std	Z+25, r18	; 0x19
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
  };
}
    7dd6:	07 c0       	rjmp	.+14     	; 0x7de6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
      _rx_buffer_head = i;
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    7dda:	9c 81       	ldd	r25, Y+4	; 0x04
    7ddc:	fc 01       	movw	r30, r24
    7dde:	86 89       	ldd	r24, Z+22	; 0x16
    7de0:	97 89       	ldd	r25, Z+23	; 0x17
    7de2:	fc 01       	movw	r30, r24
    7de4:	80 81       	ld	r24, Z
  };
}
    7de6:	00 00       	nop
    7de8:	0f 90       	pop	r0
    7dea:	0f 90       	pop	r0
    7dec:	0f 90       	pop	r0
    7dee:	0f 90       	pop	r0
    7df0:	df 91       	pop	r29
    7df2:	cf 91       	pop	r28
    7df4:	08 95       	ret

00007df6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7df6:	1f 92       	push	r1
    7df8:	0f 92       	push	r0
    7dfa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7dfe:	0f 92       	push	r0
    7e00:	11 24       	eor	r1, r1
    7e02:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7e06:	0f 92       	push	r0
    7e08:	2f 93       	push	r18
    7e0a:	3f 93       	push	r19
    7e0c:	4f 93       	push	r20
    7e0e:	5f 93       	push	r21
    7e10:	6f 93       	push	r22
    7e12:	7f 93       	push	r23
    7e14:	8f 93       	push	r24
    7e16:	9f 93       	push	r25
    7e18:	af 93       	push	r26
    7e1a:	bf 93       	push	r27
    7e1c:	ef 93       	push	r30
    7e1e:	ff 93       	push	r31
    7e20:	cf 93       	push	r28
    7e22:	df 93       	push	r29
    7e24:	cd b7       	in	r28, 0x3d	; 61
    7e26:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
    7e28:	8b ec       	ldi	r24, 0xCB	; 203
    7e2a:	93 e0       	ldi	r25, 0x03	; 3
    7e2c:	8e df       	rcall	.-228    	; 0x7d4a <_ZN14HardwareSerial16_rx_complete_irqEv>
  }
    7e2e:	00 00       	nop
    7e30:	df 91       	pop	r29
    7e32:	cf 91       	pop	r28
    7e34:	ff 91       	pop	r31
    7e36:	ef 91       	pop	r30
    7e38:	bf 91       	pop	r27
    7e3a:	af 91       	pop	r26
    7e3c:	9f 91       	pop	r25
    7e3e:	8f 91       	pop	r24
    7e40:	7f 91       	pop	r23
    7e42:	6f 91       	pop	r22
    7e44:	5f 91       	pop	r21
    7e46:	4f 91       	pop	r20
    7e48:	3f 91       	pop	r19
    7e4a:	2f 91       	pop	r18
    7e4c:	0f 90       	pop	r0
    7e4e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7e52:	0f 90       	pop	r0
    7e54:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7e58:	0f 90       	pop	r0
    7e5a:	1f 90       	pop	r1
    7e5c:	18 95       	reti

00007e5e <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    7e5e:	1f 92       	push	r1
    7e60:	0f 92       	push	r0
    7e62:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7e66:	0f 92       	push	r0
    7e68:	11 24       	eor	r1, r1
    7e6a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7e6e:	0f 92       	push	r0
    7e70:	2f 93       	push	r18
    7e72:	3f 93       	push	r19
    7e74:	4f 93       	push	r20
    7e76:	5f 93       	push	r21
    7e78:	6f 93       	push	r22
    7e7a:	7f 93       	push	r23
    7e7c:	8f 93       	push	r24
    7e7e:	9f 93       	push	r25
    7e80:	af 93       	push	r26
    7e82:	bf 93       	push	r27
    7e84:	ef 93       	push	r30
    7e86:	ff 93       	push	r31
    7e88:	cf 93       	push	r28
    7e8a:	df 93       	push	r29
    7e8c:	cd b7       	in	r28, 0x3d	; 61
    7e8e:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
    7e90:	8b ec       	ldi	r24, 0xCB	; 203
    7e92:	93 e0       	ldi	r25, 0x03	; 3
    7e94:	ac db       	rcall	.-2216   	; 0x75ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    7e96:	00 00       	nop
    7e98:	df 91       	pop	r29
    7e9a:	cf 91       	pop	r28
    7e9c:	ff 91       	pop	r31
    7e9e:	ef 91       	pop	r30
    7ea0:	bf 91       	pop	r27
    7ea2:	af 91       	pop	r26
    7ea4:	9f 91       	pop	r25
    7ea6:	8f 91       	pop	r24
    7ea8:	7f 91       	pop	r23
    7eaa:	6f 91       	pop	r22
    7eac:	5f 91       	pop	r21
    7eae:	4f 91       	pop	r20
    7eb0:	3f 91       	pop	r19
    7eb2:	2f 91       	pop	r18
    7eb4:	0f 90       	pop	r0
    7eb6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7eba:	0f 90       	pop	r0
    7ebc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7ec0:	0f 90       	pop	r0
    7ec2:	1f 90       	pop	r1
    7ec4:	18 95       	reti

00007ec6 <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
    7ec6:	cf 93       	push	r28
    7ec8:	df 93       	push	r29
    7eca:	cd b7       	in	r28, 0x3d	; 61
    7ecc:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
    7ece:	8b ec       	ldi	r24, 0xCB	; 203
    7ed0:	93 e0       	ldi	r25, 0x03	; 3
    7ed2:	b4 dc       	rcall	.-1688   	; 0x783c <_ZN14HardwareSerial9availableEv>
    7ed4:	21 e0       	ldi	r18, 0x01	; 1
    7ed6:	89 2b       	or	r24, r25
    7ed8:	09 f4       	brne	.+2      	; 0x7edc <_Z17Serial0_availablev+0x16>
    7eda:	20 e0       	ldi	r18, 0x00	; 0
    7edc:	82 2f       	mov	r24, r18
}
    7ede:	df 91       	pop	r29
    7ee0:	cf 91       	pop	r28
    7ee2:	08 95       	ret

00007ee4 <_Z41__static_initialization_and_destruction_0ii>:
    7ee4:	cf 92       	push	r12
    7ee6:	df 92       	push	r13
    7ee8:	ef 92       	push	r14
    7eea:	ff 92       	push	r15
    7eec:	0f 93       	push	r16
    7eee:	1f 93       	push	r17
    7ef0:	cf 93       	push	r28
    7ef2:	df 93       	push	r29
    7ef4:	00 d0       	rcall	.+0      	; 0x7ef6 <_Z41__static_initialization_and_destruction_0ii+0x12>
    7ef6:	1f 92       	push	r1
    7ef8:	cd b7       	in	r28, 0x3d	; 61
    7efa:	de b7       	in	r29, 0x3e	; 62
    7efc:	9a 83       	std	Y+2, r25	; 0x02
    7efe:	89 83       	std	Y+1, r24	; 0x01
    7f00:	7c 83       	std	Y+4, r23	; 0x04
    7f02:	6b 83       	std	Y+3, r22	; 0x03
    7f04:	89 81       	ldd	r24, Y+1	; 0x01
    7f06:	9a 81       	ldd	r25, Y+2	; 0x02
    7f08:	01 97       	sbiw	r24, 0x01	; 1
    7f0a:	c9 f4       	brne	.+50     	; 0x7f3e <_Z41__static_initialization_and_destruction_0ii+0x5a>
    7f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    7f10:	01 96       	adiw	r24, 0x01	; 1
    7f12:	a9 f4       	brne	.+42     	; 0x7f3e <_Z41__static_initialization_and_destruction_0ii+0x5a>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
    7f14:	0f 2e       	mov	r0, r31
    7f16:	f6 ec       	ldi	r31, 0xC6	; 198
    7f18:	cf 2e       	mov	r12, r31
    7f1a:	d1 2c       	mov	r13, r1
    7f1c:	f0 2d       	mov	r31, r0
    7f1e:	0f 2e       	mov	r0, r31
    7f20:	f2 ec       	ldi	r31, 0xC2	; 194
    7f22:	ef 2e       	mov	r14, r31
    7f24:	f1 2c       	mov	r15, r1
    7f26:	f0 2d       	mov	r31, r0
    7f28:	01 ec       	ldi	r16, 0xC1	; 193
    7f2a:	10 e0       	ldi	r17, 0x00	; 0
    7f2c:	20 ec       	ldi	r18, 0xC0	; 192
    7f2e:	30 e0       	ldi	r19, 0x00	; 0
    7f30:	44 ec       	ldi	r20, 0xC4	; 196
    7f32:	50 e0       	ldi	r21, 0x00	; 0
    7f34:	65 ec       	ldi	r22, 0xC5	; 197
    7f36:	70 e0       	ldi	r23, 0x00	; 0
    7f38:	8b ec       	ldi	r24, 0xCB	; 203
    7f3a:	93 e0       	ldi	r25, 0x03	; 3
    7f3c:	94 de       	rcall	.-728    	; 0x7c66 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    7f3e:	00 00       	nop
    7f40:	0f 90       	pop	r0
    7f42:	0f 90       	pop	r0
    7f44:	0f 90       	pop	r0
    7f46:	0f 90       	pop	r0
    7f48:	df 91       	pop	r29
    7f4a:	cf 91       	pop	r28
    7f4c:	1f 91       	pop	r17
    7f4e:	0f 91       	pop	r16
    7f50:	ff 90       	pop	r15
    7f52:	ef 90       	pop	r14
    7f54:	df 90       	pop	r13
    7f56:	cf 90       	pop	r12
    7f58:	08 95       	ret

00007f5a <_GLOBAL__sub_I___vector_25>:
    7f5a:	cf 93       	push	r28
    7f5c:	df 93       	push	r29
    7f5e:	cd b7       	in	r28, 0x3d	; 61
    7f60:	de b7       	in	r29, 0x3e	; 62
    7f62:	6f ef       	ldi	r22, 0xFF	; 255
    7f64:	7f ef       	ldi	r23, 0xFF	; 255
    7f66:	81 e0       	ldi	r24, 0x01	; 1
    7f68:	90 e0       	ldi	r25, 0x00	; 0
    7f6a:	bc df       	rcall	.-136    	; 0x7ee4 <_Z41__static_initialization_and_destruction_0ii>
    7f6c:	df 91       	pop	r29
    7f6e:	cf 91       	pop	r28
    7f70:	08 95       	ret

00007f72 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    7f72:	1f 92       	push	r1
    7f74:	0f 92       	push	r0
    7f76:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7f7a:	0f 92       	push	r0
    7f7c:	11 24       	eor	r1, r1
    7f7e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7f82:	0f 92       	push	r0
    7f84:	2f 93       	push	r18
    7f86:	3f 93       	push	r19
    7f88:	4f 93       	push	r20
    7f8a:	5f 93       	push	r21
    7f8c:	6f 93       	push	r22
    7f8e:	7f 93       	push	r23
    7f90:	8f 93       	push	r24
    7f92:	9f 93       	push	r25
    7f94:	af 93       	push	r26
    7f96:	bf 93       	push	r27
    7f98:	ef 93       	push	r30
    7f9a:	ff 93       	push	r31
    7f9c:	cf 93       	push	r28
    7f9e:	df 93       	push	r29
    7fa0:	cd b7       	in	r28, 0x3d	; 61
    7fa2:	de b7       	in	r29, 0x3e	; 62
  Serial1._rx_complete_irq();
    7fa4:	88 e6       	ldi	r24, 0x68	; 104
    7fa6:	94 e0       	ldi	r25, 0x04	; 4
    7fa8:	d0 de       	rcall	.-608    	; 0x7d4a <_ZN14HardwareSerial16_rx_complete_irqEv>
}
    7faa:	00 00       	nop
    7fac:	df 91       	pop	r29
    7fae:	cf 91       	pop	r28
    7fb0:	ff 91       	pop	r31
    7fb2:	ef 91       	pop	r30
    7fb4:	bf 91       	pop	r27
    7fb6:	af 91       	pop	r26
    7fb8:	9f 91       	pop	r25
    7fba:	8f 91       	pop	r24
    7fbc:	7f 91       	pop	r23
    7fbe:	6f 91       	pop	r22
    7fc0:	5f 91       	pop	r21
    7fc2:	4f 91       	pop	r20
    7fc4:	3f 91       	pop	r19
    7fc6:	2f 91       	pop	r18
    7fc8:	0f 90       	pop	r0
    7fca:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7fce:	0f 90       	pop	r0
    7fd0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7fd4:	0f 90       	pop	r0
    7fd6:	1f 90       	pop	r1
    7fd8:	18 95       	reti

00007fda <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    7fda:	1f 92       	push	r1
    7fdc:	0f 92       	push	r0
    7fde:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    7fe2:	0f 92       	push	r0
    7fe4:	11 24       	eor	r1, r1
    7fe6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    7fea:	0f 92       	push	r0
    7fec:	2f 93       	push	r18
    7fee:	3f 93       	push	r19
    7ff0:	4f 93       	push	r20
    7ff2:	5f 93       	push	r21
    7ff4:	6f 93       	push	r22
    7ff6:	7f 93       	push	r23
    7ff8:	8f 93       	push	r24
    7ffa:	9f 93       	push	r25
    7ffc:	af 93       	push	r26
    7ffe:	bf 93       	push	r27
    8000:	ef 93       	push	r30
    8002:	ff 93       	push	r31
    8004:	cf 93       	push	r28
    8006:	df 93       	push	r29
    8008:	cd b7       	in	r28, 0x3d	; 61
    800a:	de b7       	in	r29, 0x3e	; 62
  Serial1._tx_udr_empty_irq();
    800c:	88 e6       	ldi	r24, 0x68	; 104
    800e:	94 e0       	ldi	r25, 0x04	; 4
    8010:	ee da       	rcall	.-2596   	; 0x75ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    8012:	00 00       	nop
    8014:	df 91       	pop	r29
    8016:	cf 91       	pop	r28
    8018:	ff 91       	pop	r31
    801a:	ef 91       	pop	r30
    801c:	bf 91       	pop	r27
    801e:	af 91       	pop	r26
    8020:	9f 91       	pop	r25
    8022:	8f 91       	pop	r24
    8024:	7f 91       	pop	r23
    8026:	6f 91       	pop	r22
    8028:	5f 91       	pop	r21
    802a:	4f 91       	pop	r20
    802c:	3f 91       	pop	r19
    802e:	2f 91       	pop	r18
    8030:	0f 90       	pop	r0
    8032:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    8036:	0f 90       	pop	r0
    8038:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    803c:	0f 90       	pop	r0
    803e:	1f 90       	pop	r1
    8040:	18 95       	reti

00008042 <_Z17Serial1_availablev>:

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
    8042:	cf 93       	push	r28
    8044:	df 93       	push	r29
    8046:	cd b7       	in	r28, 0x3d	; 61
    8048:	de b7       	in	r29, 0x3e	; 62
  return Serial1.available();
    804a:	88 e6       	ldi	r24, 0x68	; 104
    804c:	94 e0       	ldi	r25, 0x04	; 4
    804e:	f6 db       	rcall	.-2068   	; 0x783c <_ZN14HardwareSerial9availableEv>
    8050:	21 e0       	ldi	r18, 0x01	; 1
    8052:	89 2b       	or	r24, r25
    8054:	09 f4       	brne	.+2      	; 0x8058 <_Z17Serial1_availablev+0x16>
    8056:	20 e0       	ldi	r18, 0x00	; 0
    8058:	82 2f       	mov	r24, r18
}
    805a:	df 91       	pop	r29
    805c:	cf 91       	pop	r28
    805e:	08 95       	ret

00008060 <_Z41__static_initialization_and_destruction_0ii>:
    8060:	cf 92       	push	r12
    8062:	df 92       	push	r13
    8064:	ef 92       	push	r14
    8066:	ff 92       	push	r15
    8068:	0f 93       	push	r16
    806a:	1f 93       	push	r17
    806c:	cf 93       	push	r28
    806e:	df 93       	push	r29
    8070:	00 d0       	rcall	.+0      	; 0x8072 <_Z41__static_initialization_and_destruction_0ii+0x12>
    8072:	1f 92       	push	r1
    8074:	cd b7       	in	r28, 0x3d	; 61
    8076:	de b7       	in	r29, 0x3e	; 62
    8078:	9a 83       	std	Y+2, r25	; 0x02
    807a:	89 83       	std	Y+1, r24	; 0x01
    807c:	7c 83       	std	Y+4, r23	; 0x04
    807e:	6b 83       	std	Y+3, r22	; 0x03
    8080:	89 81       	ldd	r24, Y+1	; 0x01
    8082:	9a 81       	ldd	r25, Y+2	; 0x02
    8084:	01 97       	sbiw	r24, 0x01	; 1
    8086:	c9 f4       	brne	.+50     	; 0x80ba <_Z41__static_initialization_and_destruction_0ii+0x5a>
    8088:	8b 81       	ldd	r24, Y+3	; 0x03
    808a:	9c 81       	ldd	r25, Y+4	; 0x04
    808c:	01 96       	adiw	r24, 0x01	; 1
    808e:	a9 f4       	brne	.+42     	; 0x80ba <_Z41__static_initialization_and_destruction_0ii+0x5a>
#endif
{
  Serial1._tx_udr_empty_irq();
}

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);
    8090:	0f 2e       	mov	r0, r31
    8092:	fe ec       	ldi	r31, 0xCE	; 206
    8094:	cf 2e       	mov	r12, r31
    8096:	d1 2c       	mov	r13, r1
    8098:	f0 2d       	mov	r31, r0
    809a:	0f 2e       	mov	r0, r31
    809c:	fa ec       	ldi	r31, 0xCA	; 202
    809e:	ef 2e       	mov	r14, r31
    80a0:	f1 2c       	mov	r15, r1
    80a2:	f0 2d       	mov	r31, r0
    80a4:	09 ec       	ldi	r16, 0xC9	; 201
    80a6:	10 e0       	ldi	r17, 0x00	; 0
    80a8:	28 ec       	ldi	r18, 0xC8	; 200
    80aa:	30 e0       	ldi	r19, 0x00	; 0
    80ac:	4c ec       	ldi	r20, 0xCC	; 204
    80ae:	50 e0       	ldi	r21, 0x00	; 0
    80b0:	6d ec       	ldi	r22, 0xCD	; 205
    80b2:	70 e0       	ldi	r23, 0x00	; 0
    80b4:	88 e6       	ldi	r24, 0x68	; 104
    80b6:	94 e0       	ldi	r25, 0x04	; 4
    80b8:	d6 dd       	rcall	.-1108   	; 0x7c66 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    80ba:	00 00       	nop
    80bc:	0f 90       	pop	r0
    80be:	0f 90       	pop	r0
    80c0:	0f 90       	pop	r0
    80c2:	0f 90       	pop	r0
    80c4:	df 91       	pop	r29
    80c6:	cf 91       	pop	r28
    80c8:	1f 91       	pop	r17
    80ca:	0f 91       	pop	r16
    80cc:	ff 90       	pop	r15
    80ce:	ef 90       	pop	r14
    80d0:	df 90       	pop	r13
    80d2:	cf 90       	pop	r12
    80d4:	08 95       	ret

000080d6 <_GLOBAL__sub_I___vector_36>:
    80d6:	cf 93       	push	r28
    80d8:	df 93       	push	r29
    80da:	cd b7       	in	r28, 0x3d	; 61
    80dc:	de b7       	in	r29, 0x3e	; 62
    80de:	6f ef       	ldi	r22, 0xFF	; 255
    80e0:	7f ef       	ldi	r23, 0xFF	; 255
    80e2:	81 e0       	ldi	r24, 0x01	; 1
    80e4:	90 e0       	ldi	r25, 0x00	; 0
    80e6:	bc df       	rcall	.-136    	; 0x8060 <_Z41__static_initialization_and_destruction_0ii>
    80e8:	df 91       	pop	r29
    80ea:	cf 91       	pop	r28
    80ec:	08 95       	ret

000080ee <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
    80ee:	cf 93       	push	r28
    80f0:	df 93       	push	r29
    80f2:	cd b7       	in	r28, 0x3d	; 61
    80f4:	de b7       	in	r29, 0x3e	; 62
	init();
    80f6:	5a d4       	rcall	.+2228   	; 0x89ac <init>

	initVariant();
    80f8:	0e 94 69 56 	call	0xacd2	; 0xacd2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    80fc:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <setup>
    
	for (;;) {
		loop();
    8100:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <loop>
		if (serialEventRun) serialEventRun();
    8104:	85 ea       	ldi	r24, 0xA5	; 165
    8106:	9a e3       	ldi	r25, 0x3A	; 58
    8108:	89 2b       	or	r24, r25
    810a:	d1 f3       	breq	.-12     	; 0x8100 <main+0x12>
    810c:	1e da       	rcall	.-3012   	; 0x754a <_Z14serialEventRunv>
	USBDevice.attach();
#endif
	
	setup();
    
	for (;;) {
    810e:	f8 cf       	rjmp	.-16     	; 0x8100 <main+0x12>

00008110 <_ZN5Print5writeEPKc>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    8110:	0f 93       	push	r16
    8112:	1f 93       	push	r17
    8114:	cf 93       	push	r28
    8116:	df 93       	push	r29
    8118:	00 d0       	rcall	.+0      	; 0x811a <_ZN5Print5writeEPKc+0xa>
    811a:	1f 92       	push	r1
    811c:	cd b7       	in	r28, 0x3d	; 61
    811e:	de b7       	in	r29, 0x3e	; 62
    8120:	9a 83       	std	Y+2, r25	; 0x02
    8122:	89 83       	std	Y+1, r24	; 0x01
    8124:	7c 83       	std	Y+4, r23	; 0x04
    8126:	6b 83       	std	Y+3, r22	; 0x03
    8128:	8b 81       	ldd	r24, Y+3	; 0x03
    812a:	9c 81       	ldd	r25, Y+4	; 0x04
    812c:	89 2b       	or	r24, r25
    812e:	19 f4       	brne	.+6      	; 0x8136 <_ZN5Print5writeEPKc+0x26>
    8130:	80 e0       	ldi	r24, 0x00	; 0
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	15 c0       	rjmp	.+42     	; 0x8160 <_ZN5Print5writeEPKc+0x50>
    8136:	89 81       	ldd	r24, Y+1	; 0x01
    8138:	9a 81       	ldd	r25, Y+2	; 0x02
    813a:	fc 01       	movw	r30, r24
    813c:	80 81       	ld	r24, Z
    813e:	91 81       	ldd	r25, Z+1	; 0x01
    8140:	02 96       	adiw	r24, 0x02	; 2
    8142:	fc 01       	movw	r30, r24
    8144:	00 81       	ld	r16, Z
    8146:	11 81       	ldd	r17, Z+1	; 0x01
    8148:	8b 81       	ldd	r24, Y+3	; 0x03
    814a:	9c 81       	ldd	r25, Y+4	; 0x04
    814c:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    8150:	ac 01       	movw	r20, r24
    8152:	2b 81       	ldd	r18, Y+3	; 0x03
    8154:	3c 81       	ldd	r19, Y+4	; 0x04
    8156:	89 81       	ldd	r24, Y+1	; 0x01
    8158:	9a 81       	ldd	r25, Y+2	; 0x02
    815a:	b9 01       	movw	r22, r18
    815c:	f8 01       	movw	r30, r16
    815e:	19 95       	eicall
    8160:	0f 90       	pop	r0
    8162:	0f 90       	pop	r0
    8164:	0f 90       	pop	r0
    8166:	0f 90       	pop	r0
    8168:	df 91       	pop	r29
    816a:	cf 91       	pop	r28
    816c:	1f 91       	pop	r17
    816e:	0f 91       	pop	r16
    8170:	08 95       	ret

00008172 <_ZN5Print5writeEPKhj>:
    8172:	cf 93       	push	r28
    8174:	df 93       	push	r29
    8176:	cd b7       	in	r28, 0x3d	; 61
    8178:	de b7       	in	r29, 0x3e	; 62
    817a:	28 97       	sbiw	r28, 0x08	; 8
    817c:	0f b6       	in	r0, 0x3f	; 63
    817e:	f8 94       	cli
    8180:	de bf       	out	0x3e, r29	; 62
    8182:	0f be       	out	0x3f, r0	; 63
    8184:	cd bf       	out	0x3d, r28	; 61
    8186:	9c 83       	std	Y+4, r25	; 0x04
    8188:	8b 83       	std	Y+3, r24	; 0x03
    818a:	7e 83       	std	Y+6, r23	; 0x06
    818c:	6d 83       	std	Y+5, r22	; 0x05
    818e:	58 87       	std	Y+8, r21	; 0x08
    8190:	4f 83       	std	Y+7, r20	; 0x07
    8192:	1a 82       	std	Y+2, r1	; 0x02
    8194:	19 82       	std	Y+1, r1	; 0x01
    8196:	8f 81       	ldd	r24, Y+7	; 0x07
    8198:	98 85       	ldd	r25, Y+8	; 0x08
    819a:	9c 01       	movw	r18, r24
    819c:	21 50       	subi	r18, 0x01	; 1
    819e:	31 09       	sbc	r19, r1
    81a0:	38 87       	std	Y+8, r19	; 0x08
    81a2:	2f 83       	std	Y+7, r18	; 0x07
    81a4:	21 e0       	ldi	r18, 0x01	; 1
    81a6:	89 2b       	or	r24, r25
    81a8:	09 f4       	brne	.+2      	; 0x81ac <_ZN5Print5writeEPKhj+0x3a>
    81aa:	20 e0       	ldi	r18, 0x00	; 0
    81ac:	22 23       	and	r18, r18
    81ae:	19 f1       	breq	.+70     	; 0x81f6 <_ZN5Print5writeEPKhj+0x84>
    81b0:	8b 81       	ldd	r24, Y+3	; 0x03
    81b2:	9c 81       	ldd	r25, Y+4	; 0x04
    81b4:	fc 01       	movw	r30, r24
    81b6:	80 81       	ld	r24, Z
    81b8:	91 81       	ldd	r25, Z+1	; 0x01
    81ba:	fc 01       	movw	r30, r24
    81bc:	20 81       	ld	r18, Z
    81be:	31 81       	ldd	r19, Z+1	; 0x01
    81c0:	8d 81       	ldd	r24, Y+5	; 0x05
    81c2:	9e 81       	ldd	r25, Y+6	; 0x06
    81c4:	ac 01       	movw	r20, r24
    81c6:	4f 5f       	subi	r20, 0xFF	; 255
    81c8:	5f 4f       	sbci	r21, 0xFF	; 255
    81ca:	5e 83       	std	Y+6, r21	; 0x06
    81cc:	4d 83       	std	Y+5, r20	; 0x05
    81ce:	fc 01       	movw	r30, r24
    81d0:	40 81       	ld	r20, Z
    81d2:	8b 81       	ldd	r24, Y+3	; 0x03
    81d4:	9c 81       	ldd	r25, Y+4	; 0x04
    81d6:	64 2f       	mov	r22, r20
    81d8:	f9 01       	movw	r30, r18
    81da:	19 95       	eicall
    81dc:	21 e0       	ldi	r18, 0x01	; 1
    81de:	89 2b       	or	r24, r25
    81e0:	09 f4       	brne	.+2      	; 0x81e4 <_ZN5Print5writeEPKhj+0x72>
    81e2:	20 e0       	ldi	r18, 0x00	; 0
    81e4:	22 23       	and	r18, r18
    81e6:	31 f0       	breq	.+12     	; 0x81f4 <_ZN5Print5writeEPKhj+0x82>
    81e8:	89 81       	ldd	r24, Y+1	; 0x01
    81ea:	9a 81       	ldd	r25, Y+2	; 0x02
    81ec:	01 96       	adiw	r24, 0x01	; 1
    81ee:	9a 83       	std	Y+2, r25	; 0x02
    81f0:	89 83       	std	Y+1, r24	; 0x01
    81f2:	d1 cf       	rjmp	.-94     	; 0x8196 <_ZN5Print5writeEPKhj+0x24>
    81f4:	00 00       	nop
    81f6:	89 81       	ldd	r24, Y+1	; 0x01
    81f8:	9a 81       	ldd	r25, Y+2	; 0x02
    81fa:	28 96       	adiw	r28, 0x08	; 8
    81fc:	0f b6       	in	r0, 0x3f	; 63
    81fe:	f8 94       	cli
    8200:	de bf       	out	0x3e, r29	; 62
    8202:	0f be       	out	0x3f, r0	; 63
    8204:	cd bf       	out	0x3d, r28	; 61
    8206:	df 91       	pop	r29
    8208:	cf 91       	pop	r28
    820a:	08 95       	ret

0000820c <_ZN5Print5printEPK19__FlashStringHelper>:
    820c:	cf 93       	push	r28
    820e:	df 93       	push	r29
    8210:	cd b7       	in	r28, 0x3d	; 61
    8212:	de b7       	in	r29, 0x3e	; 62
    8214:	2c 97       	sbiw	r28, 0x0c	; 12
    8216:	0f b6       	in	r0, 0x3f	; 63
    8218:	f8 94       	cli
    821a:	de bf       	out	0x3e, r29	; 62
    821c:	0f be       	out	0x3f, r0	; 63
    821e:	cd bf       	out	0x3d, r28	; 61
    8220:	9a 87       	std	Y+10, r25	; 0x0a
    8222:	89 87       	std	Y+9, r24	; 0x09
    8224:	7c 87       	std	Y+12, r23	; 0x0c
    8226:	6b 87       	std	Y+11, r22	; 0x0b
    8228:	8b 85       	ldd	r24, Y+11	; 0x0b
    822a:	9c 85       	ldd	r25, Y+12	; 0x0c
    822c:	9a 83       	std	Y+2, r25	; 0x02
    822e:	89 83       	std	Y+1, r24	; 0x01
    8230:	1c 82       	std	Y+4, r1	; 0x04
    8232:	1b 82       	std	Y+3, r1	; 0x03
    8234:	89 81       	ldd	r24, Y+1	; 0x01
    8236:	9a 81       	ldd	r25, Y+2	; 0x02
    8238:	9c 01       	movw	r18, r24
    823a:	2f 5f       	subi	r18, 0xFF	; 255
    823c:	3f 4f       	sbci	r19, 0xFF	; 255
    823e:	3a 83       	std	Y+2, r19	; 0x02
    8240:	29 83       	std	Y+1, r18	; 0x01
    8242:	9e 83       	std	Y+6, r25	; 0x06
    8244:	8d 83       	std	Y+5, r24	; 0x05
    8246:	8d 81       	ldd	r24, Y+5	; 0x05
    8248:	9e 81       	ldd	r25, Y+6	; 0x06
    824a:	fc 01       	movw	r30, r24
    824c:	84 91       	lpm	r24, Z
    824e:	8f 83       	std	Y+7, r24	; 0x07
    8250:	8f 81       	ldd	r24, Y+7	; 0x07
    8252:	88 87       	std	Y+8, r24	; 0x08
    8254:	88 85       	ldd	r24, Y+8	; 0x08
    8256:	88 23       	and	r24, r24
    8258:	c9 f0       	breq	.+50     	; 0x828c <_ZN5Print5printEPK19__FlashStringHelper+0x80>
    825a:	89 85       	ldd	r24, Y+9	; 0x09
    825c:	9a 85       	ldd	r25, Y+10	; 0x0a
    825e:	fc 01       	movw	r30, r24
    8260:	80 81       	ld	r24, Z
    8262:	91 81       	ldd	r25, Z+1	; 0x01
    8264:	fc 01       	movw	r30, r24
    8266:	20 81       	ld	r18, Z
    8268:	31 81       	ldd	r19, Z+1	; 0x01
    826a:	89 85       	ldd	r24, Y+9	; 0x09
    826c:	9a 85       	ldd	r25, Y+10	; 0x0a
    826e:	68 85       	ldd	r22, Y+8	; 0x08
    8270:	f9 01       	movw	r30, r18
    8272:	19 95       	eicall
    8274:	21 e0       	ldi	r18, 0x01	; 1
    8276:	89 2b       	or	r24, r25
    8278:	09 f4       	brne	.+2      	; 0x827c <_ZN5Print5printEPK19__FlashStringHelper+0x70>
    827a:	20 e0       	ldi	r18, 0x00	; 0
    827c:	22 23       	and	r18, r18
    827e:	41 f0       	breq	.+16     	; 0x8290 <_ZN5Print5printEPK19__FlashStringHelper+0x84>
    8280:	8b 81       	ldd	r24, Y+3	; 0x03
    8282:	9c 81       	ldd	r25, Y+4	; 0x04
    8284:	01 96       	adiw	r24, 0x01	; 1
    8286:	9c 83       	std	Y+4, r25	; 0x04
    8288:	8b 83       	std	Y+3, r24	; 0x03
    828a:	d4 cf       	rjmp	.-88     	; 0x8234 <_ZN5Print5printEPK19__FlashStringHelper+0x28>
    828c:	00 00       	nop
    828e:	01 c0       	rjmp	.+2      	; 0x8292 <_ZN5Print5printEPK19__FlashStringHelper+0x86>
    8290:	00 00       	nop
    8292:	8b 81       	ldd	r24, Y+3	; 0x03
    8294:	9c 81       	ldd	r25, Y+4	; 0x04
    8296:	2c 96       	adiw	r28, 0x0c	; 12
    8298:	0f b6       	in	r0, 0x3f	; 63
    829a:	f8 94       	cli
    829c:	de bf       	out	0x3e, r29	; 62
    829e:	0f be       	out	0x3f, r0	; 63
    82a0:	cd bf       	out	0x3d, r28	; 61
    82a2:	df 91       	pop	r29
    82a4:	cf 91       	pop	r28
    82a6:	08 95       	ret

000082a8 <_ZN5Print5printEPKc>:
    82a8:	cf 93       	push	r28
    82aa:	df 93       	push	r29
    82ac:	00 d0       	rcall	.+0      	; 0x82ae <_ZN5Print5printEPKc+0x6>
    82ae:	1f 92       	push	r1
    82b0:	cd b7       	in	r28, 0x3d	; 61
    82b2:	de b7       	in	r29, 0x3e	; 62
    82b4:	9a 83       	std	Y+2, r25	; 0x02
    82b6:	89 83       	std	Y+1, r24	; 0x01
    82b8:	7c 83       	std	Y+4, r23	; 0x04
    82ba:	6b 83       	std	Y+3, r22	; 0x03
    82bc:	2b 81       	ldd	r18, Y+3	; 0x03
    82be:	3c 81       	ldd	r19, Y+4	; 0x04
    82c0:	89 81       	ldd	r24, Y+1	; 0x01
    82c2:	9a 81       	ldd	r25, Y+2	; 0x02
    82c4:	b9 01       	movw	r22, r18
    82c6:	24 df       	rcall	.-440    	; 0x8110 <_ZN5Print5writeEPKc>
    82c8:	0f 90       	pop	r0
    82ca:	0f 90       	pop	r0
    82cc:	0f 90       	pop	r0
    82ce:	0f 90       	pop	r0
    82d0:	df 91       	pop	r29
    82d2:	cf 91       	pop	r28
    82d4:	08 95       	ret

000082d6 <_ZN5Print5printEc>:
    82d6:	cf 93       	push	r28
    82d8:	df 93       	push	r29
    82da:	00 d0       	rcall	.+0      	; 0x82dc <_ZN5Print5printEc+0x6>
    82dc:	cd b7       	in	r28, 0x3d	; 61
    82de:	de b7       	in	r29, 0x3e	; 62
    82e0:	9a 83       	std	Y+2, r25	; 0x02
    82e2:	89 83       	std	Y+1, r24	; 0x01
    82e4:	6b 83       	std	Y+3, r22	; 0x03
    82e6:	89 81       	ldd	r24, Y+1	; 0x01
    82e8:	9a 81       	ldd	r25, Y+2	; 0x02
    82ea:	fc 01       	movw	r30, r24
    82ec:	80 81       	ld	r24, Z
    82ee:	91 81       	ldd	r25, Z+1	; 0x01
    82f0:	fc 01       	movw	r30, r24
    82f2:	20 81       	ld	r18, Z
    82f4:	31 81       	ldd	r19, Z+1	; 0x01
    82f6:	89 81       	ldd	r24, Y+1	; 0x01
    82f8:	9a 81       	ldd	r25, Y+2	; 0x02
    82fa:	6b 81       	ldd	r22, Y+3	; 0x03
    82fc:	f9 01       	movw	r30, r18
    82fe:	19 95       	eicall
    8300:	0f 90       	pop	r0
    8302:	0f 90       	pop	r0
    8304:	0f 90       	pop	r0
    8306:	df 91       	pop	r29
    8308:	cf 91       	pop	r28
    830a:	08 95       	ret

0000830c <_ZN5Print5printEii>:
    830c:	cf 93       	push	r28
    830e:	df 93       	push	r29
    8310:	00 d0       	rcall	.+0      	; 0x8312 <_ZN5Print5printEii+0x6>
    8312:	00 d0       	rcall	.+0      	; 0x8314 <_ZN5Print5printEii+0x8>
    8314:	cd b7       	in	r28, 0x3d	; 61
    8316:	de b7       	in	r29, 0x3e	; 62
    8318:	9a 83       	std	Y+2, r25	; 0x02
    831a:	89 83       	std	Y+1, r24	; 0x01
    831c:	7c 83       	std	Y+4, r23	; 0x04
    831e:	6b 83       	std	Y+3, r22	; 0x03
    8320:	5e 83       	std	Y+6, r21	; 0x06
    8322:	4d 83       	std	Y+5, r20	; 0x05
    8324:	8b 81       	ldd	r24, Y+3	; 0x03
    8326:	9c 81       	ldd	r25, Y+4	; 0x04
    8328:	09 2e       	mov	r0, r25
    832a:	00 0c       	add	r0, r0
    832c:	aa 0b       	sbc	r26, r26
    832e:	bb 0b       	sbc	r27, r27
    8330:	2d 81       	ldd	r18, Y+5	; 0x05
    8332:	3e 81       	ldd	r19, Y+6	; 0x06
    8334:	e9 81       	ldd	r30, Y+1	; 0x01
    8336:	fa 81       	ldd	r31, Y+2	; 0x02
    8338:	ac 01       	movw	r20, r24
    833a:	bd 01       	movw	r22, r26
    833c:	cf 01       	movw	r24, r30
    833e:	2b d0       	rcall	.+86     	; 0x8396 <_ZN5Print5printEli>
    8340:	26 96       	adiw	r28, 0x06	; 6
    8342:	0f b6       	in	r0, 0x3f	; 63
    8344:	f8 94       	cli
    8346:	de bf       	out	0x3e, r29	; 62
    8348:	0f be       	out	0x3f, r0	; 63
    834a:	cd bf       	out	0x3d, r28	; 61
    834c:	df 91       	pop	r29
    834e:	cf 91       	pop	r28
    8350:	08 95       	ret

00008352 <_ZN5Print5printEji>:
    8352:	cf 93       	push	r28
    8354:	df 93       	push	r29
    8356:	00 d0       	rcall	.+0      	; 0x8358 <_ZN5Print5printEji+0x6>
    8358:	00 d0       	rcall	.+0      	; 0x835a <_ZN5Print5printEji+0x8>
    835a:	cd b7       	in	r28, 0x3d	; 61
    835c:	de b7       	in	r29, 0x3e	; 62
    835e:	9a 83       	std	Y+2, r25	; 0x02
    8360:	89 83       	std	Y+1, r24	; 0x01
    8362:	7c 83       	std	Y+4, r23	; 0x04
    8364:	6b 83       	std	Y+3, r22	; 0x03
    8366:	5e 83       	std	Y+6, r21	; 0x06
    8368:	4d 83       	std	Y+5, r20	; 0x05
    836a:	8b 81       	ldd	r24, Y+3	; 0x03
    836c:	9c 81       	ldd	r25, Y+4	; 0x04
    836e:	cc 01       	movw	r24, r24
    8370:	a0 e0       	ldi	r26, 0x00	; 0
    8372:	b0 e0       	ldi	r27, 0x00	; 0
    8374:	2d 81       	ldd	r18, Y+5	; 0x05
    8376:	3e 81       	ldd	r19, Y+6	; 0x06
    8378:	e9 81       	ldd	r30, Y+1	; 0x01
    837a:	fa 81       	ldd	r31, Y+2	; 0x02
    837c:	ac 01       	movw	r20, r24
    837e:	bd 01       	movw	r22, r26
    8380:	cf 01       	movw	r24, r30
    8382:	7e d0       	rcall	.+252    	; 0x8480 <_ZN5Print5printEmi>
    8384:	26 96       	adiw	r28, 0x06	; 6
    8386:	0f b6       	in	r0, 0x3f	; 63
    8388:	f8 94       	cli
    838a:	de bf       	out	0x3e, r29	; 62
    838c:	0f be       	out	0x3f, r0	; 63
    838e:	cd bf       	out	0x3d, r28	; 61
    8390:	df 91       	pop	r29
    8392:	cf 91       	pop	r28
    8394:	08 95       	ret

00008396 <_ZN5Print5printEli>:
    8396:	cf 93       	push	r28
    8398:	df 93       	push	r29
    839a:	cd b7       	in	r28, 0x3d	; 61
    839c:	de b7       	in	r29, 0x3e	; 62
    839e:	2a 97       	sbiw	r28, 0x0a	; 10
    83a0:	0f b6       	in	r0, 0x3f	; 63
    83a2:	f8 94       	cli
    83a4:	de bf       	out	0x3e, r29	; 62
    83a6:	0f be       	out	0x3f, r0	; 63
    83a8:	cd bf       	out	0x3d, r28	; 61
    83aa:	9c 83       	std	Y+4, r25	; 0x04
    83ac:	8b 83       	std	Y+3, r24	; 0x03
    83ae:	4d 83       	std	Y+5, r20	; 0x05
    83b0:	5e 83       	std	Y+6, r21	; 0x06
    83b2:	6f 83       	std	Y+7, r22	; 0x07
    83b4:	78 87       	std	Y+8, r23	; 0x08
    83b6:	3a 87       	std	Y+10, r19	; 0x0a
    83b8:	29 87       	std	Y+9, r18	; 0x09
    83ba:	89 85       	ldd	r24, Y+9	; 0x09
    83bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    83be:	89 2b       	or	r24, r25
    83c0:	79 f4       	brne	.+30     	; 0x83e0 <_ZN5Print5printEli+0x4a>
    83c2:	8b 81       	ldd	r24, Y+3	; 0x03
    83c4:	9c 81       	ldd	r25, Y+4	; 0x04
    83c6:	fc 01       	movw	r30, r24
    83c8:	80 81       	ld	r24, Z
    83ca:	91 81       	ldd	r25, Z+1	; 0x01
    83cc:	fc 01       	movw	r30, r24
    83ce:	20 81       	ld	r18, Z
    83d0:	31 81       	ldd	r19, Z+1	; 0x01
    83d2:	4d 81       	ldd	r20, Y+5	; 0x05
    83d4:	8b 81       	ldd	r24, Y+3	; 0x03
    83d6:	9c 81       	ldd	r25, Y+4	; 0x04
    83d8:	64 2f       	mov	r22, r20
    83da:	f9 01       	movw	r30, r18
    83dc:	19 95       	eicall
    83de:	47 c0       	rjmp	.+142    	; 0x846e <_ZN5Print5printEli+0xd8>
    83e0:	89 85       	ldd	r24, Y+9	; 0x09
    83e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    83e4:	0a 97       	sbiw	r24, 0x0a	; 10
    83e6:	c1 f5       	brne	.+112    	; 0x8458 <_ZN5Print5printEli+0xc2>
    83e8:	8d 81       	ldd	r24, Y+5	; 0x05
    83ea:	9e 81       	ldd	r25, Y+6	; 0x06
    83ec:	af 81       	ldd	r26, Y+7	; 0x07
    83ee:	b8 85       	ldd	r27, Y+8	; 0x08
    83f0:	bb 23       	and	r27, r27
    83f2:	34 f5       	brge	.+76     	; 0x8440 <_ZN5Print5printEli+0xaa>
    83f4:	8b 81       	ldd	r24, Y+3	; 0x03
    83f6:	9c 81       	ldd	r25, Y+4	; 0x04
    83f8:	6d e2       	ldi	r22, 0x2D	; 45
    83fa:	6d df       	rcall	.-294    	; 0x82d6 <_ZN5Print5printEc>
    83fc:	9a 83       	std	Y+2, r25	; 0x02
    83fe:	89 83       	std	Y+1, r24	; 0x01
    8400:	8d 81       	ldd	r24, Y+5	; 0x05
    8402:	9e 81       	ldd	r25, Y+6	; 0x06
    8404:	af 81       	ldd	r26, Y+7	; 0x07
    8406:	b8 85       	ldd	r27, Y+8	; 0x08
    8408:	b0 95       	com	r27
    840a:	a0 95       	com	r26
    840c:	90 95       	com	r25
    840e:	81 95       	neg	r24
    8410:	9f 4f       	sbci	r25, 0xFF	; 255
    8412:	af 4f       	sbci	r26, 0xFF	; 255
    8414:	bf 4f       	sbci	r27, 0xFF	; 255
    8416:	8d 83       	std	Y+5, r24	; 0x05
    8418:	9e 83       	std	Y+6, r25	; 0x06
    841a:	af 83       	std	Y+7, r26	; 0x07
    841c:	b8 87       	std	Y+8, r27	; 0x08
    841e:	8d 81       	ldd	r24, Y+5	; 0x05
    8420:	9e 81       	ldd	r25, Y+6	; 0x06
    8422:	af 81       	ldd	r26, Y+7	; 0x07
    8424:	b8 85       	ldd	r27, Y+8	; 0x08
    8426:	eb 81       	ldd	r30, Y+3	; 0x03
    8428:	fc 81       	ldd	r31, Y+4	; 0x04
    842a:	2a e0       	ldi	r18, 0x0A	; 10
    842c:	ac 01       	movw	r20, r24
    842e:	bd 01       	movw	r22, r26
    8430:	cf 01       	movw	r24, r30
    8432:	c7 d0       	rcall	.+398    	; 0x85c2 <_ZN5Print11printNumberEmh>
    8434:	9c 01       	movw	r18, r24
    8436:	89 81       	ldd	r24, Y+1	; 0x01
    8438:	9a 81       	ldd	r25, Y+2	; 0x02
    843a:	82 0f       	add	r24, r18
    843c:	93 1f       	adc	r25, r19
    843e:	17 c0       	rjmp	.+46     	; 0x846e <_ZN5Print5printEli+0xd8>
    8440:	8d 81       	ldd	r24, Y+5	; 0x05
    8442:	9e 81       	ldd	r25, Y+6	; 0x06
    8444:	af 81       	ldd	r26, Y+7	; 0x07
    8446:	b8 85       	ldd	r27, Y+8	; 0x08
    8448:	eb 81       	ldd	r30, Y+3	; 0x03
    844a:	fc 81       	ldd	r31, Y+4	; 0x04
    844c:	2a e0       	ldi	r18, 0x0A	; 10
    844e:	ac 01       	movw	r20, r24
    8450:	bd 01       	movw	r22, r26
    8452:	cf 01       	movw	r24, r30
    8454:	b6 d0       	rcall	.+364    	; 0x85c2 <_ZN5Print11printNumberEmh>
    8456:	0b c0       	rjmp	.+22     	; 0x846e <_ZN5Print5printEli+0xd8>
    8458:	29 85       	ldd	r18, Y+9	; 0x09
    845a:	8d 81       	ldd	r24, Y+5	; 0x05
    845c:	9e 81       	ldd	r25, Y+6	; 0x06
    845e:	af 81       	ldd	r26, Y+7	; 0x07
    8460:	b8 85       	ldd	r27, Y+8	; 0x08
    8462:	eb 81       	ldd	r30, Y+3	; 0x03
    8464:	fc 81       	ldd	r31, Y+4	; 0x04
    8466:	ac 01       	movw	r20, r24
    8468:	bd 01       	movw	r22, r26
    846a:	cf 01       	movw	r24, r30
    846c:	aa d0       	rcall	.+340    	; 0x85c2 <_ZN5Print11printNumberEmh>
    846e:	2a 96       	adiw	r28, 0x0a	; 10
    8470:	0f b6       	in	r0, 0x3f	; 63
    8472:	f8 94       	cli
    8474:	de bf       	out	0x3e, r29	; 62
    8476:	0f be       	out	0x3f, r0	; 63
    8478:	cd bf       	out	0x3d, r28	; 61
    847a:	df 91       	pop	r29
    847c:	cf 91       	pop	r28
    847e:	08 95       	ret

00008480 <_ZN5Print5printEmi>:
    8480:	cf 93       	push	r28
    8482:	df 93       	push	r29
    8484:	cd b7       	in	r28, 0x3d	; 61
    8486:	de b7       	in	r29, 0x3e	; 62
    8488:	28 97       	sbiw	r28, 0x08	; 8
    848a:	0f b6       	in	r0, 0x3f	; 63
    848c:	f8 94       	cli
    848e:	de bf       	out	0x3e, r29	; 62
    8490:	0f be       	out	0x3f, r0	; 63
    8492:	cd bf       	out	0x3d, r28	; 61
    8494:	9a 83       	std	Y+2, r25	; 0x02
    8496:	89 83       	std	Y+1, r24	; 0x01
    8498:	4b 83       	std	Y+3, r20	; 0x03
    849a:	5c 83       	std	Y+4, r21	; 0x04
    849c:	6d 83       	std	Y+5, r22	; 0x05
    849e:	7e 83       	std	Y+6, r23	; 0x06
    84a0:	38 87       	std	Y+8, r19	; 0x08
    84a2:	2f 83       	std	Y+7, r18	; 0x07
    84a4:	8f 81       	ldd	r24, Y+7	; 0x07
    84a6:	98 85       	ldd	r25, Y+8	; 0x08
    84a8:	89 2b       	or	r24, r25
    84aa:	79 f4       	brne	.+30     	; 0x84ca <_ZN5Print5printEmi+0x4a>
    84ac:	89 81       	ldd	r24, Y+1	; 0x01
    84ae:	9a 81       	ldd	r25, Y+2	; 0x02
    84b0:	fc 01       	movw	r30, r24
    84b2:	80 81       	ld	r24, Z
    84b4:	91 81       	ldd	r25, Z+1	; 0x01
    84b6:	fc 01       	movw	r30, r24
    84b8:	20 81       	ld	r18, Z
    84ba:	31 81       	ldd	r19, Z+1	; 0x01
    84bc:	4b 81       	ldd	r20, Y+3	; 0x03
    84be:	89 81       	ldd	r24, Y+1	; 0x01
    84c0:	9a 81       	ldd	r25, Y+2	; 0x02
    84c2:	64 2f       	mov	r22, r20
    84c4:	f9 01       	movw	r30, r18
    84c6:	19 95       	eicall
    84c8:	0b c0       	rjmp	.+22     	; 0x84e0 <_ZN5Print5printEmi+0x60>
    84ca:	2f 81       	ldd	r18, Y+7	; 0x07
    84cc:	8b 81       	ldd	r24, Y+3	; 0x03
    84ce:	9c 81       	ldd	r25, Y+4	; 0x04
    84d0:	ad 81       	ldd	r26, Y+5	; 0x05
    84d2:	be 81       	ldd	r27, Y+6	; 0x06
    84d4:	e9 81       	ldd	r30, Y+1	; 0x01
    84d6:	fa 81       	ldd	r31, Y+2	; 0x02
    84d8:	ac 01       	movw	r20, r24
    84da:	bd 01       	movw	r22, r26
    84dc:	cf 01       	movw	r24, r30
    84de:	71 d0       	rcall	.+226    	; 0x85c2 <_ZN5Print11printNumberEmh>
    84e0:	28 96       	adiw	r28, 0x08	; 8
    84e2:	0f b6       	in	r0, 0x3f	; 63
    84e4:	f8 94       	cli
    84e6:	de bf       	out	0x3e, r29	; 62
    84e8:	0f be       	out	0x3f, r0	; 63
    84ea:	cd bf       	out	0x3d, r28	; 61
    84ec:	df 91       	pop	r29
    84ee:	cf 91       	pop	r28
    84f0:	08 95       	ret

000084f2 <_ZN5Print7printlnEv>:
    84f2:	cf 93       	push	r28
    84f4:	df 93       	push	r29
    84f6:	1f 92       	push	r1
    84f8:	1f 92       	push	r1
    84fa:	cd b7       	in	r28, 0x3d	; 61
    84fc:	de b7       	in	r29, 0x3e	; 62
    84fe:	9a 83       	std	Y+2, r25	; 0x02
    8500:	89 83       	std	Y+1, r24	; 0x01
    8502:	89 81       	ldd	r24, Y+1	; 0x01
    8504:	9a 81       	ldd	r25, Y+2	; 0x02
    8506:	68 eb       	ldi	r22, 0xB8	; 184
    8508:	72 e0       	ldi	r23, 0x02	; 2
    850a:	02 de       	rcall	.-1020   	; 0x8110 <_ZN5Print5writeEPKc>
    850c:	0f 90       	pop	r0
    850e:	0f 90       	pop	r0
    8510:	df 91       	pop	r29
    8512:	cf 91       	pop	r28
    8514:	08 95       	ret

00008516 <_ZN5Print7printlnEPKc>:
    8516:	cf 93       	push	r28
    8518:	df 93       	push	r29
    851a:	00 d0       	rcall	.+0      	; 0x851c <_ZN5Print7printlnEPKc+0x6>
    851c:	00 d0       	rcall	.+0      	; 0x851e <_ZN5Print7printlnEPKc+0x8>
    851e:	cd b7       	in	r28, 0x3d	; 61
    8520:	de b7       	in	r29, 0x3e	; 62
    8522:	9c 83       	std	Y+4, r25	; 0x04
    8524:	8b 83       	std	Y+3, r24	; 0x03
    8526:	7e 83       	std	Y+6, r23	; 0x06
    8528:	6d 83       	std	Y+5, r22	; 0x05
    852a:	2d 81       	ldd	r18, Y+5	; 0x05
    852c:	3e 81       	ldd	r19, Y+6	; 0x06
    852e:	8b 81       	ldd	r24, Y+3	; 0x03
    8530:	9c 81       	ldd	r25, Y+4	; 0x04
    8532:	b9 01       	movw	r22, r18
    8534:	b9 de       	rcall	.-654    	; 0x82a8 <_ZN5Print5printEPKc>
    8536:	9a 83       	std	Y+2, r25	; 0x02
    8538:	89 83       	std	Y+1, r24	; 0x01
    853a:	8b 81       	ldd	r24, Y+3	; 0x03
    853c:	9c 81       	ldd	r25, Y+4	; 0x04
    853e:	d9 df       	rcall	.-78     	; 0x84f2 <_ZN5Print7printlnEv>
    8540:	9c 01       	movw	r18, r24
    8542:	89 81       	ldd	r24, Y+1	; 0x01
    8544:	9a 81       	ldd	r25, Y+2	; 0x02
    8546:	82 0f       	add	r24, r18
    8548:	93 1f       	adc	r25, r19
    854a:	9a 83       	std	Y+2, r25	; 0x02
    854c:	89 83       	std	Y+1, r24	; 0x01
    854e:	89 81       	ldd	r24, Y+1	; 0x01
    8550:	9a 81       	ldd	r25, Y+2	; 0x02
    8552:	26 96       	adiw	r28, 0x06	; 6
    8554:	0f b6       	in	r0, 0x3f	; 63
    8556:	f8 94       	cli
    8558:	de bf       	out	0x3e, r29	; 62
    855a:	0f be       	out	0x3f, r0	; 63
    855c:	cd bf       	out	0x3d, r28	; 61
    855e:	df 91       	pop	r29
    8560:	cf 91       	pop	r28
    8562:	08 95       	ret

00008564 <_ZN5Print7printlnEii>:
    8564:	cf 93       	push	r28
    8566:	df 93       	push	r29
    8568:	cd b7       	in	r28, 0x3d	; 61
    856a:	de b7       	in	r29, 0x3e	; 62
    856c:	28 97       	sbiw	r28, 0x08	; 8
    856e:	0f b6       	in	r0, 0x3f	; 63
    8570:	f8 94       	cli
    8572:	de bf       	out	0x3e, r29	; 62
    8574:	0f be       	out	0x3f, r0	; 63
    8576:	cd bf       	out	0x3d, r28	; 61
    8578:	9c 83       	std	Y+4, r25	; 0x04
    857a:	8b 83       	std	Y+3, r24	; 0x03
    857c:	7e 83       	std	Y+6, r23	; 0x06
    857e:	6d 83       	std	Y+5, r22	; 0x05
    8580:	58 87       	std	Y+8, r21	; 0x08
    8582:	4f 83       	std	Y+7, r20	; 0x07
    8584:	4f 81       	ldd	r20, Y+7	; 0x07
    8586:	58 85       	ldd	r21, Y+8	; 0x08
    8588:	2d 81       	ldd	r18, Y+5	; 0x05
    858a:	3e 81       	ldd	r19, Y+6	; 0x06
    858c:	8b 81       	ldd	r24, Y+3	; 0x03
    858e:	9c 81       	ldd	r25, Y+4	; 0x04
    8590:	b9 01       	movw	r22, r18
    8592:	bc de       	rcall	.-648    	; 0x830c <_ZN5Print5printEii>
    8594:	9a 83       	std	Y+2, r25	; 0x02
    8596:	89 83       	std	Y+1, r24	; 0x01
    8598:	8b 81       	ldd	r24, Y+3	; 0x03
    859a:	9c 81       	ldd	r25, Y+4	; 0x04
    859c:	aa df       	rcall	.-172    	; 0x84f2 <_ZN5Print7printlnEv>
    859e:	9c 01       	movw	r18, r24
    85a0:	89 81       	ldd	r24, Y+1	; 0x01
    85a2:	9a 81       	ldd	r25, Y+2	; 0x02
    85a4:	82 0f       	add	r24, r18
    85a6:	93 1f       	adc	r25, r19
    85a8:	9a 83       	std	Y+2, r25	; 0x02
    85aa:	89 83       	std	Y+1, r24	; 0x01
    85ac:	89 81       	ldd	r24, Y+1	; 0x01
    85ae:	9a 81       	ldd	r25, Y+2	; 0x02
    85b0:	28 96       	adiw	r28, 0x08	; 8
    85b2:	0f b6       	in	r0, 0x3f	; 63
    85b4:	f8 94       	cli
    85b6:	de bf       	out	0x3e, r29	; 62
    85b8:	0f be       	out	0x3f, r0	; 63
    85ba:	cd bf       	out	0x3d, r28	; 61
    85bc:	df 91       	pop	r29
    85be:	cf 91       	pop	r28
    85c0:	08 95       	ret

000085c2 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    85c2:	cf 93       	push	r28
    85c4:	df 93       	push	r29
    85c6:	cd b7       	in	r28, 0x3d	; 61
    85c8:	de b7       	in	r29, 0x3e	; 62
    85ca:	ab 97       	sbiw	r28, 0x2b	; 43
    85cc:	0f b6       	in	r0, 0x3f	; 63
    85ce:	f8 94       	cli
    85d0:	de bf       	out	0x3e, r29	; 62
    85d2:	0f be       	out	0x3f, r0	; 63
    85d4:	cd bf       	out	0x3d, r28	; 61
    85d6:	9e a3       	std	Y+38, r25	; 0x26
    85d8:	8d a3       	std	Y+37, r24	; 0x25
    85da:	4f a3       	std	Y+39, r20	; 0x27
    85dc:	58 a7       	std	Y+40, r21	; 0x28
    85de:	69 a7       	std	Y+41, r22	; 0x29
    85e0:	7a a7       	std	Y+42, r23	; 0x2a
    85e2:	2b a7       	std	Y+43, r18	; 0x2b
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    85e4:	80 e2       	ldi	r24, 0x20	; 32
    85e6:	90 e0       	ldi	r25, 0x00	; 0
    85e8:	9e 01       	movw	r18, r28
    85ea:	2c 5f       	subi	r18, 0xFC	; 252
    85ec:	3f 4f       	sbci	r19, 0xFF	; 255
    85ee:	82 0f       	add	r24, r18
    85f0:	93 1f       	adc	r25, r19
    85f2:	9a 83       	std	Y+2, r25	; 0x02
    85f4:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
    85f6:	89 81       	ldd	r24, Y+1	; 0x01
    85f8:	9a 81       	ldd	r25, Y+2	; 0x02
    85fa:	fc 01       	movw	r30, r24
    85fc:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    85fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    8600:	82 30       	cpi	r24, 0x02	; 2
    8602:	10 f4       	brcc	.+4      	; 0x8608 <_ZN5Print11printNumberEmh+0x46>
    8604:	8a e0       	ldi	r24, 0x0A	; 10
    8606:	8b a7       	std	Y+43, r24	; 0x2b

  do {
    char c = n % base;
    8608:	8b a5       	ldd	r24, Y+43	; 0x2b
    860a:	28 2f       	mov	r18, r24
    860c:	30 e0       	ldi	r19, 0x00	; 0
    860e:	40 e0       	ldi	r20, 0x00	; 0
    8610:	50 e0       	ldi	r21, 0x00	; 0
    8612:	8f a1       	ldd	r24, Y+39	; 0x27
    8614:	98 a5       	ldd	r25, Y+40	; 0x28
    8616:	a9 a5       	ldd	r26, Y+41	; 0x29
    8618:	ba a5       	ldd	r27, Y+42	; 0x2a
    861a:	bc 01       	movw	r22, r24
    861c:	cd 01       	movw	r24, r26
    861e:	0e 94 b1 61 	call	0xc362	; 0xc362 <__udivmodsi4>
    8622:	dc 01       	movw	r26, r24
    8624:	cb 01       	movw	r24, r22
    8626:	8b 83       	std	Y+3, r24	; 0x03
    n /= base;
    8628:	8b a5       	ldd	r24, Y+43	; 0x2b
    862a:	28 2f       	mov	r18, r24
    862c:	30 e0       	ldi	r19, 0x00	; 0
    862e:	40 e0       	ldi	r20, 0x00	; 0
    8630:	50 e0       	ldi	r21, 0x00	; 0
    8632:	8f a1       	ldd	r24, Y+39	; 0x27
    8634:	98 a5       	ldd	r25, Y+40	; 0x28
    8636:	a9 a5       	ldd	r26, Y+41	; 0x29
    8638:	ba a5       	ldd	r27, Y+42	; 0x2a
    863a:	bc 01       	movw	r22, r24
    863c:	cd 01       	movw	r24, r26
    863e:	0e 94 b1 61 	call	0xc362	; 0xc362 <__udivmodsi4>
    8642:	da 01       	movw	r26, r20
    8644:	c9 01       	movw	r24, r18
    8646:	8f a3       	std	Y+39, r24	; 0x27
    8648:	98 a7       	std	Y+40, r25	; 0x28
    864a:	a9 a7       	std	Y+41, r26	; 0x29
    864c:	ba a7       	std	Y+42, r27	; 0x2a

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    864e:	89 81       	ldd	r24, Y+1	; 0x01
    8650:	9a 81       	ldd	r25, Y+2	; 0x02
    8652:	01 97       	sbiw	r24, 0x01	; 1
    8654:	9a 83       	std	Y+2, r25	; 0x02
    8656:	89 83       	std	Y+1, r24	; 0x01
    8658:	8b 81       	ldd	r24, Y+3	; 0x03
    865a:	8a 30       	cpi	r24, 0x0A	; 10
    865c:	20 f4       	brcc	.+8      	; 0x8666 <_ZN5Print11printNumberEmh+0xa4>
    865e:	8b 81       	ldd	r24, Y+3	; 0x03
    8660:	20 e3       	ldi	r18, 0x30	; 48
    8662:	28 0f       	add	r18, r24
    8664:	03 c0       	rjmp	.+6      	; 0x866c <_ZN5Print11printNumberEmh+0xaa>
    8666:	8b 81       	ldd	r24, Y+3	; 0x03
    8668:	27 e3       	ldi	r18, 0x37	; 55
    866a:	28 0f       	add	r18, r24
    866c:	89 81       	ldd	r24, Y+1	; 0x01
    866e:	9a 81       	ldd	r25, Y+2	; 0x02
    8670:	fc 01       	movw	r30, r24
    8672:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    8674:	8f a1       	ldd	r24, Y+39	; 0x27
    8676:	98 a5       	ldd	r25, Y+40	; 0x28
    8678:	a9 a5       	ldd	r26, Y+41	; 0x29
    867a:	ba a5       	ldd	r27, Y+42	; 0x2a
    867c:	89 2b       	or	r24, r25
    867e:	8a 2b       	or	r24, r26
    8680:	8b 2b       	or	r24, r27
    8682:	09 f0       	breq	.+2      	; 0x8686 <_ZN5Print11printNumberEmh+0xc4>
    8684:	c1 cf       	rjmp	.-126    	; 0x8608 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    8686:	29 81       	ldd	r18, Y+1	; 0x01
    8688:	3a 81       	ldd	r19, Y+2	; 0x02
    868a:	8d a1       	ldd	r24, Y+37	; 0x25
    868c:	9e a1       	ldd	r25, Y+38	; 0x26
    868e:	b9 01       	movw	r22, r18
    8690:	3f dd       	rcall	.-1410   	; 0x8110 <_ZN5Print5writeEPKc>
}
    8692:	ab 96       	adiw	r28, 0x2b	; 43
    8694:	0f b6       	in	r0, 0x3f	; 63
    8696:	f8 94       	cli
    8698:	de bf       	out	0x3e, r29	; 62
    869a:	0f be       	out	0x3f, r0	; 63
    869c:	cd bf       	out	0x3d, r28	; 61
    869e:	df 91       	pop	r29
    86a0:	cf 91       	pop	r28
    86a2:	08 95       	ret

000086a4 <_ZN6Stream10setTimeoutEm>:

// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
    86a4:	cf 93       	push	r28
    86a6:	df 93       	push	r29
    86a8:	00 d0       	rcall	.+0      	; 0x86aa <_ZN6Stream10setTimeoutEm+0x6>
    86aa:	00 d0       	rcall	.+0      	; 0x86ac <_ZN6Stream10setTimeoutEm+0x8>
    86ac:	cd b7       	in	r28, 0x3d	; 61
    86ae:	de b7       	in	r29, 0x3e	; 62
    86b0:	9a 83       	std	Y+2, r25	; 0x02
    86b2:	89 83       	std	Y+1, r24	; 0x01
    86b4:	4b 83       	std	Y+3, r20	; 0x03
    86b6:	5c 83       	std	Y+4, r21	; 0x04
    86b8:	6d 83       	std	Y+5, r22	; 0x05
    86ba:	7e 83       	std	Y+6, r23	; 0x06
  _timeout = timeout;
    86bc:	29 81       	ldd	r18, Y+1	; 0x01
    86be:	3a 81       	ldd	r19, Y+2	; 0x02
    86c0:	8b 81       	ldd	r24, Y+3	; 0x03
    86c2:	9c 81       	ldd	r25, Y+4	; 0x04
    86c4:	ad 81       	ldd	r26, Y+5	; 0x05
    86c6:	be 81       	ldd	r27, Y+6	; 0x06
    86c8:	f9 01       	movw	r30, r18
    86ca:	84 83       	std	Z+4, r24	; 0x04
    86cc:	95 83       	std	Z+5, r25	; 0x05
    86ce:	a6 83       	std	Z+6, r26	; 0x06
    86d0:	b7 83       	std	Z+7, r27	; 0x07
}
    86d2:	00 00       	nop
    86d4:	26 96       	adiw	r28, 0x06	; 6
    86d6:	0f b6       	in	r0, 0x3f	; 63
    86d8:	f8 94       	cli
    86da:	de bf       	out	0x3e, r29	; 62
    86dc:	0f be       	out	0x3f, r0	; 63
    86de:	cd bf       	out	0x3d, r28	; 61
    86e0:	df 91       	pop	r29
    86e2:	cf 91       	pop	r28
    86e4:	08 95       	ret

000086e6 <__vector_23>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    86e6:	1f 92       	push	r1
    86e8:	0f 92       	push	r0
    86ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    86ee:	0f 92       	push	r0
    86f0:	11 24       	eor	r1, r1
    86f2:	8f 93       	push	r24
    86f4:	9f 93       	push	r25
    86f6:	af 93       	push	r26
    86f8:	bf 93       	push	r27
    86fa:	cf 93       	push	r28
    86fc:	df 93       	push	r29
    86fe:	cd b7       	in	r28, 0x3d	; 61
    8700:	de b7       	in	r29, 0x3e	; 62
    8702:	25 97       	sbiw	r28, 0x05	; 5
    8704:	de bf       	out	0x3e, r29	; 62
    8706:	cd bf       	out	0x3d, r28	; 61
    8708:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <timer0_millis>
    870c:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <timer0_millis+0x1>
    8710:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <timer0_millis+0x2>
    8714:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <timer0_millis+0x3>
    8718:	89 83       	std	Y+1, r24	; 0x01
    871a:	9a 83       	std	Y+2, r25	; 0x02
    871c:	ab 83       	std	Y+3, r26	; 0x03
    871e:	bc 83       	std	Y+4, r27	; 0x04
    8720:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <timer0_fract>
    8724:	8d 83       	std	Y+5, r24	; 0x05
    8726:	89 81       	ldd	r24, Y+1	; 0x01
    8728:	9a 81       	ldd	r25, Y+2	; 0x02
    872a:	ab 81       	ldd	r26, Y+3	; 0x03
    872c:	bc 81       	ldd	r27, Y+4	; 0x04
    872e:	01 96       	adiw	r24, 0x01	; 1
    8730:	a1 1d       	adc	r26, r1
    8732:	b1 1d       	adc	r27, r1
    8734:	89 83       	std	Y+1, r24	; 0x01
    8736:	9a 83       	std	Y+2, r25	; 0x02
    8738:	ab 83       	std	Y+3, r26	; 0x03
    873a:	bc 83       	std	Y+4, r27	; 0x04
    873c:	8d 81       	ldd	r24, Y+5	; 0x05
    873e:	8d 5f       	subi	r24, 0xFD	; 253
    8740:	8d 83       	std	Y+5, r24	; 0x05
    8742:	8d 81       	ldd	r24, Y+5	; 0x05
    8744:	8d 37       	cpi	r24, 0x7D	; 125
    8746:	70 f0       	brcs	.+28     	; 0x8764 <__vector_23+0x7e>
    8748:	8d 81       	ldd	r24, Y+5	; 0x05
    874a:	8d 57       	subi	r24, 0x7D	; 125
    874c:	8d 83       	std	Y+5, r24	; 0x05
    874e:	89 81       	ldd	r24, Y+1	; 0x01
    8750:	9a 81       	ldd	r25, Y+2	; 0x02
    8752:	ab 81       	ldd	r26, Y+3	; 0x03
    8754:	bc 81       	ldd	r27, Y+4	; 0x04
    8756:	01 96       	adiw	r24, 0x01	; 1
    8758:	a1 1d       	adc	r26, r1
    875a:	b1 1d       	adc	r27, r1
    875c:	89 83       	std	Y+1, r24	; 0x01
    875e:	9a 83       	std	Y+2, r25	; 0x02
    8760:	ab 83       	std	Y+3, r26	; 0x03
    8762:	bc 83       	std	Y+4, r27	; 0x04
    8764:	8d 81       	ldd	r24, Y+5	; 0x05
    8766:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <timer0_fract>
    876a:	89 81       	ldd	r24, Y+1	; 0x01
    876c:	9a 81       	ldd	r25, Y+2	; 0x02
    876e:	ab 81       	ldd	r26, Y+3	; 0x03
    8770:	bc 81       	ldd	r27, Y+4	; 0x04
    8772:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <timer0_millis>
    8776:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <timer0_millis+0x1>
    877a:	a0 93 0b 05 	sts	0x050B, r26	; 0x80050b <timer0_millis+0x2>
    877e:	b0 93 0c 05 	sts	0x050C, r27	; 0x80050c <timer0_millis+0x3>
    8782:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <timer0_overflow_count>
    8786:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <timer0_overflow_count+0x1>
    878a:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <timer0_overflow_count+0x2>
    878e:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <timer0_overflow_count+0x3>
    8792:	01 96       	adiw	r24, 0x01	; 1
    8794:	a1 1d       	adc	r26, r1
    8796:	b1 1d       	adc	r27, r1
    8798:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <timer0_overflow_count>
    879c:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <timer0_overflow_count+0x1>
    87a0:	a0 93 07 05 	sts	0x0507, r26	; 0x800507 <timer0_overflow_count+0x2>
    87a4:	b0 93 08 05 	sts	0x0508, r27	; 0x800508 <timer0_overflow_count+0x3>
    87a8:	00 00       	nop
    87aa:	0f 90       	pop	r0
    87ac:	0f 90       	pop	r0
    87ae:	0f 90       	pop	r0
    87b0:	0f 90       	pop	r0
    87b2:	0f 90       	pop	r0
    87b4:	df 91       	pop	r29
    87b6:	cf 91       	pop	r28
    87b8:	bf 91       	pop	r27
    87ba:	af 91       	pop	r26
    87bc:	9f 91       	pop	r25
    87be:	8f 91       	pop	r24
    87c0:	0f 90       	pop	r0
    87c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    87c6:	0f 90       	pop	r0
    87c8:	1f 90       	pop	r1
    87ca:	18 95       	reti

000087cc <millis>:
    87cc:	cf 93       	push	r28
    87ce:	df 93       	push	r29
    87d0:	00 d0       	rcall	.+0      	; 0x87d2 <millis+0x6>
    87d2:	1f 92       	push	r1
    87d4:	1f 92       	push	r1
    87d6:	cd b7       	in	r28, 0x3d	; 61
    87d8:	de b7       	in	r29, 0x3e	; 62
    87da:	8f e5       	ldi	r24, 0x5F	; 95
    87dc:	90 e0       	ldi	r25, 0x00	; 0
    87de:	fc 01       	movw	r30, r24
    87e0:	80 81       	ld	r24, Z
    87e2:	89 83       	std	Y+1, r24	; 0x01
    87e4:	f8 94       	cli
    87e6:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <timer0_millis>
    87ea:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <timer0_millis+0x1>
    87ee:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <timer0_millis+0x2>
    87f2:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <timer0_millis+0x3>
    87f6:	8a 83       	std	Y+2, r24	; 0x02
    87f8:	9b 83       	std	Y+3, r25	; 0x03
    87fa:	ac 83       	std	Y+4, r26	; 0x04
    87fc:	bd 83       	std	Y+5, r27	; 0x05
    87fe:	8f e5       	ldi	r24, 0x5F	; 95
    8800:	90 e0       	ldi	r25, 0x00	; 0
    8802:	29 81       	ldd	r18, Y+1	; 0x01
    8804:	fc 01       	movw	r30, r24
    8806:	20 83       	st	Z, r18
    8808:	8a 81       	ldd	r24, Y+2	; 0x02
    880a:	9b 81       	ldd	r25, Y+3	; 0x03
    880c:	ac 81       	ldd	r26, Y+4	; 0x04
    880e:	bd 81       	ldd	r27, Y+5	; 0x05
    8810:	bc 01       	movw	r22, r24
    8812:	cd 01       	movw	r24, r26
    8814:	0f 90       	pop	r0
    8816:	0f 90       	pop	r0
    8818:	0f 90       	pop	r0
    881a:	0f 90       	pop	r0
    881c:	0f 90       	pop	r0
    881e:	df 91       	pop	r29
    8820:	cf 91       	pop	r28
    8822:	08 95       	ret

00008824 <micros>:
    8824:	cf 93       	push	r28
    8826:	df 93       	push	r29
    8828:	00 d0       	rcall	.+0      	; 0x882a <micros+0x6>
    882a:	00 d0       	rcall	.+0      	; 0x882c <micros+0x8>
    882c:	cd b7       	in	r28, 0x3d	; 61
    882e:	de b7       	in	r29, 0x3e	; 62
    8830:	8f e5       	ldi	r24, 0x5F	; 95
    8832:	90 e0       	ldi	r25, 0x00	; 0
    8834:	fc 01       	movw	r30, r24
    8836:	80 81       	ld	r24, Z
    8838:	8d 83       	std	Y+5, r24	; 0x05
    883a:	f8 94       	cli
    883c:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <timer0_overflow_count>
    8840:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <timer0_overflow_count+0x1>
    8844:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <timer0_overflow_count+0x2>
    8848:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <timer0_overflow_count+0x3>
    884c:	89 83       	std	Y+1, r24	; 0x01
    884e:	9a 83       	std	Y+2, r25	; 0x02
    8850:	ab 83       	std	Y+3, r26	; 0x03
    8852:	bc 83       	std	Y+4, r27	; 0x04
    8854:	86 e4       	ldi	r24, 0x46	; 70
    8856:	90 e0       	ldi	r25, 0x00	; 0
    8858:	fc 01       	movw	r30, r24
    885a:	80 81       	ld	r24, Z
    885c:	8e 83       	std	Y+6, r24	; 0x06
    885e:	85 e3       	ldi	r24, 0x35	; 53
    8860:	90 e0       	ldi	r25, 0x00	; 0
    8862:	fc 01       	movw	r30, r24
    8864:	80 81       	ld	r24, Z
    8866:	88 2f       	mov	r24, r24
    8868:	90 e0       	ldi	r25, 0x00	; 0
    886a:	81 70       	andi	r24, 0x01	; 1
    886c:	99 27       	eor	r25, r25
    886e:	89 2b       	or	r24, r25
    8870:	71 f0       	breq	.+28     	; 0x888e <micros+0x6a>
    8872:	8e 81       	ldd	r24, Y+6	; 0x06
    8874:	8f 3f       	cpi	r24, 0xFF	; 255
    8876:	59 f0       	breq	.+22     	; 0x888e <micros+0x6a>
    8878:	89 81       	ldd	r24, Y+1	; 0x01
    887a:	9a 81       	ldd	r25, Y+2	; 0x02
    887c:	ab 81       	ldd	r26, Y+3	; 0x03
    887e:	bc 81       	ldd	r27, Y+4	; 0x04
    8880:	01 96       	adiw	r24, 0x01	; 1
    8882:	a1 1d       	adc	r26, r1
    8884:	b1 1d       	adc	r27, r1
    8886:	89 83       	std	Y+1, r24	; 0x01
    8888:	9a 83       	std	Y+2, r25	; 0x02
    888a:	ab 83       	std	Y+3, r26	; 0x03
    888c:	bc 83       	std	Y+4, r27	; 0x04
    888e:	8f e5       	ldi	r24, 0x5F	; 95
    8890:	90 e0       	ldi	r25, 0x00	; 0
    8892:	2d 81       	ldd	r18, Y+5	; 0x05
    8894:	fc 01       	movw	r30, r24
    8896:	20 83       	st	Z, r18
    8898:	89 81       	ldd	r24, Y+1	; 0x01
    889a:	9a 81       	ldd	r25, Y+2	; 0x02
    889c:	ab 81       	ldd	r26, Y+3	; 0x03
    889e:	bc 81       	ldd	r27, Y+4	; 0x04
    88a0:	22 27       	eor	r18, r18
    88a2:	38 2f       	mov	r19, r24
    88a4:	49 2f       	mov	r20, r25
    88a6:	5a 2f       	mov	r21, r26
    88a8:	8e 81       	ldd	r24, Y+6	; 0x06
    88aa:	88 2f       	mov	r24, r24
    88ac:	90 e0       	ldi	r25, 0x00	; 0
    88ae:	a0 e0       	ldi	r26, 0x00	; 0
    88b0:	b0 e0       	ldi	r27, 0x00	; 0
    88b2:	82 0f       	add	r24, r18
    88b4:	93 1f       	adc	r25, r19
    88b6:	a4 1f       	adc	r26, r20
    88b8:	b5 1f       	adc	r27, r21
    88ba:	88 0f       	add	r24, r24
    88bc:	99 1f       	adc	r25, r25
    88be:	aa 1f       	adc	r26, r26
    88c0:	bb 1f       	adc	r27, r27
    88c2:	88 0f       	add	r24, r24
    88c4:	99 1f       	adc	r25, r25
    88c6:	aa 1f       	adc	r26, r26
    88c8:	bb 1f       	adc	r27, r27
    88ca:	bc 01       	movw	r22, r24
    88cc:	cd 01       	movw	r24, r26
    88ce:	26 96       	adiw	r28, 0x06	; 6
    88d0:	0f b6       	in	r0, 0x3f	; 63
    88d2:	f8 94       	cli
    88d4:	de bf       	out	0x3e, r29	; 62
    88d6:	0f be       	out	0x3f, r0	; 63
    88d8:	cd bf       	out	0x3d, r28	; 61
    88da:	df 91       	pop	r29
    88dc:	cf 91       	pop	r28
    88de:	08 95       	ret

000088e0 <delay>:
    88e0:	ef 92       	push	r14
    88e2:	ff 92       	push	r15
    88e4:	0f 93       	push	r16
    88e6:	1f 93       	push	r17
    88e8:	cf 93       	push	r28
    88ea:	df 93       	push	r29
    88ec:	cd b7       	in	r28, 0x3d	; 61
    88ee:	de b7       	in	r29, 0x3e	; 62
    88f0:	28 97       	sbiw	r28, 0x08	; 8
    88f2:	0f b6       	in	r0, 0x3f	; 63
    88f4:	f8 94       	cli
    88f6:	de bf       	out	0x3e, r29	; 62
    88f8:	0f be       	out	0x3f, r0	; 63
    88fa:	cd bf       	out	0x3d, r28	; 61
    88fc:	6d 83       	std	Y+5, r22	; 0x05
    88fe:	7e 83       	std	Y+6, r23	; 0x06
    8900:	8f 83       	std	Y+7, r24	; 0x07
    8902:	98 87       	std	Y+8, r25	; 0x08
    8904:	8f df       	rcall	.-226    	; 0x8824 <micros>
    8906:	dc 01       	movw	r26, r24
    8908:	cb 01       	movw	r24, r22
    890a:	89 83       	std	Y+1, r24	; 0x01
    890c:	9a 83       	std	Y+2, r25	; 0x02
    890e:	ab 83       	std	Y+3, r26	; 0x03
    8910:	bc 83       	std	Y+4, r27	; 0x04
    8912:	36 c0       	rjmp	.+108    	; 0x8980 <delay+0xa0>
    8914:	0e 94 37 58 	call	0xb06e	; 0xb06e <yield>
    8918:	17 c0       	rjmp	.+46     	; 0x8948 <delay+0x68>
    891a:	8d 81       	ldd	r24, Y+5	; 0x05
    891c:	9e 81       	ldd	r25, Y+6	; 0x06
    891e:	af 81       	ldd	r26, Y+7	; 0x07
    8920:	b8 85       	ldd	r27, Y+8	; 0x08
    8922:	01 97       	sbiw	r24, 0x01	; 1
    8924:	a1 09       	sbc	r26, r1
    8926:	b1 09       	sbc	r27, r1
    8928:	8d 83       	std	Y+5, r24	; 0x05
    892a:	9e 83       	std	Y+6, r25	; 0x06
    892c:	af 83       	std	Y+7, r26	; 0x07
    892e:	b8 87       	std	Y+8, r27	; 0x08
    8930:	89 81       	ldd	r24, Y+1	; 0x01
    8932:	9a 81       	ldd	r25, Y+2	; 0x02
    8934:	ab 81       	ldd	r26, Y+3	; 0x03
    8936:	bc 81       	ldd	r27, Y+4	; 0x04
    8938:	88 51       	subi	r24, 0x18	; 24
    893a:	9c 4f       	sbci	r25, 0xFC	; 252
    893c:	af 4f       	sbci	r26, 0xFF	; 255
    893e:	bf 4f       	sbci	r27, 0xFF	; 255
    8940:	89 83       	std	Y+1, r24	; 0x01
    8942:	9a 83       	std	Y+2, r25	; 0x02
    8944:	ab 83       	std	Y+3, r26	; 0x03
    8946:	bc 83       	std	Y+4, r27	; 0x04
    8948:	8d 81       	ldd	r24, Y+5	; 0x05
    894a:	9e 81       	ldd	r25, Y+6	; 0x06
    894c:	af 81       	ldd	r26, Y+7	; 0x07
    894e:	b8 85       	ldd	r27, Y+8	; 0x08
    8950:	89 2b       	or	r24, r25
    8952:	8a 2b       	or	r24, r26
    8954:	8b 2b       	or	r24, r27
    8956:	a1 f0       	breq	.+40     	; 0x8980 <delay+0xa0>
    8958:	65 df       	rcall	.-310    	; 0x8824 <micros>
    895a:	9b 01       	movw	r18, r22
    895c:	ac 01       	movw	r20, r24
    895e:	89 81       	ldd	r24, Y+1	; 0x01
    8960:	9a 81       	ldd	r25, Y+2	; 0x02
    8962:	ab 81       	ldd	r26, Y+3	; 0x03
    8964:	bc 81       	ldd	r27, Y+4	; 0x04
    8966:	79 01       	movw	r14, r18
    8968:	8a 01       	movw	r16, r20
    896a:	e8 1a       	sub	r14, r24
    896c:	f9 0a       	sbc	r15, r25
    896e:	0a 0b       	sbc	r16, r26
    8970:	1b 0b       	sbc	r17, r27
    8972:	d8 01       	movw	r26, r16
    8974:	c7 01       	movw	r24, r14
    8976:	88 3e       	cpi	r24, 0xE8	; 232
    8978:	93 40       	sbci	r25, 0x03	; 3
    897a:	a1 05       	cpc	r26, r1
    897c:	b1 05       	cpc	r27, r1
    897e:	68 f6       	brcc	.-102    	; 0x891a <delay+0x3a>
    8980:	8d 81       	ldd	r24, Y+5	; 0x05
    8982:	9e 81       	ldd	r25, Y+6	; 0x06
    8984:	af 81       	ldd	r26, Y+7	; 0x07
    8986:	b8 85       	ldd	r27, Y+8	; 0x08
    8988:	89 2b       	or	r24, r25
    898a:	8a 2b       	or	r24, r26
    898c:	8b 2b       	or	r24, r27
    898e:	11 f6       	brne	.-124    	; 0x8914 <delay+0x34>
    8990:	00 00       	nop
    8992:	28 96       	adiw	r28, 0x08	; 8
    8994:	0f b6       	in	r0, 0x3f	; 63
    8996:	f8 94       	cli
    8998:	de bf       	out	0x3e, r29	; 62
    899a:	0f be       	out	0x3f, r0	; 63
    899c:	cd bf       	out	0x3d, r28	; 61
    899e:	df 91       	pop	r29
    89a0:	cf 91       	pop	r28
    89a2:	1f 91       	pop	r17
    89a4:	0f 91       	pop	r16
    89a6:	ff 90       	pop	r15
    89a8:	ef 90       	pop	r14
    89aa:	08 95       	ret

000089ac <init>:

void init()
{
    89ac:	cf 93       	push	r28
    89ae:	df 93       	push	r29
    89b0:	cd b7       	in	r28, 0x3d	; 61
    89b2:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    89b4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    89b6:	84 e4       	ldi	r24, 0x44	; 68
    89b8:	90 e0       	ldi	r25, 0x00	; 0
    89ba:	24 e4       	ldi	r18, 0x44	; 68
    89bc:	30 e0       	ldi	r19, 0x00	; 0
    89be:	f9 01       	movw	r30, r18
    89c0:	20 81       	ld	r18, Z
    89c2:	22 60       	ori	r18, 0x02	; 2
    89c4:	fc 01       	movw	r30, r24
    89c6:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    89c8:	84 e4       	ldi	r24, 0x44	; 68
    89ca:	90 e0       	ldi	r25, 0x00	; 0
    89cc:	24 e4       	ldi	r18, 0x44	; 68
    89ce:	30 e0       	ldi	r19, 0x00	; 0
    89d0:	f9 01       	movw	r30, r18
    89d2:	20 81       	ld	r18, Z
    89d4:	21 60       	ori	r18, 0x01	; 1
    89d6:	fc 01       	movw	r30, r24
    89d8:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    89da:	85 e4       	ldi	r24, 0x45	; 69
    89dc:	90 e0       	ldi	r25, 0x00	; 0
    89de:	25 e4       	ldi	r18, 0x45	; 69
    89e0:	30 e0       	ldi	r19, 0x00	; 0
    89e2:	f9 01       	movw	r30, r18
    89e4:	20 81       	ld	r18, Z
    89e6:	22 60       	ori	r18, 0x02	; 2
    89e8:	fc 01       	movw	r30, r24
    89ea:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    89ec:	85 e4       	ldi	r24, 0x45	; 69
    89ee:	90 e0       	ldi	r25, 0x00	; 0
    89f0:	25 e4       	ldi	r18, 0x45	; 69
    89f2:	30 e0       	ldi	r19, 0x00	; 0
    89f4:	f9 01       	movw	r30, r18
    89f6:	20 81       	ld	r18, Z
    89f8:	21 60       	ori	r18, 0x01	; 1
    89fa:	fc 01       	movw	r30, r24
    89fc:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    89fe:	8e e6       	ldi	r24, 0x6E	; 110
    8a00:	90 e0       	ldi	r25, 0x00	; 0
    8a02:	2e e6       	ldi	r18, 0x6E	; 110
    8a04:	30 e0       	ldi	r19, 0x00	; 0
    8a06:	f9 01       	movw	r30, r18
    8a08:	20 81       	ld	r18, Z
    8a0a:	21 60       	ori	r18, 0x01	; 1
    8a0c:	fc 01       	movw	r30, r24
    8a0e:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    8a10:	81 e8       	ldi	r24, 0x81	; 129
    8a12:	90 e0       	ldi	r25, 0x00	; 0
    8a14:	fc 01       	movw	r30, r24
    8a16:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    8a18:	81 e8       	ldi	r24, 0x81	; 129
    8a1a:	90 e0       	ldi	r25, 0x00	; 0
    8a1c:	21 e8       	ldi	r18, 0x81	; 129
    8a1e:	30 e0       	ldi	r19, 0x00	; 0
    8a20:	f9 01       	movw	r30, r18
    8a22:	20 81       	ld	r18, Z
    8a24:	22 60       	ori	r18, 0x02	; 2
    8a26:	fc 01       	movw	r30, r24
    8a28:	20 83       	st	Z, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    8a2a:	81 e8       	ldi	r24, 0x81	; 129
    8a2c:	90 e0       	ldi	r25, 0x00	; 0
    8a2e:	21 e8       	ldi	r18, 0x81	; 129
    8a30:	30 e0       	ldi	r19, 0x00	; 0
    8a32:	f9 01       	movw	r30, r18
    8a34:	20 81       	ld	r18, Z
    8a36:	21 60       	ori	r18, 0x01	; 1
    8a38:	fc 01       	movw	r30, r24
    8a3a:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    8a3c:	80 e8       	ldi	r24, 0x80	; 128
    8a3e:	90 e0       	ldi	r25, 0x00	; 0
    8a40:	20 e8       	ldi	r18, 0x80	; 128
    8a42:	30 e0       	ldi	r19, 0x00	; 0
    8a44:	f9 01       	movw	r30, r18
    8a46:	20 81       	ld	r18, Z
    8a48:	21 60       	ori	r18, 0x01	; 1
    8a4a:	fc 01       	movw	r30, r24
    8a4c:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    8a4e:	81 eb       	ldi	r24, 0xB1	; 177
    8a50:	90 e0       	ldi	r25, 0x00	; 0
    8a52:	21 eb       	ldi	r18, 0xB1	; 177
    8a54:	30 e0       	ldi	r19, 0x00	; 0
    8a56:	f9 01       	movw	r30, r18
    8a58:	20 81       	ld	r18, Z
    8a5a:	24 60       	ori	r18, 0x04	; 4
    8a5c:	fc 01       	movw	r30, r24
    8a5e:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    8a60:	80 eb       	ldi	r24, 0xB0	; 176
    8a62:	90 e0       	ldi	r25, 0x00	; 0
    8a64:	20 eb       	ldi	r18, 0xB0	; 176
    8a66:	30 e0       	ldi	r19, 0x00	; 0
    8a68:	f9 01       	movw	r30, r18
    8a6a:	20 81       	ld	r18, Z
    8a6c:	21 60       	ori	r18, 0x01	; 1
    8a6e:	fc 01       	movw	r30, r24
    8a70:	20 83       	st	Z, r18
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    8a72:	81 e9       	ldi	r24, 0x91	; 145
    8a74:	90 e0       	ldi	r25, 0x00	; 0
    8a76:	21 e9       	ldi	r18, 0x91	; 145
    8a78:	30 e0       	ldi	r19, 0x00	; 0
    8a7a:	f9 01       	movw	r30, r18
    8a7c:	20 81       	ld	r18, Z
    8a7e:	22 60       	ori	r18, 0x02	; 2
    8a80:	fc 01       	movw	r30, r24
    8a82:	20 83       	st	Z, r18
	sbi(TCCR3B, CS30);
    8a84:	81 e9       	ldi	r24, 0x91	; 145
    8a86:	90 e0       	ldi	r25, 0x00	; 0
    8a88:	21 e9       	ldi	r18, 0x91	; 145
    8a8a:	30 e0       	ldi	r19, 0x00	; 0
    8a8c:	f9 01       	movw	r30, r18
    8a8e:	20 81       	ld	r18, Z
    8a90:	21 60       	ori	r18, 0x01	; 1
    8a92:	fc 01       	movw	r30, r24
    8a94:	20 83       	st	Z, r18
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    8a96:	80 e9       	ldi	r24, 0x90	; 144
    8a98:	90 e0       	ldi	r25, 0x00	; 0
    8a9a:	20 e9       	ldi	r18, 0x90	; 144
    8a9c:	30 e0       	ldi	r19, 0x00	; 0
    8a9e:	f9 01       	movw	r30, r18
    8aa0:	20 81       	ld	r18, Z
    8aa2:	21 60       	ori	r18, 0x01	; 1
    8aa4:	fc 01       	movw	r30, r24
    8aa6:	20 83       	st	Z, r18
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    8aa8:	81 ea       	ldi	r24, 0xA1	; 161
    8aaa:	90 e0       	ldi	r25, 0x00	; 0
    8aac:	21 ea       	ldi	r18, 0xA1	; 161
    8aae:	30 e0       	ldi	r19, 0x00	; 0
    8ab0:	f9 01       	movw	r30, r18
    8ab2:	20 81       	ld	r18, Z
    8ab4:	22 60       	ori	r18, 0x02	; 2
    8ab6:	fc 01       	movw	r30, r24
    8ab8:	20 83       	st	Z, r18
	sbi(TCCR4B, CS40);
    8aba:	81 ea       	ldi	r24, 0xA1	; 161
    8abc:	90 e0       	ldi	r25, 0x00	; 0
    8abe:	21 ea       	ldi	r18, 0xA1	; 161
    8ac0:	30 e0       	ldi	r19, 0x00	; 0
    8ac2:	f9 01       	movw	r30, r18
    8ac4:	20 81       	ld	r18, Z
    8ac6:	21 60       	ori	r18, 0x01	; 1
    8ac8:	fc 01       	movw	r30, r24
    8aca:	20 83       	st	Z, r18
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    8acc:	80 ea       	ldi	r24, 0xA0	; 160
    8ace:	90 e0       	ldi	r25, 0x00	; 0
    8ad0:	20 ea       	ldi	r18, 0xA0	; 160
    8ad2:	30 e0       	ldi	r19, 0x00	; 0
    8ad4:	f9 01       	movw	r30, r18
    8ad6:	20 81       	ld	r18, Z
    8ad8:	21 60       	ori	r18, 0x01	; 1
    8ada:	fc 01       	movw	r30, r24
    8adc:	20 83       	st	Z, r18
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    8ade:	81 e2       	ldi	r24, 0x21	; 33
    8ae0:	91 e0       	ldi	r25, 0x01	; 1
    8ae2:	21 e2       	ldi	r18, 0x21	; 33
    8ae4:	31 e0       	ldi	r19, 0x01	; 1
    8ae6:	f9 01       	movw	r30, r18
    8ae8:	20 81       	ld	r18, Z
    8aea:	22 60       	ori	r18, 0x02	; 2
    8aec:	fc 01       	movw	r30, r24
    8aee:	20 83       	st	Z, r18
	sbi(TCCR5B, CS50);
    8af0:	81 e2       	ldi	r24, 0x21	; 33
    8af2:	91 e0       	ldi	r25, 0x01	; 1
    8af4:	21 e2       	ldi	r18, 0x21	; 33
    8af6:	31 e0       	ldi	r19, 0x01	; 1
    8af8:	f9 01       	movw	r30, r18
    8afa:	20 81       	ld	r18, Z
    8afc:	21 60       	ori	r18, 0x01	; 1
    8afe:	fc 01       	movw	r30, r24
    8b00:	20 83       	st	Z, r18
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    8b02:	80 e2       	ldi	r24, 0x20	; 32
    8b04:	91 e0       	ldi	r25, 0x01	; 1
    8b06:	20 e2       	ldi	r18, 0x20	; 32
    8b08:	31 e0       	ldi	r19, 0x01	; 1
    8b0a:	f9 01       	movw	r30, r18
    8b0c:	20 81       	ld	r18, Z
    8b0e:	21 60       	ori	r18, 0x01	; 1
    8b10:	fc 01       	movw	r30, r24
    8b12:	20 83       	st	Z, r18
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    8b14:	8a e7       	ldi	r24, 0x7A	; 122
    8b16:	90 e0       	ldi	r25, 0x00	; 0
    8b18:	2a e7       	ldi	r18, 0x7A	; 122
    8b1a:	30 e0       	ldi	r19, 0x00	; 0
    8b1c:	f9 01       	movw	r30, r18
    8b1e:	20 81       	ld	r18, Z
    8b20:	24 60       	ori	r18, 0x04	; 4
    8b22:	fc 01       	movw	r30, r24
    8b24:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS1);
    8b26:	8a e7       	ldi	r24, 0x7A	; 122
    8b28:	90 e0       	ldi	r25, 0x00	; 0
    8b2a:	2a e7       	ldi	r18, 0x7A	; 122
    8b2c:	30 e0       	ldi	r19, 0x00	; 0
    8b2e:	f9 01       	movw	r30, r18
    8b30:	20 81       	ld	r18, Z
    8b32:	22 60       	ori	r18, 0x02	; 2
    8b34:	fc 01       	movw	r30, r24
    8b36:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS0);
    8b38:	8a e7       	ldi	r24, 0x7A	; 122
    8b3a:	90 e0       	ldi	r25, 0x00	; 0
    8b3c:	2a e7       	ldi	r18, 0x7A	; 122
    8b3e:	30 e0       	ldi	r19, 0x00	; 0
    8b40:	f9 01       	movw	r30, r18
    8b42:	20 81       	ld	r18, Z
    8b44:	21 60       	ori	r18, 0x01	; 1
    8b46:	fc 01       	movw	r30, r24
    8b48:	20 83       	st	Z, r18
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    8b4a:	8a e7       	ldi	r24, 0x7A	; 122
    8b4c:	90 e0       	ldi	r25, 0x00	; 0
    8b4e:	2a e7       	ldi	r18, 0x7A	; 122
    8b50:	30 e0       	ldi	r19, 0x00	; 0
    8b52:	f9 01       	movw	r30, r18
    8b54:	20 81       	ld	r18, Z
    8b56:	20 68       	ori	r18, 0x80	; 128
    8b58:	fc 01       	movw	r30, r24
    8b5a:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    8b5c:	81 ec       	ldi	r24, 0xC1	; 193
    8b5e:	90 e0       	ldi	r25, 0x00	; 0
    8b60:	fc 01       	movw	r30, r24
    8b62:	10 82       	st	Z, r1
#endif
}
    8b64:	00 00       	nop
    8b66:	df 91       	pop	r29
    8b68:	cf 91       	pop	r28
    8b6a:	08 95       	ret

00008b6c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    8b6c:	cf 93       	push	r28
    8b6e:	df 93       	push	r29
    8b70:	cd b7       	in	r28, 0x3d	; 61
    8b72:	de b7       	in	r29, 0x3e	; 62
    8b74:	69 97       	sbiw	r28, 0x19	; 25
    8b76:	0f b6       	in	r0, 0x3f	; 63
    8b78:	f8 94       	cli
    8b7a:	de bf       	out	0x3e, r29	; 62
    8b7c:	0f be       	out	0x3f, r0	; 63
    8b7e:	cd bf       	out	0x3d, r28	; 61
    8b80:	88 8f       	std	Y+24, r24	; 0x18
    8b82:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
    8b84:	88 8d       	ldd	r24, Y+24	; 0x18
    8b86:	88 2f       	mov	r24, r24
    8b88:	90 e0       	ldi	r25, 0x00	; 0
    8b8a:	8a 50       	subi	r24, 0x0A	; 10
    8b8c:	91 4d       	sbci	r25, 0xD1	; 209
    8b8e:	9a 83       	std	Y+2, r25	; 0x02
    8b90:	89 83       	std	Y+1, r24	; 0x01
    8b92:	89 81       	ldd	r24, Y+1	; 0x01
    8b94:	9a 81       	ldd	r25, Y+2	; 0x02
    8b96:	fc 01       	movw	r30, r24
    8b98:	84 91       	lpm	r24, Z
    8b9a:	8b 83       	std	Y+3, r24	; 0x03
    8b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    8b9e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    8ba0:	88 8d       	ldd	r24, Y+24	; 0x18
    8ba2:	88 2f       	mov	r24, r24
    8ba4:	90 e0       	ldi	r25, 0x00	; 0
    8ba6:	80 55       	subi	r24, 0x50	; 80
    8ba8:	91 4d       	sbci	r25, 0xD1	; 209
    8baa:	9e 83       	std	Y+6, r25	; 0x06
    8bac:	8d 83       	std	Y+5, r24	; 0x05
    8bae:	8d 81       	ldd	r24, Y+5	; 0x05
    8bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    8bb2:	fc 01       	movw	r30, r24
    8bb4:	84 91       	lpm	r24, Z
    8bb6:	8f 83       	std	Y+7, r24	; 0x07
    8bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    8bba:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    8bbc:	88 85       	ldd	r24, Y+8	; 0x08
    8bbe:	88 23       	and	r24, r24
    8bc0:	09 f4       	brne	.+2      	; 0x8bc4 <pinMode+0x58>
    8bc2:	95 c0       	rjmp	.+298    	; 0x8cee <pinMode+0x182>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    8bc4:	88 85       	ldd	r24, Y+8	; 0x08
    8bc6:	88 2f       	mov	r24, r24
    8bc8:	90 e0       	ldi	r25, 0x00	; 0
    8bca:	88 0f       	add	r24, r24
    8bcc:	99 1f       	adc	r25, r25
    8bce:	8e 59       	subi	r24, 0x9E	; 158
    8bd0:	91 4d       	sbci	r25, 0xD1	; 209
    8bd2:	9a 87       	std	Y+10, r25	; 0x0a
    8bd4:	89 87       	std	Y+9, r24	; 0x09
    8bd6:	89 85       	ldd	r24, Y+9	; 0x09
    8bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    8bda:	fc 01       	movw	r30, r24
    8bdc:	25 91       	lpm	r18, Z+
    8bde:	34 91       	lpm	r19, Z
    8be0:	cf 01       	movw	r24, r30
    8be2:	3c 87       	std	Y+12, r19	; 0x0c
    8be4:	2b 87       	std	Y+11, r18	; 0x0b
    8be6:	9a 87       	std	Y+10, r25	; 0x0a
    8be8:	89 87       	std	Y+9, r24	; 0x09
    8bea:	8b 85       	ldd	r24, Y+11	; 0x0b
    8bec:	9c 85       	ldd	r25, Y+12	; 0x0c
    8bee:	9e 87       	std	Y+14, r25	; 0x0e
    8bf0:	8d 87       	std	Y+13, r24	; 0x0d
	out = portOutputRegister(port);
    8bf2:	88 85       	ldd	r24, Y+8	; 0x08
    8bf4:	88 2f       	mov	r24, r24
    8bf6:	90 e0       	ldi	r25, 0x00	; 0
    8bf8:	88 0f       	add	r24, r24
    8bfa:	99 1f       	adc	r25, r25
    8bfc:	84 58       	subi	r24, 0x84	; 132
    8bfe:	91 4d       	sbci	r25, 0xD1	; 209
    8c00:	98 8b       	std	Y+16, r25	; 0x10
    8c02:	8f 87       	std	Y+15, r24	; 0x0f
    8c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    8c06:	98 89       	ldd	r25, Y+16	; 0x10
    8c08:	fc 01       	movw	r30, r24
    8c0a:	25 91       	lpm	r18, Z+
    8c0c:	34 91       	lpm	r19, Z
    8c0e:	cf 01       	movw	r24, r30
    8c10:	3a 8b       	std	Y+18, r19	; 0x12
    8c12:	29 8b       	std	Y+17, r18	; 0x11
    8c14:	98 8b       	std	Y+16, r25	; 0x10
    8c16:	8f 87       	std	Y+15, r24	; 0x0f
    8c18:	89 89       	ldd	r24, Y+17	; 0x11
    8c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    8c1c:	9c 8b       	std	Y+20, r25	; 0x14
    8c1e:	8b 8b       	std	Y+19, r24	; 0x13

	if (mode == INPUT) { 
    8c20:	89 8d       	ldd	r24, Y+25	; 0x19
    8c22:	88 23       	and	r24, r24
    8c24:	31 f5       	brne	.+76     	; 0x8c72 <pinMode+0x106>
		uint8_t oldSREG = SREG;
    8c26:	8f e5       	ldi	r24, 0x5F	; 95
    8c28:	90 e0       	ldi	r25, 0x00	; 0
    8c2a:	fc 01       	movw	r30, r24
    8c2c:	80 81       	ld	r24, Z
    8c2e:	8d 8b       	std	Y+21, r24	; 0x15
                cli();
    8c30:	f8 94       	cli
		*reg &= ~bit;
    8c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    8c36:	fc 01       	movw	r30, r24
    8c38:	80 81       	ld	r24, Z
    8c3a:	98 2f       	mov	r25, r24
    8c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    8c3e:	80 95       	com	r24
    8c40:	89 23       	and	r24, r25
    8c42:	28 2f       	mov	r18, r24
    8c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    8c48:	fc 01       	movw	r30, r24
    8c4a:	20 83       	st	Z, r18
		*out &= ~bit;
    8c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    8c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    8c50:	fc 01       	movw	r30, r24
    8c52:	80 81       	ld	r24, Z
    8c54:	98 2f       	mov	r25, r24
    8c56:	8c 81       	ldd	r24, Y+4	; 0x04
    8c58:	80 95       	com	r24
    8c5a:	89 23       	and	r24, r25
    8c5c:	28 2f       	mov	r18, r24
    8c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    8c60:	9c 89       	ldd	r25, Y+20	; 0x14
    8c62:	fc 01       	movw	r30, r24
    8c64:	20 83       	st	Z, r18
		SREG = oldSREG;
    8c66:	8f e5       	ldi	r24, 0x5F	; 95
    8c68:	90 e0       	ldi	r25, 0x00	; 0
    8c6a:	2d 89       	ldd	r18, Y+21	; 0x15
    8c6c:	fc 01       	movw	r30, r24
    8c6e:	20 83       	st	Z, r18
    8c70:	3f c0       	rjmp	.+126    	; 0x8cf0 <pinMode+0x184>
	} else if (mode == INPUT_PULLUP) {
    8c72:	89 8d       	ldd	r24, Y+25	; 0x19
    8c74:	82 30       	cpi	r24, 0x02	; 2
    8c76:	21 f5       	brne	.+72     	; 0x8cc0 <pinMode+0x154>
		uint8_t oldSREG = SREG;
    8c78:	8f e5       	ldi	r24, 0x5F	; 95
    8c7a:	90 e0       	ldi	r25, 0x00	; 0
    8c7c:	fc 01       	movw	r30, r24
    8c7e:	80 81       	ld	r24, Z
    8c80:	8e 8b       	std	Y+22, r24	; 0x16
                cli();
    8c82:	f8 94       	cli
		*reg &= ~bit;
    8c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    8c88:	fc 01       	movw	r30, r24
    8c8a:	80 81       	ld	r24, Z
    8c8c:	98 2f       	mov	r25, r24
    8c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    8c90:	80 95       	com	r24
    8c92:	89 23       	and	r24, r25
    8c94:	28 2f       	mov	r18, r24
    8c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    8c9a:	fc 01       	movw	r30, r24
    8c9c:	20 83       	st	Z, r18
		*out |= bit;
    8c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    8ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    8ca2:	fc 01       	movw	r30, r24
    8ca4:	90 81       	ld	r25, Z
    8ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    8ca8:	29 2f       	mov	r18, r25
    8caa:	28 2b       	or	r18, r24
    8cac:	8b 89       	ldd	r24, Y+19	; 0x13
    8cae:	9c 89       	ldd	r25, Y+20	; 0x14
    8cb0:	fc 01       	movw	r30, r24
    8cb2:	20 83       	st	Z, r18
		SREG = oldSREG;
    8cb4:	8f e5       	ldi	r24, 0x5F	; 95
    8cb6:	90 e0       	ldi	r25, 0x00	; 0
    8cb8:	2e 89       	ldd	r18, Y+22	; 0x16
    8cba:	fc 01       	movw	r30, r24
    8cbc:	20 83       	st	Z, r18
    8cbe:	18 c0       	rjmp	.+48     	; 0x8cf0 <pinMode+0x184>
	} else {
		uint8_t oldSREG = SREG;
    8cc0:	8f e5       	ldi	r24, 0x5F	; 95
    8cc2:	90 e0       	ldi	r25, 0x00	; 0
    8cc4:	fc 01       	movw	r30, r24
    8cc6:	80 81       	ld	r24, Z
    8cc8:	8f 8b       	std	Y+23, r24	; 0x17
                cli();
    8cca:	f8 94       	cli
		*reg |= bit;
    8ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    8cd0:	fc 01       	movw	r30, r24
    8cd2:	90 81       	ld	r25, Z
    8cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    8cd6:	29 2f       	mov	r18, r25
    8cd8:	28 2b       	or	r18, r24
    8cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    8cde:	fc 01       	movw	r30, r24
    8ce0:	20 83       	st	Z, r18
		SREG = oldSREG;
    8ce2:	8f e5       	ldi	r24, 0x5F	; 95
    8ce4:	90 e0       	ldi	r25, 0x00	; 0
    8ce6:	2f 89       	ldd	r18, Y+23	; 0x17
    8ce8:	fc 01       	movw	r30, r24
    8cea:	20 83       	st	Z, r18
    8cec:	01 c0       	rjmp	.+2      	; 0x8cf0 <pinMode+0x184>
{
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    8cee:	00 00       	nop
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    8cf0:	69 96       	adiw	r28, 0x19	; 25
    8cf2:	0f b6       	in	r0, 0x3f	; 63
    8cf4:	f8 94       	cli
    8cf6:	de bf       	out	0x3e, r29	; 62
    8cf8:	0f be       	out	0x3f, r0	; 63
    8cfa:	cd bf       	out	0x3d, r28	; 61
    8cfc:	df 91       	pop	r29
    8cfe:	cf 91       	pop	r28
    8d00:	08 95       	ret

00008d02 <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    8d02:	cf 93       	push	r28
    8d04:	df 93       	push	r29
    8d06:	1f 92       	push	r1
    8d08:	cd b7       	in	r28, 0x3d	; 61
    8d0a:	de b7       	in	r29, 0x3e	; 62
    8d0c:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    8d0e:	89 81       	ldd	r24, Y+1	; 0x01
    8d10:	88 2f       	mov	r24, r24
    8d12:	90 e0       	ldi	r25, 0x00	; 0
    8d14:	09 2e       	mov	r0, r25
    8d16:	00 0c       	add	r0, r0
    8d18:	aa 0b       	sbc	r26, r26
    8d1a:	bb 0b       	sbc	r27, r27
    8d1c:	41 e0       	ldi	r20, 0x01	; 1
    8d1e:	50 e0       	ldi	r21, 0x00	; 0
    8d20:	21 e1       	ldi	r18, 0x11	; 17
    8d22:	30 e0       	ldi	r19, 0x00	; 0
    8d24:	84 1b       	sub	r24, r20
    8d26:	95 0b       	sbc	r25, r21
    8d28:	28 17       	cp	r18, r24
    8d2a:	39 07       	cpc	r19, r25
    8d2c:	08 f4       	brcc	.+2      	; 0x8d30 <turnOffPWM+0x2e>
    8d2e:	a7 c0       	rjmp	.+334    	; 0x8e7e <turnOffPWM+0x17c>
    8d30:	fc 01       	movw	r30, r24
    8d32:	88 27       	eor	r24, r24
    8d34:	e6 58       	subi	r30, 0x86	; 134
    8d36:	ff 4f       	sbci	r31, 0xFF	; 255
    8d38:	8f 4f       	sbci	r24, 0xFF	; 255
    8d3a:	0c 94 ef 61 	jmp	0xc3de	; 0xc3de <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    8d3e:	80 e8       	ldi	r24, 0x80	; 128
    8d40:	90 e0       	ldi	r25, 0x00	; 0
    8d42:	20 e8       	ldi	r18, 0x80	; 128
    8d44:	30 e0       	ldi	r19, 0x00	; 0
    8d46:	f9 01       	movw	r30, r18
    8d48:	20 81       	ld	r18, Z
    8d4a:	2f 77       	andi	r18, 0x7F	; 127
    8d4c:	fc 01       	movw	r30, r24
    8d4e:	20 83       	st	Z, r18
    8d50:	96 c0       	rjmp	.+300    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    8d52:	80 e8       	ldi	r24, 0x80	; 128
    8d54:	90 e0       	ldi	r25, 0x00	; 0
    8d56:	20 e8       	ldi	r18, 0x80	; 128
    8d58:	30 e0       	ldi	r19, 0x00	; 0
    8d5a:	f9 01       	movw	r30, r18
    8d5c:	20 81       	ld	r18, Z
    8d5e:	2f 7d       	andi	r18, 0xDF	; 223
    8d60:	fc 01       	movw	r30, r24
    8d62:	20 83       	st	Z, r18
    8d64:	8c c0       	rjmp	.+280    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    8d66:	80 e8       	ldi	r24, 0x80	; 128
    8d68:	90 e0       	ldi	r25, 0x00	; 0
    8d6a:	20 e8       	ldi	r18, 0x80	; 128
    8d6c:	30 e0       	ldi	r19, 0x00	; 0
    8d6e:	f9 01       	movw	r30, r18
    8d70:	20 81       	ld	r18, Z
    8d72:	27 7f       	andi	r18, 0xF7	; 247
    8d74:	fc 01       	movw	r30, r24
    8d76:	20 83       	st	Z, r18
    8d78:	82 c0       	rjmp	.+260    	; 0x8e7e <turnOffPWM+0x17c>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    8d7a:	84 e4       	ldi	r24, 0x44	; 68
    8d7c:	90 e0       	ldi	r25, 0x00	; 0
    8d7e:	24 e4       	ldi	r18, 0x44	; 68
    8d80:	30 e0       	ldi	r19, 0x00	; 0
    8d82:	f9 01       	movw	r30, r18
    8d84:	20 81       	ld	r18, Z
    8d86:	2f 77       	andi	r18, 0x7F	; 127
    8d88:	fc 01       	movw	r30, r24
    8d8a:	20 83       	st	Z, r18
    8d8c:	78 c0       	rjmp	.+240    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    8d8e:	84 e4       	ldi	r24, 0x44	; 68
    8d90:	90 e0       	ldi	r25, 0x00	; 0
    8d92:	24 e4       	ldi	r18, 0x44	; 68
    8d94:	30 e0       	ldi	r19, 0x00	; 0
    8d96:	f9 01       	movw	r30, r18
    8d98:	20 81       	ld	r18, Z
    8d9a:	2f 7d       	andi	r18, 0xDF	; 223
    8d9c:	fc 01       	movw	r30, r24
    8d9e:	20 83       	st	Z, r18
    8da0:	6e c0       	rjmp	.+220    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    8da2:	80 eb       	ldi	r24, 0xB0	; 176
    8da4:	90 e0       	ldi	r25, 0x00	; 0
    8da6:	20 eb       	ldi	r18, 0xB0	; 176
    8da8:	30 e0       	ldi	r19, 0x00	; 0
    8daa:	f9 01       	movw	r30, r18
    8dac:	20 81       	ld	r18, Z
    8dae:	2f 77       	andi	r18, 0x7F	; 127
    8db0:	fc 01       	movw	r30, r24
    8db2:	20 83       	st	Z, r18
    8db4:	64 c0       	rjmp	.+200    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    8db6:	80 eb       	ldi	r24, 0xB0	; 176
    8db8:	90 e0       	ldi	r25, 0x00	; 0
    8dba:	20 eb       	ldi	r18, 0xB0	; 176
    8dbc:	30 e0       	ldi	r19, 0x00	; 0
    8dbe:	f9 01       	movw	r30, r18
    8dc0:	20 81       	ld	r18, Z
    8dc2:	2f 7d       	andi	r18, 0xDF	; 223
    8dc4:	fc 01       	movw	r30, r24
    8dc6:	20 83       	st	Z, r18
    8dc8:	5a c0       	rjmp	.+180    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    8dca:	80 e9       	ldi	r24, 0x90	; 144
    8dcc:	90 e0       	ldi	r25, 0x00	; 0
    8dce:	20 e9       	ldi	r18, 0x90	; 144
    8dd0:	30 e0       	ldi	r19, 0x00	; 0
    8dd2:	f9 01       	movw	r30, r18
    8dd4:	20 81       	ld	r18, Z
    8dd6:	2f 77       	andi	r18, 0x7F	; 127
    8dd8:	fc 01       	movw	r30, r24
    8dda:	20 83       	st	Z, r18
    8ddc:	50 c0       	rjmp	.+160    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    8dde:	80 e9       	ldi	r24, 0x90	; 144
    8de0:	90 e0       	ldi	r25, 0x00	; 0
    8de2:	20 e9       	ldi	r18, 0x90	; 144
    8de4:	30 e0       	ldi	r19, 0x00	; 0
    8de6:	f9 01       	movw	r30, r18
    8de8:	20 81       	ld	r18, Z
    8dea:	2f 7d       	andi	r18, 0xDF	; 223
    8dec:	fc 01       	movw	r30, r24
    8dee:	20 83       	st	Z, r18
    8df0:	46 c0       	rjmp	.+140    	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    8df2:	80 e9       	ldi	r24, 0x90	; 144
    8df4:	90 e0       	ldi	r25, 0x00	; 0
    8df6:	20 e9       	ldi	r18, 0x90	; 144
    8df8:	30 e0       	ldi	r19, 0x00	; 0
    8dfa:	f9 01       	movw	r30, r18
    8dfc:	20 81       	ld	r18, Z
    8dfe:	27 7f       	andi	r18, 0xF7	; 247
    8e00:	fc 01       	movw	r30, r24
    8e02:	20 83       	st	Z, r18
    8e04:	3c c0       	rjmp	.+120    	; 0x8e7e <turnOffPWM+0x17c>
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    8e06:	80 ea       	ldi	r24, 0xA0	; 160
    8e08:	90 e0       	ldi	r25, 0x00	; 0
    8e0a:	20 ea       	ldi	r18, 0xA0	; 160
    8e0c:	30 e0       	ldi	r19, 0x00	; 0
    8e0e:	f9 01       	movw	r30, r18
    8e10:	20 81       	ld	r18, Z
    8e12:	2f 77       	andi	r18, 0x7F	; 127
    8e14:	fc 01       	movw	r30, r24
    8e16:	20 83       	st	Z, r18
    8e18:	32 c0       	rjmp	.+100    	; 0x8e7e <turnOffPWM+0x17c>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    8e1a:	80 ea       	ldi	r24, 0xA0	; 160
    8e1c:	90 e0       	ldi	r25, 0x00	; 0
    8e1e:	20 ea       	ldi	r18, 0xA0	; 160
    8e20:	30 e0       	ldi	r19, 0x00	; 0
    8e22:	f9 01       	movw	r30, r18
    8e24:	20 81       	ld	r18, Z
    8e26:	2f 7d       	andi	r18, 0xDF	; 223
    8e28:	fc 01       	movw	r30, r24
    8e2a:	20 83       	st	Z, r18
    8e2c:	28 c0       	rjmp	.+80     	; 0x8e7e <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    8e2e:	80 ea       	ldi	r24, 0xA0	; 160
    8e30:	90 e0       	ldi	r25, 0x00	; 0
    8e32:	20 ea       	ldi	r18, 0xA0	; 160
    8e34:	30 e0       	ldi	r19, 0x00	; 0
    8e36:	f9 01       	movw	r30, r18
    8e38:	20 81       	ld	r18, Z
    8e3a:	27 7f       	andi	r18, 0xF7	; 247
    8e3c:	fc 01       	movw	r30, r24
    8e3e:	20 83       	st	Z, r18
    8e40:	1e c0       	rjmp	.+60     	; 0x8e7e <turnOffPWM+0x17c>
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    8e42:	80 e2       	ldi	r24, 0x20	; 32
    8e44:	91 e0       	ldi	r25, 0x01	; 1
    8e46:	20 e2       	ldi	r18, 0x20	; 32
    8e48:	31 e0       	ldi	r19, 0x01	; 1
    8e4a:	f9 01       	movw	r30, r18
    8e4c:	20 81       	ld	r18, Z
    8e4e:	2f 77       	andi	r18, 0x7F	; 127
    8e50:	fc 01       	movw	r30, r24
    8e52:	20 83       	st	Z, r18
    8e54:	14 c0       	rjmp	.+40     	; 0x8e7e <turnOffPWM+0x17c>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    8e56:	80 e2       	ldi	r24, 0x20	; 32
    8e58:	91 e0       	ldi	r25, 0x01	; 1
    8e5a:	20 e2       	ldi	r18, 0x20	; 32
    8e5c:	31 e0       	ldi	r19, 0x01	; 1
    8e5e:	f9 01       	movw	r30, r18
    8e60:	20 81       	ld	r18, Z
    8e62:	2f 7d       	andi	r18, 0xDF	; 223
    8e64:	fc 01       	movw	r30, r24
    8e66:	20 83       	st	Z, r18
    8e68:	0a c0       	rjmp	.+20     	; 0x8e7e <turnOffPWM+0x17c>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    8e6a:	80 e2       	ldi	r24, 0x20	; 32
    8e6c:	91 e0       	ldi	r25, 0x01	; 1
    8e6e:	20 e2       	ldi	r18, 0x20	; 32
    8e70:	31 e0       	ldi	r19, 0x01	; 1
    8e72:	f9 01       	movw	r30, r18
    8e74:	20 81       	ld	r18, Z
    8e76:	27 7f       	andi	r18, 0xF7	; 247
    8e78:	fc 01       	movw	r30, r24
    8e7a:	20 83       	st	Z, r18
    8e7c:	00 00       	nop
		#endif
	}
}
    8e7e:	00 00       	nop
    8e80:	0f 90       	pop	r0
    8e82:	df 91       	pop	r29
    8e84:	cf 91       	pop	r28
    8e86:	08 95       	ret

00008e88 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    8e88:	cf 93       	push	r28
    8e8a:	df 93       	push	r29
    8e8c:	cd b7       	in	r28, 0x3d	; 61
    8e8e:	de b7       	in	r29, 0x3e	; 62
    8e90:	65 97       	sbiw	r28, 0x15	; 21
    8e92:	0f b6       	in	r0, 0x3f	; 63
    8e94:	f8 94       	cli
    8e96:	de bf       	out	0x3e, r29	; 62
    8e98:	0f be       	out	0x3f, r0	; 63
    8e9a:	cd bf       	out	0x3d, r28	; 61
    8e9c:	8c 8b       	std	Y+20, r24	; 0x14
    8e9e:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    8ea0:	8c 89       	ldd	r24, Y+20	; 0x14
    8ea2:	88 2f       	mov	r24, r24
    8ea4:	90 e0       	ldi	r25, 0x00	; 0
    8ea6:	84 5c       	subi	r24, 0xC4	; 196
    8ea8:	90 4d       	sbci	r25, 0xD0	; 208
    8eaa:	9a 83       	std	Y+2, r25	; 0x02
    8eac:	89 83       	std	Y+1, r24	; 0x01
    8eae:	89 81       	ldd	r24, Y+1	; 0x01
    8eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    8eb2:	fc 01       	movw	r30, r24
    8eb4:	84 91       	lpm	r24, Z
    8eb6:	8b 83       	std	Y+3, r24	; 0x03
    8eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    8eba:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    8ebc:	8c 89       	ldd	r24, Y+20	; 0x14
    8ebe:	88 2f       	mov	r24, r24
    8ec0:	90 e0       	ldi	r25, 0x00	; 0
    8ec2:	8a 50       	subi	r24, 0x0A	; 10
    8ec4:	91 4d       	sbci	r25, 0xD1	; 209
    8ec6:	9e 83       	std	Y+6, r25	; 0x06
    8ec8:	8d 83       	std	Y+5, r24	; 0x05
    8eca:	8d 81       	ldd	r24, Y+5	; 0x05
    8ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    8ece:	fc 01       	movw	r30, r24
    8ed0:	84 91       	lpm	r24, Z
    8ed2:	8f 83       	std	Y+7, r24	; 0x07
    8ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    8ed6:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    8ed8:	8c 89       	ldd	r24, Y+20	; 0x14
    8eda:	88 2f       	mov	r24, r24
    8edc:	90 e0       	ldi	r25, 0x00	; 0
    8ede:	80 55       	subi	r24, 0x50	; 80
    8ee0:	91 4d       	sbci	r25, 0xD1	; 209
    8ee2:	9a 87       	std	Y+10, r25	; 0x0a
    8ee4:	89 87       	std	Y+9, r24	; 0x09
    8ee6:	89 85       	ldd	r24, Y+9	; 0x09
    8ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    8eea:	fc 01       	movw	r30, r24
    8eec:	84 91       	lpm	r24, Z
    8eee:	8b 87       	std	Y+11, r24	; 0x0b
    8ef0:	8b 85       	ldd	r24, Y+11	; 0x0b
    8ef2:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    8ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ef6:	88 23       	and	r24, r24
    8ef8:	09 f4       	brne	.+2      	; 0x8efc <digitalWrite+0x74>
    8efa:	44 c0       	rjmp	.+136    	; 0x8f84 <digitalWrite+0xfc>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    8efc:	8c 81       	ldd	r24, Y+4	; 0x04
    8efe:	88 23       	and	r24, r24
    8f00:	11 f0       	breq	.+4      	; 0x8f06 <digitalWrite+0x7e>
    8f02:	8c 81       	ldd	r24, Y+4	; 0x04
    8f04:	fe de       	rcall	.-516    	; 0x8d02 <turnOffPWM>

	out = portOutputRegister(port);
    8f06:	8c 85       	ldd	r24, Y+12	; 0x0c
    8f08:	88 2f       	mov	r24, r24
    8f0a:	90 e0       	ldi	r25, 0x00	; 0
    8f0c:	88 0f       	add	r24, r24
    8f0e:	99 1f       	adc	r25, r25
    8f10:	84 58       	subi	r24, 0x84	; 132
    8f12:	91 4d       	sbci	r25, 0xD1	; 209
    8f14:	9e 87       	std	Y+14, r25	; 0x0e
    8f16:	8d 87       	std	Y+13, r24	; 0x0d
    8f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    8f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    8f1c:	fc 01       	movw	r30, r24
    8f1e:	25 91       	lpm	r18, Z+
    8f20:	34 91       	lpm	r19, Z
    8f22:	cf 01       	movw	r24, r30
    8f24:	38 8b       	std	Y+16, r19	; 0x10
    8f26:	2f 87       	std	Y+15, r18	; 0x0f
    8f28:	9e 87       	std	Y+14, r25	; 0x0e
    8f2a:	8d 87       	std	Y+13, r24	; 0x0d
    8f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    8f2e:	98 89       	ldd	r25, Y+16	; 0x10
    8f30:	9a 8b       	std	Y+18, r25	; 0x12
    8f32:	89 8b       	std	Y+17, r24	; 0x11

	uint8_t oldSREG = SREG;
    8f34:	8f e5       	ldi	r24, 0x5F	; 95
    8f36:	90 e0       	ldi	r25, 0x00	; 0
    8f38:	fc 01       	movw	r30, r24
    8f3a:	80 81       	ld	r24, Z
    8f3c:	8b 8b       	std	Y+19, r24	; 0x13
	cli();
    8f3e:	f8 94       	cli

	if (val == LOW) {
    8f40:	8d 89       	ldd	r24, Y+21	; 0x15
    8f42:	88 23       	and	r24, r24
    8f44:	71 f4       	brne	.+28     	; 0x8f62 <digitalWrite+0xda>
		*out &= ~bit;
    8f46:	89 89       	ldd	r24, Y+17	; 0x11
    8f48:	9a 89       	ldd	r25, Y+18	; 0x12
    8f4a:	fc 01       	movw	r30, r24
    8f4c:	80 81       	ld	r24, Z
    8f4e:	98 2f       	mov	r25, r24
    8f50:	88 85       	ldd	r24, Y+8	; 0x08
    8f52:	80 95       	com	r24
    8f54:	89 23       	and	r24, r25
    8f56:	28 2f       	mov	r18, r24
    8f58:	89 89       	ldd	r24, Y+17	; 0x11
    8f5a:	9a 89       	ldd	r25, Y+18	; 0x12
    8f5c:	fc 01       	movw	r30, r24
    8f5e:	20 83       	st	Z, r18
    8f60:	0b c0       	rjmp	.+22     	; 0x8f78 <digitalWrite+0xf0>
	} else {
		*out |= bit;
    8f62:	89 89       	ldd	r24, Y+17	; 0x11
    8f64:	9a 89       	ldd	r25, Y+18	; 0x12
    8f66:	fc 01       	movw	r30, r24
    8f68:	90 81       	ld	r25, Z
    8f6a:	88 85       	ldd	r24, Y+8	; 0x08
    8f6c:	29 2f       	mov	r18, r25
    8f6e:	28 2b       	or	r18, r24
    8f70:	89 89       	ldd	r24, Y+17	; 0x11
    8f72:	9a 89       	ldd	r25, Y+18	; 0x12
    8f74:	fc 01       	movw	r30, r24
    8f76:	20 83       	st	Z, r18
	}

	SREG = oldSREG;
    8f78:	8f e5       	ldi	r24, 0x5F	; 95
    8f7a:	90 e0       	ldi	r25, 0x00	; 0
    8f7c:	2b 89       	ldd	r18, Y+19	; 0x13
    8f7e:	fc 01       	movw	r30, r24
    8f80:	20 83       	st	Z, r18
    8f82:	01 c0       	rjmp	.+2      	; 0x8f86 <digitalWrite+0xfe>
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    8f84:	00 00       	nop
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
    8f86:	65 96       	adiw	r28, 0x15	; 21
    8f88:	0f b6       	in	r0, 0x3f	; 63
    8f8a:	f8 94       	cli
    8f8c:	de bf       	out	0x3e, r29	; 62
    8f8e:	0f be       	out	0x3f, r0	; 63
    8f90:	cd bf       	out	0x3d, r28	; 61
    8f92:	df 91       	pop	r29
    8f94:	cf 91       	pop	r28
    8f96:	08 95       	ret

00008f98 <digitalRead>:

int digitalRead(uint8_t pin)
{
    8f98:	cf 93       	push	r28
    8f9a:	df 93       	push	r29
    8f9c:	cd b7       	in	r28, 0x3d	; 61
    8f9e:	de b7       	in	r29, 0x3e	; 62
    8fa0:	61 97       	sbiw	r28, 0x11	; 17
    8fa2:	0f b6       	in	r0, 0x3f	; 63
    8fa4:	f8 94       	cli
    8fa6:	de bf       	out	0x3e, r29	; 62
    8fa8:	0f be       	out	0x3f, r0	; 63
    8faa:	cd bf       	out	0x3d, r28	; 61
    8fac:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
    8fae:	89 89       	ldd	r24, Y+17	; 0x11
    8fb0:	88 2f       	mov	r24, r24
    8fb2:	90 e0       	ldi	r25, 0x00	; 0
    8fb4:	84 5c       	subi	r24, 0xC4	; 196
    8fb6:	90 4d       	sbci	r25, 0xD0	; 208
    8fb8:	9a 83       	std	Y+2, r25	; 0x02
    8fba:	89 83       	std	Y+1, r24	; 0x01
    8fbc:	89 81       	ldd	r24, Y+1	; 0x01
    8fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    8fc0:	fc 01       	movw	r30, r24
    8fc2:	84 91       	lpm	r24, Z
    8fc4:	8b 83       	std	Y+3, r24	; 0x03
    8fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    8fc8:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    8fca:	89 89       	ldd	r24, Y+17	; 0x11
    8fcc:	88 2f       	mov	r24, r24
    8fce:	90 e0       	ldi	r25, 0x00	; 0
    8fd0:	8a 50       	subi	r24, 0x0A	; 10
    8fd2:	91 4d       	sbci	r25, 0xD1	; 209
    8fd4:	9e 83       	std	Y+6, r25	; 0x06
    8fd6:	8d 83       	std	Y+5, r24	; 0x05
    8fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    8fda:	9e 81       	ldd	r25, Y+6	; 0x06
    8fdc:	fc 01       	movw	r30, r24
    8fde:	84 91       	lpm	r24, Z
    8fe0:	8f 83       	std	Y+7, r24	; 0x07
    8fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    8fe4:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    8fe6:	89 89       	ldd	r24, Y+17	; 0x11
    8fe8:	88 2f       	mov	r24, r24
    8fea:	90 e0       	ldi	r25, 0x00	; 0
    8fec:	80 55       	subi	r24, 0x50	; 80
    8fee:	91 4d       	sbci	r25, 0xD1	; 209
    8ff0:	9a 87       	std	Y+10, r25	; 0x0a
    8ff2:	89 87       	std	Y+9, r24	; 0x09
    8ff4:	89 85       	ldd	r24, Y+9	; 0x09
    8ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ff8:	fc 01       	movw	r30, r24
    8ffa:	84 91       	lpm	r24, Z
    8ffc:	8b 87       	std	Y+11, r24	; 0x0b
    8ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    9000:	8c 87       	std	Y+12, r24	; 0x0c

	if (port == NOT_A_PIN) return LOW;
    9002:	8c 85       	ldd	r24, Y+12	; 0x0c
    9004:	88 23       	and	r24, r24
    9006:	19 f4       	brne	.+6      	; 0x900e <digitalRead+0x76>
    9008:	80 e0       	ldi	r24, 0x00	; 0
    900a:	90 e0       	ldi	r25, 0x00	; 0
    900c:	25 c0       	rjmp	.+74     	; 0x9058 <digitalRead+0xc0>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    900e:	8c 81       	ldd	r24, Y+4	; 0x04
    9010:	88 23       	and	r24, r24
    9012:	11 f0       	breq	.+4      	; 0x9018 <digitalRead+0x80>
    9014:	8c 81       	ldd	r24, Y+4	; 0x04
    9016:	75 de       	rcall	.-790    	; 0x8d02 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    9018:	8c 85       	ldd	r24, Y+12	; 0x0c
    901a:	88 2f       	mov	r24, r24
    901c:	90 e0       	ldi	r25, 0x00	; 0
    901e:	88 0f       	add	r24, r24
    9020:	99 1f       	adc	r25, r25
    9022:	8a 56       	subi	r24, 0x6A	; 106
    9024:	91 4d       	sbci	r25, 0xD1	; 209
    9026:	9e 87       	std	Y+14, r25	; 0x0e
    9028:	8d 87       	std	Y+13, r24	; 0x0d
    902a:	8d 85       	ldd	r24, Y+13	; 0x0d
    902c:	9e 85       	ldd	r25, Y+14	; 0x0e
    902e:	fc 01       	movw	r30, r24
    9030:	25 91       	lpm	r18, Z+
    9032:	34 91       	lpm	r19, Z
    9034:	cf 01       	movw	r24, r30
    9036:	38 8b       	std	Y+16, r19	; 0x10
    9038:	2f 87       	std	Y+15, r18	; 0x0f
    903a:	9e 87       	std	Y+14, r25	; 0x0e
    903c:	8d 87       	std	Y+13, r24	; 0x0d
    903e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9040:	98 89       	ldd	r25, Y+16	; 0x10
    9042:	fc 01       	movw	r30, r24
    9044:	90 81       	ld	r25, Z
    9046:	88 85       	ldd	r24, Y+8	; 0x08
    9048:	89 23       	and	r24, r25
    904a:	88 23       	and	r24, r24
    904c:	19 f0       	breq	.+6      	; 0x9054 <digitalRead+0xbc>
    904e:	81 e0       	ldi	r24, 0x01	; 1
    9050:	90 e0       	ldi	r25, 0x00	; 0
    9052:	02 c0       	rjmp	.+4      	; 0x9058 <digitalRead+0xc0>
	return LOW;
    9054:	80 e0       	ldi	r24, 0x00	; 0
    9056:	90 e0       	ldi	r25, 0x00	; 0
}
    9058:	61 96       	adiw	r28, 0x11	; 17
    905a:	0f b6       	in	r0, 0x3f	; 63
    905c:	f8 94       	cli
    905e:	de bf       	out	0x3e, r29	; 62
    9060:	0f be       	out	0x3f, r0	; 63
    9062:	cd bf       	out	0x3d, r28	; 61
    9064:	df 91       	pop	r29
    9066:	cf 91       	pop	r28
    9068:	08 95       	ret

0000906a <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    906a:	cf 93       	push	r28
    906c:	df 93       	push	r29
    906e:	00 d0       	rcall	.+0      	; 0x9070 <_Z6randoml+0x6>
    9070:	1f 92       	push	r1
    9072:	cd b7       	in	r28, 0x3d	; 61
    9074:	de b7       	in	r29, 0x3e	; 62
    9076:	69 83       	std	Y+1, r22	; 0x01
    9078:	7a 83       	std	Y+2, r23	; 0x02
    907a:	8b 83       	std	Y+3, r24	; 0x03
    907c:	9c 83       	std	Y+4, r25	; 0x04
  if (howbig == 0) {
    907e:	89 81       	ldd	r24, Y+1	; 0x01
    9080:	9a 81       	ldd	r25, Y+2	; 0x02
    9082:	ab 81       	ldd	r26, Y+3	; 0x03
    9084:	bc 81       	ldd	r27, Y+4	; 0x04
    9086:	89 2b       	or	r24, r25
    9088:	8a 2b       	or	r24, r26
    908a:	8b 2b       	or	r24, r27
    908c:	21 f4       	brne	.+8      	; 0x9096 <_Z6randoml+0x2c>
    return 0;
    908e:	80 e0       	ldi	r24, 0x00	; 0
    9090:	90 e0       	ldi	r25, 0x00	; 0
    9092:	dc 01       	movw	r26, r24
    9094:	0e c0       	rjmp	.+28     	; 0x90b2 <_Z6randoml+0x48>
  }
  return random() % howbig;
    9096:	0e 94 8d 63 	call	0xc71a	; 0xc71a <random>
    909a:	dc 01       	movw	r26, r24
    909c:	cb 01       	movw	r24, r22
    909e:	29 81       	ldd	r18, Y+1	; 0x01
    90a0:	3a 81       	ldd	r19, Y+2	; 0x02
    90a2:	4b 81       	ldd	r20, Y+3	; 0x03
    90a4:	5c 81       	ldd	r21, Y+4	; 0x04
    90a6:	bc 01       	movw	r22, r24
    90a8:	cd 01       	movw	r24, r26
    90aa:	0e 94 d3 61 	call	0xc3a6	; 0xc3a6 <__divmodsi4>
    90ae:	dc 01       	movw	r26, r24
    90b0:	cb 01       	movw	r24, r22
}
    90b2:	bc 01       	movw	r22, r24
    90b4:	cd 01       	movw	r24, r26
    90b6:	0f 90       	pop	r0
    90b8:	0f 90       	pop	r0
    90ba:	0f 90       	pop	r0
    90bc:	0f 90       	pop	r0
    90be:	df 91       	pop	r29
    90c0:	cf 91       	pop	r28
    90c2:	08 95       	ret

000090c4 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    90c4:	ef 92       	push	r14
    90c6:	ff 92       	push	r15
    90c8:	0f 93       	push	r16
    90ca:	1f 93       	push	r17
    90cc:	cf 93       	push	r28
    90ce:	df 93       	push	r29
    90d0:	cd b7       	in	r28, 0x3d	; 61
    90d2:	de b7       	in	r29, 0x3e	; 62
    90d4:	2c 97       	sbiw	r28, 0x0c	; 12
    90d6:	0f b6       	in	r0, 0x3f	; 63
    90d8:	f8 94       	cli
    90da:	de bf       	out	0x3e, r29	; 62
    90dc:	0f be       	out	0x3f, r0	; 63
    90de:	cd bf       	out	0x3d, r28	; 61
    90e0:	6d 83       	std	Y+5, r22	; 0x05
    90e2:	7e 83       	std	Y+6, r23	; 0x06
    90e4:	8f 83       	std	Y+7, r24	; 0x07
    90e6:	98 87       	std	Y+8, r25	; 0x08
    90e8:	29 87       	std	Y+9, r18	; 0x09
    90ea:	3a 87       	std	Y+10, r19	; 0x0a
    90ec:	4b 87       	std	Y+11, r20	; 0x0b
    90ee:	5c 87       	std	Y+12, r21	; 0x0c
  if (howsmall >= howbig) {
    90f0:	2d 81       	ldd	r18, Y+5	; 0x05
    90f2:	3e 81       	ldd	r19, Y+6	; 0x06
    90f4:	4f 81       	ldd	r20, Y+7	; 0x07
    90f6:	58 85       	ldd	r21, Y+8	; 0x08
    90f8:	89 85       	ldd	r24, Y+9	; 0x09
    90fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    90fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    90fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    9100:	28 17       	cp	r18, r24
    9102:	39 07       	cpc	r19, r25
    9104:	4a 07       	cpc	r20, r26
    9106:	5b 07       	cpc	r21, r27
    9108:	2c f0       	brlt	.+10     	; 0x9114 <_Z6randomll+0x50>
    return howsmall;
    910a:	8d 81       	ldd	r24, Y+5	; 0x05
    910c:	9e 81       	ldd	r25, Y+6	; 0x06
    910e:	af 81       	ldd	r26, Y+7	; 0x07
    9110:	b8 85       	ldd	r27, Y+8	; 0x08
    9112:	25 c0       	rjmp	.+74     	; 0x915e <_Z6randomll+0x9a>
  }
  long diff = howbig - howsmall;
    9114:	29 85       	ldd	r18, Y+9	; 0x09
    9116:	3a 85       	ldd	r19, Y+10	; 0x0a
    9118:	4b 85       	ldd	r20, Y+11	; 0x0b
    911a:	5c 85       	ldd	r21, Y+12	; 0x0c
    911c:	8d 81       	ldd	r24, Y+5	; 0x05
    911e:	9e 81       	ldd	r25, Y+6	; 0x06
    9120:	af 81       	ldd	r26, Y+7	; 0x07
    9122:	b8 85       	ldd	r27, Y+8	; 0x08
    9124:	79 01       	movw	r14, r18
    9126:	8a 01       	movw	r16, r20
    9128:	e8 1a       	sub	r14, r24
    912a:	f9 0a       	sbc	r15, r25
    912c:	0a 0b       	sbc	r16, r26
    912e:	1b 0b       	sbc	r17, r27
    9130:	d8 01       	movw	r26, r16
    9132:	c7 01       	movw	r24, r14
    9134:	89 83       	std	Y+1, r24	; 0x01
    9136:	9a 83       	std	Y+2, r25	; 0x02
    9138:	ab 83       	std	Y+3, r26	; 0x03
    913a:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
    913c:	89 81       	ldd	r24, Y+1	; 0x01
    913e:	9a 81       	ldd	r25, Y+2	; 0x02
    9140:	ab 81       	ldd	r26, Y+3	; 0x03
    9142:	bc 81       	ldd	r27, Y+4	; 0x04
    9144:	bc 01       	movw	r22, r24
    9146:	cd 01       	movw	r24, r26
    9148:	90 df       	rcall	.-224    	; 0x906a <_Z6randoml>
    914a:	9b 01       	movw	r18, r22
    914c:	ac 01       	movw	r20, r24
    914e:	8d 81       	ldd	r24, Y+5	; 0x05
    9150:	9e 81       	ldd	r25, Y+6	; 0x06
    9152:	af 81       	ldd	r26, Y+7	; 0x07
    9154:	b8 85       	ldd	r27, Y+8	; 0x08
    9156:	82 0f       	add	r24, r18
    9158:	93 1f       	adc	r25, r19
    915a:	a4 1f       	adc	r26, r20
    915c:	b5 1f       	adc	r27, r21
}
    915e:	bc 01       	movw	r22, r24
    9160:	cd 01       	movw	r24, r26
    9162:	2c 96       	adiw	r28, 0x0c	; 12
    9164:	0f b6       	in	r0, 0x3f	; 63
    9166:	f8 94       	cli
    9168:	de bf       	out	0x3e, r29	; 62
    916a:	0f be       	out	0x3f, r0	; 63
    916c:	cd bf       	out	0x3d, r28	; 61
    916e:	df 91       	pop	r29
    9170:	cf 91       	pop	r28
    9172:	1f 91       	pop	r17
    9174:	0f 91       	pop	r16
    9176:	ff 90       	pop	r15
    9178:	ef 90       	pop	r14
    917a:	08 95       	ret

0000917c <_ZN6StringC1EPKc>:
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
}
    917c:	cf 93       	push	r28
    917e:	df 93       	push	r29
    9180:	00 d0       	rcall	.+0      	; 0x9182 <_ZN6StringC1EPKc+0x6>
    9182:	1f 92       	push	r1
    9184:	cd b7       	in	r28, 0x3d	; 61
    9186:	de b7       	in	r29, 0x3e	; 62
    9188:	9a 83       	std	Y+2, r25	; 0x02
    918a:	89 83       	std	Y+1, r24	; 0x01
    918c:	7c 83       	std	Y+4, r23	; 0x04
    918e:	6b 83       	std	Y+3, r22	; 0x03
    9190:	89 81       	ldd	r24, Y+1	; 0x01
    9192:	9a 81       	ldd	r25, Y+2	; 0x02
    9194:	2c d0       	rcall	.+88     	; 0x91ee <_ZN6String4initEv>
    9196:	8b 81       	ldd	r24, Y+3	; 0x03
    9198:	9c 81       	ldd	r25, Y+4	; 0x04
    919a:	89 2b       	or	r24, r25
    919c:	59 f0       	breq	.+22     	; 0x91b4 <_ZN6StringC1EPKc+0x38>
    919e:	8b 81       	ldd	r24, Y+3	; 0x03
    91a0:	9c 81       	ldd	r25, Y+4	; 0x04
    91a2:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    91a6:	ac 01       	movw	r20, r24
    91a8:	2b 81       	ldd	r18, Y+3	; 0x03
    91aa:	3c 81       	ldd	r19, Y+4	; 0x04
    91ac:	89 81       	ldd	r24, Y+1	; 0x01
    91ae:	9a 81       	ldd	r25, Y+2	; 0x02
    91b0:	b9 01       	movw	r22, r18
    91b2:	e3 d0       	rcall	.+454    	; 0x937a <_ZN6String4copyEPKcj>
    91b4:	00 00       	nop
    91b6:	0f 90       	pop	r0
    91b8:	0f 90       	pop	r0
    91ba:	0f 90       	pop	r0
    91bc:	0f 90       	pop	r0
    91be:	df 91       	pop	r29
    91c0:	cf 91       	pop	r28
    91c2:	08 95       	ret

000091c4 <_ZN6StringD1Ev>:
    91c4:	cf 93       	push	r28
    91c6:	df 93       	push	r29
    91c8:	1f 92       	push	r1
    91ca:	1f 92       	push	r1
    91cc:	cd b7       	in	r28, 0x3d	; 61
    91ce:	de b7       	in	r29, 0x3e	; 62
    91d0:	9a 83       	std	Y+2, r25	; 0x02
    91d2:	89 83       	std	Y+1, r24	; 0x01
    91d4:	89 81       	ldd	r24, Y+1	; 0x01
    91d6:	9a 81       	ldd	r25, Y+2	; 0x02
    91d8:	fc 01       	movw	r30, r24
    91da:	80 81       	ld	r24, Z
    91dc:	91 81       	ldd	r25, Z+1	; 0x01
    91de:	0e 94 bc 62 	call	0xc578	; 0xc578 <free>
    91e2:	00 00       	nop
    91e4:	0f 90       	pop	r0
    91e6:	0f 90       	pop	r0
    91e8:	df 91       	pop	r29
    91ea:	cf 91       	pop	r28
    91ec:	08 95       	ret

000091ee <_ZN6String4initEv>:
    91ee:	cf 93       	push	r28
    91f0:	df 93       	push	r29
    91f2:	1f 92       	push	r1
    91f4:	1f 92       	push	r1
    91f6:	cd b7       	in	r28, 0x3d	; 61
    91f8:	de b7       	in	r29, 0x3e	; 62
    91fa:	9a 83       	std	Y+2, r25	; 0x02
    91fc:	89 83       	std	Y+1, r24	; 0x01
    91fe:	89 81       	ldd	r24, Y+1	; 0x01
    9200:	9a 81       	ldd	r25, Y+2	; 0x02
    9202:	fc 01       	movw	r30, r24
    9204:	11 82       	std	Z+1, r1	; 0x01
    9206:	10 82       	st	Z, r1
    9208:	89 81       	ldd	r24, Y+1	; 0x01
    920a:	9a 81       	ldd	r25, Y+2	; 0x02
    920c:	fc 01       	movw	r30, r24
    920e:	13 82       	std	Z+3, r1	; 0x03
    9210:	12 82       	std	Z+2, r1	; 0x02
    9212:	89 81       	ldd	r24, Y+1	; 0x01
    9214:	9a 81       	ldd	r25, Y+2	; 0x02
    9216:	fc 01       	movw	r30, r24
    9218:	15 82       	std	Z+5, r1	; 0x05
    921a:	14 82       	std	Z+4, r1	; 0x04
    921c:	00 00       	nop
    921e:	0f 90       	pop	r0
    9220:	0f 90       	pop	r0
    9222:	df 91       	pop	r29
    9224:	cf 91       	pop	r28
    9226:	08 95       	ret

00009228 <_ZN6String10invalidateEv>:
    9228:	cf 93       	push	r28
    922a:	df 93       	push	r29
    922c:	1f 92       	push	r1
    922e:	1f 92       	push	r1
    9230:	cd b7       	in	r28, 0x3d	; 61
    9232:	de b7       	in	r29, 0x3e	; 62
    9234:	9a 83       	std	Y+2, r25	; 0x02
    9236:	89 83       	std	Y+1, r24	; 0x01
    9238:	89 81       	ldd	r24, Y+1	; 0x01
    923a:	9a 81       	ldd	r25, Y+2	; 0x02
    923c:	fc 01       	movw	r30, r24
    923e:	80 81       	ld	r24, Z
    9240:	91 81       	ldd	r25, Z+1	; 0x01
    9242:	89 2b       	or	r24, r25
    9244:	39 f0       	breq	.+14     	; 0x9254 <_ZN6String10invalidateEv+0x2c>
    9246:	89 81       	ldd	r24, Y+1	; 0x01
    9248:	9a 81       	ldd	r25, Y+2	; 0x02
    924a:	fc 01       	movw	r30, r24
    924c:	80 81       	ld	r24, Z
    924e:	91 81       	ldd	r25, Z+1	; 0x01
    9250:	0e 94 bc 62 	call	0xc578	; 0xc578 <free>
    9254:	89 81       	ldd	r24, Y+1	; 0x01
    9256:	9a 81       	ldd	r25, Y+2	; 0x02
    9258:	fc 01       	movw	r30, r24
    925a:	11 82       	std	Z+1, r1	; 0x01
    925c:	10 82       	st	Z, r1
    925e:	89 81       	ldd	r24, Y+1	; 0x01
    9260:	9a 81       	ldd	r25, Y+2	; 0x02
    9262:	fc 01       	movw	r30, r24
    9264:	15 82       	std	Z+5, r1	; 0x05
    9266:	14 82       	std	Z+4, r1	; 0x04
    9268:	89 81       	ldd	r24, Y+1	; 0x01
    926a:	9a 81       	ldd	r25, Y+2	; 0x02
    926c:	fc 01       	movw	r30, r24
    926e:	24 81       	ldd	r18, Z+4	; 0x04
    9270:	35 81       	ldd	r19, Z+5	; 0x05
    9272:	89 81       	ldd	r24, Y+1	; 0x01
    9274:	9a 81       	ldd	r25, Y+2	; 0x02
    9276:	fc 01       	movw	r30, r24
    9278:	33 83       	std	Z+3, r19	; 0x03
    927a:	22 83       	std	Z+2, r18	; 0x02
    927c:	00 00       	nop
    927e:	0f 90       	pop	r0
    9280:	0f 90       	pop	r0
    9282:	df 91       	pop	r29
    9284:	cf 91       	pop	r28
    9286:	08 95       	ret

00009288 <_ZN6String7reserveEj>:
    9288:	cf 93       	push	r28
    928a:	df 93       	push	r29
    928c:	00 d0       	rcall	.+0      	; 0x928e <_ZN6String7reserveEj+0x6>
    928e:	1f 92       	push	r1
    9290:	cd b7       	in	r28, 0x3d	; 61
    9292:	de b7       	in	r29, 0x3e	; 62
    9294:	9a 83       	std	Y+2, r25	; 0x02
    9296:	89 83       	std	Y+1, r24	; 0x01
    9298:	7c 83       	std	Y+4, r23	; 0x04
    929a:	6b 83       	std	Y+3, r22	; 0x03
    929c:	89 81       	ldd	r24, Y+1	; 0x01
    929e:	9a 81       	ldd	r25, Y+2	; 0x02
    92a0:	fc 01       	movw	r30, r24
    92a2:	80 81       	ld	r24, Z
    92a4:	91 81       	ldd	r25, Z+1	; 0x01
    92a6:	89 2b       	or	r24, r25
    92a8:	61 f0       	breq	.+24     	; 0x92c2 <_ZN6String7reserveEj+0x3a>
    92aa:	89 81       	ldd	r24, Y+1	; 0x01
    92ac:	9a 81       	ldd	r25, Y+2	; 0x02
    92ae:	fc 01       	movw	r30, r24
    92b0:	22 81       	ldd	r18, Z+2	; 0x02
    92b2:	33 81       	ldd	r19, Z+3	; 0x03
    92b4:	8b 81       	ldd	r24, Y+3	; 0x03
    92b6:	9c 81       	ldd	r25, Y+4	; 0x04
    92b8:	28 17       	cp	r18, r24
    92ba:	39 07       	cpc	r19, r25
    92bc:	10 f0       	brcs	.+4      	; 0x92c2 <_ZN6String7reserveEj+0x3a>
    92be:	81 e0       	ldi	r24, 0x01	; 1
    92c0:	1e c0       	rjmp	.+60     	; 0x92fe <_ZN6String7reserveEj+0x76>
    92c2:	2b 81       	ldd	r18, Y+3	; 0x03
    92c4:	3c 81       	ldd	r19, Y+4	; 0x04
    92c6:	89 81       	ldd	r24, Y+1	; 0x01
    92c8:	9a 81       	ldd	r25, Y+2	; 0x02
    92ca:	b9 01       	movw	r22, r18
    92cc:	1f d0       	rcall	.+62     	; 0x930c <_ZN6String12changeBufferEj>
    92ce:	98 2f       	mov	r25, r24
    92d0:	81 e0       	ldi	r24, 0x01	; 1
    92d2:	99 23       	and	r25, r25
    92d4:	09 f4       	brne	.+2      	; 0x92d8 <_ZN6String7reserveEj+0x50>
    92d6:	80 e0       	ldi	r24, 0x00	; 0
    92d8:	88 23       	and	r24, r24
    92da:	81 f0       	breq	.+32     	; 0x92fc <_ZN6String7reserveEj+0x74>
    92dc:	89 81       	ldd	r24, Y+1	; 0x01
    92de:	9a 81       	ldd	r25, Y+2	; 0x02
    92e0:	fc 01       	movw	r30, r24
    92e2:	84 81       	ldd	r24, Z+4	; 0x04
    92e4:	95 81       	ldd	r25, Z+5	; 0x05
    92e6:	89 2b       	or	r24, r25
    92e8:	39 f4       	brne	.+14     	; 0x92f8 <_ZN6String7reserveEj+0x70>
    92ea:	89 81       	ldd	r24, Y+1	; 0x01
    92ec:	9a 81       	ldd	r25, Y+2	; 0x02
    92ee:	fc 01       	movw	r30, r24
    92f0:	80 81       	ld	r24, Z
    92f2:	91 81       	ldd	r25, Z+1	; 0x01
    92f4:	fc 01       	movw	r30, r24
    92f6:	10 82       	st	Z, r1
    92f8:	81 e0       	ldi	r24, 0x01	; 1
    92fa:	01 c0       	rjmp	.+2      	; 0x92fe <_ZN6String7reserveEj+0x76>
    92fc:	80 e0       	ldi	r24, 0x00	; 0
    92fe:	0f 90       	pop	r0
    9300:	0f 90       	pop	r0
    9302:	0f 90       	pop	r0
    9304:	0f 90       	pop	r0
    9306:	df 91       	pop	r29
    9308:	cf 91       	pop	r28
    930a:	08 95       	ret

0000930c <_ZN6String12changeBufferEj>:
    930c:	cf 93       	push	r28
    930e:	df 93       	push	r29
    9310:	00 d0       	rcall	.+0      	; 0x9312 <_ZN6String12changeBufferEj+0x6>
    9312:	00 d0       	rcall	.+0      	; 0x9314 <_ZN6String12changeBufferEj+0x8>
    9314:	cd b7       	in	r28, 0x3d	; 61
    9316:	de b7       	in	r29, 0x3e	; 62
    9318:	9c 83       	std	Y+4, r25	; 0x04
    931a:	8b 83       	std	Y+3, r24	; 0x03
    931c:	7e 83       	std	Y+6, r23	; 0x06
    931e:	6d 83       	std	Y+5, r22	; 0x05
    9320:	8d 81       	ldd	r24, Y+5	; 0x05
    9322:	9e 81       	ldd	r25, Y+6	; 0x06
    9324:	9c 01       	movw	r18, r24
    9326:	2f 5f       	subi	r18, 0xFF	; 255
    9328:	3f 4f       	sbci	r19, 0xFF	; 255
    932a:	8b 81       	ldd	r24, Y+3	; 0x03
    932c:	9c 81       	ldd	r25, Y+4	; 0x04
    932e:	fc 01       	movw	r30, r24
    9330:	80 81       	ld	r24, Z
    9332:	91 81       	ldd	r25, Z+1	; 0x01
    9334:	b9 01       	movw	r22, r18
    9336:	0e 94 e1 63 	call	0xc7c2	; 0xc7c2 <realloc>
    933a:	9a 83       	std	Y+2, r25	; 0x02
    933c:	89 83       	std	Y+1, r24	; 0x01
    933e:	89 81       	ldd	r24, Y+1	; 0x01
    9340:	9a 81       	ldd	r25, Y+2	; 0x02
    9342:	89 2b       	or	r24, r25
    9344:	81 f0       	breq	.+32     	; 0x9366 <_ZN6String12changeBufferEj+0x5a>
    9346:	8b 81       	ldd	r24, Y+3	; 0x03
    9348:	9c 81       	ldd	r25, Y+4	; 0x04
    934a:	29 81       	ldd	r18, Y+1	; 0x01
    934c:	3a 81       	ldd	r19, Y+2	; 0x02
    934e:	fc 01       	movw	r30, r24
    9350:	31 83       	std	Z+1, r19	; 0x01
    9352:	20 83       	st	Z, r18
    9354:	8b 81       	ldd	r24, Y+3	; 0x03
    9356:	9c 81       	ldd	r25, Y+4	; 0x04
    9358:	2d 81       	ldd	r18, Y+5	; 0x05
    935a:	3e 81       	ldd	r19, Y+6	; 0x06
    935c:	fc 01       	movw	r30, r24
    935e:	33 83       	std	Z+3, r19	; 0x03
    9360:	22 83       	std	Z+2, r18	; 0x02
    9362:	81 e0       	ldi	r24, 0x01	; 1
    9364:	01 c0       	rjmp	.+2      	; 0x9368 <_ZN6String12changeBufferEj+0x5c>
    9366:	80 e0       	ldi	r24, 0x00	; 0
    9368:	26 96       	adiw	r28, 0x06	; 6
    936a:	0f b6       	in	r0, 0x3f	; 63
    936c:	f8 94       	cli
    936e:	de bf       	out	0x3e, r29	; 62
    9370:	0f be       	out	0x3f, r0	; 63
    9372:	cd bf       	out	0x3d, r28	; 61
    9374:	df 91       	pop	r29
    9376:	cf 91       	pop	r28
    9378:	08 95       	ret

0000937a <_ZN6String4copyEPKcj>:
    937a:	cf 93       	push	r28
    937c:	df 93       	push	r29
    937e:	00 d0       	rcall	.+0      	; 0x9380 <_ZN6String4copyEPKcj+0x6>
    9380:	00 d0       	rcall	.+0      	; 0x9382 <_ZN6String4copyEPKcj+0x8>
    9382:	cd b7       	in	r28, 0x3d	; 61
    9384:	de b7       	in	r29, 0x3e	; 62
    9386:	9a 83       	std	Y+2, r25	; 0x02
    9388:	89 83       	std	Y+1, r24	; 0x01
    938a:	7c 83       	std	Y+4, r23	; 0x04
    938c:	6b 83       	std	Y+3, r22	; 0x03
    938e:	5e 83       	std	Y+6, r21	; 0x06
    9390:	4d 83       	std	Y+5, r20	; 0x05
    9392:	2d 81       	ldd	r18, Y+5	; 0x05
    9394:	3e 81       	ldd	r19, Y+6	; 0x06
    9396:	89 81       	ldd	r24, Y+1	; 0x01
    9398:	9a 81       	ldd	r25, Y+2	; 0x02
    939a:	b9 01       	movw	r22, r18
    939c:	75 df       	rcall	.-278    	; 0x9288 <_ZN6String7reserveEj>
    939e:	98 2f       	mov	r25, r24
    93a0:	81 e0       	ldi	r24, 0x01	; 1
    93a2:	99 23       	and	r25, r25
    93a4:	09 f0       	breq	.+2      	; 0x93a8 <_ZN6String4copyEPKcj+0x2e>
    93a6:	80 e0       	ldi	r24, 0x00	; 0
    93a8:	88 23       	and	r24, r24
    93aa:	31 f0       	breq	.+12     	; 0x93b8 <_ZN6String4copyEPKcj+0x3e>
    93ac:	89 81       	ldd	r24, Y+1	; 0x01
    93ae:	9a 81       	ldd	r25, Y+2	; 0x02
    93b0:	3b df       	rcall	.-394    	; 0x9228 <_ZN6String10invalidateEv>
    93b2:	89 81       	ldd	r24, Y+1	; 0x01
    93b4:	9a 81       	ldd	r25, Y+2	; 0x02
    93b6:	13 c0       	rjmp	.+38     	; 0x93de <_ZN6String4copyEPKcj+0x64>
    93b8:	89 81       	ldd	r24, Y+1	; 0x01
    93ba:	9a 81       	ldd	r25, Y+2	; 0x02
    93bc:	2d 81       	ldd	r18, Y+5	; 0x05
    93be:	3e 81       	ldd	r19, Y+6	; 0x06
    93c0:	fc 01       	movw	r30, r24
    93c2:	35 83       	std	Z+5, r19	; 0x05
    93c4:	24 83       	std	Z+4, r18	; 0x04
    93c6:	89 81       	ldd	r24, Y+1	; 0x01
    93c8:	9a 81       	ldd	r25, Y+2	; 0x02
    93ca:	fc 01       	movw	r30, r24
    93cc:	80 81       	ld	r24, Z
    93ce:	91 81       	ldd	r25, Z+1	; 0x01
    93d0:	2b 81       	ldd	r18, Y+3	; 0x03
    93d2:	3c 81       	ldd	r19, Y+4	; 0x04
    93d4:	b9 01       	movw	r22, r18
    93d6:	0e 94 fe 64 	call	0xc9fc	; 0xc9fc <strcpy>
    93da:	89 81       	ldd	r24, Y+1	; 0x01
    93dc:	9a 81       	ldd	r25, Y+2	; 0x02
    93de:	26 96       	adiw	r28, 0x06	; 6
    93e0:	0f b6       	in	r0, 0x3f	; 63
    93e2:	f8 94       	cli
    93e4:	de bf       	out	0x3e, r29	; 62
    93e6:	0f be       	out	0x3f, r0	; 63
    93e8:	cd bf       	out	0x3d, r28	; 61
    93ea:	df 91       	pop	r29
    93ec:	cf 91       	pop	r28
    93ee:	08 95       	ret

000093f0 <_ZN6StringaSEPKc>:
    93f0:	cf 93       	push	r28
    93f2:	df 93       	push	r29
    93f4:	00 d0       	rcall	.+0      	; 0x93f6 <_ZN6StringaSEPKc+0x6>
    93f6:	1f 92       	push	r1
    93f8:	cd b7       	in	r28, 0x3d	; 61
    93fa:	de b7       	in	r29, 0x3e	; 62
    93fc:	9a 83       	std	Y+2, r25	; 0x02
    93fe:	89 83       	std	Y+1, r24	; 0x01
    9400:	7c 83       	std	Y+4, r23	; 0x04
    9402:	6b 83       	std	Y+3, r22	; 0x03
    9404:	8b 81       	ldd	r24, Y+3	; 0x03
    9406:	9c 81       	ldd	r25, Y+4	; 0x04
    9408:	89 2b       	or	r24, r25
    940a:	61 f0       	breq	.+24     	; 0x9424 <_ZN6StringaSEPKc+0x34>
    940c:	8b 81       	ldd	r24, Y+3	; 0x03
    940e:	9c 81       	ldd	r25, Y+4	; 0x04
    9410:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    9414:	ac 01       	movw	r20, r24
    9416:	2b 81       	ldd	r18, Y+3	; 0x03
    9418:	3c 81       	ldd	r19, Y+4	; 0x04
    941a:	89 81       	ldd	r24, Y+1	; 0x01
    941c:	9a 81       	ldd	r25, Y+2	; 0x02
    941e:	b9 01       	movw	r22, r18
    9420:	ac df       	rcall	.-168    	; 0x937a <_ZN6String4copyEPKcj>
    9422:	03 c0       	rjmp	.+6      	; 0x942a <_ZN6StringaSEPKc+0x3a>
    9424:	89 81       	ldd	r24, Y+1	; 0x01
    9426:	9a 81       	ldd	r25, Y+2	; 0x02
    9428:	ff de       	rcall	.-514    	; 0x9228 <_ZN6String10invalidateEv>
    942a:	89 81       	ldd	r24, Y+1	; 0x01
    942c:	9a 81       	ldd	r25, Y+2	; 0x02
    942e:	0f 90       	pop	r0
    9430:	0f 90       	pop	r0
    9432:	0f 90       	pop	r0
    9434:	0f 90       	pop	r0
    9436:	df 91       	pop	r29
    9438:	cf 91       	pop	r28
    943a:	08 95       	ret

0000943c <_ZN6String6concatEPKcj>:
    943c:	cf 93       	push	r28
    943e:	df 93       	push	r29
    9440:	cd b7       	in	r28, 0x3d	; 61
    9442:	de b7       	in	r29, 0x3e	; 62
    9444:	28 97       	sbiw	r28, 0x08	; 8
    9446:	0f b6       	in	r0, 0x3f	; 63
    9448:	f8 94       	cli
    944a:	de bf       	out	0x3e, r29	; 62
    944c:	0f be       	out	0x3f, r0	; 63
    944e:	cd bf       	out	0x3d, r28	; 61
    9450:	9c 83       	std	Y+4, r25	; 0x04
    9452:	8b 83       	std	Y+3, r24	; 0x03
    9454:	7e 83       	std	Y+6, r23	; 0x06
    9456:	6d 83       	std	Y+5, r22	; 0x05
    9458:	58 87       	std	Y+8, r21	; 0x08
    945a:	4f 83       	std	Y+7, r20	; 0x07
    945c:	8b 81       	ldd	r24, Y+3	; 0x03
    945e:	9c 81       	ldd	r25, Y+4	; 0x04
    9460:	fc 01       	movw	r30, r24
    9462:	24 81       	ldd	r18, Z+4	; 0x04
    9464:	35 81       	ldd	r19, Z+5	; 0x05
    9466:	8f 81       	ldd	r24, Y+7	; 0x07
    9468:	98 85       	ldd	r25, Y+8	; 0x08
    946a:	82 0f       	add	r24, r18
    946c:	93 1f       	adc	r25, r19
    946e:	9a 83       	std	Y+2, r25	; 0x02
    9470:	89 83       	std	Y+1, r24	; 0x01
    9472:	8d 81       	ldd	r24, Y+5	; 0x05
    9474:	9e 81       	ldd	r25, Y+6	; 0x06
    9476:	89 2b       	or	r24, r25
    9478:	11 f4       	brne	.+4      	; 0x947e <_ZN6String6concatEPKcj+0x42>
    947a:	80 e0       	ldi	r24, 0x00	; 0
    947c:	2e c0       	rjmp	.+92     	; 0x94da <_ZN6String6concatEPKcj+0x9e>
    947e:	8f 81       	ldd	r24, Y+7	; 0x07
    9480:	98 85       	ldd	r25, Y+8	; 0x08
    9482:	89 2b       	or	r24, r25
    9484:	11 f4       	brne	.+4      	; 0x948a <_ZN6String6concatEPKcj+0x4e>
    9486:	81 e0       	ldi	r24, 0x01	; 1
    9488:	28 c0       	rjmp	.+80     	; 0x94da <_ZN6String6concatEPKcj+0x9e>
    948a:	29 81       	ldd	r18, Y+1	; 0x01
    948c:	3a 81       	ldd	r19, Y+2	; 0x02
    948e:	8b 81       	ldd	r24, Y+3	; 0x03
    9490:	9c 81       	ldd	r25, Y+4	; 0x04
    9492:	b9 01       	movw	r22, r18
    9494:	f9 de       	rcall	.-526    	; 0x9288 <_ZN6String7reserveEj>
    9496:	98 2f       	mov	r25, r24
    9498:	81 e0       	ldi	r24, 0x01	; 1
    949a:	99 23       	and	r25, r25
    949c:	09 f0       	breq	.+2      	; 0x94a0 <_ZN6String6concatEPKcj+0x64>
    949e:	80 e0       	ldi	r24, 0x00	; 0
    94a0:	88 23       	and	r24, r24
    94a2:	11 f0       	breq	.+4      	; 0x94a8 <_ZN6String6concatEPKcj+0x6c>
    94a4:	80 e0       	ldi	r24, 0x00	; 0
    94a6:	19 c0       	rjmp	.+50     	; 0x94da <_ZN6String6concatEPKcj+0x9e>
    94a8:	8b 81       	ldd	r24, Y+3	; 0x03
    94aa:	9c 81       	ldd	r25, Y+4	; 0x04
    94ac:	fc 01       	movw	r30, r24
    94ae:	20 81       	ld	r18, Z
    94b0:	31 81       	ldd	r19, Z+1	; 0x01
    94b2:	8b 81       	ldd	r24, Y+3	; 0x03
    94b4:	9c 81       	ldd	r25, Y+4	; 0x04
    94b6:	fc 01       	movw	r30, r24
    94b8:	84 81       	ldd	r24, Z+4	; 0x04
    94ba:	95 81       	ldd	r25, Z+5	; 0x05
    94bc:	82 0f       	add	r24, r18
    94be:	93 1f       	adc	r25, r19
    94c0:	2d 81       	ldd	r18, Y+5	; 0x05
    94c2:	3e 81       	ldd	r19, Y+6	; 0x06
    94c4:	b9 01       	movw	r22, r18
    94c6:	0e 94 fe 64 	call	0xc9fc	; 0xc9fc <strcpy>
    94ca:	8b 81       	ldd	r24, Y+3	; 0x03
    94cc:	9c 81       	ldd	r25, Y+4	; 0x04
    94ce:	29 81       	ldd	r18, Y+1	; 0x01
    94d0:	3a 81       	ldd	r19, Y+2	; 0x02
    94d2:	fc 01       	movw	r30, r24
    94d4:	35 83       	std	Z+5, r19	; 0x05
    94d6:	24 83       	std	Z+4, r18	; 0x04
    94d8:	81 e0       	ldi	r24, 0x01	; 1
    94da:	28 96       	adiw	r28, 0x08	; 8
    94dc:	0f b6       	in	r0, 0x3f	; 63
    94de:	f8 94       	cli
    94e0:	de bf       	out	0x3e, r29	; 62
    94e2:	0f be       	out	0x3f, r0	; 63
    94e4:	cd bf       	out	0x3d, r28	; 61
    94e6:	df 91       	pop	r29
    94e8:	cf 91       	pop	r28
    94ea:	08 95       	ret

000094ec <_ZN6String6concatEi>:
    94ec:	cf 93       	push	r28
    94ee:	df 93       	push	r29
    94f0:	cd b7       	in	r28, 0x3d	; 61
    94f2:	de b7       	in	r29, 0x3e	; 62
    94f4:	2c 97       	sbiw	r28, 0x0c	; 12
    94f6:	0f b6       	in	r0, 0x3f	; 63
    94f8:	f8 94       	cli
    94fa:	de bf       	out	0x3e, r29	; 62
    94fc:	0f be       	out	0x3f, r0	; 63
    94fe:	cd bf       	out	0x3d, r28	; 61
    9500:	9a 87       	std	Y+10, r25	; 0x0a
    9502:	89 87       	std	Y+9, r24	; 0x09
    9504:	7c 87       	std	Y+12, r23	; 0x0c
    9506:	6b 87       	std	Y+11, r22	; 0x0b
    9508:	8b 85       	ldd	r24, Y+11	; 0x0b
    950a:	9c 85       	ldd	r25, Y+12	; 0x0c
    950c:	4a e0       	ldi	r20, 0x0A	; 10
    950e:	50 e0       	ldi	r21, 0x00	; 0
    9510:	9e 01       	movw	r18, r28
    9512:	2f 5f       	subi	r18, 0xFF	; 255
    9514:	3f 4f       	sbci	r19, 0xFF	; 255
    9516:	b9 01       	movw	r22, r18
    9518:	0e 94 43 65 	call	0xca86	; 0xca86 <itoa>
    951c:	ce 01       	movw	r24, r28
    951e:	01 96       	adiw	r24, 0x01	; 1
    9520:	0e 94 05 65 	call	0xca0a	; 0xca0a <strlen>
    9524:	9c 01       	movw	r18, r24
    9526:	89 85       	ldd	r24, Y+9	; 0x09
    9528:	9a 85       	ldd	r25, Y+10	; 0x0a
    952a:	a9 01       	movw	r20, r18
    952c:	9e 01       	movw	r18, r28
    952e:	2f 5f       	subi	r18, 0xFF	; 255
    9530:	3f 4f       	sbci	r19, 0xFF	; 255
    9532:	b9 01       	movw	r22, r18
    9534:	83 df       	rcall	.-250    	; 0x943c <_ZN6String6concatEPKcj>
    9536:	2c 96       	adiw	r28, 0x0c	; 12
    9538:	0f b6       	in	r0, 0x3f	; 63
    953a:	f8 94       	cli
    953c:	de bf       	out	0x3e, r29	; 62
    953e:	0f be       	out	0x3f, r0	; 63
    9540:	cd bf       	out	0x3d, r28	; 61
    9542:	df 91       	pop	r29
    9544:	cf 91       	pop	r28
    9546:	08 95       	ret

00009548 <_ZN6StringixEj>:

char & String::operator[](unsigned int index)
{
    9548:	cf 93       	push	r28
    954a:	df 93       	push	r29
    954c:	00 d0       	rcall	.+0      	; 0x954e <_ZN6StringixEj+0x6>
    954e:	1f 92       	push	r1
    9550:	cd b7       	in	r28, 0x3d	; 61
    9552:	de b7       	in	r29, 0x3e	; 62
    9554:	9a 83       	std	Y+2, r25	; 0x02
    9556:	89 83       	std	Y+1, r24	; 0x01
    9558:	7c 83       	std	Y+4, r23	; 0x04
    955a:	6b 83       	std	Y+3, r22	; 0x03
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    955c:	89 81       	ldd	r24, Y+1	; 0x01
    955e:	9a 81       	ldd	r25, Y+2	; 0x02
    9560:	fc 01       	movw	r30, r24
    9562:	24 81       	ldd	r18, Z+4	; 0x04
    9564:	35 81       	ldd	r19, Z+5	; 0x05
    9566:	8b 81       	ldd	r24, Y+3	; 0x03
    9568:	9c 81       	ldd	r25, Y+4	; 0x04
    956a:	82 17       	cp	r24, r18
    956c:	93 07       	cpc	r25, r19
    956e:	38 f4       	brcc	.+14     	; 0x957e <_ZN6StringixEj+0x36>
    9570:	89 81       	ldd	r24, Y+1	; 0x01
    9572:	9a 81       	ldd	r25, Y+2	; 0x02
    9574:	fc 01       	movw	r30, r24
    9576:	80 81       	ld	r24, Z
    9578:	91 81       	ldd	r25, Z+1	; 0x01
    957a:	89 2b       	or	r24, r25
    957c:	29 f4       	brne	.+10     	; 0x9588 <_ZN6StringixEj+0x40>
		dummy_writable_char = 0;
    957e:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <_ZZN6StringixEjE19dummy_writable_char>
		return dummy_writable_char;
    9582:	8e e0       	ldi	r24, 0x0E	; 14
    9584:	95 e0       	ldi	r25, 0x05	; 5
    9586:	09 c0       	rjmp	.+18     	; 0x959a <_ZN6StringixEj+0x52>
	}
	return buffer[index];
    9588:	89 81       	ldd	r24, Y+1	; 0x01
    958a:	9a 81       	ldd	r25, Y+2	; 0x02
    958c:	fc 01       	movw	r30, r24
    958e:	20 81       	ld	r18, Z
    9590:	31 81       	ldd	r19, Z+1	; 0x01
    9592:	8b 81       	ldd	r24, Y+3	; 0x03
    9594:	9c 81       	ldd	r25, Y+4	; 0x04
    9596:	82 0f       	add	r24, r18
    9598:	93 1f       	adc	r25, r19
}
    959a:	0f 90       	pop	r0
    959c:	0f 90       	pop	r0
    959e:	0f 90       	pop	r0
    95a0:	0f 90       	pop	r0
    95a2:	df 91       	pop	r29
    95a4:	cf 91       	pop	r28
    95a6:	08 95       	ret

000095a8 <xTaskCreate>:
    95a8:	af 92       	push	r10
    95aa:	bf 92       	push	r11
    95ac:	cf 92       	push	r12
    95ae:	df 92       	push	r13
    95b0:	ef 92       	push	r14
    95b2:	ff 92       	push	r15
    95b4:	0f 93       	push	r16
    95b6:	cf 93       	push	r28
    95b8:	df 93       	push	r29
    95ba:	cd b7       	in	r28, 0x3d	; 61
    95bc:	de b7       	in	r29, 0x3e	; 62
    95be:	60 97       	sbiw	r28, 0x10	; 16
    95c0:	0f b6       	in	r0, 0x3f	; 63
    95c2:	f8 94       	cli
    95c4:	de bf       	out	0x3e, r29	; 62
    95c6:	0f be       	out	0x3f, r0	; 63
    95c8:	cd bf       	out	0x3d, r28	; 61
    95ca:	9f 83       	std	Y+7, r25	; 0x07
    95cc:	8e 83       	std	Y+6, r24	; 0x06
    95ce:	79 87       	std	Y+9, r23	; 0x09
    95d0:	68 87       	std	Y+8, r22	; 0x08
    95d2:	5b 87       	std	Y+11, r21	; 0x0b
    95d4:	4a 87       	std	Y+10, r20	; 0x0a
    95d6:	3d 87       	std	Y+13, r19	; 0x0d
    95d8:	2c 87       	std	Y+12, r18	; 0x0c
    95da:	0e 87       	std	Y+14, r16	; 0x0e
    95dc:	f8 8a       	std	Y+16, r15	; 0x10
    95de:	ef 86       	std	Y+15, r14	; 0x0f
    95e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    95e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    95e4:	0e 94 3f 58 	call	0xb07e	; 0xb07e <pvPortMalloc>
    95e8:	9d 83       	std	Y+5, r25	; 0x05
    95ea:	8c 83       	std	Y+4, r24	; 0x04
    95ec:	8c 81       	ldd	r24, Y+4	; 0x04
    95ee:	9d 81       	ldd	r25, Y+5	; 0x05
    95f0:	89 2b       	or	r24, r25
    95f2:	b9 f0       	breq	.+46     	; 0x9622 <xTaskCreate+0x7a>
    95f4:	88 e2       	ldi	r24, 0x28	; 40
    95f6:	90 e0       	ldi	r25, 0x00	; 0
    95f8:	0e 94 3f 58 	call	0xb07e	; 0xb07e <pvPortMalloc>
    95fc:	9a 83       	std	Y+2, r25	; 0x02
    95fe:	89 83       	std	Y+1, r24	; 0x01
    9600:	89 81       	ldd	r24, Y+1	; 0x01
    9602:	9a 81       	ldd	r25, Y+2	; 0x02
    9604:	89 2b       	or	r24, r25
    9606:	41 f0       	breq	.+16     	; 0x9618 <xTaskCreate+0x70>
    9608:	89 81       	ldd	r24, Y+1	; 0x01
    960a:	9a 81       	ldd	r25, Y+2	; 0x02
    960c:	2c 81       	ldd	r18, Y+4	; 0x04
    960e:	3d 81       	ldd	r19, Y+5	; 0x05
    9610:	fc 01       	movw	r30, r24
    9612:	30 8f       	std	Z+24, r19	; 0x18
    9614:	27 8b       	std	Z+23, r18	; 0x17
    9616:	07 c0       	rjmp	.+14     	; 0x9626 <xTaskCreate+0x7e>
    9618:	8c 81       	ldd	r24, Y+4	; 0x04
    961a:	9d 81       	ldd	r25, Y+5	; 0x05
    961c:	0e 94 5f 58 	call	0xb0be	; 0xb0be <vPortFree>
    9620:	02 c0       	rjmp	.+4      	; 0x9626 <xTaskCreate+0x7e>
    9622:	1a 82       	std	Y+2, r1	; 0x02
    9624:	19 82       	std	Y+1, r1	; 0x01
    9626:	89 81       	ldd	r24, Y+1	; 0x01
    9628:	9a 81       	ldd	r25, Y+2	; 0x02
    962a:	89 2b       	or	r24, r25
    962c:	c1 f0       	breq	.+48     	; 0x965e <xTaskCreate+0xb6>
    962e:	a9 81       	ldd	r26, Y+1	; 0x01
    9630:	ba 81       	ldd	r27, Y+2	; 0x02
    9632:	ef 85       	ldd	r30, Y+15	; 0x0f
    9634:	f8 89       	ldd	r31, Y+16	; 0x10
    9636:	2c 85       	ldd	r18, Y+12	; 0x0c
    9638:	3d 85       	ldd	r19, Y+13	; 0x0d
    963a:	4a 85       	ldd	r20, Y+10	; 0x0a
    963c:	5b 85       	ldd	r21, Y+11	; 0x0b
    963e:	68 85       	ldd	r22, Y+8	; 0x08
    9640:	79 85       	ldd	r23, Y+9	; 0x09
    9642:	8e 81       	ldd	r24, Y+6	; 0x06
    9644:	9f 81       	ldd	r25, Y+7	; 0x07
    9646:	a1 2c       	mov	r10, r1
    9648:	b1 2c       	mov	r11, r1
    964a:	6d 01       	movw	r12, r26
    964c:	7f 01       	movw	r14, r30
    964e:	0e 85       	ldd	r16, Y+14	; 0x0e
    9650:	19 d0       	rcall	.+50     	; 0x9684 <prvInitialiseNewTask>
    9652:	89 81       	ldd	r24, Y+1	; 0x01
    9654:	9a 81       	ldd	r25, Y+2	; 0x02
    9656:	f0 d0       	rcall	.+480    	; 0x9838 <prvAddNewTaskToReadyList>
    9658:	81 e0       	ldi	r24, 0x01	; 1
    965a:	8b 83       	std	Y+3, r24	; 0x03
    965c:	02 c0       	rjmp	.+4      	; 0x9662 <xTaskCreate+0xba>
    965e:	8f ef       	ldi	r24, 0xFF	; 255
    9660:	8b 83       	std	Y+3, r24	; 0x03
    9662:	8b 81       	ldd	r24, Y+3	; 0x03
    9664:	60 96       	adiw	r28, 0x10	; 16
    9666:	0f b6       	in	r0, 0x3f	; 63
    9668:	f8 94       	cli
    966a:	de bf       	out	0x3e, r29	; 62
    966c:	0f be       	out	0x3f, r0	; 63
    966e:	cd bf       	out	0x3d, r28	; 61
    9670:	df 91       	pop	r29
    9672:	cf 91       	pop	r28
    9674:	0f 91       	pop	r16
    9676:	ff 90       	pop	r15
    9678:	ef 90       	pop	r14
    967a:	df 90       	pop	r13
    967c:	cf 90       	pop	r12
    967e:	bf 90       	pop	r11
    9680:	af 90       	pop	r10
    9682:	08 95       	ret

00009684 <prvInitialiseNewTask>:
    9684:	af 92       	push	r10
    9686:	bf 92       	push	r11
    9688:	cf 92       	push	r12
    968a:	df 92       	push	r13
    968c:	ef 92       	push	r14
    968e:	ff 92       	push	r15
    9690:	0f 93       	push	r16
    9692:	cf 93       	push	r28
    9694:	df 93       	push	r29
    9696:	cd b7       	in	r28, 0x3d	; 61
    9698:	de b7       	in	r29, 0x3e	; 62
    969a:	62 97       	sbiw	r28, 0x12	; 18
    969c:	0f b6       	in	r0, 0x3f	; 63
    969e:	f8 94       	cli
    96a0:	de bf       	out	0x3e, r29	; 62
    96a2:	0f be       	out	0x3f, r0	; 63
    96a4:	cd bf       	out	0x3d, r28	; 61
    96a6:	9d 83       	std	Y+5, r25	; 0x05
    96a8:	8c 83       	std	Y+4, r24	; 0x04
    96aa:	7f 83       	std	Y+7, r23	; 0x07
    96ac:	6e 83       	std	Y+6, r22	; 0x06
    96ae:	59 87       	std	Y+9, r21	; 0x09
    96b0:	48 87       	std	Y+8, r20	; 0x08
    96b2:	3b 87       	std	Y+11, r19	; 0x0b
    96b4:	2a 87       	std	Y+10, r18	; 0x0a
    96b6:	0c 87       	std	Y+12, r16	; 0x0c
    96b8:	fe 86       	std	Y+14, r15	; 0x0e
    96ba:	ed 86       	std	Y+13, r14	; 0x0d
    96bc:	d8 8a       	std	Y+16, r13	; 0x10
    96be:	cf 86       	std	Y+15, r12	; 0x0f
    96c0:	ba 8a       	std	Y+18, r11	; 0x12
    96c2:	a9 8a       	std	Y+17, r10	; 0x11
    96c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    96c6:	98 89       	ldd	r25, Y+16	; 0x10
    96c8:	fc 01       	movw	r30, r24
    96ca:	87 89       	ldd	r24, Z+23	; 0x17
    96cc:	90 8d       	ldd	r25, Z+24	; 0x18
    96ce:	28 85       	ldd	r18, Y+8	; 0x08
    96d0:	39 85       	ldd	r19, Y+9	; 0x09
    96d2:	a9 01       	movw	r20, r18
    96d4:	65 ea       	ldi	r22, 0xA5	; 165
    96d6:	70 e0       	ldi	r23, 0x00	; 0
    96d8:	0e 94 ee 64 	call	0xc9dc	; 0xc9dc <memset>
    96dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    96de:	98 89       	ldd	r25, Y+16	; 0x10
    96e0:	fc 01       	movw	r30, r24
    96e2:	27 89       	ldd	r18, Z+23	; 0x17
    96e4:	30 8d       	ldd	r19, Z+24	; 0x18
    96e6:	88 85       	ldd	r24, Y+8	; 0x08
    96e8:	99 85       	ldd	r25, Y+9	; 0x09
    96ea:	01 97       	sbiw	r24, 0x01	; 1
    96ec:	82 0f       	add	r24, r18
    96ee:	93 1f       	adc	r25, r19
    96f0:	9b 83       	std	Y+3, r25	; 0x03
    96f2:	8a 83       	std	Y+2, r24	; 0x02
    96f4:	8e 81       	ldd	r24, Y+6	; 0x06
    96f6:	9f 81       	ldd	r25, Y+7	; 0x07
    96f8:	89 2b       	or	r24, r25
    96fa:	69 f1       	breq	.+90     	; 0x9756 <prvInitialiseNewTask+0xd2>
    96fc:	19 82       	std	Y+1, r1	; 0x01
    96fe:	21 c0       	rjmp	.+66     	; 0x9742 <prvInitialiseNewTask+0xbe>
    9700:	89 81       	ldd	r24, Y+1	; 0x01
    9702:	88 2f       	mov	r24, r24
    9704:	90 e0       	ldi	r25, 0x00	; 0
    9706:	29 81       	ldd	r18, Y+1	; 0x01
    9708:	22 2f       	mov	r18, r18
    970a:	30 e0       	ldi	r19, 0x00	; 0
    970c:	4e 81       	ldd	r20, Y+6	; 0x06
    970e:	5f 81       	ldd	r21, Y+7	; 0x07
    9710:	24 0f       	add	r18, r20
    9712:	35 1f       	adc	r19, r21
    9714:	f9 01       	movw	r30, r18
    9716:	40 81       	ld	r20, Z
    9718:	2f 85       	ldd	r18, Y+15	; 0x0f
    971a:	38 89       	ldd	r19, Y+16	; 0x10
    971c:	82 0f       	add	r24, r18
    971e:	93 1f       	adc	r25, r19
    9720:	49 96       	adiw	r24, 0x19	; 25
    9722:	fc 01       	movw	r30, r24
    9724:	40 83       	st	Z, r20
    9726:	89 81       	ldd	r24, Y+1	; 0x01
    9728:	88 2f       	mov	r24, r24
    972a:	90 e0       	ldi	r25, 0x00	; 0
    972c:	2e 81       	ldd	r18, Y+6	; 0x06
    972e:	3f 81       	ldd	r19, Y+7	; 0x07
    9730:	82 0f       	add	r24, r18
    9732:	93 1f       	adc	r25, r19
    9734:	fc 01       	movw	r30, r24
    9736:	80 81       	ld	r24, Z
    9738:	88 23       	and	r24, r24
    973a:	39 f0       	breq	.+14     	; 0x974a <prvInitialiseNewTask+0xc6>
    973c:	89 81       	ldd	r24, Y+1	; 0x01
    973e:	8f 5f       	subi	r24, 0xFF	; 255
    9740:	89 83       	std	Y+1, r24	; 0x01
    9742:	89 81       	ldd	r24, Y+1	; 0x01
    9744:	88 30       	cpi	r24, 0x08	; 8
    9746:	e0 f2       	brcs	.-72     	; 0x9700 <prvInitialiseNewTask+0x7c>
    9748:	01 c0       	rjmp	.+2      	; 0x974c <prvInitialiseNewTask+0xc8>
    974a:	00 00       	nop
    974c:	8f 85       	ldd	r24, Y+15	; 0x0f
    974e:	98 89       	ldd	r25, Y+16	; 0x10
    9750:	fc 01       	movw	r30, r24
    9752:	10 a2       	std	Z+32, r1	; 0x20
    9754:	04 c0       	rjmp	.+8      	; 0x975e <prvInitialiseNewTask+0xda>
    9756:	8f 85       	ldd	r24, Y+15	; 0x0f
    9758:	98 89       	ldd	r25, Y+16	; 0x10
    975a:	fc 01       	movw	r30, r24
    975c:	11 8e       	std	Z+25, r1	; 0x19
    975e:	8c 85       	ldd	r24, Y+12	; 0x0c
    9760:	84 30       	cpi	r24, 0x04	; 4
    9762:	10 f0       	brcs	.+4      	; 0x9768 <prvInitialiseNewTask+0xe4>
    9764:	83 e0       	ldi	r24, 0x03	; 3
    9766:	8c 87       	std	Y+12, r24	; 0x0c
    9768:	8f 85       	ldd	r24, Y+15	; 0x0f
    976a:	98 89       	ldd	r25, Y+16	; 0x10
    976c:	2c 85       	ldd	r18, Y+12	; 0x0c
    976e:	fc 01       	movw	r30, r24
    9770:	26 8b       	std	Z+22, r18	; 0x16
    9772:	8f 85       	ldd	r24, Y+15	; 0x0f
    9774:	98 89       	ldd	r25, Y+16	; 0x10
    9776:	2c 85       	ldd	r18, Y+12	; 0x0c
    9778:	fc 01       	movw	r30, r24
    977a:	21 a3       	std	Z+33, r18	; 0x21
    977c:	8f 85       	ldd	r24, Y+15	; 0x0f
    977e:	98 89       	ldd	r25, Y+16	; 0x10
    9780:	fc 01       	movw	r30, r24
    9782:	12 a2       	std	Z+34, r1	; 0x22
    9784:	8f 85       	ldd	r24, Y+15	; 0x0f
    9786:	98 89       	ldd	r25, Y+16	; 0x10
    9788:	02 96       	adiw	r24, 0x02	; 2
    978a:	0e 94 b0 58 	call	0xb160	; 0xb160 <vListInitialiseItem>
    978e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9790:	98 89       	ldd	r25, Y+16	; 0x10
    9792:	0c 96       	adiw	r24, 0x0c	; 12
    9794:	0e 94 b0 58 	call	0xb160	; 0xb160 <vListInitialiseItem>
    9798:	8f 85       	ldd	r24, Y+15	; 0x0f
    979a:	98 89       	ldd	r25, Y+16	; 0x10
    979c:	2f 85       	ldd	r18, Y+15	; 0x0f
    979e:	38 89       	ldd	r19, Y+16	; 0x10
    97a0:	fc 01       	movw	r30, r24
    97a2:	31 87       	std	Z+9, r19	; 0x09
    97a4:	20 87       	std	Z+8, r18	; 0x08
    97a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    97a8:	88 2f       	mov	r24, r24
    97aa:	90 e0       	ldi	r25, 0x00	; 0
    97ac:	24 e0       	ldi	r18, 0x04	; 4
    97ae:	30 e0       	ldi	r19, 0x00	; 0
    97b0:	28 1b       	sub	r18, r24
    97b2:	39 0b       	sbc	r19, r25
    97b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    97b6:	98 89       	ldd	r25, Y+16	; 0x10
    97b8:	fc 01       	movw	r30, r24
    97ba:	35 87       	std	Z+13, r19	; 0x0d
    97bc:	24 87       	std	Z+12, r18	; 0x0c
    97be:	8f 85       	ldd	r24, Y+15	; 0x0f
    97c0:	98 89       	ldd	r25, Y+16	; 0x10
    97c2:	2f 85       	ldd	r18, Y+15	; 0x0f
    97c4:	38 89       	ldd	r19, Y+16	; 0x10
    97c6:	fc 01       	movw	r30, r24
    97c8:	33 8b       	std	Z+19, r19	; 0x13
    97ca:	22 8b       	std	Z+18, r18	; 0x12
    97cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    97ce:	98 89       	ldd	r25, Y+16	; 0x10
    97d0:	fc 01       	movw	r30, r24
    97d2:	13 a2       	std	Z+35, r1	; 0x23
    97d4:	14 a2       	std	Z+36, r1	; 0x24
    97d6:	15 a2       	std	Z+37, r1	; 0x25
    97d8:	16 a2       	std	Z+38, r1	; 0x26
    97da:	8f 85       	ldd	r24, Y+15	; 0x0f
    97dc:	98 89       	ldd	r25, Y+16	; 0x10
    97de:	fc 01       	movw	r30, r24
    97e0:	17 a2       	std	Z+39, r1	; 0x27
    97e2:	4a 85       	ldd	r20, Y+10	; 0x0a
    97e4:	5b 85       	ldd	r21, Y+11	; 0x0b
    97e6:	2c 81       	ldd	r18, Y+4	; 0x04
    97e8:	3d 81       	ldd	r19, Y+5	; 0x05
    97ea:	8a 81       	ldd	r24, Y+2	; 0x02
    97ec:	9b 81       	ldd	r25, Y+3	; 0x03
    97ee:	b9 01       	movw	r22, r18
    97f0:	0e 94 e0 59 	call	0xb3c0	; 0xb3c0 <pxPortInitialiseStack>
    97f4:	9c 01       	movw	r18, r24
    97f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    97f8:	98 89       	ldd	r25, Y+16	; 0x10
    97fa:	fc 01       	movw	r30, r24
    97fc:	31 83       	std	Z+1, r19	; 0x01
    97fe:	20 83       	st	Z, r18
    9800:	8d 85       	ldd	r24, Y+13	; 0x0d
    9802:	9e 85       	ldd	r25, Y+14	; 0x0e
    9804:	89 2b       	or	r24, r25
    9806:	39 f0       	breq	.+14     	; 0x9816 <prvInitialiseNewTask+0x192>
    9808:	8d 85       	ldd	r24, Y+13	; 0x0d
    980a:	9e 85       	ldd	r25, Y+14	; 0x0e
    980c:	2f 85       	ldd	r18, Y+15	; 0x0f
    980e:	38 89       	ldd	r19, Y+16	; 0x10
    9810:	fc 01       	movw	r30, r24
    9812:	31 83       	std	Z+1, r19	; 0x01
    9814:	20 83       	st	Z, r18
    9816:	00 00       	nop
    9818:	62 96       	adiw	r28, 0x12	; 18
    981a:	0f b6       	in	r0, 0x3f	; 63
    981c:	f8 94       	cli
    981e:	de bf       	out	0x3e, r29	; 62
    9820:	0f be       	out	0x3f, r0	; 63
    9822:	cd bf       	out	0x3d, r28	; 61
    9824:	df 91       	pop	r29
    9826:	cf 91       	pop	r28
    9828:	0f 91       	pop	r16
    982a:	ff 90       	pop	r15
    982c:	ef 90       	pop	r14
    982e:	df 90       	pop	r13
    9830:	cf 90       	pop	r12
    9832:	bf 90       	pop	r11
    9834:	af 90       	pop	r10
    9836:	08 95       	ret

00009838 <prvAddNewTaskToReadyList>:
    9838:	cf 93       	push	r28
    983a:	df 93       	push	r29
    983c:	1f 92       	push	r1
    983e:	1f 92       	push	r1
    9840:	cd b7       	in	r28, 0x3d	; 61
    9842:	de b7       	in	r29, 0x3e	; 62
    9844:	9a 83       	std	Y+2, r25	; 0x02
    9846:	89 83       	std	Y+1, r24	; 0x01
    9848:	0f b6       	in	r0, 0x3f	; 63
    984a:	f8 94       	cli
    984c:	0f 92       	push	r0
    984e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <uxCurrentNumberOfTasks>
    9852:	8f 5f       	subi	r24, 0xFF	; 255
    9854:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <uxCurrentNumberOfTasks>
    9858:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    985c:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9860:	89 2b       	or	r24, r25
    9862:	61 f4       	brne	.+24     	; 0x987c <prvAddNewTaskToReadyList+0x44>
    9864:	89 81       	ldd	r24, Y+1	; 0x01
    9866:	9a 81       	ldd	r25, Y+2	; 0x02
    9868:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <pxCurrentTCB+0x1>
    986c:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <pxCurrentTCB>
    9870:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <uxCurrentNumberOfTasks>
    9874:	81 30       	cpi	r24, 0x01	; 1
    9876:	c1 f4       	brne	.+48     	; 0x98a8 <prvAddNewTaskToReadyList+0x70>
    9878:	42 d4       	rcall	.+2180   	; 0xa0fe <prvInitialiseTaskLists>
    987a:	16 c0       	rjmp	.+44     	; 0x98a8 <prvAddNewTaskToReadyList+0x70>
    987c:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <xSchedulerRunning>
    9880:	88 23       	and	r24, r24
    9882:	91 f4       	brne	.+36     	; 0x98a8 <prvAddNewTaskToReadyList+0x70>
    9884:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9888:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    988c:	fc 01       	movw	r30, r24
    988e:	26 89       	ldd	r18, Z+22	; 0x16
    9890:	89 81       	ldd	r24, Y+1	; 0x01
    9892:	9a 81       	ldd	r25, Y+2	; 0x02
    9894:	fc 01       	movw	r30, r24
    9896:	86 89       	ldd	r24, Z+22	; 0x16
    9898:	82 17       	cp	r24, r18
    989a:	30 f0       	brcs	.+12     	; 0x98a8 <prvAddNewTaskToReadyList+0x70>
    989c:	89 81       	ldd	r24, Y+1	; 0x01
    989e:	9a 81       	ldd	r25, Y+2	; 0x02
    98a0:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <pxCurrentTCB+0x1>
    98a4:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <pxCurrentTCB>
    98a8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <uxTaskNumber>
    98ac:	8f 5f       	subi	r24, 0xFF	; 255
    98ae:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <uxTaskNumber>
    98b2:	89 81       	ldd	r24, Y+1	; 0x01
    98b4:	9a 81       	ldd	r25, Y+2	; 0x02
    98b6:	fc 01       	movw	r30, r24
    98b8:	96 89       	ldd	r25, Z+22	; 0x16
    98ba:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <uxTopReadyPriority>
    98be:	89 17       	cp	r24, r25
    98c0:	30 f4       	brcc	.+12     	; 0x98ce <prvAddNewTaskToReadyList+0x96>
    98c2:	89 81       	ldd	r24, Y+1	; 0x01
    98c4:	9a 81       	ldd	r25, Y+2	; 0x02
    98c6:	fc 01       	movw	r30, r24
    98c8:	86 89       	ldd	r24, Z+22	; 0x16
    98ca:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <uxTopReadyPriority>
    98ce:	89 81       	ldd	r24, Y+1	; 0x01
    98d0:	9a 81       	ldd	r25, Y+2	; 0x02
    98d2:	ac 01       	movw	r20, r24
    98d4:	4e 5f       	subi	r20, 0xFE	; 254
    98d6:	5f 4f       	sbci	r21, 0xFF	; 255
    98d8:	89 81       	ldd	r24, Y+1	; 0x01
    98da:	9a 81       	ldd	r25, Y+2	; 0x02
    98dc:	fc 01       	movw	r30, r24
    98de:	86 89       	ldd	r24, Z+22	; 0x16
    98e0:	28 2f       	mov	r18, r24
    98e2:	30 e0       	ldi	r19, 0x00	; 0
    98e4:	c9 01       	movw	r24, r18
    98e6:	88 0f       	add	r24, r24
    98e8:	99 1f       	adc	r25, r25
    98ea:	88 0f       	add	r24, r24
    98ec:	99 1f       	adc	r25, r25
    98ee:	88 0f       	add	r24, r24
    98f0:	99 1f       	adc	r25, r25
    98f2:	82 0f       	add	r24, r18
    98f4:	93 1f       	adc	r25, r19
    98f6:	8f 5e       	subi	r24, 0xEF	; 239
    98f8:	9a 4f       	sbci	r25, 0xFA	; 250
    98fa:	ba 01       	movw	r22, r20
    98fc:	0e 94 c3 58 	call	0xb186	; 0xb186 <vListInsertEnd>
    9900:	0f 90       	pop	r0
    9902:	0f be       	out	0x3f, r0	; 63
    9904:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <xSchedulerRunning>
    9908:	88 23       	and	r24, r24
    990a:	71 f0       	breq	.+28     	; 0x9928 <prvAddNewTaskToReadyList+0xf0>
    990c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9910:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9914:	fc 01       	movw	r30, r24
    9916:	26 89       	ldd	r18, Z+22	; 0x16
    9918:	89 81       	ldd	r24, Y+1	; 0x01
    991a:	9a 81       	ldd	r25, Y+2	; 0x02
    991c:	fc 01       	movw	r30, r24
    991e:	86 89       	ldd	r24, Z+22	; 0x16
    9920:	28 17       	cp	r18, r24
    9922:	10 f4       	brcc	.+4      	; 0x9928 <prvAddNewTaskToReadyList+0xf0>
    9924:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <vPortYield>
    9928:	00 00       	nop
    992a:	0f 90       	pop	r0
    992c:	0f 90       	pop	r0
    992e:	df 91       	pop	r29
    9930:	cf 91       	pop	r28
    9932:	08 95       	ret

00009934 <vTaskDelay>:
    9934:	cf 93       	push	r28
    9936:	df 93       	push	r29
    9938:	00 d0       	rcall	.+0      	; 0x993a <vTaskDelay+0x6>
    993a:	cd b7       	in	r28, 0x3d	; 61
    993c:	de b7       	in	r29, 0x3e	; 62
    993e:	9b 83       	std	Y+3, r25	; 0x03
    9940:	8a 83       	std	Y+2, r24	; 0x02
    9942:	19 82       	std	Y+1, r1	; 0x01
    9944:	8a 81       	ldd	r24, Y+2	; 0x02
    9946:	9b 81       	ldd	r25, Y+3	; 0x03
    9948:	89 2b       	or	r24, r25
    994a:	39 f0       	breq	.+14     	; 0x995a <vTaskDelay+0x26>
    994c:	4b d0       	rcall	.+150    	; 0x99e4 <vTaskSuspendAll>
    994e:	8a 81       	ldd	r24, Y+2	; 0x02
    9950:	9b 81       	ldd	r25, Y+3	; 0x03
    9952:	60 e0       	ldi	r22, 0x00	; 0
    9954:	7a d5       	rcall	.+2804   	; 0xa44a <prvAddCurrentTaskToDelayedList>
    9956:	53 d0       	rcall	.+166    	; 0x99fe <xTaskResumeAll>
    9958:	89 83       	std	Y+1, r24	; 0x01
    995a:	89 81       	ldd	r24, Y+1	; 0x01
    995c:	88 23       	and	r24, r24
    995e:	11 f4       	brne	.+4      	; 0x9964 <vTaskDelay+0x30>
    9960:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <vPortYield>
    9964:	00 00       	nop
    9966:	0f 90       	pop	r0
    9968:	0f 90       	pop	r0
    996a:	0f 90       	pop	r0
    996c:	df 91       	pop	r29
    996e:	cf 91       	pop	r28
    9970:	08 95       	ret

00009972 <vTaskStartScheduler>:
    9972:	ef 92       	push	r14
    9974:	ff 92       	push	r15
    9976:	0f 93       	push	r16
    9978:	cf 93       	push	r28
    997a:	df 93       	push	r29
    997c:	1f 92       	push	r1
    997e:	cd b7       	in	r28, 0x3d	; 61
    9980:	de b7       	in	r29, 0x3e	; 62
    9982:	0f 2e       	mov	r0, r31
    9984:	f2 e7       	ldi	r31, 0x72	; 114
    9986:	ef 2e       	mov	r14, r31
    9988:	f5 e0       	ldi	r31, 0x05	; 5
    998a:	ff 2e       	mov	r15, r31
    998c:	f0 2d       	mov	r31, r0
    998e:	00 e0       	ldi	r16, 0x00	; 0
    9990:	20 e0       	ldi	r18, 0x00	; 0
    9992:	30 e0       	ldi	r19, 0x00	; 0
    9994:	40 ec       	ldi	r20, 0xC0	; 192
    9996:	50 e0       	ldi	r21, 0x00	; 0
    9998:	67 ec       	ldi	r22, 0xC7	; 199
    999a:	72 e0       	ldi	r23, 0x02	; 2
    999c:	81 ec       	ldi	r24, 0xC1	; 193
    999e:	97 e1       	ldi	r25, 0x17	; 23
    99a0:	03 de       	rcall	.-1018   	; 0x95a8 <xTaskCreate>
    99a2:	89 83       	std	Y+1, r24	; 0x01
    99a4:	89 81       	ldd	r24, Y+1	; 0x01
    99a6:	81 30       	cpi	r24, 0x01	; 1
    99a8:	11 f4       	brne	.+4      	; 0x99ae <vTaskStartScheduler+0x3c>
    99aa:	c5 d5       	rcall	.+2954   	; 0xa536 <xTimerCreateTimerTask>
    99ac:	89 83       	std	Y+1, r24	; 0x01
    99ae:	89 81       	ldd	r24, Y+1	; 0x01
    99b0:	81 30       	cpi	r24, 0x01	; 1
    99b2:	81 f4       	brne	.+32     	; 0x99d4 <vTaskStartScheduler+0x62>
    99b4:	f8 94       	cli
    99b6:	8f ef       	ldi	r24, 0xFF	; 255
    99b8:	9f ef       	ldi	r25, 0xFF	; 255
    99ba:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <xNextTaskUnblockTime+0x1>
    99be:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <xNextTaskUnblockTime>
    99c2:	81 e0       	ldi	r24, 0x01	; 1
    99c4:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <xSchedulerRunning>
    99c8:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <xTickCount+0x1>
    99cc:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <xTickCount>
    99d0:	0e 94 a4 5b 	call	0xb748	; 0xb748 <xPortStartScheduler>
    99d4:	00 00       	nop
    99d6:	0f 90       	pop	r0
    99d8:	df 91       	pop	r29
    99da:	cf 91       	pop	r28
    99dc:	0f 91       	pop	r16
    99de:	ff 90       	pop	r15
    99e0:	ef 90       	pop	r14
    99e2:	08 95       	ret

000099e4 <vTaskSuspendAll>:
    99e4:	cf 93       	push	r28
    99e6:	df 93       	push	r29
    99e8:	cd b7       	in	r28, 0x3d	; 61
    99ea:	de b7       	in	r29, 0x3e	; 62
    99ec:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    99f0:	8f 5f       	subi	r24, 0xFF	; 255
    99f2:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <uxSchedulerSuspended>
    99f6:	00 00       	nop
    99f8:	df 91       	pop	r29
    99fa:	cf 91       	pop	r28
    99fc:	08 95       	ret

000099fe <xTaskResumeAll>:
    99fe:	cf 93       	push	r28
    9a00:	df 93       	push	r29
    9a02:	00 d0       	rcall	.+0      	; 0x9a04 <xTaskResumeAll+0x6>
    9a04:	1f 92       	push	r1
    9a06:	cd b7       	in	r28, 0x3d	; 61
    9a08:	de b7       	in	r29, 0x3e	; 62
    9a0a:	1a 82       	std	Y+2, r1	; 0x02
    9a0c:	19 82       	std	Y+1, r1	; 0x01
    9a0e:	1b 82       	std	Y+3, r1	; 0x03
    9a10:	0f b6       	in	r0, 0x3f	; 63
    9a12:	f8 94       	cli
    9a14:	0f 92       	push	r0
    9a16:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    9a1a:	81 50       	subi	r24, 0x01	; 1
    9a1c:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <uxSchedulerSuspended>
    9a20:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    9a24:	88 23       	and	r24, r24
    9a26:	09 f0       	breq	.+2      	; 0x9a2a <xTaskResumeAll+0x2c>
    9a28:	75 c0       	rjmp	.+234    	; 0x9b14 <xTaskResumeAll+0x116>
    9a2a:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <uxCurrentNumberOfTasks>
    9a2e:	88 23       	and	r24, r24
    9a30:	09 f4       	brne	.+2      	; 0x9a34 <xTaskResumeAll+0x36>
    9a32:	70 c0       	rjmp	.+224    	; 0x9b14 <xTaskResumeAll+0x116>
    9a34:	49 c0       	rjmp	.+146    	; 0x9ac8 <xTaskResumeAll+0xca>
    9a36:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <xPendingReadyList+0x5>
    9a3a:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <xPendingReadyList+0x6>
    9a3e:	fc 01       	movw	r30, r24
    9a40:	86 81       	ldd	r24, Z+6	; 0x06
    9a42:	97 81       	ldd	r25, Z+7	; 0x07
    9a44:	9a 83       	std	Y+2, r25	; 0x02
    9a46:	89 83       	std	Y+1, r24	; 0x01
    9a48:	89 81       	ldd	r24, Y+1	; 0x01
    9a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    9a4c:	0c 96       	adiw	r24, 0x0c	; 12
    9a4e:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    9a52:	89 81       	ldd	r24, Y+1	; 0x01
    9a54:	9a 81       	ldd	r25, Y+2	; 0x02
    9a56:	02 96       	adiw	r24, 0x02	; 2
    9a58:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    9a5c:	89 81       	ldd	r24, Y+1	; 0x01
    9a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    9a60:	fc 01       	movw	r30, r24
    9a62:	96 89       	ldd	r25, Z+22	; 0x16
    9a64:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <uxTopReadyPriority>
    9a68:	89 17       	cp	r24, r25
    9a6a:	30 f4       	brcc	.+12     	; 0x9a78 <xTaskResumeAll+0x7a>
    9a6c:	89 81       	ldd	r24, Y+1	; 0x01
    9a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    9a70:	fc 01       	movw	r30, r24
    9a72:	86 89       	ldd	r24, Z+22	; 0x16
    9a74:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <uxTopReadyPriority>
    9a78:	89 81       	ldd	r24, Y+1	; 0x01
    9a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    9a7c:	ac 01       	movw	r20, r24
    9a7e:	4e 5f       	subi	r20, 0xFE	; 254
    9a80:	5f 4f       	sbci	r21, 0xFF	; 255
    9a82:	89 81       	ldd	r24, Y+1	; 0x01
    9a84:	9a 81       	ldd	r25, Y+2	; 0x02
    9a86:	fc 01       	movw	r30, r24
    9a88:	86 89       	ldd	r24, Z+22	; 0x16
    9a8a:	28 2f       	mov	r18, r24
    9a8c:	30 e0       	ldi	r19, 0x00	; 0
    9a8e:	c9 01       	movw	r24, r18
    9a90:	88 0f       	add	r24, r24
    9a92:	99 1f       	adc	r25, r25
    9a94:	88 0f       	add	r24, r24
    9a96:	99 1f       	adc	r25, r25
    9a98:	88 0f       	add	r24, r24
    9a9a:	99 1f       	adc	r25, r25
    9a9c:	82 0f       	add	r24, r18
    9a9e:	93 1f       	adc	r25, r19
    9aa0:	8f 5e       	subi	r24, 0xEF	; 239
    9aa2:	9a 4f       	sbci	r25, 0xFA	; 250
    9aa4:	ba 01       	movw	r22, r20
    9aa6:	0e 94 c3 58 	call	0xb186	; 0xb186 <vListInsertEnd>
    9aaa:	89 81       	ldd	r24, Y+1	; 0x01
    9aac:	9a 81       	ldd	r25, Y+2	; 0x02
    9aae:	fc 01       	movw	r30, r24
    9ab0:	26 89       	ldd	r18, Z+22	; 0x16
    9ab2:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9ab6:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9aba:	fc 01       	movw	r30, r24
    9abc:	86 89       	ldd	r24, Z+22	; 0x16
    9abe:	28 17       	cp	r18, r24
    9ac0:	18 f0       	brcs	.+6      	; 0x9ac8 <xTaskResumeAll+0xca>
    9ac2:	81 e0       	ldi	r24, 0x01	; 1
    9ac4:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <xYieldPending>
    9ac8:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <xPendingReadyList>
    9acc:	88 23       	and	r24, r24
    9ace:	09 f0       	breq	.+2      	; 0x9ad2 <xTaskResumeAll+0xd4>
    9ad0:	b2 cf       	rjmp	.-156    	; 0x9a36 <xTaskResumeAll+0x38>
    9ad2:	89 81       	ldd	r24, Y+1	; 0x01
    9ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    9ad6:	89 2b       	or	r24, r25
    9ad8:	09 f0       	breq	.+2      	; 0x9adc <xTaskResumeAll+0xde>
    9ada:	f3 d3       	rcall	.+2022   	; 0xa2c2 <prvResetNextTaskUnblockTime>
    9adc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <uxPendedTicks>
    9ae0:	8c 83       	std	Y+4, r24	; 0x04
    9ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    9ae4:	88 23       	and	r24, r24
    9ae6:	71 f0       	breq	.+28     	; 0x9b04 <xTaskResumeAll+0x106>
    9ae8:	37 d0       	rcall	.+110    	; 0x9b58 <xTaskIncrementTick>
    9aea:	88 23       	and	r24, r24
    9aec:	19 f0       	breq	.+6      	; 0x9af4 <xTaskResumeAll+0xf6>
    9aee:	81 e0       	ldi	r24, 0x01	; 1
    9af0:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <xYieldPending>
    9af4:	8c 81       	ldd	r24, Y+4	; 0x04
    9af6:	81 50       	subi	r24, 0x01	; 1
    9af8:	8c 83       	std	Y+4, r24	; 0x04
    9afa:	8c 81       	ldd	r24, Y+4	; 0x04
    9afc:	88 23       	and	r24, r24
    9afe:	a1 f7       	brne	.-24     	; 0x9ae8 <xTaskResumeAll+0xea>
    9b00:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <uxPendedTicks>
    9b04:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <xYieldPending>
    9b08:	88 23       	and	r24, r24
    9b0a:	21 f0       	breq	.+8      	; 0x9b14 <xTaskResumeAll+0x116>
    9b0c:	81 e0       	ldi	r24, 0x01	; 1
    9b0e:	8b 83       	std	Y+3, r24	; 0x03
    9b10:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <vPortYield>
    9b14:	0f 90       	pop	r0
    9b16:	0f be       	out	0x3f, r0	; 63
    9b18:	8b 81       	ldd	r24, Y+3	; 0x03
    9b1a:	0f 90       	pop	r0
    9b1c:	0f 90       	pop	r0
    9b1e:	0f 90       	pop	r0
    9b20:	0f 90       	pop	r0
    9b22:	df 91       	pop	r29
    9b24:	cf 91       	pop	r28
    9b26:	08 95       	ret

00009b28 <xTaskGetTickCount>:
    9b28:	cf 93       	push	r28
    9b2a:	df 93       	push	r29
    9b2c:	1f 92       	push	r1
    9b2e:	1f 92       	push	r1
    9b30:	cd b7       	in	r28, 0x3d	; 61
    9b32:	de b7       	in	r29, 0x3e	; 62
    9b34:	0f b6       	in	r0, 0x3f	; 63
    9b36:	f8 94       	cli
    9b38:	0f 92       	push	r0
    9b3a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xTickCount>
    9b3e:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xTickCount+0x1>
    9b42:	9a 83       	std	Y+2, r25	; 0x02
    9b44:	89 83       	std	Y+1, r24	; 0x01
    9b46:	0f 90       	pop	r0
    9b48:	0f be       	out	0x3f, r0	; 63
    9b4a:	89 81       	ldd	r24, Y+1	; 0x01
    9b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    9b4e:	0f 90       	pop	r0
    9b50:	0f 90       	pop	r0
    9b52:	df 91       	pop	r29
    9b54:	cf 91       	pop	r28
    9b56:	08 95       	ret

00009b58 <xTaskIncrementTick>:
    9b58:	cf 93       	push	r28
    9b5a:	df 93       	push	r29
    9b5c:	cd b7       	in	r28, 0x3d	; 61
    9b5e:	de b7       	in	r29, 0x3e	; 62
    9b60:	29 97       	sbiw	r28, 0x09	; 9
    9b62:	0f b6       	in	r0, 0x3f	; 63
    9b64:	f8 94       	cli
    9b66:	de bf       	out	0x3e, r29	; 62
    9b68:	0f be       	out	0x3f, r0	; 63
    9b6a:	cd bf       	out	0x3d, r28	; 61
    9b6c:	19 82       	std	Y+1, r1	; 0x01
    9b6e:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    9b72:	88 23       	and	r24, r24
    9b74:	09 f0       	breq	.+2      	; 0x9b78 <xTaskIncrementTick+0x20>
    9b76:	c7 c0       	rjmp	.+398    	; 0x9d06 <xTaskIncrementTick+0x1ae>
    9b78:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xTickCount>
    9b7c:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xTickCount+0x1>
    9b80:	01 96       	adiw	r24, 0x01	; 1
    9b82:	9b 83       	std	Y+3, r25	; 0x03
    9b84:	8a 83       	std	Y+2, r24	; 0x02
    9b86:	8a 81       	ldd	r24, Y+2	; 0x02
    9b88:	9b 81       	ldd	r25, Y+3	; 0x03
    9b8a:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <xTickCount+0x1>
    9b8e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <xTickCount>
    9b92:	8a 81       	ldd	r24, Y+2	; 0x02
    9b94:	9b 81       	ldd	r25, Y+3	; 0x03
    9b96:	89 2b       	or	r24, r25
    9b98:	d1 f4       	brne	.+52     	; 0x9bce <xTaskIncrementTick+0x76>
    9b9a:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <pxDelayedTaskList>
    9b9e:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <pxDelayedTaskList+0x1>
    9ba2:	9d 83       	std	Y+5, r25	; 0x05
    9ba4:	8c 83       	std	Y+4, r24	; 0x04
    9ba6:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pxOverflowDelayedTaskList>
    9baa:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    9bae:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <pxDelayedTaskList+0x1>
    9bb2:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <pxDelayedTaskList>
    9bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    9bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    9bba:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    9bbe:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pxOverflowDelayedTaskList>
    9bc2:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <xNumOfOverflows>
    9bc6:	8f 5f       	subi	r24, 0xFF	; 255
    9bc8:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <xNumOfOverflows>
    9bcc:	7a d3       	rcall	.+1780   	; 0xa2c2 <prvResetNextTaskUnblockTime>
    9bce:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <xNextTaskUnblockTime>
    9bd2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <xNextTaskUnblockTime+0x1>
    9bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    9bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    9bda:	28 17       	cp	r18, r24
    9bdc:	39 07       	cpc	r19, r25
    9bde:	08 f4       	brcc	.+2      	; 0x9be2 <xTaskIncrementTick+0x8a>
    9be0:	78 c0       	rjmp	.+240    	; 0x9cd2 <xTaskIncrementTick+0x17a>
    9be2:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <pxDelayedTaskList>
    9be6:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <pxDelayedTaskList+0x1>
    9bea:	fc 01       	movw	r30, r24
    9bec:	80 81       	ld	r24, Z
    9bee:	88 23       	and	r24, r24
    9bf0:	39 f4       	brne	.+14     	; 0x9c00 <xTaskIncrementTick+0xa8>
    9bf2:	8f ef       	ldi	r24, 0xFF	; 255
    9bf4:	9f ef       	ldi	r25, 0xFF	; 255
    9bf6:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <xNextTaskUnblockTime+0x1>
    9bfa:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <xNextTaskUnblockTime>
    9bfe:	69 c0       	rjmp	.+210    	; 0x9cd2 <xTaskIncrementTick+0x17a>
    9c00:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <pxDelayedTaskList>
    9c04:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <pxDelayedTaskList+0x1>
    9c08:	fc 01       	movw	r30, r24
    9c0a:	85 81       	ldd	r24, Z+5	; 0x05
    9c0c:	96 81       	ldd	r25, Z+6	; 0x06
    9c0e:	fc 01       	movw	r30, r24
    9c10:	86 81       	ldd	r24, Z+6	; 0x06
    9c12:	97 81       	ldd	r25, Z+7	; 0x07
    9c14:	9f 83       	std	Y+7, r25	; 0x07
    9c16:	8e 83       	std	Y+6, r24	; 0x06
    9c18:	8e 81       	ldd	r24, Y+6	; 0x06
    9c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    9c1c:	fc 01       	movw	r30, r24
    9c1e:	82 81       	ldd	r24, Z+2	; 0x02
    9c20:	93 81       	ldd	r25, Z+3	; 0x03
    9c22:	99 87       	std	Y+9, r25	; 0x09
    9c24:	88 87       	std	Y+8, r24	; 0x08
    9c26:	2a 81       	ldd	r18, Y+2	; 0x02
    9c28:	3b 81       	ldd	r19, Y+3	; 0x03
    9c2a:	88 85       	ldd	r24, Y+8	; 0x08
    9c2c:	99 85       	ldd	r25, Y+9	; 0x09
    9c2e:	28 17       	cp	r18, r24
    9c30:	39 07       	cpc	r19, r25
    9c32:	38 f4       	brcc	.+14     	; 0x9c42 <xTaskIncrementTick+0xea>
    9c34:	88 85       	ldd	r24, Y+8	; 0x08
    9c36:	99 85       	ldd	r25, Y+9	; 0x09
    9c38:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <xNextTaskUnblockTime+0x1>
    9c3c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <xNextTaskUnblockTime>
    9c40:	48 c0       	rjmp	.+144    	; 0x9cd2 <xTaskIncrementTick+0x17a>
    9c42:	8e 81       	ldd	r24, Y+6	; 0x06
    9c44:	9f 81       	ldd	r25, Y+7	; 0x07
    9c46:	02 96       	adiw	r24, 0x02	; 2
    9c48:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    9c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    9c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    9c50:	fc 01       	movw	r30, r24
    9c52:	84 89       	ldd	r24, Z+20	; 0x14
    9c54:	95 89       	ldd	r25, Z+21	; 0x15
    9c56:	89 2b       	or	r24, r25
    9c58:	29 f0       	breq	.+10     	; 0x9c64 <xTaskIncrementTick+0x10c>
    9c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    9c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    9c5e:	0c 96       	adiw	r24, 0x0c	; 12
    9c60:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    9c64:	8e 81       	ldd	r24, Y+6	; 0x06
    9c66:	9f 81       	ldd	r25, Y+7	; 0x07
    9c68:	fc 01       	movw	r30, r24
    9c6a:	96 89       	ldd	r25, Z+22	; 0x16
    9c6c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <uxTopReadyPriority>
    9c70:	89 17       	cp	r24, r25
    9c72:	30 f4       	brcc	.+12     	; 0x9c80 <xTaskIncrementTick+0x128>
    9c74:	8e 81       	ldd	r24, Y+6	; 0x06
    9c76:	9f 81       	ldd	r25, Y+7	; 0x07
    9c78:	fc 01       	movw	r30, r24
    9c7a:	86 89       	ldd	r24, Z+22	; 0x16
    9c7c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <uxTopReadyPriority>
    9c80:	8e 81       	ldd	r24, Y+6	; 0x06
    9c82:	9f 81       	ldd	r25, Y+7	; 0x07
    9c84:	ac 01       	movw	r20, r24
    9c86:	4e 5f       	subi	r20, 0xFE	; 254
    9c88:	5f 4f       	sbci	r21, 0xFF	; 255
    9c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    9c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    9c8e:	fc 01       	movw	r30, r24
    9c90:	86 89       	ldd	r24, Z+22	; 0x16
    9c92:	28 2f       	mov	r18, r24
    9c94:	30 e0       	ldi	r19, 0x00	; 0
    9c96:	c9 01       	movw	r24, r18
    9c98:	88 0f       	add	r24, r24
    9c9a:	99 1f       	adc	r25, r25
    9c9c:	88 0f       	add	r24, r24
    9c9e:	99 1f       	adc	r25, r25
    9ca0:	88 0f       	add	r24, r24
    9ca2:	99 1f       	adc	r25, r25
    9ca4:	82 0f       	add	r24, r18
    9ca6:	93 1f       	adc	r25, r19
    9ca8:	8f 5e       	subi	r24, 0xEF	; 239
    9caa:	9a 4f       	sbci	r25, 0xFA	; 250
    9cac:	ba 01       	movw	r22, r20
    9cae:	0e 94 c3 58 	call	0xb186	; 0xb186 <vListInsertEnd>
    9cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    9cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    9cb6:	fc 01       	movw	r30, r24
    9cb8:	26 89       	ldd	r18, Z+22	; 0x16
    9cba:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9cbe:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9cc2:	fc 01       	movw	r30, r24
    9cc4:	86 89       	ldd	r24, Z+22	; 0x16
    9cc6:	28 17       	cp	r18, r24
    9cc8:	08 f4       	brcc	.+2      	; 0x9ccc <xTaskIncrementTick+0x174>
    9cca:	8b cf       	rjmp	.-234    	; 0x9be2 <xTaskIncrementTick+0x8a>
    9ccc:	81 e0       	ldi	r24, 0x01	; 1
    9cce:	89 83       	std	Y+1, r24	; 0x01
    9cd0:	88 cf       	rjmp	.-240    	; 0x9be2 <xTaskIncrementTick+0x8a>
    9cd2:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9cd6:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9cda:	fc 01       	movw	r30, r24
    9cdc:	86 89       	ldd	r24, Z+22	; 0x16
    9cde:	28 2f       	mov	r18, r24
    9ce0:	30 e0       	ldi	r19, 0x00	; 0
    9ce2:	c9 01       	movw	r24, r18
    9ce4:	88 0f       	add	r24, r24
    9ce6:	99 1f       	adc	r25, r25
    9ce8:	88 0f       	add	r24, r24
    9cea:	99 1f       	adc	r25, r25
    9cec:	88 0f       	add	r24, r24
    9cee:	99 1f       	adc	r25, r25
    9cf0:	82 0f       	add	r24, r18
    9cf2:	93 1f       	adc	r25, r19
    9cf4:	8f 5e       	subi	r24, 0xEF	; 239
    9cf6:	9a 4f       	sbci	r25, 0xFA	; 250
    9cf8:	fc 01       	movw	r30, r24
    9cfa:	80 81       	ld	r24, Z
    9cfc:	82 30       	cpi	r24, 0x02	; 2
    9cfe:	40 f0       	brcs	.+16     	; 0x9d10 <xTaskIncrementTick+0x1b8>
    9d00:	81 e0       	ldi	r24, 0x01	; 1
    9d02:	89 83       	std	Y+1, r24	; 0x01
    9d04:	05 c0       	rjmp	.+10     	; 0x9d10 <xTaskIncrementTick+0x1b8>
    9d06:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <uxPendedTicks>
    9d0a:	8f 5f       	subi	r24, 0xFF	; 255
    9d0c:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <uxPendedTicks>
    9d10:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <xYieldPending>
    9d14:	88 23       	and	r24, r24
    9d16:	11 f0       	breq	.+4      	; 0x9d1c <xTaskIncrementTick+0x1c4>
    9d18:	81 e0       	ldi	r24, 0x01	; 1
    9d1a:	89 83       	std	Y+1, r24	; 0x01
    9d1c:	89 81       	ldd	r24, Y+1	; 0x01
    9d1e:	29 96       	adiw	r28, 0x09	; 9
    9d20:	0f b6       	in	r0, 0x3f	; 63
    9d22:	f8 94       	cli
    9d24:	de bf       	out	0x3e, r29	; 62
    9d26:	0f be       	out	0x3f, r0	; 63
    9d28:	cd bf       	out	0x3d, r28	; 61
    9d2a:	df 91       	pop	r29
    9d2c:	cf 91       	pop	r28
    9d2e:	08 95       	ret

00009d30 <vTaskSwitchContext>:
    9d30:	cf 93       	push	r28
    9d32:	df 93       	push	r29
    9d34:	00 d0       	rcall	.+0      	; 0x9d36 <vTaskSwitchContext+0x6>
    9d36:	cd b7       	in	r28, 0x3d	; 61
    9d38:	de b7       	in	r29, 0x3e	; 62
    9d3a:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    9d3e:	88 23       	and	r24, r24
    9d40:	21 f0       	breq	.+8      	; 0x9d4a <vTaskSwitchContext+0x1a>
    9d42:	81 e0       	ldi	r24, 0x01	; 1
    9d44:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <xYieldPending>
    9d48:	7e c0       	rjmp	.+252    	; 0x9e46 <vTaskSwitchContext+0x116>
    9d4a:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <xYieldPending>
    9d4e:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9d52:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9d56:	fc 01       	movw	r30, r24
    9d58:	20 81       	ld	r18, Z
    9d5a:	31 81       	ldd	r19, Z+1	; 0x01
    9d5c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9d60:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9d64:	fc 01       	movw	r30, r24
    9d66:	87 89       	ldd	r24, Z+23	; 0x17
    9d68:	90 8d       	ldd	r25, Z+24	; 0x18
    9d6a:	82 17       	cp	r24, r18
    9d6c:	93 07       	cpc	r25, r19
    9d6e:	70 f0       	brcs	.+28     	; 0x9d8c <vTaskSwitchContext+0x5c>
    9d70:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9d74:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9d78:	9c 01       	movw	r18, r24
    9d7a:	27 5e       	subi	r18, 0xE7	; 231
    9d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    9d7e:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9d82:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9d86:	b9 01       	movw	r22, r18
    9d88:	0e 94 18 57 	call	0xae30	; 0xae30 <vApplicationStackOverflowHook>
    9d8c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <uxTopReadyPriority>
    9d90:	89 83       	std	Y+1, r24	; 0x01
    9d92:	03 c0       	rjmp	.+6      	; 0x9d9a <vTaskSwitchContext+0x6a>
    9d94:	89 81       	ldd	r24, Y+1	; 0x01
    9d96:	81 50       	subi	r24, 0x01	; 1
    9d98:	89 83       	std	Y+1, r24	; 0x01
    9d9a:	89 81       	ldd	r24, Y+1	; 0x01
    9d9c:	28 2f       	mov	r18, r24
    9d9e:	30 e0       	ldi	r19, 0x00	; 0
    9da0:	c9 01       	movw	r24, r18
    9da2:	88 0f       	add	r24, r24
    9da4:	99 1f       	adc	r25, r25
    9da6:	88 0f       	add	r24, r24
    9da8:	99 1f       	adc	r25, r25
    9daa:	88 0f       	add	r24, r24
    9dac:	99 1f       	adc	r25, r25
    9dae:	82 0f       	add	r24, r18
    9db0:	93 1f       	adc	r25, r19
    9db2:	8f 5e       	subi	r24, 0xEF	; 239
    9db4:	9a 4f       	sbci	r25, 0xFA	; 250
    9db6:	fc 01       	movw	r30, r24
    9db8:	80 81       	ld	r24, Z
    9dba:	88 23       	and	r24, r24
    9dbc:	59 f3       	breq	.-42     	; 0x9d94 <vTaskSwitchContext+0x64>
    9dbe:	89 81       	ldd	r24, Y+1	; 0x01
    9dc0:	28 2f       	mov	r18, r24
    9dc2:	30 e0       	ldi	r19, 0x00	; 0
    9dc4:	c9 01       	movw	r24, r18
    9dc6:	88 0f       	add	r24, r24
    9dc8:	99 1f       	adc	r25, r25
    9dca:	88 0f       	add	r24, r24
    9dcc:	99 1f       	adc	r25, r25
    9dce:	88 0f       	add	r24, r24
    9dd0:	99 1f       	adc	r25, r25
    9dd2:	82 0f       	add	r24, r18
    9dd4:	93 1f       	adc	r25, r19
    9dd6:	8f 5e       	subi	r24, 0xEF	; 239
    9dd8:	9a 4f       	sbci	r25, 0xFA	; 250
    9dda:	9b 83       	std	Y+3, r25	; 0x03
    9ddc:	8a 83       	std	Y+2, r24	; 0x02
    9dde:	8a 81       	ldd	r24, Y+2	; 0x02
    9de0:	9b 81       	ldd	r25, Y+3	; 0x03
    9de2:	fc 01       	movw	r30, r24
    9de4:	81 81       	ldd	r24, Z+1	; 0x01
    9de6:	92 81       	ldd	r25, Z+2	; 0x02
    9de8:	fc 01       	movw	r30, r24
    9dea:	22 81       	ldd	r18, Z+2	; 0x02
    9dec:	33 81       	ldd	r19, Z+3	; 0x03
    9dee:	8a 81       	ldd	r24, Y+2	; 0x02
    9df0:	9b 81       	ldd	r25, Y+3	; 0x03
    9df2:	fc 01       	movw	r30, r24
    9df4:	32 83       	std	Z+2, r19	; 0x02
    9df6:	21 83       	std	Z+1, r18	; 0x01
    9df8:	8a 81       	ldd	r24, Y+2	; 0x02
    9dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    9dfc:	fc 01       	movw	r30, r24
    9dfe:	21 81       	ldd	r18, Z+1	; 0x01
    9e00:	32 81       	ldd	r19, Z+2	; 0x02
    9e02:	8a 81       	ldd	r24, Y+2	; 0x02
    9e04:	9b 81       	ldd	r25, Y+3	; 0x03
    9e06:	03 96       	adiw	r24, 0x03	; 3
    9e08:	28 17       	cp	r18, r24
    9e0a:	39 07       	cpc	r19, r25
    9e0c:	69 f4       	brne	.+26     	; 0x9e28 <vTaskSwitchContext+0xf8>
    9e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    9e10:	9b 81       	ldd	r25, Y+3	; 0x03
    9e12:	fc 01       	movw	r30, r24
    9e14:	81 81       	ldd	r24, Z+1	; 0x01
    9e16:	92 81       	ldd	r25, Z+2	; 0x02
    9e18:	fc 01       	movw	r30, r24
    9e1a:	22 81       	ldd	r18, Z+2	; 0x02
    9e1c:	33 81       	ldd	r19, Z+3	; 0x03
    9e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    9e20:	9b 81       	ldd	r25, Y+3	; 0x03
    9e22:	fc 01       	movw	r30, r24
    9e24:	32 83       	std	Z+2, r19	; 0x02
    9e26:	21 83       	std	Z+1, r18	; 0x01
    9e28:	8a 81       	ldd	r24, Y+2	; 0x02
    9e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    9e2c:	fc 01       	movw	r30, r24
    9e2e:	81 81       	ldd	r24, Z+1	; 0x01
    9e30:	92 81       	ldd	r25, Z+2	; 0x02
    9e32:	fc 01       	movw	r30, r24
    9e34:	86 81       	ldd	r24, Z+6	; 0x06
    9e36:	97 81       	ldd	r25, Z+7	; 0x07
    9e38:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <pxCurrentTCB+0x1>
    9e3c:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <pxCurrentTCB>
    9e40:	89 81       	ldd	r24, Y+1	; 0x01
    9e42:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <uxTopReadyPriority>
    9e46:	00 00       	nop
    9e48:	0f 90       	pop	r0
    9e4a:	0f 90       	pop	r0
    9e4c:	0f 90       	pop	r0
    9e4e:	df 91       	pop	r29
    9e50:	cf 91       	pop	r28
    9e52:	08 95       	ret

00009e54 <vTaskPlaceOnEventList>:
    9e54:	cf 93       	push	r28
    9e56:	df 93       	push	r29
    9e58:	00 d0       	rcall	.+0      	; 0x9e5a <vTaskPlaceOnEventList+0x6>
    9e5a:	1f 92       	push	r1
    9e5c:	cd b7       	in	r28, 0x3d	; 61
    9e5e:	de b7       	in	r29, 0x3e	; 62
    9e60:	9a 83       	std	Y+2, r25	; 0x02
    9e62:	89 83       	std	Y+1, r24	; 0x01
    9e64:	7c 83       	std	Y+4, r23	; 0x04
    9e66:	6b 83       	std	Y+3, r22	; 0x03
    9e68:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9e6c:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9e70:	9c 01       	movw	r18, r24
    9e72:	24 5f       	subi	r18, 0xF4	; 244
    9e74:	3f 4f       	sbci	r19, 0xFF	; 255
    9e76:	89 81       	ldd	r24, Y+1	; 0x01
    9e78:	9a 81       	ldd	r25, Y+2	; 0x02
    9e7a:	b9 01       	movw	r22, r18
    9e7c:	0e 94 11 59 	call	0xb222	; 0xb222 <vListInsert>
    9e80:	8b 81       	ldd	r24, Y+3	; 0x03
    9e82:	9c 81       	ldd	r25, Y+4	; 0x04
    9e84:	61 e0       	ldi	r22, 0x01	; 1
    9e86:	e1 d2       	rcall	.+1474   	; 0xa44a <prvAddCurrentTaskToDelayedList>
    9e88:	00 00       	nop
    9e8a:	0f 90       	pop	r0
    9e8c:	0f 90       	pop	r0
    9e8e:	0f 90       	pop	r0
    9e90:	0f 90       	pop	r0
    9e92:	df 91       	pop	r29
    9e94:	cf 91       	pop	r28
    9e96:	08 95       	ret

00009e98 <vTaskPlaceOnEventListRestricted>:
    9e98:	cf 93       	push	r28
    9e9a:	df 93       	push	r29
    9e9c:	00 d0       	rcall	.+0      	; 0x9e9e <vTaskPlaceOnEventListRestricted+0x6>
    9e9e:	1f 92       	push	r1
    9ea0:	1f 92       	push	r1
    9ea2:	cd b7       	in	r28, 0x3d	; 61
    9ea4:	de b7       	in	r29, 0x3e	; 62
    9ea6:	9a 83       	std	Y+2, r25	; 0x02
    9ea8:	89 83       	std	Y+1, r24	; 0x01
    9eaa:	7c 83       	std	Y+4, r23	; 0x04
    9eac:	6b 83       	std	Y+3, r22	; 0x03
    9eae:	4d 83       	std	Y+5, r20	; 0x05
    9eb0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9eb4:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9eb8:	9c 01       	movw	r18, r24
    9eba:	24 5f       	subi	r18, 0xF4	; 244
    9ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    9ebe:	89 81       	ldd	r24, Y+1	; 0x01
    9ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    9ec2:	b9 01       	movw	r22, r18
    9ec4:	0e 94 c3 58 	call	0xb186	; 0xb186 <vListInsertEnd>
    9ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    9eca:	88 23       	and	r24, r24
    9ecc:	21 f0       	breq	.+8      	; 0x9ed6 <vTaskPlaceOnEventListRestricted+0x3e>
    9ece:	8f ef       	ldi	r24, 0xFF	; 255
    9ed0:	9f ef       	ldi	r25, 0xFF	; 255
    9ed2:	9c 83       	std	Y+4, r25	; 0x04
    9ed4:	8b 83       	std	Y+3, r24	; 0x03
    9ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    9ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    9eda:	6d 81       	ldd	r22, Y+5	; 0x05
    9edc:	b6 d2       	rcall	.+1388   	; 0xa44a <prvAddCurrentTaskToDelayedList>
    9ede:	00 00       	nop
    9ee0:	0f 90       	pop	r0
    9ee2:	0f 90       	pop	r0
    9ee4:	0f 90       	pop	r0
    9ee6:	0f 90       	pop	r0
    9ee8:	0f 90       	pop	r0
    9eea:	df 91       	pop	r29
    9eec:	cf 91       	pop	r28
    9eee:	08 95       	ret

00009ef0 <xTaskRemoveFromEventList>:
    9ef0:	cf 93       	push	r28
    9ef2:	df 93       	push	r29
    9ef4:	00 d0       	rcall	.+0      	; 0x9ef6 <xTaskRemoveFromEventList+0x6>
    9ef6:	1f 92       	push	r1
    9ef8:	1f 92       	push	r1
    9efa:	cd b7       	in	r28, 0x3d	; 61
    9efc:	de b7       	in	r29, 0x3e	; 62
    9efe:	9d 83       	std	Y+5, r25	; 0x05
    9f00:	8c 83       	std	Y+4, r24	; 0x04
    9f02:	8c 81       	ldd	r24, Y+4	; 0x04
    9f04:	9d 81       	ldd	r25, Y+5	; 0x05
    9f06:	fc 01       	movw	r30, r24
    9f08:	85 81       	ldd	r24, Z+5	; 0x05
    9f0a:	96 81       	ldd	r25, Z+6	; 0x06
    9f0c:	fc 01       	movw	r30, r24
    9f0e:	86 81       	ldd	r24, Z+6	; 0x06
    9f10:	97 81       	ldd	r25, Z+7	; 0x07
    9f12:	9b 83       	std	Y+3, r25	; 0x03
    9f14:	8a 83       	std	Y+2, r24	; 0x02
    9f16:	8a 81       	ldd	r24, Y+2	; 0x02
    9f18:	9b 81       	ldd	r25, Y+3	; 0x03
    9f1a:	0c 96       	adiw	r24, 0x0c	; 12
    9f1c:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    9f20:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    9f24:	88 23       	and	r24, r24
    9f26:	69 f5       	brne	.+90     	; 0x9f82 <xTaskRemoveFromEventList+0x92>
    9f28:	8a 81       	ldd	r24, Y+2	; 0x02
    9f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    9f2c:	02 96       	adiw	r24, 0x02	; 2
    9f2e:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    9f32:	8a 81       	ldd	r24, Y+2	; 0x02
    9f34:	9b 81       	ldd	r25, Y+3	; 0x03
    9f36:	fc 01       	movw	r30, r24
    9f38:	96 89       	ldd	r25, Z+22	; 0x16
    9f3a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <uxTopReadyPriority>
    9f3e:	89 17       	cp	r24, r25
    9f40:	30 f4       	brcc	.+12     	; 0x9f4e <xTaskRemoveFromEventList+0x5e>
    9f42:	8a 81       	ldd	r24, Y+2	; 0x02
    9f44:	9b 81       	ldd	r25, Y+3	; 0x03
    9f46:	fc 01       	movw	r30, r24
    9f48:	86 89       	ldd	r24, Z+22	; 0x16
    9f4a:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <uxTopReadyPriority>
    9f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    9f50:	9b 81       	ldd	r25, Y+3	; 0x03
    9f52:	ac 01       	movw	r20, r24
    9f54:	4e 5f       	subi	r20, 0xFE	; 254
    9f56:	5f 4f       	sbci	r21, 0xFF	; 255
    9f58:	8a 81       	ldd	r24, Y+2	; 0x02
    9f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    9f5c:	fc 01       	movw	r30, r24
    9f5e:	86 89       	ldd	r24, Z+22	; 0x16
    9f60:	28 2f       	mov	r18, r24
    9f62:	30 e0       	ldi	r19, 0x00	; 0
    9f64:	c9 01       	movw	r24, r18
    9f66:	88 0f       	add	r24, r24
    9f68:	99 1f       	adc	r25, r25
    9f6a:	88 0f       	add	r24, r24
    9f6c:	99 1f       	adc	r25, r25
    9f6e:	88 0f       	add	r24, r24
    9f70:	99 1f       	adc	r25, r25
    9f72:	82 0f       	add	r24, r18
    9f74:	93 1f       	adc	r25, r19
    9f76:	8f 5e       	subi	r24, 0xEF	; 239
    9f78:	9a 4f       	sbci	r25, 0xFA	; 250
    9f7a:	ba 01       	movw	r22, r20
    9f7c:	0e 94 c3 58 	call	0xb186	; 0xb186 <vListInsertEnd>
    9f80:	08 c0       	rjmp	.+16     	; 0x9f92 <xTaskRemoveFromEventList+0xa2>
    9f82:	8a 81       	ldd	r24, Y+2	; 0x02
    9f84:	9b 81       	ldd	r25, Y+3	; 0x03
    9f86:	0c 96       	adiw	r24, 0x0c	; 12
    9f88:	bc 01       	movw	r22, r24
    9f8a:	8b e4       	ldi	r24, 0x4B	; 75
    9f8c:	95 e0       	ldi	r25, 0x05	; 5
    9f8e:	0e 94 c3 58 	call	0xb186	; 0xb186 <vListInsertEnd>
    9f92:	8a 81       	ldd	r24, Y+2	; 0x02
    9f94:	9b 81       	ldd	r25, Y+3	; 0x03
    9f96:	fc 01       	movw	r30, r24
    9f98:	26 89       	ldd	r18, Z+22	; 0x16
    9f9a:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    9f9e:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    9fa2:	fc 01       	movw	r30, r24
    9fa4:	86 89       	ldd	r24, Z+22	; 0x16
    9fa6:	82 17       	cp	r24, r18
    9fa8:	30 f4       	brcc	.+12     	; 0x9fb6 <xTaskRemoveFromEventList+0xc6>
    9faa:	81 e0       	ldi	r24, 0x01	; 1
    9fac:	89 83       	std	Y+1, r24	; 0x01
    9fae:	81 e0       	ldi	r24, 0x01	; 1
    9fb0:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <xYieldPending>
    9fb4:	01 c0       	rjmp	.+2      	; 0x9fb8 <xTaskRemoveFromEventList+0xc8>
    9fb6:	19 82       	std	Y+1, r1	; 0x01
    9fb8:	89 81       	ldd	r24, Y+1	; 0x01
    9fba:	0f 90       	pop	r0
    9fbc:	0f 90       	pop	r0
    9fbe:	0f 90       	pop	r0
    9fc0:	0f 90       	pop	r0
    9fc2:	0f 90       	pop	r0
    9fc4:	df 91       	pop	r29
    9fc6:	cf 91       	pop	r28
    9fc8:	08 95       	ret

00009fca <vTaskInternalSetTimeOutState>:
    9fca:	cf 93       	push	r28
    9fcc:	df 93       	push	r29
    9fce:	1f 92       	push	r1
    9fd0:	1f 92       	push	r1
    9fd2:	cd b7       	in	r28, 0x3d	; 61
    9fd4:	de b7       	in	r29, 0x3e	; 62
    9fd6:	9a 83       	std	Y+2, r25	; 0x02
    9fd8:	89 83       	std	Y+1, r24	; 0x01
    9fda:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <xNumOfOverflows>
    9fde:	89 81       	ldd	r24, Y+1	; 0x01
    9fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    9fe2:	fc 01       	movw	r30, r24
    9fe4:	20 83       	st	Z, r18
    9fe6:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xTickCount>
    9fea:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xTickCount+0x1>
    9fee:	89 81       	ldd	r24, Y+1	; 0x01
    9ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    9ff2:	fc 01       	movw	r30, r24
    9ff4:	32 83       	std	Z+2, r19	; 0x02
    9ff6:	21 83       	std	Z+1, r18	; 0x01
    9ff8:	00 00       	nop
    9ffa:	0f 90       	pop	r0
    9ffc:	0f 90       	pop	r0
    9ffe:	df 91       	pop	r29
    a000:	cf 91       	pop	r28
    a002:	08 95       	ret

0000a004 <xTaskCheckForTimeOut>:
    a004:	cf 93       	push	r28
    a006:	df 93       	push	r29
    a008:	cd b7       	in	r28, 0x3d	; 61
    a00a:	de b7       	in	r29, 0x3e	; 62
    a00c:	29 97       	sbiw	r28, 0x09	; 9
    a00e:	0f b6       	in	r0, 0x3f	; 63
    a010:	f8 94       	cli
    a012:	de bf       	out	0x3e, r29	; 62
    a014:	0f be       	out	0x3f, r0	; 63
    a016:	cd bf       	out	0x3d, r28	; 61
    a018:	9f 83       	std	Y+7, r25	; 0x07
    a01a:	8e 83       	std	Y+6, r24	; 0x06
    a01c:	79 87       	std	Y+9, r23	; 0x09
    a01e:	68 87       	std	Y+8, r22	; 0x08
    a020:	0f b6       	in	r0, 0x3f	; 63
    a022:	f8 94       	cli
    a024:	0f 92       	push	r0
    a026:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xTickCount>
    a02a:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xTickCount+0x1>
    a02e:	9b 83       	std	Y+3, r25	; 0x03
    a030:	8a 83       	std	Y+2, r24	; 0x02
    a032:	8e 81       	ldd	r24, Y+6	; 0x06
    a034:	9f 81       	ldd	r25, Y+7	; 0x07
    a036:	fc 01       	movw	r30, r24
    a038:	81 81       	ldd	r24, Z+1	; 0x01
    a03a:	92 81       	ldd	r25, Z+2	; 0x02
    a03c:	2a 81       	ldd	r18, Y+2	; 0x02
    a03e:	3b 81       	ldd	r19, Y+3	; 0x03
    a040:	a9 01       	movw	r20, r18
    a042:	48 1b       	sub	r20, r24
    a044:	59 0b       	sbc	r21, r25
    a046:	ca 01       	movw	r24, r20
    a048:	9d 83       	std	Y+5, r25	; 0x05
    a04a:	8c 83       	std	Y+4, r24	; 0x04
    a04c:	88 85       	ldd	r24, Y+8	; 0x08
    a04e:	99 85       	ldd	r25, Y+9	; 0x09
    a050:	fc 01       	movw	r30, r24
    a052:	80 81       	ld	r24, Z
    a054:	91 81       	ldd	r25, Z+1	; 0x01
    a056:	01 96       	adiw	r24, 0x01	; 1
    a058:	11 f4       	brne	.+4      	; 0xa05e <xTaskCheckForTimeOut+0x5a>
    a05a:	19 82       	std	Y+1, r1	; 0x01
    a05c:	39 c0       	rjmp	.+114    	; 0xa0d0 <xTaskCheckForTimeOut+0xcc>
    a05e:	8e 81       	ldd	r24, Y+6	; 0x06
    a060:	9f 81       	ldd	r25, Y+7	; 0x07
    a062:	fc 01       	movw	r30, r24
    a064:	90 81       	ld	r25, Z
    a066:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <xNumOfOverflows>
    a06a:	98 17       	cp	r25, r24
    a06c:	69 f0       	breq	.+26     	; 0xa088 <xTaskCheckForTimeOut+0x84>
    a06e:	8e 81       	ldd	r24, Y+6	; 0x06
    a070:	9f 81       	ldd	r25, Y+7	; 0x07
    a072:	fc 01       	movw	r30, r24
    a074:	21 81       	ldd	r18, Z+1	; 0x01
    a076:	32 81       	ldd	r19, Z+2	; 0x02
    a078:	8a 81       	ldd	r24, Y+2	; 0x02
    a07a:	9b 81       	ldd	r25, Y+3	; 0x03
    a07c:	82 17       	cp	r24, r18
    a07e:	93 07       	cpc	r25, r19
    a080:	18 f0       	brcs	.+6      	; 0xa088 <xTaskCheckForTimeOut+0x84>
    a082:	81 e0       	ldi	r24, 0x01	; 1
    a084:	89 83       	std	Y+1, r24	; 0x01
    a086:	24 c0       	rjmp	.+72     	; 0xa0d0 <xTaskCheckForTimeOut+0xcc>
    a088:	88 85       	ldd	r24, Y+8	; 0x08
    a08a:	99 85       	ldd	r25, Y+9	; 0x09
    a08c:	fc 01       	movw	r30, r24
    a08e:	20 81       	ld	r18, Z
    a090:	31 81       	ldd	r19, Z+1	; 0x01
    a092:	8c 81       	ldd	r24, Y+4	; 0x04
    a094:	9d 81       	ldd	r25, Y+5	; 0x05
    a096:	82 17       	cp	r24, r18
    a098:	93 07       	cpc	r25, r19
    a09a:	98 f4       	brcc	.+38     	; 0xa0c2 <xTaskCheckForTimeOut+0xbe>
    a09c:	88 85       	ldd	r24, Y+8	; 0x08
    a09e:	99 85       	ldd	r25, Y+9	; 0x09
    a0a0:	fc 01       	movw	r30, r24
    a0a2:	20 81       	ld	r18, Z
    a0a4:	31 81       	ldd	r19, Z+1	; 0x01
    a0a6:	8c 81       	ldd	r24, Y+4	; 0x04
    a0a8:	9d 81       	ldd	r25, Y+5	; 0x05
    a0aa:	28 1b       	sub	r18, r24
    a0ac:	39 0b       	sbc	r19, r25
    a0ae:	88 85       	ldd	r24, Y+8	; 0x08
    a0b0:	99 85       	ldd	r25, Y+9	; 0x09
    a0b2:	fc 01       	movw	r30, r24
    a0b4:	31 83       	std	Z+1, r19	; 0x01
    a0b6:	20 83       	st	Z, r18
    a0b8:	8e 81       	ldd	r24, Y+6	; 0x06
    a0ba:	9f 81       	ldd	r25, Y+7	; 0x07
    a0bc:	86 df       	rcall	.-244    	; 0x9fca <vTaskInternalSetTimeOutState>
    a0be:	19 82       	std	Y+1, r1	; 0x01
    a0c0:	07 c0       	rjmp	.+14     	; 0xa0d0 <xTaskCheckForTimeOut+0xcc>
    a0c2:	88 85       	ldd	r24, Y+8	; 0x08
    a0c4:	99 85       	ldd	r25, Y+9	; 0x09
    a0c6:	fc 01       	movw	r30, r24
    a0c8:	11 82       	std	Z+1, r1	; 0x01
    a0ca:	10 82       	st	Z, r1
    a0cc:	81 e0       	ldi	r24, 0x01	; 1
    a0ce:	89 83       	std	Y+1, r24	; 0x01
    a0d0:	0f 90       	pop	r0
    a0d2:	0f be       	out	0x3f, r0	; 63
    a0d4:	89 81       	ldd	r24, Y+1	; 0x01
    a0d6:	29 96       	adiw	r28, 0x09	; 9
    a0d8:	0f b6       	in	r0, 0x3f	; 63
    a0da:	f8 94       	cli
    a0dc:	de bf       	out	0x3e, r29	; 62
    a0de:	0f be       	out	0x3f, r0	; 63
    a0e0:	cd bf       	out	0x3d, r28	; 61
    a0e2:	df 91       	pop	r29
    a0e4:	cf 91       	pop	r28
    a0e6:	08 95       	ret

0000a0e8 <vTaskMissedYield>:
    a0e8:	cf 93       	push	r28
    a0ea:	df 93       	push	r29
    a0ec:	cd b7       	in	r28, 0x3d	; 61
    a0ee:	de b7       	in	r29, 0x3e	; 62
    a0f0:	81 e0       	ldi	r24, 0x01	; 1
    a0f2:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <xYieldPending>
    a0f6:	00 00       	nop
    a0f8:	df 91       	pop	r29
    a0fa:	cf 91       	pop	r28
    a0fc:	08 95       	ret

0000a0fe <prvInitialiseTaskLists>:
    a0fe:	cf 93       	push	r28
    a100:	df 93       	push	r29
    a102:	1f 92       	push	r1
    a104:	cd b7       	in	r28, 0x3d	; 61
    a106:	de b7       	in	r29, 0x3e	; 62
    a108:	19 82       	std	Y+1, r1	; 0x01
    a10a:	12 c0       	rjmp	.+36     	; 0xa130 <prvInitialiseTaskLists+0x32>
    a10c:	89 81       	ldd	r24, Y+1	; 0x01
    a10e:	28 2f       	mov	r18, r24
    a110:	30 e0       	ldi	r19, 0x00	; 0
    a112:	c9 01       	movw	r24, r18
    a114:	88 0f       	add	r24, r24
    a116:	99 1f       	adc	r25, r25
    a118:	88 0f       	add	r24, r24
    a11a:	99 1f       	adc	r25, r25
    a11c:	88 0f       	add	r24, r24
    a11e:	99 1f       	adc	r25, r25
    a120:	82 0f       	add	r24, r18
    a122:	93 1f       	adc	r25, r19
    a124:	8f 5e       	subi	r24, 0xEF	; 239
    a126:	9a 4f       	sbci	r25, 0xFA	; 250
    a128:	e4 d7       	rcall	.+4040   	; 0xb0f2 <vListInitialise>
    a12a:	89 81       	ldd	r24, Y+1	; 0x01
    a12c:	8f 5f       	subi	r24, 0xFF	; 255
    a12e:	89 83       	std	Y+1, r24	; 0x01
    a130:	89 81       	ldd	r24, Y+1	; 0x01
    a132:	84 30       	cpi	r24, 0x04	; 4
    a134:	58 f3       	brcs	.-42     	; 0xa10c <prvInitialiseTaskLists+0xe>
    a136:	85 e3       	ldi	r24, 0x35	; 53
    a138:	95 e0       	ldi	r25, 0x05	; 5
    a13a:	db d7       	rcall	.+4022   	; 0xb0f2 <vListInitialise>
    a13c:	8e e3       	ldi	r24, 0x3E	; 62
    a13e:	95 e0       	ldi	r25, 0x05	; 5
    a140:	d8 d7       	rcall	.+4016   	; 0xb0f2 <vListInitialise>
    a142:	8b e4       	ldi	r24, 0x4B	; 75
    a144:	95 e0       	ldi	r25, 0x05	; 5
    a146:	d5 d7       	rcall	.+4010   	; 0xb0f2 <vListInitialise>
    a148:	84 e5       	ldi	r24, 0x54	; 84
    a14a:	95 e0       	ldi	r25, 0x05	; 5
    a14c:	d2 d7       	rcall	.+4004   	; 0xb0f2 <vListInitialise>
    a14e:	8e e5       	ldi	r24, 0x5E	; 94
    a150:	95 e0       	ldi	r25, 0x05	; 5
    a152:	cf d7       	rcall	.+3998   	; 0xb0f2 <vListInitialise>
    a154:	85 e3       	ldi	r24, 0x35	; 53
    a156:	95 e0       	ldi	r25, 0x05	; 5
    a158:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <pxDelayedTaskList+0x1>
    a15c:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <pxDelayedTaskList>
    a160:	8e e3       	ldi	r24, 0x3E	; 62
    a162:	95 e0       	ldi	r25, 0x05	; 5
    a164:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    a168:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pxOverflowDelayedTaskList>
    a16c:	00 00       	nop
    a16e:	0f 90       	pop	r0
    a170:	df 91       	pop	r29
    a172:	cf 91       	pop	r28
    a174:	08 95       	ret

0000a176 <prvCheckTasksWaitingTermination>:
    a176:	cf 93       	push	r28
    a178:	df 93       	push	r29
    a17a:	1f 92       	push	r1
    a17c:	1f 92       	push	r1
    a17e:	cd b7       	in	r28, 0x3d	; 61
    a180:	de b7       	in	r29, 0x3e	; 62
    a182:	20 c0       	rjmp	.+64     	; 0xa1c4 <prvCheckTasksWaitingTermination+0x4e>
    a184:	0f b6       	in	r0, 0x3f	; 63
    a186:	f8 94       	cli
    a188:	0f 92       	push	r0
    a18a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <xTasksWaitingTermination+0x5>
    a18e:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <xTasksWaitingTermination+0x6>
    a192:	fc 01       	movw	r30, r24
    a194:	86 81       	ldd	r24, Z+6	; 0x06
    a196:	97 81       	ldd	r25, Z+7	; 0x07
    a198:	9a 83       	std	Y+2, r25	; 0x02
    a19a:	89 83       	std	Y+1, r24	; 0x01
    a19c:	89 81       	ldd	r24, Y+1	; 0x01
    a19e:	9a 81       	ldd	r25, Y+2	; 0x02
    a1a0:	02 96       	adiw	r24, 0x02	; 2
    a1a2:	0e 94 89 59 	call	0xb312	; 0xb312 <uxListRemove>
    a1a6:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <uxCurrentNumberOfTasks>
    a1aa:	81 50       	subi	r24, 0x01	; 1
    a1ac:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <uxCurrentNumberOfTasks>
    a1b0:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <uxDeletedTasksWaitingCleanUp>
    a1b4:	81 50       	subi	r24, 0x01	; 1
    a1b6:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <uxDeletedTasksWaitingCleanUp>
    a1ba:	0f 90       	pop	r0
    a1bc:	0f be       	out	0x3f, r0	; 63
    a1be:	89 81       	ldd	r24, Y+1	; 0x01
    a1c0:	9a 81       	ldd	r25, Y+2	; 0x02
    a1c2:	68 d0       	rcall	.+208    	; 0xa294 <prvDeleteTCB>
    a1c4:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <uxDeletedTasksWaitingCleanUp>
    a1c8:	88 23       	and	r24, r24
    a1ca:	e1 f6       	brne	.-72     	; 0xa184 <prvCheckTasksWaitingTermination+0xe>
    a1cc:	00 00       	nop
    a1ce:	0f 90       	pop	r0
    a1d0:	0f 90       	pop	r0
    a1d2:	df 91       	pop	r29
    a1d4:	cf 91       	pop	r28
    a1d6:	08 95       	ret

0000a1d8 <prvTaskCheckFreeStackSpace>:
    a1d8:	cf 93       	push	r28
    a1da:	df 93       	push	r29
    a1dc:	00 d0       	rcall	.+0      	; 0xa1de <prvTaskCheckFreeStackSpace+0x6>
    a1de:	00 d0       	rcall	.+0      	; 0xa1e0 <prvTaskCheckFreeStackSpace+0x8>
    a1e0:	cd b7       	in	r28, 0x3d	; 61
    a1e2:	de b7       	in	r29, 0x3e	; 62
    a1e4:	9e 83       	std	Y+6, r25	; 0x06
    a1e6:	8d 83       	std	Y+5, r24	; 0x05
    a1e8:	19 82       	std	Y+1, r1	; 0x01
    a1ea:	1a 82       	std	Y+2, r1	; 0x02
    a1ec:	1b 82       	std	Y+3, r1	; 0x03
    a1ee:	1c 82       	std	Y+4, r1	; 0x04
    a1f0:	10 c0       	rjmp	.+32     	; 0xa212 <prvTaskCheckFreeStackSpace+0x3a>
    a1f2:	8d 81       	ldd	r24, Y+5	; 0x05
    a1f4:	9e 81       	ldd	r25, Y+6	; 0x06
    a1f6:	01 96       	adiw	r24, 0x01	; 1
    a1f8:	9e 83       	std	Y+6, r25	; 0x06
    a1fa:	8d 83       	std	Y+5, r24	; 0x05
    a1fc:	89 81       	ldd	r24, Y+1	; 0x01
    a1fe:	9a 81       	ldd	r25, Y+2	; 0x02
    a200:	ab 81       	ldd	r26, Y+3	; 0x03
    a202:	bc 81       	ldd	r27, Y+4	; 0x04
    a204:	01 96       	adiw	r24, 0x01	; 1
    a206:	a1 1d       	adc	r26, r1
    a208:	b1 1d       	adc	r27, r1
    a20a:	89 83       	std	Y+1, r24	; 0x01
    a20c:	9a 83       	std	Y+2, r25	; 0x02
    a20e:	ab 83       	std	Y+3, r26	; 0x03
    a210:	bc 83       	std	Y+4, r27	; 0x04
    a212:	8d 81       	ldd	r24, Y+5	; 0x05
    a214:	9e 81       	ldd	r25, Y+6	; 0x06
    a216:	fc 01       	movw	r30, r24
    a218:	80 81       	ld	r24, Z
    a21a:	85 3a       	cpi	r24, 0xA5	; 165
    a21c:	51 f3       	breq	.-44     	; 0xa1f2 <prvTaskCheckFreeStackSpace+0x1a>
    a21e:	89 81       	ldd	r24, Y+1	; 0x01
    a220:	9a 81       	ldd	r25, Y+2	; 0x02
    a222:	26 96       	adiw	r28, 0x06	; 6
    a224:	0f b6       	in	r0, 0x3f	; 63
    a226:	f8 94       	cli
    a228:	de bf       	out	0x3e, r29	; 62
    a22a:	0f be       	out	0x3f, r0	; 63
    a22c:	cd bf       	out	0x3d, r28	; 61
    a22e:	df 91       	pop	r29
    a230:	cf 91       	pop	r28
    a232:	08 95       	ret

0000a234 <uxTaskGetStackHighWaterMark>:
    a234:	cf 93       	push	r28
    a236:	df 93       	push	r29
    a238:	cd b7       	in	r28, 0x3d	; 61
    a23a:	de b7       	in	r29, 0x3e	; 62
    a23c:	28 97       	sbiw	r28, 0x08	; 8
    a23e:	0f b6       	in	r0, 0x3f	; 63
    a240:	f8 94       	cli
    a242:	de bf       	out	0x3e, r29	; 62
    a244:	0f be       	out	0x3f, r0	; 63
    a246:	cd bf       	out	0x3d, r28	; 61
    a248:	98 87       	std	Y+8, r25	; 0x08
    a24a:	8f 83       	std	Y+7, r24	; 0x07
    a24c:	8f 81       	ldd	r24, Y+7	; 0x07
    a24e:	98 85       	ldd	r25, Y+8	; 0x08
    a250:	89 2b       	or	r24, r25
    a252:	29 f4       	brne	.+10     	; 0xa25e <uxTaskGetStackHighWaterMark+0x2a>
    a254:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    a258:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    a25c:	02 c0       	rjmp	.+4      	; 0xa262 <uxTaskGetStackHighWaterMark+0x2e>
    a25e:	8f 81       	ldd	r24, Y+7	; 0x07
    a260:	98 85       	ldd	r25, Y+8	; 0x08
    a262:	9a 83       	std	Y+2, r25	; 0x02
    a264:	89 83       	std	Y+1, r24	; 0x01
    a266:	89 81       	ldd	r24, Y+1	; 0x01
    a268:	9a 81       	ldd	r25, Y+2	; 0x02
    a26a:	fc 01       	movw	r30, r24
    a26c:	87 89       	ldd	r24, Z+23	; 0x17
    a26e:	90 8d       	ldd	r25, Z+24	; 0x18
    a270:	9c 83       	std	Y+4, r25	; 0x04
    a272:	8b 83       	std	Y+3, r24	; 0x03
    a274:	8b 81       	ldd	r24, Y+3	; 0x03
    a276:	9c 81       	ldd	r25, Y+4	; 0x04
    a278:	af df       	rcall	.-162    	; 0xa1d8 <prvTaskCheckFreeStackSpace>
    a27a:	9e 83       	std	Y+6, r25	; 0x06
    a27c:	8d 83       	std	Y+5, r24	; 0x05
    a27e:	8d 81       	ldd	r24, Y+5	; 0x05
    a280:	9e 81       	ldd	r25, Y+6	; 0x06
    a282:	28 96       	adiw	r28, 0x08	; 8
    a284:	0f b6       	in	r0, 0x3f	; 63
    a286:	f8 94       	cli
    a288:	de bf       	out	0x3e, r29	; 62
    a28a:	0f be       	out	0x3f, r0	; 63
    a28c:	cd bf       	out	0x3d, r28	; 61
    a28e:	df 91       	pop	r29
    a290:	cf 91       	pop	r28
    a292:	08 95       	ret

0000a294 <prvDeleteTCB>:
    a294:	cf 93       	push	r28
    a296:	df 93       	push	r29
    a298:	1f 92       	push	r1
    a29a:	1f 92       	push	r1
    a29c:	cd b7       	in	r28, 0x3d	; 61
    a29e:	de b7       	in	r29, 0x3e	; 62
    a2a0:	9a 83       	std	Y+2, r25	; 0x02
    a2a2:	89 83       	std	Y+1, r24	; 0x01
    a2a4:	89 81       	ldd	r24, Y+1	; 0x01
    a2a6:	9a 81       	ldd	r25, Y+2	; 0x02
    a2a8:	fc 01       	movw	r30, r24
    a2aa:	87 89       	ldd	r24, Z+23	; 0x17
    a2ac:	90 8d       	ldd	r25, Z+24	; 0x18
    a2ae:	07 d7       	rcall	.+3598   	; 0xb0be <vPortFree>
    a2b0:	89 81       	ldd	r24, Y+1	; 0x01
    a2b2:	9a 81       	ldd	r25, Y+2	; 0x02
    a2b4:	04 d7       	rcall	.+3592   	; 0xb0be <vPortFree>
    a2b6:	00 00       	nop
    a2b8:	0f 90       	pop	r0
    a2ba:	0f 90       	pop	r0
    a2bc:	df 91       	pop	r29
    a2be:	cf 91       	pop	r28
    a2c0:	08 95       	ret

0000a2c2 <prvResetNextTaskUnblockTime>:
    a2c2:	cf 93       	push	r28
    a2c4:	df 93       	push	r29
    a2c6:	1f 92       	push	r1
    a2c8:	1f 92       	push	r1
    a2ca:	cd b7       	in	r28, 0x3d	; 61
    a2cc:	de b7       	in	r29, 0x3e	; 62
    a2ce:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <pxDelayedTaskList>
    a2d2:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <pxDelayedTaskList+0x1>
    a2d6:	fc 01       	movw	r30, r24
    a2d8:	80 81       	ld	r24, Z
    a2da:	88 23       	and	r24, r24
    a2dc:	39 f4       	brne	.+14     	; 0xa2ec <prvResetNextTaskUnblockTime+0x2a>
    a2de:	8f ef       	ldi	r24, 0xFF	; 255
    a2e0:	9f ef       	ldi	r25, 0xFF	; 255
    a2e2:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <xNextTaskUnblockTime+0x1>
    a2e6:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <xNextTaskUnblockTime>
    a2ea:	15 c0       	rjmp	.+42     	; 0xa316 <prvResetNextTaskUnblockTime+0x54>
    a2ec:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <pxDelayedTaskList>
    a2f0:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <pxDelayedTaskList+0x1>
    a2f4:	fc 01       	movw	r30, r24
    a2f6:	85 81       	ldd	r24, Z+5	; 0x05
    a2f8:	96 81       	ldd	r25, Z+6	; 0x06
    a2fa:	fc 01       	movw	r30, r24
    a2fc:	86 81       	ldd	r24, Z+6	; 0x06
    a2fe:	97 81       	ldd	r25, Z+7	; 0x07
    a300:	9a 83       	std	Y+2, r25	; 0x02
    a302:	89 83       	std	Y+1, r24	; 0x01
    a304:	89 81       	ldd	r24, Y+1	; 0x01
    a306:	9a 81       	ldd	r25, Y+2	; 0x02
    a308:	fc 01       	movw	r30, r24
    a30a:	82 81       	ldd	r24, Z+2	; 0x02
    a30c:	93 81       	ldd	r25, Z+3	; 0x03
    a30e:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <xNextTaskUnblockTime+0x1>
    a312:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <xNextTaskUnblockTime>
    a316:	00 00       	nop
    a318:	0f 90       	pop	r0
    a31a:	0f 90       	pop	r0
    a31c:	df 91       	pop	r29
    a31e:	cf 91       	pop	r28
    a320:	08 95       	ret

0000a322 <xTaskGetSchedulerState>:
    a322:	cf 93       	push	r28
    a324:	df 93       	push	r29
    a326:	1f 92       	push	r1
    a328:	cd b7       	in	r28, 0x3d	; 61
    a32a:	de b7       	in	r29, 0x3e	; 62
    a32c:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <xSchedulerRunning>
    a330:	88 23       	and	r24, r24
    a332:	19 f4       	brne	.+6      	; 0xa33a <xTaskGetSchedulerState+0x18>
    a334:	81 e0       	ldi	r24, 0x01	; 1
    a336:	89 83       	std	Y+1, r24	; 0x01
    a338:	08 c0       	rjmp	.+16     	; 0xa34a <xTaskGetSchedulerState+0x28>
    a33a:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <uxSchedulerSuspended>
    a33e:	88 23       	and	r24, r24
    a340:	19 f4       	brne	.+6      	; 0xa348 <xTaskGetSchedulerState+0x26>
    a342:	82 e0       	ldi	r24, 0x02	; 2
    a344:	89 83       	std	Y+1, r24	; 0x01
    a346:	01 c0       	rjmp	.+2      	; 0xa34a <xTaskGetSchedulerState+0x28>
    a348:	19 82       	std	Y+1, r1	; 0x01
    a34a:	89 81       	ldd	r24, Y+1	; 0x01
    a34c:	0f 90       	pop	r0
    a34e:	df 91       	pop	r29
    a350:	cf 91       	pop	r28
    a352:	08 95       	ret

0000a354 <xTaskPriorityDisinherit>:
    a354:	cf 93       	push	r28
    a356:	df 93       	push	r29
    a358:	00 d0       	rcall	.+0      	; 0xa35a <xTaskPriorityDisinherit+0x6>
    a35a:	1f 92       	push	r1
    a35c:	1f 92       	push	r1
    a35e:	cd b7       	in	r28, 0x3d	; 61
    a360:	de b7       	in	r29, 0x3e	; 62
    a362:	9d 83       	std	Y+5, r25	; 0x05
    a364:	8c 83       	std	Y+4, r24	; 0x04
    a366:	8c 81       	ldd	r24, Y+4	; 0x04
    a368:	9d 81       	ldd	r25, Y+5	; 0x05
    a36a:	9b 83       	std	Y+3, r25	; 0x03
    a36c:	8a 83       	std	Y+2, r24	; 0x02
    a36e:	19 82       	std	Y+1, r1	; 0x01
    a370:	8c 81       	ldd	r24, Y+4	; 0x04
    a372:	9d 81       	ldd	r25, Y+5	; 0x05
    a374:	89 2b       	or	r24, r25
    a376:	09 f4       	brne	.+2      	; 0xa37a <xTaskPriorityDisinherit+0x26>
    a378:	5f c0       	rjmp	.+190    	; 0xa438 <xTaskPriorityDisinherit+0xe4>
    a37a:	8a 81       	ldd	r24, Y+2	; 0x02
    a37c:	9b 81       	ldd	r25, Y+3	; 0x03
    a37e:	fc 01       	movw	r30, r24
    a380:	82 a1       	ldd	r24, Z+34	; 0x22
    a382:	2f ef       	ldi	r18, 0xFF	; 255
    a384:	28 0f       	add	r18, r24
    a386:	8a 81       	ldd	r24, Y+2	; 0x02
    a388:	9b 81       	ldd	r25, Y+3	; 0x03
    a38a:	fc 01       	movw	r30, r24
    a38c:	22 a3       	std	Z+34, r18	; 0x22
    a38e:	8a 81       	ldd	r24, Y+2	; 0x02
    a390:	9b 81       	ldd	r25, Y+3	; 0x03
    a392:	fc 01       	movw	r30, r24
    a394:	26 89       	ldd	r18, Z+22	; 0x16
    a396:	8a 81       	ldd	r24, Y+2	; 0x02
    a398:	9b 81       	ldd	r25, Y+3	; 0x03
    a39a:	fc 01       	movw	r30, r24
    a39c:	81 a1       	ldd	r24, Z+33	; 0x21
    a39e:	28 17       	cp	r18, r24
    a3a0:	09 f4       	brne	.+2      	; 0xa3a4 <xTaskPriorityDisinherit+0x50>
    a3a2:	4a c0       	rjmp	.+148    	; 0xa438 <xTaskPriorityDisinherit+0xe4>
    a3a4:	8a 81       	ldd	r24, Y+2	; 0x02
    a3a6:	9b 81       	ldd	r25, Y+3	; 0x03
    a3a8:	fc 01       	movw	r30, r24
    a3aa:	82 a1       	ldd	r24, Z+34	; 0x22
    a3ac:	88 23       	and	r24, r24
    a3ae:	09 f0       	breq	.+2      	; 0xa3b2 <xTaskPriorityDisinherit+0x5e>
    a3b0:	43 c0       	rjmp	.+134    	; 0xa438 <xTaskPriorityDisinherit+0xe4>
    a3b2:	8a 81       	ldd	r24, Y+2	; 0x02
    a3b4:	9b 81       	ldd	r25, Y+3	; 0x03
    a3b6:	02 96       	adiw	r24, 0x02	; 2
    a3b8:	ac d7       	rcall	.+3928   	; 0xb312 <uxListRemove>
    a3ba:	8a 81       	ldd	r24, Y+2	; 0x02
    a3bc:	9b 81       	ldd	r25, Y+3	; 0x03
    a3be:	fc 01       	movw	r30, r24
    a3c0:	21 a1       	ldd	r18, Z+33	; 0x21
    a3c2:	8a 81       	ldd	r24, Y+2	; 0x02
    a3c4:	9b 81       	ldd	r25, Y+3	; 0x03
    a3c6:	fc 01       	movw	r30, r24
    a3c8:	26 8b       	std	Z+22, r18	; 0x16
    a3ca:	8a 81       	ldd	r24, Y+2	; 0x02
    a3cc:	9b 81       	ldd	r25, Y+3	; 0x03
    a3ce:	fc 01       	movw	r30, r24
    a3d0:	86 89       	ldd	r24, Z+22	; 0x16
    a3d2:	88 2f       	mov	r24, r24
    a3d4:	90 e0       	ldi	r25, 0x00	; 0
    a3d6:	24 e0       	ldi	r18, 0x04	; 4
    a3d8:	30 e0       	ldi	r19, 0x00	; 0
    a3da:	28 1b       	sub	r18, r24
    a3dc:	39 0b       	sbc	r19, r25
    a3de:	8a 81       	ldd	r24, Y+2	; 0x02
    a3e0:	9b 81       	ldd	r25, Y+3	; 0x03
    a3e2:	fc 01       	movw	r30, r24
    a3e4:	35 87       	std	Z+13, r19	; 0x0d
    a3e6:	24 87       	std	Z+12, r18	; 0x0c
    a3e8:	8a 81       	ldd	r24, Y+2	; 0x02
    a3ea:	9b 81       	ldd	r25, Y+3	; 0x03
    a3ec:	fc 01       	movw	r30, r24
    a3ee:	96 89       	ldd	r25, Z+22	; 0x16
    a3f0:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <uxTopReadyPriority>
    a3f4:	89 17       	cp	r24, r25
    a3f6:	30 f4       	brcc	.+12     	; 0xa404 <xTaskPriorityDisinherit+0xb0>
    a3f8:	8a 81       	ldd	r24, Y+2	; 0x02
    a3fa:	9b 81       	ldd	r25, Y+3	; 0x03
    a3fc:	fc 01       	movw	r30, r24
    a3fe:	86 89       	ldd	r24, Z+22	; 0x16
    a400:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <uxTopReadyPriority>
    a404:	8a 81       	ldd	r24, Y+2	; 0x02
    a406:	9b 81       	ldd	r25, Y+3	; 0x03
    a408:	ac 01       	movw	r20, r24
    a40a:	4e 5f       	subi	r20, 0xFE	; 254
    a40c:	5f 4f       	sbci	r21, 0xFF	; 255
    a40e:	8a 81       	ldd	r24, Y+2	; 0x02
    a410:	9b 81       	ldd	r25, Y+3	; 0x03
    a412:	fc 01       	movw	r30, r24
    a414:	86 89       	ldd	r24, Z+22	; 0x16
    a416:	28 2f       	mov	r18, r24
    a418:	30 e0       	ldi	r19, 0x00	; 0
    a41a:	c9 01       	movw	r24, r18
    a41c:	88 0f       	add	r24, r24
    a41e:	99 1f       	adc	r25, r25
    a420:	88 0f       	add	r24, r24
    a422:	99 1f       	adc	r25, r25
    a424:	88 0f       	add	r24, r24
    a426:	99 1f       	adc	r25, r25
    a428:	82 0f       	add	r24, r18
    a42a:	93 1f       	adc	r25, r19
    a42c:	8f 5e       	subi	r24, 0xEF	; 239
    a42e:	9a 4f       	sbci	r25, 0xFA	; 250
    a430:	ba 01       	movw	r22, r20
    a432:	a9 d6       	rcall	.+3410   	; 0xb186 <vListInsertEnd>
    a434:	81 e0       	ldi	r24, 0x01	; 1
    a436:	89 83       	std	Y+1, r24	; 0x01
    a438:	89 81       	ldd	r24, Y+1	; 0x01
    a43a:	0f 90       	pop	r0
    a43c:	0f 90       	pop	r0
    a43e:	0f 90       	pop	r0
    a440:	0f 90       	pop	r0
    a442:	0f 90       	pop	r0
    a444:	df 91       	pop	r29
    a446:	cf 91       	pop	r28
    a448:	08 95       	ret

0000a44a <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    a44a:	cf 93       	push	r28
    a44c:	df 93       	push	r29
    a44e:	cd b7       	in	r28, 0x3d	; 61
    a450:	de b7       	in	r29, 0x3e	; 62
    a452:	27 97       	sbiw	r28, 0x07	; 7
    a454:	0f b6       	in	r0, 0x3f	; 63
    a456:	f8 94       	cli
    a458:	de bf       	out	0x3e, r29	; 62
    a45a:	0f be       	out	0x3f, r0	; 63
    a45c:	cd bf       	out	0x3d, r28	; 61
    a45e:	9e 83       	std	Y+6, r25	; 0x06
    a460:	8d 83       	std	Y+5, r24	; 0x05
    a462:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    a464:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xTickCount>
    a468:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xTickCount+0x1>
    a46c:	9a 83       	std	Y+2, r25	; 0x02
    a46e:	89 83       	std	Y+1, r24	; 0x01
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    a470:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    a474:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    a478:	02 96       	adiw	r24, 0x02	; 2
    a47a:	4b d7       	rcall	.+3734   	; 0xb312 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    a47c:	8d 81       	ldd	r24, Y+5	; 0x05
    a47e:	9e 81       	ldd	r25, Y+6	; 0x06
    a480:	01 96       	adiw	r24, 0x01	; 1
    a482:	69 f4       	brne	.+26     	; 0xa49e <prvAddCurrentTaskToDelayedList+0x54>
    a484:	8f 81       	ldd	r24, Y+7	; 0x07
    a486:	88 23       	and	r24, r24
    a488:	51 f0       	breq	.+20     	; 0xa49e <prvAddCurrentTaskToDelayedList+0x54>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a48a:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    a48e:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    a492:	02 96       	adiw	r24, 0x02	; 2
    a494:	bc 01       	movw	r22, r24
    a496:	8e e5       	ldi	r24, 0x5E	; 94
    a498:	95 e0       	ldi	r25, 0x05	; 5
    a49a:	75 d6       	rcall	.+3306   	; 0xb186 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    a49c:	42 c0       	rjmp	.+132    	; 0xa522 <prvAddCurrentTaskToDelayedList+0xd8>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    a49e:	29 81       	ldd	r18, Y+1	; 0x01
    a4a0:	3a 81       	ldd	r19, Y+2	; 0x02
    a4a2:	8d 81       	ldd	r24, Y+5	; 0x05
    a4a4:	9e 81       	ldd	r25, Y+6	; 0x06
    a4a6:	82 0f       	add	r24, r18
    a4a8:	93 1f       	adc	r25, r19
    a4aa:	9c 83       	std	Y+4, r25	; 0x04
    a4ac:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    a4ae:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    a4b2:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    a4b6:	2b 81       	ldd	r18, Y+3	; 0x03
    a4b8:	3c 81       	ldd	r19, Y+4	; 0x04
    a4ba:	fc 01       	movw	r30, r24
    a4bc:	33 83       	std	Z+3, r19	; 0x03
    a4be:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    a4c0:	2b 81       	ldd	r18, Y+3	; 0x03
    a4c2:	3c 81       	ldd	r19, Y+4	; 0x04
    a4c4:	89 81       	ldd	r24, Y+1	; 0x01
    a4c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a4c8:	28 17       	cp	r18, r24
    a4ca:	39 07       	cpc	r19, r25
    a4cc:	70 f4       	brcc	.+28     	; 0xa4ea <prvAddCurrentTaskToDelayedList+0xa0>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a4ce:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    a4d2:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    a4d6:	9c 01       	movw	r18, r24
    a4d8:	2e 5f       	subi	r18, 0xFE	; 254
    a4da:	3f 4f       	sbci	r19, 0xFF	; 255
    a4dc:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pxOverflowDelayedTaskList>
    a4e0:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    a4e4:	b9 01       	movw	r22, r18
    a4e6:	9d d6       	rcall	.+3386   	; 0xb222 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    a4e8:	1c c0       	rjmp	.+56     	; 0xa522 <prvAddCurrentTaskToDelayedList+0xd8>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a4ea:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxCurrentTCB>
    a4ee:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    a4f2:	9c 01       	movw	r18, r24
    a4f4:	2e 5f       	subi	r18, 0xFE	; 254
    a4f6:	3f 4f       	sbci	r19, 0xFF	; 255
    a4f8:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <pxDelayedTaskList>
    a4fc:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <pxDelayedTaskList+0x1>
    a500:	b9 01       	movw	r22, r18
    a502:	8f d6       	rcall	.+3358   	; 0xb222 <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    a504:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <xNextTaskUnblockTime>
    a508:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <xNextTaskUnblockTime+0x1>
    a50c:	2b 81       	ldd	r18, Y+3	; 0x03
    a50e:	3c 81       	ldd	r19, Y+4	; 0x04
    a510:	28 17       	cp	r18, r24
    a512:	39 07       	cpc	r19, r25
    a514:	30 f4       	brcc	.+12     	; 0xa522 <prvAddCurrentTaskToDelayedList+0xd8>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    a516:	8b 81       	ldd	r24, Y+3	; 0x03
    a518:	9c 81       	ldd	r25, Y+4	; 0x04
    a51a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <xNextTaskUnblockTime+0x1>
    a51e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    a522:	00 00       	nop
    a524:	27 96       	adiw	r28, 0x07	; 7
    a526:	0f b6       	in	r0, 0x3f	; 63
    a528:	f8 94       	cli
    a52a:	de bf       	out	0x3e, r29	; 62
    a52c:	0f be       	out	0x3f, r0	; 63
    a52e:	cd bf       	out	0x3d, r28	; 61
    a530:	df 91       	pop	r29
    a532:	cf 91       	pop	r28
    a534:	08 95       	ret

0000a536 <xTimerCreateTimerTask>:
    a536:	ef 92       	push	r14
    a538:	ff 92       	push	r15
    a53a:	0f 93       	push	r16
    a53c:	cf 93       	push	r28
    a53e:	df 93       	push	r29
    a540:	1f 92       	push	r1
    a542:	cd b7       	in	r28, 0x3d	; 61
    a544:	de b7       	in	r29, 0x3e	; 62
    a546:	19 82       	std	Y+1, r1	; 0x01
    a548:	97 d3       	rcall	.+1838   	; 0xac78 <prvCheckForValidListAndQueue>
    a54a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    a54e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    a552:	89 2b       	or	r24, r25
    a554:	89 f0       	breq	.+34     	; 0xa578 <xTimerCreateTimerTask+0x42>
    a556:	0f 2e       	mov	r0, r31
    a558:	fd e8       	ldi	r31, 0x8D	; 141
    a55a:	ef 2e       	mov	r14, r31
    a55c:	f5 e0       	ldi	r31, 0x05	; 5
    a55e:	ff 2e       	mov	r15, r31
    a560:	f0 2d       	mov	r31, r0
    a562:	03 e0       	ldi	r16, 0x03	; 3
    a564:	20 e0       	ldi	r18, 0x00	; 0
    a566:	30 e0       	ldi	r19, 0x00	; 0
    a568:	45 e5       	ldi	r20, 0x55	; 85
    a56a:	50 e0       	ldi	r21, 0x00	; 0
    a56c:	6c ec       	ldi	r22, 0xCC	; 204
    a56e:	72 e0       	ldi	r23, 0x02	; 2
    a570:	84 ed       	ldi	r24, 0xD4	; 212
    a572:	97 e1       	ldi	r25, 0x17	; 23
    a574:	19 d8       	rcall	.-4046   	; 0x95a8 <xTaskCreate>
    a576:	89 83       	std	Y+1, r24	; 0x01
    a578:	89 81       	ldd	r24, Y+1	; 0x01
    a57a:	0f 90       	pop	r0
    a57c:	df 91       	pop	r29
    a57e:	cf 91       	pop	r28
    a580:	0f 91       	pop	r16
    a582:	ff 90       	pop	r15
    a584:	ef 90       	pop	r14
    a586:	08 95       	ret

0000a588 <xTimerGenericCommand>:
    a588:	0f 93       	push	r16
    a58a:	1f 93       	push	r17
    a58c:	cf 93       	push	r28
    a58e:	df 93       	push	r29
    a590:	cd b7       	in	r28, 0x3d	; 61
    a592:	de b7       	in	r29, 0x3e	; 62
    a594:	2f 97       	sbiw	r28, 0x0f	; 15
    a596:	0f b6       	in	r0, 0x3f	; 63
    a598:	f8 94       	cli
    a59a:	de bf       	out	0x3e, r29	; 62
    a59c:	0f be       	out	0x3f, r0	; 63
    a59e:	cd bf       	out	0x3d, r28	; 61
    a5a0:	98 87       	std	Y+8, r25	; 0x08
    a5a2:	8f 83       	std	Y+7, r24	; 0x07
    a5a4:	69 87       	std	Y+9, r22	; 0x09
    a5a6:	5b 87       	std	Y+11, r21	; 0x0b
    a5a8:	4a 87       	std	Y+10, r20	; 0x0a
    a5aa:	3d 87       	std	Y+13, r19	; 0x0d
    a5ac:	2c 87       	std	Y+12, r18	; 0x0c
    a5ae:	1f 87       	std	Y+15, r17	; 0x0f
    a5b0:	0e 87       	std	Y+14, r16	; 0x0e
    a5b2:	19 82       	std	Y+1, r1	; 0x01
    a5b4:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    a5b8:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    a5bc:	89 2b       	or	r24, r25
    a5be:	c9 f1       	breq	.+114    	; 0xa632 <xTimerGenericCommand+0xaa>
    a5c0:	89 85       	ldd	r24, Y+9	; 0x09
    a5c2:	8a 83       	std	Y+2, r24	; 0x02
    a5c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5c8:	9c 83       	std	Y+4, r25	; 0x04
    a5ca:	8b 83       	std	Y+3, r24	; 0x03
    a5cc:	8f 81       	ldd	r24, Y+7	; 0x07
    a5ce:	98 85       	ldd	r25, Y+8	; 0x08
    a5d0:	9e 83       	std	Y+6, r25	; 0x06
    a5d2:	8d 83       	std	Y+5, r24	; 0x05
    a5d4:	89 85       	ldd	r24, Y+9	; 0x09
    a5d6:	86 30       	cpi	r24, 0x06	; 6
    a5d8:	fc f4       	brge	.+62     	; 0xa618 <xTimerGenericCommand+0x90>
    a5da:	a3 de       	rcall	.-698    	; 0xa322 <xTaskGetSchedulerState>
    a5dc:	82 30       	cpi	r24, 0x02	; 2
    a5de:	71 f4       	brne	.+28     	; 0xa5fc <xTimerGenericCommand+0x74>
    a5e0:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    a5e4:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    a5e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    a5ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    a5ec:	be 01       	movw	r22, r28
    a5ee:	6e 5f       	subi	r22, 0xFE	; 254
    a5f0:	7f 4f       	sbci	r23, 0xFF	; 255
    a5f2:	20 e0       	ldi	r18, 0x00	; 0
    a5f4:	0e 94 e7 5d 	call	0xbbce	; 0xbbce <xQueueGenericSend>
    a5f8:	89 83       	std	Y+1, r24	; 0x01
    a5fa:	1b c0       	rjmp	.+54     	; 0xa632 <xTimerGenericCommand+0xaa>
    a5fc:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    a600:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    a604:	be 01       	movw	r22, r28
    a606:	6e 5f       	subi	r22, 0xFE	; 254
    a608:	7f 4f       	sbci	r23, 0xFF	; 255
    a60a:	20 e0       	ldi	r18, 0x00	; 0
    a60c:	40 e0       	ldi	r20, 0x00	; 0
    a60e:	50 e0       	ldi	r21, 0x00	; 0
    a610:	0e 94 e7 5d 	call	0xbbce	; 0xbbce <xQueueGenericSend>
    a614:	89 83       	std	Y+1, r24	; 0x01
    a616:	0d c0       	rjmp	.+26     	; 0xa632 <xTimerGenericCommand+0xaa>
    a618:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    a61c:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    a620:	4c 85       	ldd	r20, Y+12	; 0x0c
    a622:	5d 85       	ldd	r21, Y+13	; 0x0d
    a624:	be 01       	movw	r22, r28
    a626:	6e 5f       	subi	r22, 0xFE	; 254
    a628:	7f 4f       	sbci	r23, 0xFF	; 255
    a62a:	20 e0       	ldi	r18, 0x00	; 0
    a62c:	0e 94 90 5e 	call	0xbd20	; 0xbd20 <xQueueGenericSendFromISR>
    a630:	89 83       	std	Y+1, r24	; 0x01
    a632:	89 81       	ldd	r24, Y+1	; 0x01
    a634:	2f 96       	adiw	r28, 0x0f	; 15
    a636:	0f b6       	in	r0, 0x3f	; 63
    a638:	f8 94       	cli
    a63a:	de bf       	out	0x3e, r29	; 62
    a63c:	0f be       	out	0x3f, r0	; 63
    a63e:	cd bf       	out	0x3d, r28	; 61
    a640:	df 91       	pop	r29
    a642:	cf 91       	pop	r28
    a644:	1f 91       	pop	r17
    a646:	0f 91       	pop	r16
    a648:	08 95       	ret

0000a64a <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    a64a:	0f 93       	push	r16
    a64c:	1f 93       	push	r17
    a64e:	cf 93       	push	r28
    a650:	df 93       	push	r29
    a652:	cd b7       	in	r28, 0x3d	; 61
    a654:	de b7       	in	r29, 0x3e	; 62
    a656:	27 97       	sbiw	r28, 0x07	; 7
    a658:	0f b6       	in	r0, 0x3f	; 63
    a65a:	f8 94       	cli
    a65c:	de bf       	out	0x3e, r29	; 62
    a65e:	0f be       	out	0x3f, r0	; 63
    a660:	cd bf       	out	0x3d, r28	; 61
    a662:	9d 83       	std	Y+5, r25	; 0x05
    a664:	8c 83       	std	Y+4, r24	; 0x04
    a666:	7f 83       	std	Y+7, r23	; 0x07
    a668:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    a66a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    a66e:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    a672:	fc 01       	movw	r30, r24
    a674:	85 81       	ldd	r24, Z+5	; 0x05
    a676:	96 81       	ldd	r25, Z+6	; 0x06
    a678:	fc 01       	movw	r30, r24
    a67a:	86 81       	ldd	r24, Z+6	; 0x06
    a67c:	97 81       	ldd	r25, Z+7	; 0x07
    a67e:	9a 83       	std	Y+2, r25	; 0x02
    a680:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a682:	89 81       	ldd	r24, Y+1	; 0x01
    a684:	9a 81       	ldd	r25, Y+2	; 0x02
    a686:	02 96       	adiw	r24, 0x02	; 2
    a688:	44 d6       	rcall	.+3208   	; 0xb312 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    a68a:	89 81       	ldd	r24, Y+1	; 0x01
    a68c:	9a 81       	ldd	r25, Y+2	; 0x02
    a68e:	fc 01       	movw	r30, r24
    a690:	82 89       	ldd	r24, Z+18	; 0x12
    a692:	88 2f       	mov	r24, r24
    a694:	90 e0       	ldi	r25, 0x00	; 0
    a696:	84 70       	andi	r24, 0x04	; 4
    a698:	99 27       	eor	r25, r25
    a69a:	89 2b       	or	r24, r25
    a69c:	f9 f0       	breq	.+62     	; 0xa6dc <prvProcessExpiredTimer+0x92>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    a69e:	89 81       	ldd	r24, Y+1	; 0x01
    a6a0:	9a 81       	ldd	r25, Y+2	; 0x02
    a6a2:	fc 01       	movw	r30, r24
    a6a4:	24 85       	ldd	r18, Z+12	; 0x0c
    a6a6:	35 85       	ldd	r19, Z+13	; 0x0d
    a6a8:	8c 81       	ldd	r24, Y+4	; 0x04
    a6aa:	9d 81       	ldd	r25, Y+5	; 0x05
    a6ac:	b9 01       	movw	r22, r18
    a6ae:	68 0f       	add	r22, r24
    a6b0:	79 1f       	adc	r23, r25
    a6b2:	2c 81       	ldd	r18, Y+4	; 0x04
    a6b4:	3d 81       	ldd	r19, Y+5	; 0x05
    a6b6:	4e 81       	ldd	r20, Y+6	; 0x06
    a6b8:	5f 81       	ldd	r21, Y+7	; 0x07
    a6ba:	89 81       	ldd	r24, Y+1	; 0x01
    a6bc:	9a 81       	ldd	r25, Y+2	; 0x02
    a6be:	e1 d0       	rcall	.+450    	; 0xa882 <prvInsertTimerInActiveList>
    a6c0:	88 23       	and	r24, r24
    a6c2:	b1 f0       	breq	.+44     	; 0xa6f0 <prvProcessExpiredTimer+0xa6>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    a6c4:	4c 81       	ldd	r20, Y+4	; 0x04
    a6c6:	5d 81       	ldd	r21, Y+5	; 0x05
    a6c8:	89 81       	ldd	r24, Y+1	; 0x01
    a6ca:	9a 81       	ldd	r25, Y+2	; 0x02
    a6cc:	00 e0       	ldi	r16, 0x00	; 0
    a6ce:	10 e0       	ldi	r17, 0x00	; 0
    a6d0:	20 e0       	ldi	r18, 0x00	; 0
    a6d2:	30 e0       	ldi	r19, 0x00	; 0
    a6d4:	60 e0       	ldi	r22, 0x00	; 0
    a6d6:	58 df       	rcall	.-336    	; 0xa588 <xTimerGenericCommand>
    a6d8:	8b 83       	std	Y+3, r24	; 0x03
    a6da:	0a c0       	rjmp	.+20     	; 0xa6f0 <prvProcessExpiredTimer+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    a6dc:	89 81       	ldd	r24, Y+1	; 0x01
    a6de:	9a 81       	ldd	r25, Y+2	; 0x02
    a6e0:	fc 01       	movw	r30, r24
    a6e2:	82 89       	ldd	r24, Z+18	; 0x12
    a6e4:	28 2f       	mov	r18, r24
    a6e6:	2e 7f       	andi	r18, 0xFE	; 254
    a6e8:	89 81       	ldd	r24, Y+1	; 0x01
    a6ea:	9a 81       	ldd	r25, Y+2	; 0x02
    a6ec:	fc 01       	movw	r30, r24
    a6ee:	22 8b       	std	Z+18, r18	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a6f0:	89 81       	ldd	r24, Y+1	; 0x01
    a6f2:	9a 81       	ldd	r25, Y+2	; 0x02
    a6f4:	fc 01       	movw	r30, r24
    a6f6:	20 89       	ldd	r18, Z+16	; 0x10
    a6f8:	31 89       	ldd	r19, Z+17	; 0x11
    a6fa:	89 81       	ldd	r24, Y+1	; 0x01
    a6fc:	9a 81       	ldd	r25, Y+2	; 0x02
    a6fe:	f9 01       	movw	r30, r18
    a700:	19 95       	eicall
}
    a702:	00 00       	nop
    a704:	27 96       	adiw	r28, 0x07	; 7
    a706:	0f b6       	in	r0, 0x3f	; 63
    a708:	f8 94       	cli
    a70a:	de bf       	out	0x3e, r29	; 62
    a70c:	0f be       	out	0x3f, r0	; 63
    a70e:	cd bf       	out	0x3d, r28	; 61
    a710:	df 91       	pop	r29
    a712:	cf 91       	pop	r28
    a714:	1f 91       	pop	r17
    a716:	0f 91       	pop	r16
    a718:	08 95       	ret

0000a71a <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    a71a:	cf 93       	push	r28
    a71c:	df 93       	push	r29
    a71e:	00 d0       	rcall	.+0      	; 0xa720 <prvProcessTimerOrBlockTask+0x6>
    a720:	00 d0       	rcall	.+0      	; 0xa722 <prvProcessTimerOrBlockTask+0x8>
    a722:	cd b7       	in	r28, 0x3d	; 61
    a724:	de b7       	in	r29, 0x3e	; 62
    a726:	9d 83       	std	Y+5, r25	; 0x05
    a728:	8c 83       	std	Y+4, r24	; 0x04
    a72a:	6e 83       	std	Y+6, r22	; 0x06
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    a72c:	5b d9       	rcall	.-3402   	; 0x99e4 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a72e:	ce 01       	movw	r24, r28
    a730:	03 96       	adiw	r24, 0x03	; 3
    a732:	79 d0       	rcall	.+242    	; 0xa826 <prvSampleTimeNow>
    a734:	9a 83       	std	Y+2, r25	; 0x02
    a736:	89 83       	std	Y+1, r24	; 0x01
        if( xTimerListsWereSwitched == pdFALSE )
    a738:	8b 81       	ldd	r24, Y+3	; 0x03
    a73a:	88 23       	and	r24, r24
    a73c:	a1 f5       	brne	.+104    	; 0xa7a6 <prvProcessTimerOrBlockTask+0x8c>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    a73e:	8e 81       	ldd	r24, Y+6	; 0x06
    a740:	88 23       	and	r24, r24
    a742:	79 f4       	brne	.+30     	; 0xa762 <prvProcessTimerOrBlockTask+0x48>
    a744:	2c 81       	ldd	r18, Y+4	; 0x04
    a746:	3d 81       	ldd	r19, Y+5	; 0x05
    a748:	89 81       	ldd	r24, Y+1	; 0x01
    a74a:	9a 81       	ldd	r25, Y+2	; 0x02
    a74c:	82 17       	cp	r24, r18
    a74e:	93 07       	cpc	r25, r19
            {
                ( void ) xTaskResumeAll();
    a750:	40 f0       	brcs	.+16     	; 0xa762 <prvProcessTimerOrBlockTask+0x48>
    a752:	55 d9       	rcall	.-3414   	; 0x99fe <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    a754:	29 81       	ldd	r18, Y+1	; 0x01
    a756:	3a 81       	ldd	r19, Y+2	; 0x02
    a758:	8c 81       	ldd	r24, Y+4	; 0x04
    a75a:	9d 81       	ldd	r25, Y+5	; 0x05
    a75c:	b9 01       	movw	r22, r18
    a75e:	75 df       	rcall	.-278    	; 0xa64a <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    a760:	23 c0       	rjmp	.+70     	; 0xa7a8 <prvProcessTimerOrBlockTask+0x8e>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    a762:	8e 81       	ldd	r24, Y+6	; 0x06
    a764:	88 23       	and	r24, r24
    a766:	59 f0       	breq	.+22     	; 0xa77e <prvProcessTimerOrBlockTask+0x64>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    a768:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <pxOverflowTimerList>
    a76c:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <pxOverflowTimerList+0x1>
    a770:	fc 01       	movw	r30, r24
    a772:	90 81       	ld	r25, Z
    a774:	81 e0       	ldi	r24, 0x01	; 1
    a776:	99 23       	and	r25, r25
    a778:	09 f0       	breq	.+2      	; 0xa77c <prvProcessTimerOrBlockTask+0x62>
    a77a:	80 e0       	ldi	r24, 0x00	; 0
    a77c:	8e 83       	std	Y+6, r24	; 0x06
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    a77e:	2c 81       	ldd	r18, Y+4	; 0x04
    a780:	3d 81       	ldd	r19, Y+5	; 0x05
    a782:	89 81       	ldd	r24, Y+1	; 0x01
    a784:	9a 81       	ldd	r25, Y+2	; 0x02
    a786:	28 1b       	sub	r18, r24
    a788:	39 0b       	sbc	r19, r25
    a78a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    a78e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    a792:	4e 81       	ldd	r20, Y+6	; 0x06
    a794:	b9 01       	movw	r22, r18
    a796:	0e 94 51 61 	call	0xc2a2	; 0xc2a2 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    a79a:	31 d9       	rcall	.-3486   	; 0x99fe <xTaskResumeAll>
    a79c:	88 23       	and	r24, r24
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    a79e:	21 f4       	brne	.+8      	; 0xa7a8 <prvProcessTimerOrBlockTask+0x8e>
    a7a0:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    a7a4:	01 c0       	rjmp	.+2      	; 0xa7a8 <prvProcessTimerOrBlockTask+0x8e>
    a7a6:	2b d9       	rcall	.-3498   	; 0x99fe <xTaskResumeAll>
        }
    }
}
    a7a8:	00 00       	nop
    a7aa:	26 96       	adiw	r28, 0x06	; 6
    a7ac:	0f b6       	in	r0, 0x3f	; 63
    a7ae:	f8 94       	cli
    a7b0:	de bf       	out	0x3e, r29	; 62
    a7b2:	0f be       	out	0x3f, r0	; 63
    a7b4:	cd bf       	out	0x3d, r28	; 61
    a7b6:	df 91       	pop	r29
    a7b8:	cf 91       	pop	r28
    a7ba:	08 95       	ret

0000a7bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    a7bc:	cf 93       	push	r28
    a7be:	df 93       	push	r29
    a7c0:	00 d0       	rcall	.+0      	; 0xa7c2 <prvGetNextExpireTime+0x6>
    a7c2:	1f 92       	push	r1
    a7c4:	cd b7       	in	r28, 0x3d	; 61
    a7c6:	de b7       	in	r29, 0x3e	; 62
    a7c8:	9c 83       	std	Y+4, r25	; 0x04
    a7ca:	8b 83       	std	Y+3, r24	; 0x03
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    a7cc:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    a7d0:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	90 81       	ld	r25, Z
    a7d8:	81 e0       	ldi	r24, 0x01	; 1
    a7da:	99 23       	and	r25, r25
    a7dc:	09 f0       	breq	.+2      	; 0xa7e0 <prvGetNextExpireTime+0x24>
    a7de:	80 e0       	ldi	r24, 0x00	; 0
    a7e0:	28 2f       	mov	r18, r24
    a7e2:	8b 81       	ldd	r24, Y+3	; 0x03
    a7e4:	9c 81       	ldd	r25, Y+4	; 0x04
    a7e6:	fc 01       	movw	r30, r24
    a7e8:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    a7ea:	8b 81       	ldd	r24, Y+3	; 0x03
    a7ec:	9c 81       	ldd	r25, Y+4	; 0x04
    a7ee:	fc 01       	movw	r30, r24
    a7f0:	80 81       	ld	r24, Z
    a7f2:	88 23       	and	r24, r24
    a7f4:	69 f4       	brne	.+26     	; 0xa810 <prvGetNextExpireTime+0x54>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    a7f6:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    a7fa:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    a7fe:	fc 01       	movw	r30, r24
    a800:	85 81       	ldd	r24, Z+5	; 0x05
    a802:	96 81       	ldd	r25, Z+6	; 0x06
    a804:	fc 01       	movw	r30, r24
    a806:	80 81       	ld	r24, Z
    a808:	91 81       	ldd	r25, Z+1	; 0x01
    a80a:	9a 83       	std	Y+2, r25	; 0x02
    a80c:	89 83       	std	Y+1, r24	; 0x01
    a80e:	02 c0       	rjmp	.+4      	; 0xa814 <prvGetNextExpireTime+0x58>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    a810:	1a 82       	std	Y+2, r1	; 0x02
    a812:	19 82       	std	Y+1, r1	; 0x01
    }

    return xNextExpireTime;
    a814:	89 81       	ldd	r24, Y+1	; 0x01
    a816:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a818:	0f 90       	pop	r0
    a81a:	0f 90       	pop	r0
    a81c:	0f 90       	pop	r0
    a81e:	0f 90       	pop	r0
    a820:	df 91       	pop	r29
    a822:	cf 91       	pop	r28
    a824:	08 95       	ret

0000a826 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    a826:	cf 93       	push	r28
    a828:	df 93       	push	r29
    a82a:	00 d0       	rcall	.+0      	; 0xa82c <prvSampleTimeNow+0x6>
    a82c:	1f 92       	push	r1
    a82e:	cd b7       	in	r28, 0x3d	; 61
    a830:	de b7       	in	r29, 0x3e	; 62
    a832:	9c 83       	std	Y+4, r25	; 0x04
    a834:	8b 83       	std	Y+3, r24	; 0x03
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    a836:	78 d9       	rcall	.-3344   	; 0x9b28 <xTaskGetTickCount>
    a838:	9a 83       	std	Y+2, r25	; 0x02
    a83a:	89 83       	std	Y+1, r24	; 0x01

    if( xTimeNow < xLastTime )
    a83c:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <xLastTime.2412>
    a840:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <xLastTime.2412+0x1>
    a844:	29 81       	ldd	r18, Y+1	; 0x01
    a846:	3a 81       	ldd	r19, Y+2	; 0x02
    a848:	28 17       	cp	r18, r24
    a84a:	39 07       	cpc	r19, r25
    {
        prvSwitchTimerLists();
    a84c:	38 f4       	brcc	.+14     	; 0xa85c <prvSampleTimeNow+0x36>
    a84e:	78 d1       	rcall	.+752    	; 0xab40 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    a850:	8b 81       	ldd	r24, Y+3	; 0x03
    a852:	9c 81       	ldd	r25, Y+4	; 0x04
    a854:	21 e0       	ldi	r18, 0x01	; 1
    a856:	fc 01       	movw	r30, r24
    a858:	20 83       	st	Z, r18
    a85a:	04 c0       	rjmp	.+8      	; 0xa864 <prvSampleTimeNow+0x3e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    a85c:	8b 81       	ldd	r24, Y+3	; 0x03
    a85e:	9c 81       	ldd	r25, Y+4	; 0x04
    a860:	fc 01       	movw	r30, r24
    a862:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    a864:	89 81       	ldd	r24, Y+1	; 0x01
    a866:	9a 81       	ldd	r25, Y+2	; 0x02
    a868:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <xLastTime.2412+0x1>
    a86c:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <xLastTime.2412>

    return xTimeNow;
    a870:	89 81       	ldd	r24, Y+1	; 0x01
    a872:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a874:	0f 90       	pop	r0
    a876:	0f 90       	pop	r0
    a878:	0f 90       	pop	r0
    a87a:	0f 90       	pop	r0
    a87c:	df 91       	pop	r29
    a87e:	cf 91       	pop	r28
    a880:	08 95       	ret

0000a882 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    a882:	cf 93       	push	r28
    a884:	df 93       	push	r29
    a886:	cd b7       	in	r28, 0x3d	; 61
    a888:	de b7       	in	r29, 0x3e	; 62
    a88a:	29 97       	sbiw	r28, 0x09	; 9
    a88c:	0f b6       	in	r0, 0x3f	; 63
    a88e:	f8 94       	cli
    a890:	de bf       	out	0x3e, r29	; 62
    a892:	0f be       	out	0x3f, r0	; 63
    a894:	cd bf       	out	0x3d, r28	; 61
    a896:	9b 83       	std	Y+3, r25	; 0x03
    a898:	8a 83       	std	Y+2, r24	; 0x02
    a89a:	7d 83       	std	Y+5, r23	; 0x05
    a89c:	6c 83       	std	Y+4, r22	; 0x04
    a89e:	5f 83       	std	Y+7, r21	; 0x07
    a8a0:	4e 83       	std	Y+6, r20	; 0x06
    a8a2:	39 87       	std	Y+9, r19	; 0x09
    a8a4:	28 87       	std	Y+8, r18	; 0x08
BaseType_t xProcessTimerNow = pdFALSE;
    a8a6:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    a8a8:	8a 81       	ldd	r24, Y+2	; 0x02
    a8aa:	9b 81       	ldd	r25, Y+3	; 0x03
    a8ac:	2c 81       	ldd	r18, Y+4	; 0x04
    a8ae:	3d 81       	ldd	r19, Y+5	; 0x05
    a8b0:	fc 01       	movw	r30, r24
    a8b2:	33 83       	std	Z+3, r19	; 0x03
    a8b4:	22 83       	std	Z+2, r18	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    a8b6:	8a 81       	ldd	r24, Y+2	; 0x02
    a8b8:	9b 81       	ldd	r25, Y+3	; 0x03
    a8ba:	2a 81       	ldd	r18, Y+2	; 0x02
    a8bc:	3b 81       	ldd	r19, Y+3	; 0x03
    a8be:	fc 01       	movw	r30, r24
    a8c0:	31 87       	std	Z+9, r19	; 0x09
    a8c2:	20 87       	std	Z+8, r18	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    a8c4:	2c 81       	ldd	r18, Y+4	; 0x04
    a8c6:	3d 81       	ldd	r19, Y+5	; 0x05
    a8c8:	8e 81       	ldd	r24, Y+6	; 0x06
    a8ca:	9f 81       	ldd	r25, Y+7	; 0x07
    a8cc:	82 17       	cp	r24, r18
    a8ce:	93 07       	cpc	r25, r19
    a8d0:	e8 f0       	brcs	.+58     	; 0xa90c <prvInsertTimerInActiveList+0x8a>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a8d2:	2e 81       	ldd	r18, Y+6	; 0x06
    a8d4:	3f 81       	ldd	r19, Y+7	; 0x07
    a8d6:	88 85       	ldd	r24, Y+8	; 0x08
    a8d8:	99 85       	ldd	r25, Y+9	; 0x09
    a8da:	28 1b       	sub	r18, r24
    a8dc:	39 0b       	sbc	r19, r25
    a8de:	8a 81       	ldd	r24, Y+2	; 0x02
    a8e0:	9b 81       	ldd	r25, Y+3	; 0x03
    a8e2:	fc 01       	movw	r30, r24
    a8e4:	84 85       	ldd	r24, Z+12	; 0x0c
    a8e6:	95 85       	ldd	r25, Z+13	; 0x0d
    a8e8:	28 17       	cp	r18, r24
    a8ea:	39 07       	cpc	r19, r25
    a8ec:	18 f0       	brcs	.+6      	; 0xa8f4 <prvInsertTimerInActiveList+0x72>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    a8ee:	81 e0       	ldi	r24, 0x01	; 1
    a8f0:	89 83       	std	Y+1, r24	; 0x01
    a8f2:	28 c0       	rjmp	.+80     	; 0xa944 <prvInsertTimerInActiveList+0xc2>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    a8f4:	8a 81       	ldd	r24, Y+2	; 0x02
    a8f6:	9b 81       	ldd	r25, Y+3	; 0x03
    a8f8:	9c 01       	movw	r18, r24
    a8fa:	2e 5f       	subi	r18, 0xFE	; 254
    a8fc:	3f 4f       	sbci	r19, 0xFF	; 255
    a8fe:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <pxOverflowTimerList>
    a902:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <pxOverflowTimerList+0x1>
    a906:	b9 01       	movw	r22, r18
    a908:	8c d4       	rcall	.+2328   	; 0xb222 <vListInsert>
    a90a:	1c c0       	rjmp	.+56     	; 0xa944 <prvInsertTimerInActiveList+0xc2>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    a90c:	2e 81       	ldd	r18, Y+6	; 0x06
    a90e:	3f 81       	ldd	r19, Y+7	; 0x07
    a910:	88 85       	ldd	r24, Y+8	; 0x08
    a912:	99 85       	ldd	r25, Y+9	; 0x09
    a914:	28 17       	cp	r18, r24
    a916:	39 07       	cpc	r19, r25
    a918:	50 f4       	brcc	.+20     	; 0xa92e <prvInsertTimerInActiveList+0xac>
    a91a:	2c 81       	ldd	r18, Y+4	; 0x04
    a91c:	3d 81       	ldd	r19, Y+5	; 0x05
    a91e:	88 85       	ldd	r24, Y+8	; 0x08
    a920:	99 85       	ldd	r25, Y+9	; 0x09
    a922:	28 17       	cp	r18, r24
    a924:	39 07       	cpc	r19, r25
    a926:	18 f0       	brcs	.+6      	; 0xa92e <prvInsertTimerInActiveList+0xac>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    a928:	81 e0       	ldi	r24, 0x01	; 1
    a92a:	89 83       	std	Y+1, r24	; 0x01
    a92c:	0b c0       	rjmp	.+22     	; 0xa944 <prvInsertTimerInActiveList+0xc2>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    a92e:	8a 81       	ldd	r24, Y+2	; 0x02
    a930:	9b 81       	ldd	r25, Y+3	; 0x03
    a932:	9c 01       	movw	r18, r24
    a934:	2e 5f       	subi	r18, 0xFE	; 254
    a936:	3f 4f       	sbci	r19, 0xFF	; 255
    a938:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    a93c:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    a940:	b9 01       	movw	r22, r18
    a942:	6f d4       	rcall	.+2270   	; 0xb222 <vListInsert>
        }
    }

    return xProcessTimerNow;
    a944:	89 81       	ldd	r24, Y+1	; 0x01
}
    a946:	29 96       	adiw	r28, 0x09	; 9
    a948:	0f b6       	in	r0, 0x3f	; 63
    a94a:	f8 94       	cli
    a94c:	de bf       	out	0x3e, r29	; 62
    a94e:	0f be       	out	0x3f, r0	; 63
    a950:	cd bf       	out	0x3d, r28	; 61
    a952:	df 91       	pop	r29
    a954:	cf 91       	pop	r28
    a956:	08 95       	ret

0000a958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    a958:	0f 93       	push	r16
    a95a:	1f 93       	push	r17
    a95c:	cf 93       	push	r28
    a95e:	df 93       	push	r29
    a960:	cd b7       	in	r28, 0x3d	; 61
    a962:	de b7       	in	r29, 0x3e	; 62
    a964:	2b 97       	sbiw	r28, 0x0b	; 11
    a966:	0f b6       	in	r0, 0x3f	; 63
    a968:	f8 94       	cli
    a96a:	de bf       	out	0x3e, r29	; 62
    a96c:	0f be       	out	0x3f, r0	; 63
    a96e:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    a970:	cc c0       	rjmp	.+408    	; 0xab0a <prvProcessReceivedCommands+0x1b2>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    a972:	8e 81       	ldd	r24, Y+6	; 0x06
    a974:	88 23       	and	r24, r24
    a976:	0c f4       	brge	.+2      	; 0xa97a <prvProcessReceivedCommands+0x22>
    a978:	c8 c0       	rjmp	.+400    	; 0xab0a <prvProcessReceivedCommands+0x1b2>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    a97a:	89 85       	ldd	r24, Y+9	; 0x09
    a97c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a97e:	9a 83       	std	Y+2, r25	; 0x02
    a980:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    a982:	89 81       	ldd	r24, Y+1	; 0x01
    a984:	9a 81       	ldd	r25, Y+2	; 0x02
    a986:	dc 01       	movw	r26, r24
    a988:	1a 96       	adiw	r26, 0x0a	; 10
    a98a:	8d 91       	ld	r24, X+
    a98c:	9c 91       	ld	r25, X
    a98e:	1b 97       	sbiw	r26, 0x0b	; 11
    a990:	89 2b       	or	r24, r25
    a992:	21 f0       	breq	.+8      	; 0xa99c <prvProcessReceivedCommands+0x44>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a994:	89 81       	ldd	r24, Y+1	; 0x01
    a996:	9a 81       	ldd	r25, Y+2	; 0x02
    a998:	02 96       	adiw	r24, 0x02	; 2
    a99a:	bb d4       	rcall	.+2422   	; 0xb312 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a99c:	ce 01       	movw	r24, r28
    a99e:	0b 96       	adiw	r24, 0x0b	; 11
    a9a0:	42 df       	rcall	.-380    	; 0xa826 <prvSampleTimeNow>
    a9a2:	9c 83       	std	Y+4, r25	; 0x04
    a9a4:	8b 83       	std	Y+3, r24	; 0x03

            switch( xMessage.xMessageID )
    a9a6:	8e 81       	ldd	r24, Y+6	; 0x06
    a9a8:	08 2e       	mov	r0, r24
    a9aa:	00 0c       	add	r0, r0
    a9ac:	99 0b       	sbc	r25, r25
    a9ae:	09 2e       	mov	r0, r25
    a9b0:	00 0c       	add	r0, r0
    a9b2:	aa 0b       	sbc	r26, r26
    a9b4:	bb 0b       	sbc	r27, r27
    a9b6:	40 e0       	ldi	r20, 0x00	; 0
    a9b8:	50 e0       	ldi	r21, 0x00	; 0
    a9ba:	29 e0       	ldi	r18, 0x09	; 9
    a9bc:	30 e0       	ldi	r19, 0x00	; 0
    a9be:	84 1b       	sub	r24, r20
    a9c0:	95 0b       	sbc	r25, r21
    a9c2:	28 17       	cp	r18, r24
    a9c4:	39 07       	cpc	r19, r25
    a9c6:	08 f4       	brcc	.+2      	; 0xa9ca <prvProcessReceivedCommands+0x72>
    a9c8:	9f c0       	rjmp	.+318    	; 0xab08 <prvProcessReceivedCommands+0x1b0>
    a9ca:	fc 01       	movw	r30, r24
    a9cc:	88 27       	eor	r24, r24
    a9ce:	e4 57       	subi	r30, 0x74	; 116
    a9d0:	ff 4f       	sbci	r31, 0xFF	; 255
    a9d2:	8f 4f       	sbci	r24, 0xFF	; 255
    a9d4:	0c 94 ef 61 	jmp	0xc3de	; 0xc3de <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    a9d8:	89 81       	ldd	r24, Y+1	; 0x01
    a9da:	9a 81       	ldd	r25, Y+2	; 0x02
    a9dc:	fc 01       	movw	r30, r24
    a9de:	82 89       	ldd	r24, Z+18	; 0x12
    a9e0:	28 2f       	mov	r18, r24
    a9e2:	21 60       	ori	r18, 0x01	; 1
    a9e4:	89 81       	ldd	r24, Y+1	; 0x01
    a9e6:	9a 81       	ldd	r25, Y+2	; 0x02
    a9e8:	dc 01       	movw	r26, r24
    a9ea:	52 96       	adiw	r26, 0x12	; 18
    a9ec:	2c 93       	st	X, r18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    a9ee:	ef 81       	ldd	r30, Y+7	; 0x07
    a9f0:	f8 85       	ldd	r31, Y+8	; 0x08
    a9f2:	2f 81       	ldd	r18, Y+7	; 0x07
    a9f4:	38 85       	ldd	r19, Y+8	; 0x08
    a9f6:	89 81       	ldd	r24, Y+1	; 0x01
    a9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a9fa:	dc 01       	movw	r26, r24
    a9fc:	1c 96       	adiw	r26, 0x0c	; 12
    a9fe:	8d 91       	ld	r24, X+
    aa00:	9c 91       	ld	r25, X
    aa02:	1d 97       	sbiw	r26, 0x0d	; 13
    aa04:	b9 01       	movw	r22, r18
    aa06:	68 0f       	add	r22, r24
    aa08:	79 1f       	adc	r23, r25
    aa0a:	4b 81       	ldd	r20, Y+3	; 0x03
    aa0c:	5c 81       	ldd	r21, Y+4	; 0x04
    aa0e:	89 81       	ldd	r24, Y+1	; 0x01
    aa10:	9a 81       	ldd	r25, Y+2	; 0x02
    aa12:	9f 01       	movw	r18, r30
    aa14:	36 df       	rcall	.-404    	; 0xa882 <prvInsertTimerInActiveList>
    aa16:	88 23       	and	r24, r24
    aa18:	09 f4       	brne	.+2      	; 0xaa1c <prvProcessReceivedCommands+0xc4>
    aa1a:	77 c0       	rjmp	.+238    	; 0xab0a <prvProcessReceivedCommands+0x1b2>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    aa1c:	89 81       	ldd	r24, Y+1	; 0x01
    aa1e:	9a 81       	ldd	r25, Y+2	; 0x02
    aa20:	fc 01       	movw	r30, r24
    aa22:	20 89       	ldd	r18, Z+16	; 0x10
    aa24:	31 89       	ldd	r19, Z+17	; 0x11
    aa26:	89 81       	ldd	r24, Y+1	; 0x01
    aa28:	9a 81       	ldd	r25, Y+2	; 0x02
    aa2a:	f9 01       	movw	r30, r18
    aa2c:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    aa2e:	89 81       	ldd	r24, Y+1	; 0x01
    aa30:	9a 81       	ldd	r25, Y+2	; 0x02
    aa32:	dc 01       	movw	r26, r24
    aa34:	52 96       	adiw	r26, 0x12	; 18
    aa36:	8c 91       	ld	r24, X
    aa38:	88 2f       	mov	r24, r24
    aa3a:	90 e0       	ldi	r25, 0x00	; 0
    aa3c:	84 70       	andi	r24, 0x04	; 4
    aa3e:	99 27       	eor	r25, r25
    aa40:	89 2b       	or	r24, r25
    aa42:	09 f4       	brne	.+2      	; 0xaa46 <prvProcessReceivedCommands+0xee>
    aa44:	62 c0       	rjmp	.+196    	; 0xab0a <prvProcessReceivedCommands+0x1b2>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    aa46:	2f 81       	ldd	r18, Y+7	; 0x07
    aa48:	38 85       	ldd	r19, Y+8	; 0x08
    aa4a:	89 81       	ldd	r24, Y+1	; 0x01
    aa4c:	9a 81       	ldd	r25, Y+2	; 0x02
    aa4e:	fc 01       	movw	r30, r24
    aa50:	84 85       	ldd	r24, Z+12	; 0x0c
    aa52:	95 85       	ldd	r25, Z+13	; 0x0d
    aa54:	a9 01       	movw	r20, r18
    aa56:	48 0f       	add	r20, r24
    aa58:	59 1f       	adc	r21, r25
    aa5a:	89 81       	ldd	r24, Y+1	; 0x01
    aa5c:	9a 81       	ldd	r25, Y+2	; 0x02
    aa5e:	00 e0       	ldi	r16, 0x00	; 0
    aa60:	10 e0       	ldi	r17, 0x00	; 0
    aa62:	20 e0       	ldi	r18, 0x00	; 0
    aa64:	30 e0       	ldi	r19, 0x00	; 0
    aa66:	60 e0       	ldi	r22, 0x00	; 0
    aa68:	8f dd       	rcall	.-1250   	; 0xa588 <xTimerGenericCommand>
    aa6a:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    aa6c:	4e c0       	rjmp	.+156    	; 0xab0a <prvProcessReceivedCommands+0x1b2>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    aa6e:	89 81       	ldd	r24, Y+1	; 0x01
    aa70:	9a 81       	ldd	r25, Y+2	; 0x02
    aa72:	dc 01       	movw	r26, r24
    aa74:	52 96       	adiw	r26, 0x12	; 18
    aa76:	8c 91       	ld	r24, X
    aa78:	28 2f       	mov	r18, r24
    aa7a:	2e 7f       	andi	r18, 0xFE	; 254
    aa7c:	89 81       	ldd	r24, Y+1	; 0x01
    aa7e:	9a 81       	ldd	r25, Y+2	; 0x02
    aa80:	fc 01       	movw	r30, r24
    aa82:	22 8b       	std	Z+18, r18	; 0x12
                    break;
    aa84:	42 c0       	rjmp	.+132    	; 0xab0a <prvProcessReceivedCommands+0x1b2>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    aa86:	89 81       	ldd	r24, Y+1	; 0x01
    aa88:	9a 81       	ldd	r25, Y+2	; 0x02
    aa8a:	dc 01       	movw	r26, r24
    aa8c:	52 96       	adiw	r26, 0x12	; 18
    aa8e:	8c 91       	ld	r24, X
    aa90:	28 2f       	mov	r18, r24
    aa92:	21 60       	ori	r18, 0x01	; 1
    aa94:	89 81       	ldd	r24, Y+1	; 0x01
    aa96:	9a 81       	ldd	r25, Y+2	; 0x02
    aa98:	fc 01       	movw	r30, r24
    aa9a:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    aa9c:	2f 81       	ldd	r18, Y+7	; 0x07
    aa9e:	38 85       	ldd	r19, Y+8	; 0x08
    aaa0:	89 81       	ldd	r24, Y+1	; 0x01
    aaa2:	9a 81       	ldd	r25, Y+2	; 0x02
    aaa4:	dc 01       	movw	r26, r24
    aaa6:	1d 96       	adiw	r26, 0x0d	; 13
    aaa8:	3c 93       	st	X, r19
    aaaa:	2e 93       	st	-X, r18
    aaac:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    aaae:	89 81       	ldd	r24, Y+1	; 0x01
    aab0:	9a 81       	ldd	r25, Y+2	; 0x02
    aab2:	fc 01       	movw	r30, r24
    aab4:	24 85       	ldd	r18, Z+12	; 0x0c
    aab6:	35 85       	ldd	r19, Z+13	; 0x0d
    aab8:	8b 81       	ldd	r24, Y+3	; 0x03
    aaba:	9c 81       	ldd	r25, Y+4	; 0x04
    aabc:	b9 01       	movw	r22, r18
    aabe:	68 0f       	add	r22, r24
    aac0:	79 1f       	adc	r23, r25
    aac2:	2b 81       	ldd	r18, Y+3	; 0x03
    aac4:	3c 81       	ldd	r19, Y+4	; 0x04
    aac6:	4b 81       	ldd	r20, Y+3	; 0x03
    aac8:	5c 81       	ldd	r21, Y+4	; 0x04
    aaca:	89 81       	ldd	r24, Y+1	; 0x01
    aacc:	9a 81       	ldd	r25, Y+2	; 0x02
    aace:	d9 de       	rcall	.-590    	; 0xa882 <prvInsertTimerInActiveList>
                    break;
    aad0:	1c c0       	rjmp	.+56     	; 0xab0a <prvProcessReceivedCommands+0x1b2>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    aad2:	89 81       	ldd	r24, Y+1	; 0x01
    aad4:	9a 81       	ldd	r25, Y+2	; 0x02
    aad6:	dc 01       	movw	r26, r24
    aad8:	52 96       	adiw	r26, 0x12	; 18
    aada:	8c 91       	ld	r24, X
    aadc:	88 2f       	mov	r24, r24
    aade:	90 e0       	ldi	r25, 0x00	; 0
    aae0:	82 70       	andi	r24, 0x02	; 2
    aae2:	99 27       	eor	r25, r25
    aae4:	89 2b       	or	r24, r25
                        {
                            vPortFree( pxTimer );
    aae6:	21 f4       	brne	.+8      	; 0xaaf0 <prvProcessReceivedCommands+0x198>
    aae8:	89 81       	ldd	r24, Y+1	; 0x01
    aaea:	9a 81       	ldd	r25, Y+2	; 0x02
    aaec:	e8 d2       	rcall	.+1488   	; 0xb0be <vPortFree>
    aaee:	0d c0       	rjmp	.+26     	; 0xab0a <prvProcessReceivedCommands+0x1b2>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    aaf0:	89 81       	ldd	r24, Y+1	; 0x01
    aaf2:	9a 81       	ldd	r25, Y+2	; 0x02
    aaf4:	fc 01       	movw	r30, r24
    aaf6:	82 89       	ldd	r24, Z+18	; 0x12
    aaf8:	28 2f       	mov	r18, r24
    aafa:	2e 7f       	andi	r18, 0xFE	; 254
    aafc:	89 81       	ldd	r24, Y+1	; 0x01
    aafe:	9a 81       	ldd	r25, Y+2	; 0x02
    ab00:	dc 01       	movw	r26, r24
    ab02:	52 96       	adiw	r26, 0x12	; 18
    ab04:	2c 93       	st	X, r18
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    ab06:	01 c0       	rjmp	.+2      	; 0xab0a <prvProcessReceivedCommands+0x1b2>

                default    :
                    /* Don't expect to get here. */
                    break;
    ab08:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    ab0a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    ab0e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    ab12:	9e 01       	movw	r18, r28
    ab14:	2a 5f       	subi	r18, 0xFA	; 250
    ab16:	3f 4f       	sbci	r19, 0xFF	; 255
    ab18:	40 e0       	ldi	r20, 0x00	; 0
    ab1a:	50 e0       	ldi	r21, 0x00	; 0
    ab1c:	b9 01       	movw	r22, r18
    ab1e:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <xQueueReceive>
    ab22:	88 23       	and	r24, r24
    ab24:	09 f0       	breq	.+2      	; 0xab28 <prvProcessReceivedCommands+0x1d0>
    ab26:	25 cf       	rjmp	.-438    	; 0xa972 <prvProcessReceivedCommands+0x1a>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    ab28:	00 00       	nop
    ab2a:	2b 96       	adiw	r28, 0x0b	; 11
    ab2c:	0f b6       	in	r0, 0x3f	; 63
    ab2e:	f8 94       	cli
    ab30:	de bf       	out	0x3e, r29	; 62
    ab32:	0f be       	out	0x3f, r0	; 63
    ab34:	cd bf       	out	0x3d, r28	; 61
    ab36:	df 91       	pop	r29
    ab38:	cf 91       	pop	r28
    ab3a:	1f 91       	pop	r17
    ab3c:	0f 91       	pop	r16
    ab3e:	08 95       	ret

0000ab40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    ab40:	0f 93       	push	r16
    ab42:	1f 93       	push	r17
    ab44:	cf 93       	push	r28
    ab46:	df 93       	push	r29
    ab48:	cd b7       	in	r28, 0x3d	; 61
    ab4a:	de b7       	in	r29, 0x3e	; 62
    ab4c:	29 97       	sbiw	r28, 0x09	; 9
    ab4e:	0f b6       	in	r0, 0x3f	; 63
    ab50:	f8 94       	cli
    ab52:	de bf       	out	0x3e, r29	; 62
    ab54:	0f be       	out	0x3f, r0	; 63
    ab56:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    ab58:	66 c0       	rjmp	.+204    	; 0xac26 <prvSwitchTimerLists+0xe6>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    ab5a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    ab5e:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    ab62:	fc 01       	movw	r30, r24
    ab64:	85 81       	ldd	r24, Z+5	; 0x05
    ab66:	96 81       	ldd	r25, Z+6	; 0x06
    ab68:	fc 01       	movw	r30, r24
    ab6a:	80 81       	ld	r24, Z
    ab6c:	91 81       	ldd	r25, Z+1	; 0x01
    ab6e:	9a 83       	std	Y+2, r25	; 0x02
    ab70:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    ab72:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    ab76:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    ab7a:	fc 01       	movw	r30, r24
    ab7c:	85 81       	ldd	r24, Z+5	; 0x05
    ab7e:	96 81       	ldd	r25, Z+6	; 0x06
    ab80:	fc 01       	movw	r30, r24
    ab82:	86 81       	ldd	r24, Z+6	; 0x06
    ab84:	97 81       	ldd	r25, Z+7	; 0x07
    ab86:	9c 83       	std	Y+4, r25	; 0x04
    ab88:	8b 83       	std	Y+3, r24	; 0x03
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ab8a:	8b 81       	ldd	r24, Y+3	; 0x03
    ab8c:	9c 81       	ldd	r25, Y+4	; 0x04
    ab8e:	02 96       	adiw	r24, 0x02	; 2
    ab90:	c0 d3       	rcall	.+1920   	; 0xb312 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ab92:	8b 81       	ldd	r24, Y+3	; 0x03
    ab94:	9c 81       	ldd	r25, Y+4	; 0x04
    ab96:	fc 01       	movw	r30, r24
    ab98:	20 89       	ldd	r18, Z+16	; 0x10
    ab9a:	31 89       	ldd	r19, Z+17	; 0x11
    ab9c:	8b 81       	ldd	r24, Y+3	; 0x03
    ab9e:	9c 81       	ldd	r25, Y+4	; 0x04
    aba0:	f9 01       	movw	r30, r18
    aba2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    aba4:	8b 81       	ldd	r24, Y+3	; 0x03
    aba6:	9c 81       	ldd	r25, Y+4	; 0x04
    aba8:	fc 01       	movw	r30, r24
    abaa:	82 89       	ldd	r24, Z+18	; 0x12
    abac:	88 2f       	mov	r24, r24
    abae:	90 e0       	ldi	r25, 0x00	; 0
    abb0:	84 70       	andi	r24, 0x04	; 4
    abb2:	99 27       	eor	r25, r25
    abb4:	89 2b       	or	r24, r25
    abb6:	b9 f1       	breq	.+110    	; 0xac26 <prvSwitchTimerLists+0xe6>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    abb8:	8b 81       	ldd	r24, Y+3	; 0x03
    abba:	9c 81       	ldd	r25, Y+4	; 0x04
    abbc:	fc 01       	movw	r30, r24
    abbe:	24 85       	ldd	r18, Z+12	; 0x0c
    abc0:	35 85       	ldd	r19, Z+13	; 0x0d
    abc2:	89 81       	ldd	r24, Y+1	; 0x01
    abc4:	9a 81       	ldd	r25, Y+2	; 0x02
    abc6:	82 0f       	add	r24, r18
    abc8:	93 1f       	adc	r25, r19
    abca:	9e 83       	std	Y+6, r25	; 0x06
    abcc:	8d 83       	std	Y+5, r24	; 0x05
            if( xReloadTime > xNextExpireTime )
    abce:	2d 81       	ldd	r18, Y+5	; 0x05
    abd0:	3e 81       	ldd	r19, Y+6	; 0x06
    abd2:	89 81       	ldd	r24, Y+1	; 0x01
    abd4:	9a 81       	ldd	r25, Y+2	; 0x02
    abd6:	82 17       	cp	r24, r18
    abd8:	93 07       	cpc	r25, r19
    abda:	d0 f4       	brcc	.+52     	; 0xac10 <prvSwitchTimerLists+0xd0>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    abdc:	8b 81       	ldd	r24, Y+3	; 0x03
    abde:	9c 81       	ldd	r25, Y+4	; 0x04
    abe0:	2d 81       	ldd	r18, Y+5	; 0x05
    abe2:	3e 81       	ldd	r19, Y+6	; 0x06
    abe4:	fc 01       	movw	r30, r24
    abe6:	33 83       	std	Z+3, r19	; 0x03
    abe8:	22 83       	std	Z+2, r18	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    abea:	8b 81       	ldd	r24, Y+3	; 0x03
    abec:	9c 81       	ldd	r25, Y+4	; 0x04
    abee:	2b 81       	ldd	r18, Y+3	; 0x03
    abf0:	3c 81       	ldd	r19, Y+4	; 0x04
    abf2:	fc 01       	movw	r30, r24
    abf4:	31 87       	std	Z+9, r19	; 0x09
    abf6:	20 87       	std	Z+8, r18	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    abf8:	8b 81       	ldd	r24, Y+3	; 0x03
    abfa:	9c 81       	ldd	r25, Y+4	; 0x04
    abfc:	9c 01       	movw	r18, r24
    abfe:	2e 5f       	subi	r18, 0xFE	; 254
    ac00:	3f 4f       	sbci	r19, 0xFF	; 255
    ac02:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    ac06:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    ac0a:	b9 01       	movw	r22, r18
    ac0c:	0a d3       	rcall	.+1556   	; 0xb222 <vListInsert>
    ac0e:	0b c0       	rjmp	.+22     	; 0xac26 <prvSwitchTimerLists+0xe6>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ac10:	49 81       	ldd	r20, Y+1	; 0x01
    ac12:	5a 81       	ldd	r21, Y+2	; 0x02
    ac14:	8b 81       	ldd	r24, Y+3	; 0x03
    ac16:	9c 81       	ldd	r25, Y+4	; 0x04
    ac18:	00 e0       	ldi	r16, 0x00	; 0
    ac1a:	10 e0       	ldi	r17, 0x00	; 0
    ac1c:	20 e0       	ldi	r18, 0x00	; 0
    ac1e:	30 e0       	ldi	r19, 0x00	; 0
    ac20:	60 e0       	ldi	r22, 0x00	; 0
    ac22:	b2 dc       	rcall	.-1692   	; 0xa588 <xTimerGenericCommand>
    ac24:	8f 83       	std	Y+7, r24	; 0x07

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    ac26:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    ac2a:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    ac2e:	fc 01       	movw	r30, r24
    ac30:	80 81       	ld	r24, Z
    ac32:	88 23       	and	r24, r24
    ac34:	09 f0       	breq	.+2      	; 0xac38 <prvSwitchTimerLists+0xf8>
    ac36:	91 cf       	rjmp	.-222    	; 0xab5a <prvSwitchTimerLists+0x1a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    ac38:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <pxCurrentTimerList>
    ac3c:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <pxCurrentTimerList+0x1>
    ac40:	99 87       	std	Y+9, r25	; 0x09
    ac42:	88 87       	std	Y+8, r24	; 0x08
    pxCurrentTimerList = pxOverflowTimerList;
    ac44:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <pxOverflowTimerList>
    ac48:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <pxOverflowTimerList+0x1>
    ac4c:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <pxCurrentTimerList+0x1>
    ac50:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    ac54:	88 85       	ldd	r24, Y+8	; 0x08
    ac56:	99 85       	ldd	r25, Y+9	; 0x09
    ac58:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <pxOverflowTimerList+0x1>
    ac5c:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <pxOverflowTimerList>
}
    ac60:	00 00       	nop
    ac62:	29 96       	adiw	r28, 0x09	; 9
    ac64:	0f b6       	in	r0, 0x3f	; 63
    ac66:	f8 94       	cli
    ac68:	de bf       	out	0x3e, r29	; 62
    ac6a:	0f be       	out	0x3f, r0	; 63
    ac6c:	cd bf       	out	0x3d, r28	; 61
    ac6e:	df 91       	pop	r29
    ac70:	cf 91       	pop	r28
    ac72:	1f 91       	pop	r17
    ac74:	0f 91       	pop	r16
    ac76:	08 95       	ret

0000ac78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    ac78:	cf 93       	push	r28
    ac7a:	df 93       	push	r29
    ac7c:	cd b7       	in	r28, 0x3d	; 61
    ac7e:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    ac80:	0f b6       	in	r0, 0x3f	; 63
    ac82:	f8 94       	cli
    ac84:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    ac86:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <xTimerQueue>
    ac8a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <xTimerQueue+0x1>
    ac8e:	89 2b       	or	r24, r25
    ac90:	d1 f4       	brne	.+52     	; 0xacc6 <prvCheckForValidListAndQueue+0x4e>
        {
            vListInitialise( &xActiveTimerList1 );
    ac92:	85 e7       	ldi	r24, 0x75	; 117
    ac94:	95 e0       	ldi	r25, 0x05	; 5
    ac96:	2d d2       	rcall	.+1114   	; 0xb0f2 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    ac98:	8e e7       	ldi	r24, 0x7E	; 126
    ac9a:	95 e0       	ldi	r25, 0x05	; 5
    ac9c:	2a d2       	rcall	.+1108   	; 0xb0f2 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    ac9e:	85 e7       	ldi	r24, 0x75	; 117
    aca0:	95 e0       	ldi	r25, 0x05	; 5
    aca2:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <pxCurrentTimerList+0x1>
    aca6:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    acaa:	8e e7       	ldi	r24, 0x7E	; 126
    acac:	95 e0       	ldi	r25, 0x05	; 5
    acae:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <pxOverflowTimerList+0x1>
    acb2:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    acb6:	40 e0       	ldi	r20, 0x00	; 0
    acb8:	65 e0       	ldi	r22, 0x05	; 5
    acba:	8a e0       	ldi	r24, 0x0A	; 10
    acbc:	fb d6       	rcall	.+3574   	; 0xbab4 <xQueueGenericCreate>
    acbe:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <xTimerQueue+0x1>
    acc2:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    acc6:	0f 90       	pop	r0
    acc8:	0f be       	out	0x3f, r0	; 63
}
    acca:	00 00       	nop
    accc:	df 91       	pop	r29
    acce:	cf 91       	pop	r28
    acd0:	08 95       	ret

0000acd2 <initVariant>:

/*-----------------------------------------------------------*/

void initVariant(void) __attribute__ ((OS_main));
void initVariant(void)
{
    acd2:	cd b7       	in	r28, 0x3d	; 61
    acd4:	de b7       	in	r29, 0x3e	; 62
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    acd6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    acda:	0e 94 b9 4c 	call	0x9972	; 0x9972 <vTaskStartScheduler>
}
    acde:	00 00       	nop
    ace0:	08 95       	ret

0000ace2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    ace2:	cf 93       	push	r28
    ace4:	df 93       	push	r29
    ace6:	cd b7       	in	r28, 0x3d	; 61
    ace8:	de b7       	in	r29, 0x3e	; 62
    loop();        // the normal Arduino loop() function is run here.
    acea:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <loop>
    if (serialEventRun) serialEventRun();
    acee:	85 ea       	ldi	r24, 0xA5	; 165
    acf0:	9a e3       	ldi	r25, 0x3A	; 58
    acf2:	89 2b       	or	r24, r25
    acf4:	11 f0       	breq	.+4      	; 0xacfa <vApplicationIdleHook+0x18>
    acf6:	0e 94 a5 3a 	call	0x754a	; 0x754a <_Z14serialEventRunv>
}
    acfa:	00 00       	nop
    acfc:	df 91       	pop	r29
    acfe:	cf 91       	pop	r28
    ad00:	08 95       	ret

0000ad02 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    ad02:	cf 93       	push	r28
    ad04:	df 93       	push	r29
    ad06:	cd b7       	in	r28, 0x3d	; 61
    ad08:	de b7       	in	r29, 0x3e	; 62
    ad0a:	2e 97       	sbiw	r28, 0x0e	; 14
    ad0c:	0f b6       	in	r0, 0x3f	; 63
    ad0e:	f8 94       	cli
    ad10:	de bf       	out	0x3e, r29	; 62
    ad12:	0f be       	out	0x3f, r0	; 63
    ad14:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    ad16:	84 e2       	ldi	r24, 0x24	; 36
    ad18:	90 e0       	ldi	r25, 0x00	; 0
    ad1a:	24 e2       	ldi	r18, 0x24	; 36
    ad1c:	30 e0       	ldi	r19, 0x00	; 0
    ad1e:	f9 01       	movw	r30, r18
    ad20:	20 81       	ld	r18, Z
    ad22:	20 68       	ori	r18, 0x80	; 128
    ad24:	fc 01       	movw	r30, r24
    ad26:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    ad28:	85 e2       	ldi	r24, 0x25	; 37
    ad2a:	90 e0       	ldi	r25, 0x00	; 0
    ad2c:	25 e2       	ldi	r18, 0x25	; 37
    ad2e:	30 e0       	ldi	r19, 0x00	; 0
    ad30:	f9 01       	movw	r30, r18
    ad32:	20 81       	ld	r18, Z
    ad34:	20 68       	ori	r18, 0x80	; 128
    ad36:	fc 01       	movw	r30, r24
    ad38:	20 83       	st	Z, r18
    ad3a:	80 e0       	ldi	r24, 0x00	; 0
    ad3c:	90 e0       	ldi	r25, 0x00	; 0
    ad3e:	a8 e4       	ldi	r26, 0x48	; 72
    ad40:	b2 e4       	ldi	r27, 0x42	; 66
    ad42:	89 83       	std	Y+1, r24	; 0x01
    ad44:	9a 83       	std	Y+2, r25	; 0x02
    ad46:	ab 83       	std	Y+3, r26	; 0x03
    ad48:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    ad4a:	20 e0       	ldi	r18, 0x00	; 0
    ad4c:	30 e0       	ldi	r19, 0x00	; 0
    ad4e:	4a e7       	ldi	r20, 0x7A	; 122
    ad50:	55 e4       	ldi	r21, 0x45	; 69
    ad52:	69 81       	ldd	r22, Y+1	; 0x01
    ad54:	7a 81       	ldd	r23, Y+2	; 0x02
    ad56:	8b 81       	ldd	r24, Y+3	; 0x03
    ad58:	9c 81       	ldd	r25, Y+4	; 0x04
    ad5a:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <__mulsf3>
    ad5e:	dc 01       	movw	r26, r24
    ad60:	cb 01       	movw	r24, r22
    ad62:	8d 83       	std	Y+5, r24	; 0x05
    ad64:	9e 83       	std	Y+6, r25	; 0x06
    ad66:	af 83       	std	Y+7, r26	; 0x07
    ad68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    ad6a:	20 e0       	ldi	r18, 0x00	; 0
    ad6c:	30 e0       	ldi	r19, 0x00	; 0
    ad6e:	40 e8       	ldi	r20, 0x80	; 128
    ad70:	5f e3       	ldi	r21, 0x3F	; 63
    ad72:	6d 81       	ldd	r22, Y+5	; 0x05
    ad74:	7e 81       	ldd	r23, Y+6	; 0x06
    ad76:	8f 81       	ldd	r24, Y+7	; 0x07
    ad78:	98 85       	ldd	r25, Y+8	; 0x08
    ad7a:	0e 94 99 61 	call	0xc332	; 0xc332 <__cmpsf2>
    ad7e:	88 23       	and	r24, r24
    ad80:	2c f4       	brge	.+10     	; 0xad8c <vApplicationMallocFailedHook+0x8a>
		__ticks = 1;
    ad82:	81 e0       	ldi	r24, 0x01	; 1
    ad84:	90 e0       	ldi	r25, 0x00	; 0
    ad86:	9a 87       	std	Y+10, r25	; 0x0a
    ad88:	89 87       	std	Y+9, r24	; 0x09
    ad8a:	3e c0       	rjmp	.+124    	; 0xae08 <vApplicationMallocFailedHook+0x106>
	else if (__tmp > 65535)
    ad8c:	20 e0       	ldi	r18, 0x00	; 0
    ad8e:	3f ef       	ldi	r19, 0xFF	; 255
    ad90:	4f e7       	ldi	r20, 0x7F	; 127
    ad92:	57 e4       	ldi	r21, 0x47	; 71
    ad94:	6d 81       	ldd	r22, Y+5	; 0x05
    ad96:	7e 81       	ldd	r23, Y+6	; 0x06
    ad98:	8f 81       	ldd	r24, Y+7	; 0x07
    ad9a:	98 85       	ldd	r25, Y+8	; 0x08
    ad9c:	0e 94 f5 39 	call	0x73ea	; 0x73ea <__gesf2>
    ada0:	18 16       	cp	r1, r24
    ada2:	44 f5       	brge	.+80     	; 0xadf4 <vApplicationMallocFailedHook+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ada4:	20 e0       	ldi	r18, 0x00	; 0
    ada6:	30 e0       	ldi	r19, 0x00	; 0
    ada8:	40 e2       	ldi	r20, 0x20	; 32
    adaa:	51 e4       	ldi	r21, 0x41	; 65
    adac:	69 81       	ldd	r22, Y+1	; 0x01
    adae:	7a 81       	ldd	r23, Y+2	; 0x02
    adb0:	8b 81       	ldd	r24, Y+3	; 0x03
    adb2:	9c 81       	ldd	r25, Y+4	; 0x04
    adb4:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <__mulsf3>
    adb8:	dc 01       	movw	r26, r24
    adba:	cb 01       	movw	r24, r22
    adbc:	bc 01       	movw	r22, r24
    adbe:	cd 01       	movw	r24, r26
    adc0:	0e 94 78 39 	call	0x72f0	; 0x72f0 <__fixunssfsi>
    adc4:	dc 01       	movw	r26, r24
    adc6:	cb 01       	movw	r24, r22
    adc8:	9a 87       	std	Y+10, r25	; 0x0a
    adca:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    adcc:	89 85       	ldd	r24, Y+9	; 0x09
    adce:	9a 85       	ldd	r25, Y+10	; 0x0a
    add0:	89 2b       	or	r24, r25
    add2:	21 f1       	breq	.+72     	; 0xae1c <vApplicationMallocFailedHook+0x11a>
    add4:	80 e9       	ldi	r24, 0x90	; 144
    add6:	91 e0       	ldi	r25, 0x01	; 1
    add8:	9c 87       	std	Y+12, r25	; 0x0c
    adda:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    addc:	8b 85       	ldd	r24, Y+11	; 0x0b
    adde:	9c 85       	ldd	r25, Y+12	; 0x0c
    ade0:	01 97       	sbiw	r24, 0x01	; 1
    ade2:	f1 f7       	brne	.-4      	; 0xade0 <vApplicationMallocFailedHook+0xde>
    ade4:	9c 87       	std	Y+12, r25	; 0x0c
    ade6:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ade8:	89 85       	ldd	r24, Y+9	; 0x09
    adea:	9a 85       	ldd	r25, Y+10	; 0x0a
    adec:	01 97       	sbiw	r24, 0x01	; 1
    adee:	9a 87       	std	Y+10, r25	; 0x0a
    adf0:	89 87       	std	Y+9, r24	; 0x09
    adf2:	ec cf       	rjmp	.-40     	; 0xadcc <vApplicationMallocFailedHook+0xca>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    adf4:	6d 81       	ldd	r22, Y+5	; 0x05
    adf6:	7e 81       	ldd	r23, Y+6	; 0x06
    adf8:	8f 81       	ldd	r24, Y+7	; 0x07
    adfa:	98 85       	ldd	r25, Y+8	; 0x08
    adfc:	0e 94 78 39 	call	0x72f0	; 0x72f0 <__fixunssfsi>
    ae00:	dc 01       	movw	r26, r24
    ae02:	cb 01       	movw	r24, r22
    ae04:	9a 87       	std	Y+10, r25	; 0x0a
    ae06:	89 87       	std	Y+9, r24	; 0x09
    ae08:	89 85       	ldd	r24, Y+9	; 0x09
    ae0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae0c:	9e 87       	std	Y+14, r25	; 0x0e
    ae0e:	8d 87       	std	Y+13, r24	; 0x0d
    ae10:	8d 85       	ldd	r24, Y+13	; 0x0d
    ae12:	9e 85       	ldd	r25, Y+14	; 0x0e
    ae14:	01 97       	sbiw	r24, 0x01	; 1
    ae16:	f1 f7       	brne	.-4      	; 0xae14 <vApplicationMallocFailedHook+0x112>
    ae18:	9e 87       	std	Y+14, r25	; 0x0e
    ae1a:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    ae1c:	83 e2       	ldi	r24, 0x23	; 35
    ae1e:	90 e0       	ldi	r25, 0x00	; 0
    ae20:	23 e2       	ldi	r18, 0x23	; 35
    ae22:	30 e0       	ldi	r19, 0x00	; 0
    ae24:	f9 01       	movw	r30, r18
    ae26:	20 81       	ld	r18, Z
    ae28:	20 68       	ori	r18, 0x80	; 128
    ae2a:	fc 01       	movw	r30, r24
    ae2c:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

    for(;;)
    ae2e:	85 cf       	rjmp	.-246    	; 0xad3a <vApplicationMallocFailedHook+0x38>

0000ae30 <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    ae30:	cf 93       	push	r28
    ae32:	df 93       	push	r29
    ae34:	cd b7       	in	r28, 0x3d	; 61
    ae36:	de b7       	in	r29, 0x3e	; 62
    ae38:	62 97       	sbiw	r28, 0x12	; 18
    ae3a:	0f b6       	in	r0, 0x3f	; 63
    ae3c:	f8 94       	cli
    ae3e:	de bf       	out	0x3e, r29	; 62
    ae40:	0f be       	out	0x3f, r0	; 63
    ae42:	cd bf       	out	0x3d, r28	; 61
    ae44:	98 8b       	std	Y+16, r25	; 0x10
    ae46:	8f 87       	std	Y+15, r24	; 0x0f
    ae48:	7a 8b       	std	Y+18, r23	; 0x12
    ae4a:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    ae4c:	84 e2       	ldi	r24, 0x24	; 36
    ae4e:	90 e0       	ldi	r25, 0x00	; 0
    ae50:	24 e2       	ldi	r18, 0x24	; 36
    ae52:	30 e0       	ldi	r19, 0x00	; 0
    ae54:	f9 01       	movw	r30, r18
    ae56:	20 81       	ld	r18, Z
    ae58:	20 68       	ori	r18, 0x80	; 128
    ae5a:	fc 01       	movw	r30, r24
    ae5c:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    ae5e:	85 e2       	ldi	r24, 0x25	; 37
    ae60:	90 e0       	ldi	r25, 0x00	; 0
    ae62:	25 e2       	ldi	r18, 0x25	; 37
    ae64:	30 e0       	ldi	r19, 0x00	; 0
    ae66:	f9 01       	movw	r30, r18
    ae68:	20 81       	ld	r18, Z
    ae6a:	20 68       	ori	r18, 0x80	; 128
    ae6c:	fc 01       	movw	r30, r24
    ae6e:	20 83       	st	Z, r18
    ae70:	80 e0       	ldi	r24, 0x00	; 0
    ae72:	90 e0       	ldi	r25, 0x00	; 0
    ae74:	aa ef       	ldi	r26, 0xFA	; 250
    ae76:	b4 e4       	ldi	r27, 0x44	; 68
    ae78:	89 83       	std	Y+1, r24	; 0x01
    ae7a:	9a 83       	std	Y+2, r25	; 0x02
    ae7c:	ab 83       	std	Y+3, r26	; 0x03
    ae7e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    ae80:	20 e0       	ldi	r18, 0x00	; 0
    ae82:	30 e0       	ldi	r19, 0x00	; 0
    ae84:	4a e7       	ldi	r20, 0x7A	; 122
    ae86:	55 e4       	ldi	r21, 0x45	; 69
    ae88:	69 81       	ldd	r22, Y+1	; 0x01
    ae8a:	7a 81       	ldd	r23, Y+2	; 0x02
    ae8c:	8b 81       	ldd	r24, Y+3	; 0x03
    ae8e:	9c 81       	ldd	r25, Y+4	; 0x04
    ae90:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <__mulsf3>
    ae94:	dc 01       	movw	r26, r24
    ae96:	cb 01       	movw	r24, r22
    ae98:	8d 83       	std	Y+5, r24	; 0x05
    ae9a:	9e 83       	std	Y+6, r25	; 0x06
    ae9c:	af 83       	std	Y+7, r26	; 0x07
    ae9e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    aea0:	20 e0       	ldi	r18, 0x00	; 0
    aea2:	30 e0       	ldi	r19, 0x00	; 0
    aea4:	40 e8       	ldi	r20, 0x80	; 128
    aea6:	5f e3       	ldi	r21, 0x3F	; 63
    aea8:	6d 81       	ldd	r22, Y+5	; 0x05
    aeaa:	7e 81       	ldd	r23, Y+6	; 0x06
    aeac:	8f 81       	ldd	r24, Y+7	; 0x07
    aeae:	98 85       	ldd	r25, Y+8	; 0x08
    aeb0:	0e 94 99 61 	call	0xc332	; 0xc332 <__cmpsf2>
    aeb4:	88 23       	and	r24, r24
    aeb6:	2c f4       	brge	.+10     	; 0xaec2 <vApplicationStackOverflowHook+0x92>
		__ticks = 1;
    aeb8:	81 e0       	ldi	r24, 0x01	; 1
    aeba:	90 e0       	ldi	r25, 0x00	; 0
    aebc:	9a 87       	std	Y+10, r25	; 0x0a
    aebe:	89 87       	std	Y+9, r24	; 0x09
    aec0:	3e c0       	rjmp	.+124    	; 0xaf3e <vApplicationStackOverflowHook+0x10e>
	else if (__tmp > 65535)
    aec2:	20 e0       	ldi	r18, 0x00	; 0
    aec4:	3f ef       	ldi	r19, 0xFF	; 255
    aec6:	4f e7       	ldi	r20, 0x7F	; 127
    aec8:	57 e4       	ldi	r21, 0x47	; 71
    aeca:	6d 81       	ldd	r22, Y+5	; 0x05
    aecc:	7e 81       	ldd	r23, Y+6	; 0x06
    aece:	8f 81       	ldd	r24, Y+7	; 0x07
    aed0:	98 85       	ldd	r25, Y+8	; 0x08
    aed2:	0e 94 f5 39 	call	0x73ea	; 0x73ea <__gesf2>
    aed6:	18 16       	cp	r1, r24
    aed8:	44 f5       	brge	.+80     	; 0xaf2a <vApplicationStackOverflowHook+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aeda:	20 e0       	ldi	r18, 0x00	; 0
    aedc:	30 e0       	ldi	r19, 0x00	; 0
    aede:	40 e2       	ldi	r20, 0x20	; 32
    aee0:	51 e4       	ldi	r21, 0x41	; 65
    aee2:	69 81       	ldd	r22, Y+1	; 0x01
    aee4:	7a 81       	ldd	r23, Y+2	; 0x02
    aee6:	8b 81       	ldd	r24, Y+3	; 0x03
    aee8:	9c 81       	ldd	r25, Y+4	; 0x04
    aeea:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <__mulsf3>
    aeee:	dc 01       	movw	r26, r24
    aef0:	cb 01       	movw	r24, r22
    aef2:	bc 01       	movw	r22, r24
    aef4:	cd 01       	movw	r24, r26
    aef6:	0e 94 78 39 	call	0x72f0	; 0x72f0 <__fixunssfsi>
    aefa:	dc 01       	movw	r26, r24
    aefc:	cb 01       	movw	r24, r22
    aefe:	9a 87       	std	Y+10, r25	; 0x0a
    af00:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    af02:	89 85       	ldd	r24, Y+9	; 0x09
    af04:	9a 85       	ldd	r25, Y+10	; 0x0a
    af06:	89 2b       	or	r24, r25
    af08:	21 f1       	breq	.+72     	; 0xaf52 <vApplicationStackOverflowHook+0x122>
    af0a:	80 e9       	ldi	r24, 0x90	; 144
    af0c:	91 e0       	ldi	r25, 0x01	; 1
    af0e:	9c 87       	std	Y+12, r25	; 0x0c
    af10:	8b 87       	std	Y+11, r24	; 0x0b
    af12:	8b 85       	ldd	r24, Y+11	; 0x0b
    af14:	9c 85       	ldd	r25, Y+12	; 0x0c
    af16:	01 97       	sbiw	r24, 0x01	; 1
    af18:	f1 f7       	brne	.-4      	; 0xaf16 <vApplicationStackOverflowHook+0xe6>
    af1a:	9c 87       	std	Y+12, r25	; 0x0c
    af1c:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af1e:	89 85       	ldd	r24, Y+9	; 0x09
    af20:	9a 85       	ldd	r25, Y+10	; 0x0a
    af22:	01 97       	sbiw	r24, 0x01	; 1
    af24:	9a 87       	std	Y+10, r25	; 0x0a
    af26:	89 87       	std	Y+9, r24	; 0x09
    af28:	ec cf       	rjmp	.-40     	; 0xaf02 <vApplicationStackOverflowHook+0xd2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    af2a:	6d 81       	ldd	r22, Y+5	; 0x05
    af2c:	7e 81       	ldd	r23, Y+6	; 0x06
    af2e:	8f 81       	ldd	r24, Y+7	; 0x07
    af30:	98 85       	ldd	r25, Y+8	; 0x08
    af32:	0e 94 78 39 	call	0x72f0	; 0x72f0 <__fixunssfsi>
    af36:	dc 01       	movw	r26, r24
    af38:	cb 01       	movw	r24, r22
    af3a:	9a 87       	std	Y+10, r25	; 0x0a
    af3c:	89 87       	std	Y+9, r24	; 0x09
    af3e:	89 85       	ldd	r24, Y+9	; 0x09
    af40:	9a 85       	ldd	r25, Y+10	; 0x0a
    af42:	9e 87       	std	Y+14, r25	; 0x0e
    af44:	8d 87       	std	Y+13, r24	; 0x0d
    af46:	8d 85       	ldd	r24, Y+13	; 0x0d
    af48:	9e 85       	ldd	r25, Y+14	; 0x0e
    af4a:	01 97       	sbiw	r24, 0x01	; 1
    af4c:	f1 f7       	brne	.-4      	; 0xaf4a <vApplicationStackOverflowHook+0x11a>
    af4e:	9e 87       	std	Y+14, r25	; 0x0e
    af50:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    af52:	83 e2       	ldi	r24, 0x23	; 35
    af54:	90 e0       	ldi	r25, 0x00	; 0
    af56:	23 e2       	ldi	r18, 0x23	; 35
    af58:	30 e0       	ldi	r19, 0x00	; 0
    af5a:	f9 01       	movw	r30, r18
    af5c:	20 81       	ld	r18, Z
    af5e:	20 68       	ori	r18, 0x80	; 128
    af60:	fc 01       	movw	r30, r24
    af62:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

    for(;;)
    af64:	85 cf       	rjmp	.-246    	; 0xae70 <vApplicationStackOverflowHook+0x40>

0000af66 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    af66:	cf 93       	push	r28
    af68:	df 93       	push	r29
    af6a:	cd b7       	in	r28, 0x3d	; 61
    af6c:	de b7       	in	r29, 0x3e	; 62
    af6e:	2f 97       	sbiw	r28, 0x0f	; 15
    af70:	0f b6       	in	r0, 0x3f	; 63
    af72:	f8 94       	cli
    af74:	de bf       	out	0x3e, r29	; 62
    af76:	0f be       	out	0x3f, r0	; 63
    af78:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    af7a:	8f e5       	ldi	r24, 0x5F	; 95
    af7c:	90 e0       	ldi	r25, 0x00	; 0
    af7e:	fc 01       	movw	r30, r24
    af80:	80 81       	ld	r24, Z
    af82:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    af84:	f8 94       	cli
  if (!initialized) {
    af86:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <_ZN8SPIClass11initializedE>
    af8a:	88 23       	and	r24, r24
    af8c:	09 f0       	breq	.+2      	; 0xaf90 <_ZN8SPIClass5beginEv+0x2a>
    af8e:	5b c0       	rjmp	.+182    	; 0xb046 <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    af90:	85 ee       	ldi	r24, 0xE5	; 229
    af92:	9e e2       	ldi	r25, 0x2E	; 46
    af94:	9b 83       	std	Y+3, r25	; 0x03
    af96:	8a 83       	std	Y+2, r24	; 0x02
    af98:	8a 81       	ldd	r24, Y+2	; 0x02
    af9a:	9b 81       	ldd	r25, Y+3	; 0x03
    af9c:	fc 01       	movw	r30, r24
    af9e:	84 91       	lpm	r24, Z
    afa0:	8c 83       	std	Y+4, r24	; 0x04
    afa2:	8c 81       	ldd	r24, Y+4	; 0x04
    afa4:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    afa6:	8b e2       	ldi	r24, 0x2B	; 43
    afa8:	9f e2       	ldi	r25, 0x2F	; 47
    afaa:	9f 83       	std	Y+7, r25	; 0x07
    afac:	8e 83       	std	Y+6, r24	; 0x06
    afae:	8e 81       	ldd	r24, Y+6	; 0x06
    afb0:	9f 81       	ldd	r25, Y+7	; 0x07
    afb2:	fc 01       	movw	r30, r24
    afb4:	84 91       	lpm	r24, Z
    afb6:	88 87       	std	Y+8, r24	; 0x08
    afb8:	88 85       	ldd	r24, Y+8	; 0x08
    afba:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    afbc:	8d 81       	ldd	r24, Y+5	; 0x05
    afbe:	88 2f       	mov	r24, r24
    afc0:	90 e0       	ldi	r25, 0x00	; 0
    afc2:	88 0f       	add	r24, r24
    afc4:	99 1f       	adc	r25, r25
    afc6:	8e 59       	subi	r24, 0x9E	; 158
    afc8:	91 4d       	sbci	r25, 0xD1	; 209
    afca:	9b 87       	std	Y+11, r25	; 0x0b
    afcc:	8a 87       	std	Y+10, r24	; 0x0a
    afce:	8a 85       	ldd	r24, Y+10	; 0x0a
    afd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    afd2:	fc 01       	movw	r30, r24
    afd4:	25 91       	lpm	r18, Z+
    afd6:	34 91       	lpm	r19, Z
    afd8:	cf 01       	movw	r24, r30
    afda:	3d 87       	std	Y+13, r19	; 0x0d
    afdc:	2c 87       	std	Y+12, r18	; 0x0c
    afde:	9b 87       	std	Y+11, r25	; 0x0b
    afe0:	8a 87       	std	Y+10, r24	; 0x0a
    afe2:	8c 85       	ldd	r24, Y+12	; 0x0c
    afe4:	9d 85       	ldd	r25, Y+13	; 0x0d
    afe6:	9f 87       	std	Y+15, r25	; 0x0f
    afe8:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    afea:	8e 85       	ldd	r24, Y+14	; 0x0e
    afec:	9f 85       	ldd	r25, Y+15	; 0x0f
    afee:	fc 01       	movw	r30, r24
    aff0:	90 81       	ld	r25, Z
    aff2:	89 85       	ldd	r24, Y+9	; 0x09
    aff4:	98 23       	and	r25, r24
    aff6:	81 e0       	ldi	r24, 0x01	; 1
    aff8:	99 23       	and	r25, r25
    affa:	09 f0       	breq	.+2      	; 0xaffe <_ZN8SPIClass5beginEv+0x98>
    affc:	80 e0       	ldi	r24, 0x00	; 0
    affe:	88 23       	and	r24, r24
    b000:	21 f0       	breq	.+8      	; 0xb00a <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    b002:	61 e0       	ldi	r22, 0x01	; 1
    b004:	85 e3       	ldi	r24, 0x35	; 53
    b006:	0e 94 44 47 	call	0x8e88	; 0x8e88 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    b00a:	61 e0       	ldi	r22, 0x01	; 1
    b00c:	85 e3       	ldi	r24, 0x35	; 53
    b00e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    b012:	8c e4       	ldi	r24, 0x4C	; 76
    b014:	90 e0       	ldi	r25, 0x00	; 0
    b016:	2c e4       	ldi	r18, 0x4C	; 76
    b018:	30 e0       	ldi	r19, 0x00	; 0
    b01a:	f9 01       	movw	r30, r18
    b01c:	20 81       	ld	r18, Z
    b01e:	20 61       	ori	r18, 0x10	; 16
    b020:	fc 01       	movw	r30, r24
    b022:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    b024:	8c e4       	ldi	r24, 0x4C	; 76
    b026:	90 e0       	ldi	r25, 0x00	; 0
    b028:	2c e4       	ldi	r18, 0x4C	; 76
    b02a:	30 e0       	ldi	r19, 0x00	; 0
    b02c:	f9 01       	movw	r30, r18
    b02e:	20 81       	ld	r18, Z
    b030:	20 64       	ori	r18, 0x40	; 64
    b032:	fc 01       	movw	r30, r24
    b034:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    b036:	61 e0       	ldi	r22, 0x01	; 1
    b038:	84 e3       	ldi	r24, 0x34	; 52
    b03a:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
    pinMode(MOSI, OUTPUT);
    b03e:	61 e0       	ldi	r22, 0x01	; 1
    b040:	83 e3       	ldi	r24, 0x33	; 51
    b042:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <pinMode>
  }
  initialized++; // reference count
    b046:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <_ZN8SPIClass11initializedE>
    b04a:	8f 5f       	subi	r24, 0xFF	; 255
    b04c:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    b050:	8f e5       	ldi	r24, 0x5F	; 95
    b052:	90 e0       	ldi	r25, 0x00	; 0
    b054:	29 81       	ldd	r18, Y+1	; 0x01
    b056:	fc 01       	movw	r30, r24
    b058:	20 83       	st	Z, r18
}
    b05a:	00 00       	nop
    b05c:	2f 96       	adiw	r28, 0x0f	; 15
    b05e:	0f b6       	in	r0, 0x3f	; 63
    b060:	f8 94       	cli
    b062:	de bf       	out	0x3e, r29	; 62
    b064:	0f be       	out	0x3f, r0	; 63
    b066:	cd bf       	out	0x3d, r28	; 61
    b068:	df 91       	pop	r29
    b06a:	cf 91       	pop	r28
    b06c:	08 95       	ret

0000b06e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    b06e:	cf 93       	push	r28
    b070:	df 93       	push	r29
    b072:	cd b7       	in	r28, 0x3d	; 61
    b074:	de b7       	in	r29, 0x3e	; 62
	// Empty
}
    b076:	00 00       	nop
    b078:	df 91       	pop	r29
    b07a:	cf 91       	pop	r28
    b07c:	08 95       	ret

0000b07e <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    b07e:	cf 93       	push	r28
    b080:	df 93       	push	r29
    b082:	00 d0       	rcall	.+0      	; 0xb084 <pvPortMalloc+0x6>
    b084:	1f 92       	push	r1
    b086:	cd b7       	in	r28, 0x3d	; 61
    b088:	de b7       	in	r29, 0x3e	; 62
    b08a:	9c 83       	std	Y+4, r25	; 0x04
    b08c:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

    vTaskSuspendAll();
    b08e:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    b092:	8b 81       	ldd	r24, Y+3	; 0x03
    b094:	9c 81       	ldd	r25, Y+4	; 0x04
    b096:	0e 94 24 62 	call	0xc448	; 0xc448 <malloc>
    b09a:	9a 83       	std	Y+2, r25	; 0x02
    b09c:	89 83       	std	Y+1, r24	; 0x01
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    b09e:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    b0a2:	89 81       	ldd	r24, Y+1	; 0x01
    b0a4:	9a 81       	ldd	r25, Y+2	; 0x02
    b0a6:	89 2b       	or	r24, r25
    b0a8:	09 f4       	brne	.+2      	; 0xb0ac <pvPortMalloc+0x2e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    b0aa:	2b de       	rcall	.-938    	; 0xad02 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
    b0ac:	89 81       	ldd	r24, Y+1	; 0x01
    b0ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b0b0:	0f 90       	pop	r0
    b0b2:	0f 90       	pop	r0
    b0b4:	0f 90       	pop	r0
    b0b6:	0f 90       	pop	r0
    b0b8:	df 91       	pop	r29
    b0ba:	cf 91       	pop	r28
    b0bc:	08 95       	ret

0000b0be <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    b0be:	cf 93       	push	r28
    b0c0:	df 93       	push	r29
    b0c2:	1f 92       	push	r1
    b0c4:	1f 92       	push	r1
    b0c6:	cd b7       	in	r28, 0x3d	; 61
    b0c8:	de b7       	in	r29, 0x3e	; 62
    b0ca:	9a 83       	std	Y+2, r25	; 0x02
    b0cc:	89 83       	std	Y+1, r24	; 0x01
    if( pv )
    b0ce:	89 81       	ldd	r24, Y+1	; 0x01
    b0d0:	9a 81       	ldd	r25, Y+2	; 0x02
    b0d2:	89 2b       	or	r24, r25
    b0d4:	41 f0       	breq	.+16     	; 0xb0e6 <vPortFree+0x28>
    {
        vTaskSuspendAll();
    b0d6:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <vTaskSuspendAll>
        {
            free( pv );
    b0da:	89 81       	ldd	r24, Y+1	; 0x01
    b0dc:	9a 81       	ldd	r25, Y+2	; 0x02
    b0de:	0e 94 bc 62 	call	0xc578	; 0xc578 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    b0e2:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    }
}
    b0e6:	00 00       	nop
    b0e8:	0f 90       	pop	r0
    b0ea:	0f 90       	pop	r0
    b0ec:	df 91       	pop	r29
    b0ee:	cf 91       	pop	r28
    b0f0:	08 95       	ret

0000b0f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    b0f2:	cf 93       	push	r28
    b0f4:	df 93       	push	r29
    b0f6:	1f 92       	push	r1
    b0f8:	1f 92       	push	r1
    b0fa:	cd b7       	in	r28, 0x3d	; 61
    b0fc:	de b7       	in	r29, 0x3e	; 62
    b0fe:	9a 83       	std	Y+2, r25	; 0x02
    b100:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b102:	89 81       	ldd	r24, Y+1	; 0x01
    b104:	9a 81       	ldd	r25, Y+2	; 0x02
    b106:	9c 01       	movw	r18, r24
    b108:	2d 5f       	subi	r18, 0xFD	; 253
    b10a:	3f 4f       	sbci	r19, 0xFF	; 255
    b10c:	89 81       	ldd	r24, Y+1	; 0x01
    b10e:	9a 81       	ldd	r25, Y+2	; 0x02
    b110:	fc 01       	movw	r30, r24
    b112:	32 83       	std	Z+2, r19	; 0x02
    b114:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    b116:	89 81       	ldd	r24, Y+1	; 0x01
    b118:	9a 81       	ldd	r25, Y+2	; 0x02
    b11a:	2f ef       	ldi	r18, 0xFF	; 255
    b11c:	3f ef       	ldi	r19, 0xFF	; 255
    b11e:	fc 01       	movw	r30, r24
    b120:	34 83       	std	Z+4, r19	; 0x04
    b122:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b124:	89 81       	ldd	r24, Y+1	; 0x01
    b126:	9a 81       	ldd	r25, Y+2	; 0x02
    b128:	9c 01       	movw	r18, r24
    b12a:	2d 5f       	subi	r18, 0xFD	; 253
    b12c:	3f 4f       	sbci	r19, 0xFF	; 255
    b12e:	89 81       	ldd	r24, Y+1	; 0x01
    b130:	9a 81       	ldd	r25, Y+2	; 0x02
    b132:	fc 01       	movw	r30, r24
    b134:	36 83       	std	Z+6, r19	; 0x06
    b136:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b138:	89 81       	ldd	r24, Y+1	; 0x01
    b13a:	9a 81       	ldd	r25, Y+2	; 0x02
    b13c:	9c 01       	movw	r18, r24
    b13e:	2d 5f       	subi	r18, 0xFD	; 253
    b140:	3f 4f       	sbci	r19, 0xFF	; 255
    b142:	89 81       	ldd	r24, Y+1	; 0x01
    b144:	9a 81       	ldd	r25, Y+2	; 0x02
    b146:	fc 01       	movw	r30, r24
    b148:	30 87       	std	Z+8, r19	; 0x08
    b14a:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    b14c:	89 81       	ldd	r24, Y+1	; 0x01
    b14e:	9a 81       	ldd	r25, Y+2	; 0x02
    b150:	fc 01       	movw	r30, r24
    b152:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    b154:	00 00       	nop
    b156:	0f 90       	pop	r0
    b158:	0f 90       	pop	r0
    b15a:	df 91       	pop	r29
    b15c:	cf 91       	pop	r28
    b15e:	08 95       	ret

0000b160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    b160:	cf 93       	push	r28
    b162:	df 93       	push	r29
    b164:	1f 92       	push	r1
    b166:	1f 92       	push	r1
    b168:	cd b7       	in	r28, 0x3d	; 61
    b16a:	de b7       	in	r29, 0x3e	; 62
    b16c:	9a 83       	std	Y+2, r25	; 0x02
    b16e:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    b170:	89 81       	ldd	r24, Y+1	; 0x01
    b172:	9a 81       	ldd	r25, Y+2	; 0x02
    b174:	fc 01       	movw	r30, r24
    b176:	11 86       	std	Z+9, r1	; 0x09
    b178:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    b17a:	00 00       	nop
    b17c:	0f 90       	pop	r0
    b17e:	0f 90       	pop	r0
    b180:	df 91       	pop	r29
    b182:	cf 91       	pop	r28
    b184:	08 95       	ret

0000b186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    b186:	cf 93       	push	r28
    b188:	df 93       	push	r29
    b18a:	00 d0       	rcall	.+0      	; 0xb18c <vListInsertEnd+0x6>
    b18c:	00 d0       	rcall	.+0      	; 0xb18e <vListInsertEnd+0x8>
    b18e:	cd b7       	in	r28, 0x3d	; 61
    b190:	de b7       	in	r29, 0x3e	; 62
    b192:	9c 83       	std	Y+4, r25	; 0x04
    b194:	8b 83       	std	Y+3, r24	; 0x03
    b196:	7e 83       	std	Y+6, r23	; 0x06
    b198:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    b19a:	8b 81       	ldd	r24, Y+3	; 0x03
    b19c:	9c 81       	ldd	r25, Y+4	; 0x04
    b19e:	fc 01       	movw	r30, r24
    b1a0:	81 81       	ldd	r24, Z+1	; 0x01
    b1a2:	92 81       	ldd	r25, Z+2	; 0x02
    b1a4:	9a 83       	std	Y+2, r25	; 0x02
    b1a6:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    b1a8:	8d 81       	ldd	r24, Y+5	; 0x05
    b1aa:	9e 81       	ldd	r25, Y+6	; 0x06
    b1ac:	29 81       	ldd	r18, Y+1	; 0x01
    b1ae:	3a 81       	ldd	r19, Y+2	; 0x02
    b1b0:	fc 01       	movw	r30, r24
    b1b2:	33 83       	std	Z+3, r19	; 0x03
    b1b4:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    b1b6:	89 81       	ldd	r24, Y+1	; 0x01
    b1b8:	9a 81       	ldd	r25, Y+2	; 0x02
    b1ba:	fc 01       	movw	r30, r24
    b1bc:	24 81       	ldd	r18, Z+4	; 0x04
    b1be:	35 81       	ldd	r19, Z+5	; 0x05
    b1c0:	8d 81       	ldd	r24, Y+5	; 0x05
    b1c2:	9e 81       	ldd	r25, Y+6	; 0x06
    b1c4:	fc 01       	movw	r30, r24
    b1c6:	35 83       	std	Z+5, r19	; 0x05
    b1c8:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    b1ca:	89 81       	ldd	r24, Y+1	; 0x01
    b1cc:	9a 81       	ldd	r25, Y+2	; 0x02
    b1ce:	fc 01       	movw	r30, r24
    b1d0:	84 81       	ldd	r24, Z+4	; 0x04
    b1d2:	95 81       	ldd	r25, Z+5	; 0x05
    b1d4:	2d 81       	ldd	r18, Y+5	; 0x05
    b1d6:	3e 81       	ldd	r19, Y+6	; 0x06
    b1d8:	fc 01       	movw	r30, r24
    b1da:	33 83       	std	Z+3, r19	; 0x03
    b1dc:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
    b1de:	89 81       	ldd	r24, Y+1	; 0x01
    b1e0:	9a 81       	ldd	r25, Y+2	; 0x02
    b1e2:	2d 81       	ldd	r18, Y+5	; 0x05
    b1e4:	3e 81       	ldd	r19, Y+6	; 0x06
    b1e6:	fc 01       	movw	r30, r24
    b1e8:	35 83       	std	Z+5, r19	; 0x05
    b1ea:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    b1ec:	8d 81       	ldd	r24, Y+5	; 0x05
    b1ee:	9e 81       	ldd	r25, Y+6	; 0x06
    b1f0:	2b 81       	ldd	r18, Y+3	; 0x03
    b1f2:	3c 81       	ldd	r19, Y+4	; 0x04
    b1f4:	fc 01       	movw	r30, r24
    b1f6:	31 87       	std	Z+9, r19	; 0x09
    b1f8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    b1fa:	8b 81       	ldd	r24, Y+3	; 0x03
    b1fc:	9c 81       	ldd	r25, Y+4	; 0x04
    b1fe:	fc 01       	movw	r30, r24
    b200:	80 81       	ld	r24, Z
    b202:	21 e0       	ldi	r18, 0x01	; 1
    b204:	28 0f       	add	r18, r24
    b206:	8b 81       	ldd	r24, Y+3	; 0x03
    b208:	9c 81       	ldd	r25, Y+4	; 0x04
    b20a:	fc 01       	movw	r30, r24
    b20c:	20 83       	st	Z, r18
}
    b20e:	00 00       	nop
    b210:	26 96       	adiw	r28, 0x06	; 6
    b212:	0f b6       	in	r0, 0x3f	; 63
    b214:	f8 94       	cli
    b216:	de bf       	out	0x3e, r29	; 62
    b218:	0f be       	out	0x3f, r0	; 63
    b21a:	cd bf       	out	0x3d, r28	; 61
    b21c:	df 91       	pop	r29
    b21e:	cf 91       	pop	r28
    b220:	08 95       	ret

0000b222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    b222:	cf 93       	push	r28
    b224:	df 93       	push	r29
    b226:	cd b7       	in	r28, 0x3d	; 61
    b228:	de b7       	in	r29, 0x3e	; 62
    b22a:	28 97       	sbiw	r28, 0x08	; 8
    b22c:	0f b6       	in	r0, 0x3f	; 63
    b22e:	f8 94       	cli
    b230:	de bf       	out	0x3e, r29	; 62
    b232:	0f be       	out	0x3f, r0	; 63
    b234:	cd bf       	out	0x3d, r28	; 61
    b236:	9e 83       	std	Y+6, r25	; 0x06
    b238:	8d 83       	std	Y+5, r24	; 0x05
    b23a:	78 87       	std	Y+8, r23	; 0x08
    b23c:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    b23e:	8f 81       	ldd	r24, Y+7	; 0x07
    b240:	98 85       	ldd	r25, Y+8	; 0x08
    b242:	fc 01       	movw	r30, r24
    b244:	80 81       	ld	r24, Z
    b246:	91 81       	ldd	r25, Z+1	; 0x01
    b248:	9c 83       	std	Y+4, r25	; 0x04
    b24a:	8b 83       	std	Y+3, r24	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    b24c:	8b 81       	ldd	r24, Y+3	; 0x03
    b24e:	9c 81       	ldd	r25, Y+4	; 0x04
    b250:	01 96       	adiw	r24, 0x01	; 1
    b252:	41 f4       	brne	.+16     	; 0xb264 <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    b254:	8d 81       	ldd	r24, Y+5	; 0x05
    b256:	9e 81       	ldd	r25, Y+6	; 0x06
    b258:	fc 01       	movw	r30, r24
    b25a:	87 81       	ldd	r24, Z+7	; 0x07
    b25c:	90 85       	ldd	r25, Z+8	; 0x08
    b25e:	9a 83       	std	Y+2, r25	; 0x02
    b260:	89 83       	std	Y+1, r24	; 0x01
    b262:	1a c0       	rjmp	.+52     	; 0xb298 <vListInsert+0x76>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    b264:	8d 81       	ldd	r24, Y+5	; 0x05
    b266:	9e 81       	ldd	r25, Y+6	; 0x06
    b268:	03 96       	adiw	r24, 0x03	; 3
    b26a:	9a 83       	std	Y+2, r25	; 0x02
    b26c:	89 83       	std	Y+1, r24	; 0x01
    b26e:	07 c0       	rjmp	.+14     	; 0xb27e <vListInsert+0x5c>
    b270:	89 81       	ldd	r24, Y+1	; 0x01
    b272:	9a 81       	ldd	r25, Y+2	; 0x02
    b274:	fc 01       	movw	r30, r24
    b276:	82 81       	ldd	r24, Z+2	; 0x02
    b278:	93 81       	ldd	r25, Z+3	; 0x03
    b27a:	9a 83       	std	Y+2, r25	; 0x02
    b27c:	89 83       	std	Y+1, r24	; 0x01
    b27e:	89 81       	ldd	r24, Y+1	; 0x01
    b280:	9a 81       	ldd	r25, Y+2	; 0x02
    b282:	fc 01       	movw	r30, r24
    b284:	82 81       	ldd	r24, Z+2	; 0x02
    b286:	93 81       	ldd	r25, Z+3	; 0x03
    b288:	fc 01       	movw	r30, r24
    b28a:	20 81       	ld	r18, Z
    b28c:	31 81       	ldd	r19, Z+1	; 0x01
    b28e:	8b 81       	ldd	r24, Y+3	; 0x03
    b290:	9c 81       	ldd	r25, Y+4	; 0x04
    b292:	82 17       	cp	r24, r18
    b294:	93 07       	cpc	r25, r19
    b296:	60 f7       	brcc	.-40     	; 0xb270 <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    b298:	89 81       	ldd	r24, Y+1	; 0x01
    b29a:	9a 81       	ldd	r25, Y+2	; 0x02
    b29c:	fc 01       	movw	r30, r24
    b29e:	22 81       	ldd	r18, Z+2	; 0x02
    b2a0:	33 81       	ldd	r19, Z+3	; 0x03
    b2a2:	8f 81       	ldd	r24, Y+7	; 0x07
    b2a4:	98 85       	ldd	r25, Y+8	; 0x08
    b2a6:	fc 01       	movw	r30, r24
    b2a8:	33 83       	std	Z+3, r19	; 0x03
    b2aa:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    b2ac:	8f 81       	ldd	r24, Y+7	; 0x07
    b2ae:	98 85       	ldd	r25, Y+8	; 0x08
    b2b0:	fc 01       	movw	r30, r24
    b2b2:	82 81       	ldd	r24, Z+2	; 0x02
    b2b4:	93 81       	ldd	r25, Z+3	; 0x03
    b2b6:	2f 81       	ldd	r18, Y+7	; 0x07
    b2b8:	38 85       	ldd	r19, Y+8	; 0x08
    b2ba:	fc 01       	movw	r30, r24
    b2bc:	35 83       	std	Z+5, r19	; 0x05
    b2be:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    b2c0:	8f 81       	ldd	r24, Y+7	; 0x07
    b2c2:	98 85       	ldd	r25, Y+8	; 0x08
    b2c4:	29 81       	ldd	r18, Y+1	; 0x01
    b2c6:	3a 81       	ldd	r19, Y+2	; 0x02
    b2c8:	fc 01       	movw	r30, r24
    b2ca:	35 83       	std	Z+5, r19	; 0x05
    b2cc:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
    b2ce:	89 81       	ldd	r24, Y+1	; 0x01
    b2d0:	9a 81       	ldd	r25, Y+2	; 0x02
    b2d2:	2f 81       	ldd	r18, Y+7	; 0x07
    b2d4:	38 85       	ldd	r19, Y+8	; 0x08
    b2d6:	fc 01       	movw	r30, r24
    b2d8:	33 83       	std	Z+3, r19	; 0x03
    b2da:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    b2dc:	8f 81       	ldd	r24, Y+7	; 0x07
    b2de:	98 85       	ldd	r25, Y+8	; 0x08
    b2e0:	2d 81       	ldd	r18, Y+5	; 0x05
    b2e2:	3e 81       	ldd	r19, Y+6	; 0x06
    b2e4:	fc 01       	movw	r30, r24
    b2e6:	31 87       	std	Z+9, r19	; 0x09
    b2e8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    b2ea:	8d 81       	ldd	r24, Y+5	; 0x05
    b2ec:	9e 81       	ldd	r25, Y+6	; 0x06
    b2ee:	fc 01       	movw	r30, r24
    b2f0:	80 81       	ld	r24, Z
    b2f2:	21 e0       	ldi	r18, 0x01	; 1
    b2f4:	28 0f       	add	r18, r24
    b2f6:	8d 81       	ldd	r24, Y+5	; 0x05
    b2f8:	9e 81       	ldd	r25, Y+6	; 0x06
    b2fa:	fc 01       	movw	r30, r24
    b2fc:	20 83       	st	Z, r18
}
    b2fe:	00 00       	nop
    b300:	28 96       	adiw	r28, 0x08	; 8
    b302:	0f b6       	in	r0, 0x3f	; 63
    b304:	f8 94       	cli
    b306:	de bf       	out	0x3e, r29	; 62
    b308:	0f be       	out	0x3f, r0	; 63
    b30a:	cd bf       	out	0x3d, r28	; 61
    b30c:	df 91       	pop	r29
    b30e:	cf 91       	pop	r28
    b310:	08 95       	ret

0000b312 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    b312:	cf 93       	push	r28
    b314:	df 93       	push	r29
    b316:	00 d0       	rcall	.+0      	; 0xb318 <uxListRemove+0x6>
    b318:	1f 92       	push	r1
    b31a:	cd b7       	in	r28, 0x3d	; 61
    b31c:	de b7       	in	r29, 0x3e	; 62
    b31e:	9c 83       	std	Y+4, r25	; 0x04
    b320:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    b322:	8b 81       	ldd	r24, Y+3	; 0x03
    b324:	9c 81       	ldd	r25, Y+4	; 0x04
    b326:	fc 01       	movw	r30, r24
    b328:	80 85       	ldd	r24, Z+8	; 0x08
    b32a:	91 85       	ldd	r25, Z+9	; 0x09
    b32c:	9a 83       	std	Y+2, r25	; 0x02
    b32e:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    b330:	8b 81       	ldd	r24, Y+3	; 0x03
    b332:	9c 81       	ldd	r25, Y+4	; 0x04
    b334:	fc 01       	movw	r30, r24
    b336:	82 81       	ldd	r24, Z+2	; 0x02
    b338:	93 81       	ldd	r25, Z+3	; 0x03
    b33a:	2b 81       	ldd	r18, Y+3	; 0x03
    b33c:	3c 81       	ldd	r19, Y+4	; 0x04
    b33e:	f9 01       	movw	r30, r18
    b340:	24 81       	ldd	r18, Z+4	; 0x04
    b342:	35 81       	ldd	r19, Z+5	; 0x05
    b344:	fc 01       	movw	r30, r24
    b346:	35 83       	std	Z+5, r19	; 0x05
    b348:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    b34a:	8b 81       	ldd	r24, Y+3	; 0x03
    b34c:	9c 81       	ldd	r25, Y+4	; 0x04
    b34e:	fc 01       	movw	r30, r24
    b350:	84 81       	ldd	r24, Z+4	; 0x04
    b352:	95 81       	ldd	r25, Z+5	; 0x05
    b354:	2b 81       	ldd	r18, Y+3	; 0x03
    b356:	3c 81       	ldd	r19, Y+4	; 0x04
    b358:	f9 01       	movw	r30, r18
    b35a:	22 81       	ldd	r18, Z+2	; 0x02
    b35c:	33 81       	ldd	r19, Z+3	; 0x03
    b35e:	fc 01       	movw	r30, r24
    b360:	33 83       	std	Z+3, r19	; 0x03
    b362:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    b364:	89 81       	ldd	r24, Y+1	; 0x01
    b366:	9a 81       	ldd	r25, Y+2	; 0x02
    b368:	fc 01       	movw	r30, r24
    b36a:	21 81       	ldd	r18, Z+1	; 0x01
    b36c:	32 81       	ldd	r19, Z+2	; 0x02
    b36e:	8b 81       	ldd	r24, Y+3	; 0x03
    b370:	9c 81       	ldd	r25, Y+4	; 0x04
    b372:	28 17       	cp	r18, r24
    b374:	39 07       	cpc	r19, r25
    b376:	51 f4       	brne	.+20     	; 0xb38c <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    b378:	8b 81       	ldd	r24, Y+3	; 0x03
    b37a:	9c 81       	ldd	r25, Y+4	; 0x04
    b37c:	fc 01       	movw	r30, r24
    b37e:	24 81       	ldd	r18, Z+4	; 0x04
    b380:	35 81       	ldd	r19, Z+5	; 0x05
    b382:	89 81       	ldd	r24, Y+1	; 0x01
    b384:	9a 81       	ldd	r25, Y+2	; 0x02
    b386:	fc 01       	movw	r30, r24
    b388:	32 83       	std	Z+2, r19	; 0x02
    b38a:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    b38c:	8b 81       	ldd	r24, Y+3	; 0x03
    b38e:	9c 81       	ldd	r25, Y+4	; 0x04
    b390:	fc 01       	movw	r30, r24
    b392:	11 86       	std	Z+9, r1	; 0x09
    b394:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    b396:	89 81       	ldd	r24, Y+1	; 0x01
    b398:	9a 81       	ldd	r25, Y+2	; 0x02
    b39a:	fc 01       	movw	r30, r24
    b39c:	80 81       	ld	r24, Z
    b39e:	2f ef       	ldi	r18, 0xFF	; 255
    b3a0:	28 0f       	add	r18, r24
    b3a2:	89 81       	ldd	r24, Y+1	; 0x01
    b3a4:	9a 81       	ldd	r25, Y+2	; 0x02
    b3a6:	fc 01       	movw	r30, r24
    b3a8:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    b3aa:	89 81       	ldd	r24, Y+1	; 0x01
    b3ac:	9a 81       	ldd	r25, Y+2	; 0x02
    b3ae:	fc 01       	movw	r30, r24
    b3b0:	80 81       	ld	r24, Z
}
    b3b2:	0f 90       	pop	r0
    b3b4:	0f 90       	pop	r0
    b3b6:	0f 90       	pop	r0
    b3b8:	0f 90       	pop	r0
    b3ba:	df 91       	pop	r29
    b3bc:	cf 91       	pop	r28
    b3be:	08 95       	ret

0000b3c0 <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
    b3c0:	cf 93       	push	r28
    b3c2:	df 93       	push	r29
    b3c4:	cd b7       	in	r28, 0x3d	; 61
    b3c6:	de b7       	in	r29, 0x3e	; 62
    b3c8:	28 97       	sbiw	r28, 0x08	; 8
    b3ca:	0f b6       	in	r0, 0x3f	; 63
    b3cc:	f8 94       	cli
    b3ce:	de bf       	out	0x3e, r29	; 62
    b3d0:	0f be       	out	0x3f, r0	; 63
    b3d2:	cd bf       	out	0x3d, r28	; 61
    b3d4:	9c 83       	std	Y+4, r25	; 0x04
    b3d6:	8b 83       	std	Y+3, r24	; 0x03
    b3d8:	7e 83       	std	Y+6, r23	; 0x06
    b3da:	6d 83       	std	Y+5, r22	; 0x05
    b3dc:	58 87       	std	Y+8, r21	; 0x08
    b3de:	4f 83       	std	Y+7, r20	; 0x07
    b3e0:	8b 81       	ldd	r24, Y+3	; 0x03
    b3e2:	9c 81       	ldd	r25, Y+4	; 0x04
    b3e4:	21 e1       	ldi	r18, 0x11	; 17
    b3e6:	fc 01       	movw	r30, r24
    b3e8:	20 83       	st	Z, r18
    b3ea:	8b 81       	ldd	r24, Y+3	; 0x03
    b3ec:	9c 81       	ldd	r25, Y+4	; 0x04
    b3ee:	01 97       	sbiw	r24, 0x01	; 1
    b3f0:	9c 83       	std	Y+4, r25	; 0x04
    b3f2:	8b 83       	std	Y+3, r24	; 0x03
    b3f4:	8b 81       	ldd	r24, Y+3	; 0x03
    b3f6:	9c 81       	ldd	r25, Y+4	; 0x04
    b3f8:	22 e2       	ldi	r18, 0x22	; 34
    b3fa:	fc 01       	movw	r30, r24
    b3fc:	20 83       	st	Z, r18
    b3fe:	8b 81       	ldd	r24, Y+3	; 0x03
    b400:	9c 81       	ldd	r25, Y+4	; 0x04
    b402:	01 97       	sbiw	r24, 0x01	; 1
    b404:	9c 83       	std	Y+4, r25	; 0x04
    b406:	8b 83       	std	Y+3, r24	; 0x03
    b408:	8b 81       	ldd	r24, Y+3	; 0x03
    b40a:	9c 81       	ldd	r25, Y+4	; 0x04
    b40c:	23 e3       	ldi	r18, 0x33	; 51
    b40e:	fc 01       	movw	r30, r24
    b410:	20 83       	st	Z, r18
    b412:	8b 81       	ldd	r24, Y+3	; 0x03
    b414:	9c 81       	ldd	r25, Y+4	; 0x04
    b416:	01 97       	sbiw	r24, 0x01	; 1
    b418:	9c 83       	std	Y+4, r25	; 0x04
    b41a:	8b 83       	std	Y+3, r24	; 0x03
    b41c:	8d 81       	ldd	r24, Y+5	; 0x05
    b41e:	9e 81       	ldd	r25, Y+6	; 0x06
    b420:	9a 83       	std	Y+2, r25	; 0x02
    b422:	89 83       	std	Y+1, r24	; 0x01
    b424:	29 81       	ldd	r18, Y+1	; 0x01
    b426:	8b 81       	ldd	r24, Y+3	; 0x03
    b428:	9c 81       	ldd	r25, Y+4	; 0x04
    b42a:	fc 01       	movw	r30, r24
    b42c:	20 83       	st	Z, r18
    b42e:	8b 81       	ldd	r24, Y+3	; 0x03
    b430:	9c 81       	ldd	r25, Y+4	; 0x04
    b432:	01 97       	sbiw	r24, 0x01	; 1
    b434:	9c 83       	std	Y+4, r25	; 0x04
    b436:	8b 83       	std	Y+3, r24	; 0x03
    b438:	89 81       	ldd	r24, Y+1	; 0x01
    b43a:	9a 81       	ldd	r25, Y+2	; 0x02
    b43c:	89 2f       	mov	r24, r25
    b43e:	99 27       	eor	r25, r25
    b440:	9a 83       	std	Y+2, r25	; 0x02
    b442:	89 83       	std	Y+1, r24	; 0x01
    b444:	29 81       	ldd	r18, Y+1	; 0x01
    b446:	8b 81       	ldd	r24, Y+3	; 0x03
    b448:	9c 81       	ldd	r25, Y+4	; 0x04
    b44a:	fc 01       	movw	r30, r24
    b44c:	20 83       	st	Z, r18
    b44e:	8b 81       	ldd	r24, Y+3	; 0x03
    b450:	9c 81       	ldd	r25, Y+4	; 0x04
    b452:	01 97       	sbiw	r24, 0x01	; 1
    b454:	9c 83       	std	Y+4, r25	; 0x04
    b456:	8b 83       	std	Y+3, r24	; 0x03
    b458:	8b 81       	ldd	r24, Y+3	; 0x03
    b45a:	9c 81       	ldd	r25, Y+4	; 0x04
    b45c:	fc 01       	movw	r30, r24
    b45e:	10 82       	st	Z, r1
    b460:	8b 81       	ldd	r24, Y+3	; 0x03
    b462:	9c 81       	ldd	r25, Y+4	; 0x04
    b464:	01 97       	sbiw	r24, 0x01	; 1
    b466:	9c 83       	std	Y+4, r25	; 0x04
    b468:	8b 83       	std	Y+3, r24	; 0x03
    b46a:	8b 81       	ldd	r24, Y+3	; 0x03
    b46c:	9c 81       	ldd	r25, Y+4	; 0x04
    b46e:	fc 01       	movw	r30, r24
    b470:	10 82       	st	Z, r1
    b472:	8b 81       	ldd	r24, Y+3	; 0x03
    b474:	9c 81       	ldd	r25, Y+4	; 0x04
    b476:	01 97       	sbiw	r24, 0x01	; 1
    b478:	9c 83       	std	Y+4, r25	; 0x04
    b47a:	8b 83       	std	Y+3, r24	; 0x03
    b47c:	8b 81       	ldd	r24, Y+3	; 0x03
    b47e:	9c 81       	ldd	r25, Y+4	; 0x04
    b480:	20 e8       	ldi	r18, 0x80	; 128
    b482:	fc 01       	movw	r30, r24
    b484:	20 83       	st	Z, r18
    b486:	8b 81       	ldd	r24, Y+3	; 0x03
    b488:	9c 81       	ldd	r25, Y+4	; 0x04
    b48a:	01 97       	sbiw	r24, 0x01	; 1
    b48c:	9c 83       	std	Y+4, r25	; 0x04
    b48e:	8b 83       	std	Y+3, r24	; 0x03
    b490:	8b 81       	ldd	r24, Y+3	; 0x03
    b492:	9c 81       	ldd	r25, Y+4	; 0x04
    b494:	fc 01       	movw	r30, r24
    b496:	10 82       	st	Z, r1
    b498:	8b 81       	ldd	r24, Y+3	; 0x03
    b49a:	9c 81       	ldd	r25, Y+4	; 0x04
    b49c:	01 97       	sbiw	r24, 0x01	; 1
    b49e:	9c 83       	std	Y+4, r25	; 0x04
    b4a0:	8b 83       	std	Y+3, r24	; 0x03
    b4a2:	8b 81       	ldd	r24, Y+3	; 0x03
    b4a4:	9c 81       	ldd	r25, Y+4	; 0x04
    b4a6:	fc 01       	movw	r30, r24
    b4a8:	10 82       	st	Z, r1
    b4aa:	8b 81       	ldd	r24, Y+3	; 0x03
    b4ac:	9c 81       	ldd	r25, Y+4	; 0x04
    b4ae:	01 97       	sbiw	r24, 0x01	; 1
    b4b0:	9c 83       	std	Y+4, r25	; 0x04
    b4b2:	8b 83       	std	Y+3, r24	; 0x03
    b4b4:	8b 81       	ldd	r24, Y+3	; 0x03
    b4b6:	9c 81       	ldd	r25, Y+4	; 0x04
    b4b8:	fc 01       	movw	r30, r24
    b4ba:	10 82       	st	Z, r1
    b4bc:	8b 81       	ldd	r24, Y+3	; 0x03
    b4be:	9c 81       	ldd	r25, Y+4	; 0x04
    b4c0:	01 97       	sbiw	r24, 0x01	; 1
    b4c2:	9c 83       	std	Y+4, r25	; 0x04
    b4c4:	8b 83       	std	Y+3, r24	; 0x03
    b4c6:	8b 81       	ldd	r24, Y+3	; 0x03
    b4c8:	9c 81       	ldd	r25, Y+4	; 0x04
    b4ca:	22 e0       	ldi	r18, 0x02	; 2
    b4cc:	fc 01       	movw	r30, r24
    b4ce:	20 83       	st	Z, r18
    b4d0:	8b 81       	ldd	r24, Y+3	; 0x03
    b4d2:	9c 81       	ldd	r25, Y+4	; 0x04
    b4d4:	01 97       	sbiw	r24, 0x01	; 1
    b4d6:	9c 83       	std	Y+4, r25	; 0x04
    b4d8:	8b 83       	std	Y+3, r24	; 0x03
    b4da:	8b 81       	ldd	r24, Y+3	; 0x03
    b4dc:	9c 81       	ldd	r25, Y+4	; 0x04
    b4de:	23 e0       	ldi	r18, 0x03	; 3
    b4e0:	fc 01       	movw	r30, r24
    b4e2:	20 83       	st	Z, r18
    b4e4:	8b 81       	ldd	r24, Y+3	; 0x03
    b4e6:	9c 81       	ldd	r25, Y+4	; 0x04
    b4e8:	01 97       	sbiw	r24, 0x01	; 1
    b4ea:	9c 83       	std	Y+4, r25	; 0x04
    b4ec:	8b 83       	std	Y+3, r24	; 0x03
    b4ee:	8b 81       	ldd	r24, Y+3	; 0x03
    b4f0:	9c 81       	ldd	r25, Y+4	; 0x04
    b4f2:	24 e0       	ldi	r18, 0x04	; 4
    b4f4:	fc 01       	movw	r30, r24
    b4f6:	20 83       	st	Z, r18
    b4f8:	8b 81       	ldd	r24, Y+3	; 0x03
    b4fa:	9c 81       	ldd	r25, Y+4	; 0x04
    b4fc:	01 97       	sbiw	r24, 0x01	; 1
    b4fe:	9c 83       	std	Y+4, r25	; 0x04
    b500:	8b 83       	std	Y+3, r24	; 0x03
    b502:	8b 81       	ldd	r24, Y+3	; 0x03
    b504:	9c 81       	ldd	r25, Y+4	; 0x04
    b506:	25 e0       	ldi	r18, 0x05	; 5
    b508:	fc 01       	movw	r30, r24
    b50a:	20 83       	st	Z, r18
    b50c:	8b 81       	ldd	r24, Y+3	; 0x03
    b50e:	9c 81       	ldd	r25, Y+4	; 0x04
    b510:	01 97       	sbiw	r24, 0x01	; 1
    b512:	9c 83       	std	Y+4, r25	; 0x04
    b514:	8b 83       	std	Y+3, r24	; 0x03
    b516:	8b 81       	ldd	r24, Y+3	; 0x03
    b518:	9c 81       	ldd	r25, Y+4	; 0x04
    b51a:	26 e0       	ldi	r18, 0x06	; 6
    b51c:	fc 01       	movw	r30, r24
    b51e:	20 83       	st	Z, r18
    b520:	8b 81       	ldd	r24, Y+3	; 0x03
    b522:	9c 81       	ldd	r25, Y+4	; 0x04
    b524:	01 97       	sbiw	r24, 0x01	; 1
    b526:	9c 83       	std	Y+4, r25	; 0x04
    b528:	8b 83       	std	Y+3, r24	; 0x03
    b52a:	8b 81       	ldd	r24, Y+3	; 0x03
    b52c:	9c 81       	ldd	r25, Y+4	; 0x04
    b52e:	27 e0       	ldi	r18, 0x07	; 7
    b530:	fc 01       	movw	r30, r24
    b532:	20 83       	st	Z, r18
    b534:	8b 81       	ldd	r24, Y+3	; 0x03
    b536:	9c 81       	ldd	r25, Y+4	; 0x04
    b538:	01 97       	sbiw	r24, 0x01	; 1
    b53a:	9c 83       	std	Y+4, r25	; 0x04
    b53c:	8b 83       	std	Y+3, r24	; 0x03
    b53e:	8b 81       	ldd	r24, Y+3	; 0x03
    b540:	9c 81       	ldd	r25, Y+4	; 0x04
    b542:	28 e0       	ldi	r18, 0x08	; 8
    b544:	fc 01       	movw	r30, r24
    b546:	20 83       	st	Z, r18
    b548:	8b 81       	ldd	r24, Y+3	; 0x03
    b54a:	9c 81       	ldd	r25, Y+4	; 0x04
    b54c:	01 97       	sbiw	r24, 0x01	; 1
    b54e:	9c 83       	std	Y+4, r25	; 0x04
    b550:	8b 83       	std	Y+3, r24	; 0x03
    b552:	8b 81       	ldd	r24, Y+3	; 0x03
    b554:	9c 81       	ldd	r25, Y+4	; 0x04
    b556:	29 e0       	ldi	r18, 0x09	; 9
    b558:	fc 01       	movw	r30, r24
    b55a:	20 83       	st	Z, r18
    b55c:	8b 81       	ldd	r24, Y+3	; 0x03
    b55e:	9c 81       	ldd	r25, Y+4	; 0x04
    b560:	01 97       	sbiw	r24, 0x01	; 1
    b562:	9c 83       	std	Y+4, r25	; 0x04
    b564:	8b 83       	std	Y+3, r24	; 0x03
    b566:	8b 81       	ldd	r24, Y+3	; 0x03
    b568:	9c 81       	ldd	r25, Y+4	; 0x04
    b56a:	20 e1       	ldi	r18, 0x10	; 16
    b56c:	fc 01       	movw	r30, r24
    b56e:	20 83       	st	Z, r18
    b570:	8b 81       	ldd	r24, Y+3	; 0x03
    b572:	9c 81       	ldd	r25, Y+4	; 0x04
    b574:	01 97       	sbiw	r24, 0x01	; 1
    b576:	9c 83       	std	Y+4, r25	; 0x04
    b578:	8b 83       	std	Y+3, r24	; 0x03
    b57a:	8b 81       	ldd	r24, Y+3	; 0x03
    b57c:	9c 81       	ldd	r25, Y+4	; 0x04
    b57e:	21 e1       	ldi	r18, 0x11	; 17
    b580:	fc 01       	movw	r30, r24
    b582:	20 83       	st	Z, r18
    b584:	8b 81       	ldd	r24, Y+3	; 0x03
    b586:	9c 81       	ldd	r25, Y+4	; 0x04
    b588:	01 97       	sbiw	r24, 0x01	; 1
    b58a:	9c 83       	std	Y+4, r25	; 0x04
    b58c:	8b 83       	std	Y+3, r24	; 0x03
    b58e:	8b 81       	ldd	r24, Y+3	; 0x03
    b590:	9c 81       	ldd	r25, Y+4	; 0x04
    b592:	22 e1       	ldi	r18, 0x12	; 18
    b594:	fc 01       	movw	r30, r24
    b596:	20 83       	st	Z, r18
    b598:	8b 81       	ldd	r24, Y+3	; 0x03
    b59a:	9c 81       	ldd	r25, Y+4	; 0x04
    b59c:	01 97       	sbiw	r24, 0x01	; 1
    b59e:	9c 83       	std	Y+4, r25	; 0x04
    b5a0:	8b 83       	std	Y+3, r24	; 0x03
    b5a2:	8b 81       	ldd	r24, Y+3	; 0x03
    b5a4:	9c 81       	ldd	r25, Y+4	; 0x04
    b5a6:	23 e1       	ldi	r18, 0x13	; 19
    b5a8:	fc 01       	movw	r30, r24
    b5aa:	20 83       	st	Z, r18
    b5ac:	8b 81       	ldd	r24, Y+3	; 0x03
    b5ae:	9c 81       	ldd	r25, Y+4	; 0x04
    b5b0:	01 97       	sbiw	r24, 0x01	; 1
    b5b2:	9c 83       	std	Y+4, r25	; 0x04
    b5b4:	8b 83       	std	Y+3, r24	; 0x03
    b5b6:	8b 81       	ldd	r24, Y+3	; 0x03
    b5b8:	9c 81       	ldd	r25, Y+4	; 0x04
    b5ba:	24 e1       	ldi	r18, 0x14	; 20
    b5bc:	fc 01       	movw	r30, r24
    b5be:	20 83       	st	Z, r18
    b5c0:	8b 81       	ldd	r24, Y+3	; 0x03
    b5c2:	9c 81       	ldd	r25, Y+4	; 0x04
    b5c4:	01 97       	sbiw	r24, 0x01	; 1
    b5c6:	9c 83       	std	Y+4, r25	; 0x04
    b5c8:	8b 83       	std	Y+3, r24	; 0x03
    b5ca:	8b 81       	ldd	r24, Y+3	; 0x03
    b5cc:	9c 81       	ldd	r25, Y+4	; 0x04
    b5ce:	25 e1       	ldi	r18, 0x15	; 21
    b5d0:	fc 01       	movw	r30, r24
    b5d2:	20 83       	st	Z, r18
    b5d4:	8b 81       	ldd	r24, Y+3	; 0x03
    b5d6:	9c 81       	ldd	r25, Y+4	; 0x04
    b5d8:	01 97       	sbiw	r24, 0x01	; 1
    b5da:	9c 83       	std	Y+4, r25	; 0x04
    b5dc:	8b 83       	std	Y+3, r24	; 0x03
    b5de:	8b 81       	ldd	r24, Y+3	; 0x03
    b5e0:	9c 81       	ldd	r25, Y+4	; 0x04
    b5e2:	26 e1       	ldi	r18, 0x16	; 22
    b5e4:	fc 01       	movw	r30, r24
    b5e6:	20 83       	st	Z, r18
    b5e8:	8b 81       	ldd	r24, Y+3	; 0x03
    b5ea:	9c 81       	ldd	r25, Y+4	; 0x04
    b5ec:	01 97       	sbiw	r24, 0x01	; 1
    b5ee:	9c 83       	std	Y+4, r25	; 0x04
    b5f0:	8b 83       	std	Y+3, r24	; 0x03
    b5f2:	8b 81       	ldd	r24, Y+3	; 0x03
    b5f4:	9c 81       	ldd	r25, Y+4	; 0x04
    b5f6:	27 e1       	ldi	r18, 0x17	; 23
    b5f8:	fc 01       	movw	r30, r24
    b5fa:	20 83       	st	Z, r18
    b5fc:	8b 81       	ldd	r24, Y+3	; 0x03
    b5fe:	9c 81       	ldd	r25, Y+4	; 0x04
    b600:	01 97       	sbiw	r24, 0x01	; 1
    b602:	9c 83       	std	Y+4, r25	; 0x04
    b604:	8b 83       	std	Y+3, r24	; 0x03
    b606:	8b 81       	ldd	r24, Y+3	; 0x03
    b608:	9c 81       	ldd	r25, Y+4	; 0x04
    b60a:	28 e1       	ldi	r18, 0x18	; 24
    b60c:	fc 01       	movw	r30, r24
    b60e:	20 83       	st	Z, r18
    b610:	8b 81       	ldd	r24, Y+3	; 0x03
    b612:	9c 81       	ldd	r25, Y+4	; 0x04
    b614:	01 97       	sbiw	r24, 0x01	; 1
    b616:	9c 83       	std	Y+4, r25	; 0x04
    b618:	8b 83       	std	Y+3, r24	; 0x03
    b61a:	8b 81       	ldd	r24, Y+3	; 0x03
    b61c:	9c 81       	ldd	r25, Y+4	; 0x04
    b61e:	29 e1       	ldi	r18, 0x19	; 25
    b620:	fc 01       	movw	r30, r24
    b622:	20 83       	st	Z, r18
    b624:	8b 81       	ldd	r24, Y+3	; 0x03
    b626:	9c 81       	ldd	r25, Y+4	; 0x04
    b628:	01 97       	sbiw	r24, 0x01	; 1
    b62a:	9c 83       	std	Y+4, r25	; 0x04
    b62c:	8b 83       	std	Y+3, r24	; 0x03
    b62e:	8b 81       	ldd	r24, Y+3	; 0x03
    b630:	9c 81       	ldd	r25, Y+4	; 0x04
    b632:	20 e2       	ldi	r18, 0x20	; 32
    b634:	fc 01       	movw	r30, r24
    b636:	20 83       	st	Z, r18
    b638:	8b 81       	ldd	r24, Y+3	; 0x03
    b63a:	9c 81       	ldd	r25, Y+4	; 0x04
    b63c:	01 97       	sbiw	r24, 0x01	; 1
    b63e:	9c 83       	std	Y+4, r25	; 0x04
    b640:	8b 83       	std	Y+3, r24	; 0x03
    b642:	8b 81       	ldd	r24, Y+3	; 0x03
    b644:	9c 81       	ldd	r25, Y+4	; 0x04
    b646:	21 e2       	ldi	r18, 0x21	; 33
    b648:	fc 01       	movw	r30, r24
    b64a:	20 83       	st	Z, r18
    b64c:	8b 81       	ldd	r24, Y+3	; 0x03
    b64e:	9c 81       	ldd	r25, Y+4	; 0x04
    b650:	01 97       	sbiw	r24, 0x01	; 1
    b652:	9c 83       	std	Y+4, r25	; 0x04
    b654:	8b 83       	std	Y+3, r24	; 0x03
    b656:	8b 81       	ldd	r24, Y+3	; 0x03
    b658:	9c 81       	ldd	r25, Y+4	; 0x04
    b65a:	22 e2       	ldi	r18, 0x22	; 34
    b65c:	fc 01       	movw	r30, r24
    b65e:	20 83       	st	Z, r18
    b660:	8b 81       	ldd	r24, Y+3	; 0x03
    b662:	9c 81       	ldd	r25, Y+4	; 0x04
    b664:	01 97       	sbiw	r24, 0x01	; 1
    b666:	9c 83       	std	Y+4, r25	; 0x04
    b668:	8b 83       	std	Y+3, r24	; 0x03
    b66a:	8b 81       	ldd	r24, Y+3	; 0x03
    b66c:	9c 81       	ldd	r25, Y+4	; 0x04
    b66e:	23 e2       	ldi	r18, 0x23	; 35
    b670:	fc 01       	movw	r30, r24
    b672:	20 83       	st	Z, r18
    b674:	8b 81       	ldd	r24, Y+3	; 0x03
    b676:	9c 81       	ldd	r25, Y+4	; 0x04
    b678:	01 97       	sbiw	r24, 0x01	; 1
    b67a:	9c 83       	std	Y+4, r25	; 0x04
    b67c:	8b 83       	std	Y+3, r24	; 0x03
    b67e:	8f 81       	ldd	r24, Y+7	; 0x07
    b680:	98 85       	ldd	r25, Y+8	; 0x08
    b682:	9a 83       	std	Y+2, r25	; 0x02
    b684:	89 83       	std	Y+1, r24	; 0x01
    b686:	29 81       	ldd	r18, Y+1	; 0x01
    b688:	8b 81       	ldd	r24, Y+3	; 0x03
    b68a:	9c 81       	ldd	r25, Y+4	; 0x04
    b68c:	fc 01       	movw	r30, r24
    b68e:	20 83       	st	Z, r18
    b690:	8b 81       	ldd	r24, Y+3	; 0x03
    b692:	9c 81       	ldd	r25, Y+4	; 0x04
    b694:	01 97       	sbiw	r24, 0x01	; 1
    b696:	9c 83       	std	Y+4, r25	; 0x04
    b698:	8b 83       	std	Y+3, r24	; 0x03
    b69a:	89 81       	ldd	r24, Y+1	; 0x01
    b69c:	9a 81       	ldd	r25, Y+2	; 0x02
    b69e:	89 2f       	mov	r24, r25
    b6a0:	99 27       	eor	r25, r25
    b6a2:	9a 83       	std	Y+2, r25	; 0x02
    b6a4:	89 83       	std	Y+1, r24	; 0x01
    b6a6:	29 81       	ldd	r18, Y+1	; 0x01
    b6a8:	8b 81       	ldd	r24, Y+3	; 0x03
    b6aa:	9c 81       	ldd	r25, Y+4	; 0x04
    b6ac:	fc 01       	movw	r30, r24
    b6ae:	20 83       	st	Z, r18
    b6b0:	8b 81       	ldd	r24, Y+3	; 0x03
    b6b2:	9c 81       	ldd	r25, Y+4	; 0x04
    b6b4:	01 97       	sbiw	r24, 0x01	; 1
    b6b6:	9c 83       	std	Y+4, r25	; 0x04
    b6b8:	8b 83       	std	Y+3, r24	; 0x03
    b6ba:	8b 81       	ldd	r24, Y+3	; 0x03
    b6bc:	9c 81       	ldd	r25, Y+4	; 0x04
    b6be:	26 e2       	ldi	r18, 0x26	; 38
    b6c0:	fc 01       	movw	r30, r24
    b6c2:	20 83       	st	Z, r18
    b6c4:	8b 81       	ldd	r24, Y+3	; 0x03
    b6c6:	9c 81       	ldd	r25, Y+4	; 0x04
    b6c8:	01 97       	sbiw	r24, 0x01	; 1
    b6ca:	9c 83       	std	Y+4, r25	; 0x04
    b6cc:	8b 83       	std	Y+3, r24	; 0x03
    b6ce:	8b 81       	ldd	r24, Y+3	; 0x03
    b6d0:	9c 81       	ldd	r25, Y+4	; 0x04
    b6d2:	27 e2       	ldi	r18, 0x27	; 39
    b6d4:	fc 01       	movw	r30, r24
    b6d6:	20 83       	st	Z, r18
    b6d8:	8b 81       	ldd	r24, Y+3	; 0x03
    b6da:	9c 81       	ldd	r25, Y+4	; 0x04
    b6dc:	01 97       	sbiw	r24, 0x01	; 1
    b6de:	9c 83       	std	Y+4, r25	; 0x04
    b6e0:	8b 83       	std	Y+3, r24	; 0x03
    b6e2:	8b 81       	ldd	r24, Y+3	; 0x03
    b6e4:	9c 81       	ldd	r25, Y+4	; 0x04
    b6e6:	28 e2       	ldi	r18, 0x28	; 40
    b6e8:	fc 01       	movw	r30, r24
    b6ea:	20 83       	st	Z, r18
    b6ec:	8b 81       	ldd	r24, Y+3	; 0x03
    b6ee:	9c 81       	ldd	r25, Y+4	; 0x04
    b6f0:	01 97       	sbiw	r24, 0x01	; 1
    b6f2:	9c 83       	std	Y+4, r25	; 0x04
    b6f4:	8b 83       	std	Y+3, r24	; 0x03
    b6f6:	8b 81       	ldd	r24, Y+3	; 0x03
    b6f8:	9c 81       	ldd	r25, Y+4	; 0x04
    b6fa:	29 e2       	ldi	r18, 0x29	; 41
    b6fc:	fc 01       	movw	r30, r24
    b6fe:	20 83       	st	Z, r18
    b700:	8b 81       	ldd	r24, Y+3	; 0x03
    b702:	9c 81       	ldd	r25, Y+4	; 0x04
    b704:	01 97       	sbiw	r24, 0x01	; 1
    b706:	9c 83       	std	Y+4, r25	; 0x04
    b708:	8b 83       	std	Y+3, r24	; 0x03
    b70a:	8b 81       	ldd	r24, Y+3	; 0x03
    b70c:	9c 81       	ldd	r25, Y+4	; 0x04
    b70e:	20 e3       	ldi	r18, 0x30	; 48
    b710:	fc 01       	movw	r30, r24
    b712:	20 83       	st	Z, r18
    b714:	8b 81       	ldd	r24, Y+3	; 0x03
    b716:	9c 81       	ldd	r25, Y+4	; 0x04
    b718:	01 97       	sbiw	r24, 0x01	; 1
    b71a:	9c 83       	std	Y+4, r25	; 0x04
    b71c:	8b 83       	std	Y+3, r24	; 0x03
    b71e:	8b 81       	ldd	r24, Y+3	; 0x03
    b720:	9c 81       	ldd	r25, Y+4	; 0x04
    b722:	21 e3       	ldi	r18, 0x31	; 49
    b724:	fc 01       	movw	r30, r24
    b726:	20 83       	st	Z, r18
    b728:	8b 81       	ldd	r24, Y+3	; 0x03
    b72a:	9c 81       	ldd	r25, Y+4	; 0x04
    b72c:	01 97       	sbiw	r24, 0x01	; 1
    b72e:	9c 83       	std	Y+4, r25	; 0x04
    b730:	8b 83       	std	Y+3, r24	; 0x03
    b732:	8b 81       	ldd	r24, Y+3	; 0x03
    b734:	9c 81       	ldd	r25, Y+4	; 0x04
    b736:	28 96       	adiw	r28, 0x08	; 8
    b738:	0f b6       	in	r0, 0x3f	; 63
    b73a:	f8 94       	cli
    b73c:	de bf       	out	0x3e, r29	; 62
    b73e:	0f be       	out	0x3f, r0	; 63
    b740:	cd bf       	out	0x3d, r28	; 61
    b742:	df 91       	pop	r29
    b744:	cf 91       	pop	r28
    b746:	08 95       	ret

0000b748 <xPortStartScheduler>:
    b748:	cf 93       	push	r28
    b74a:	df 93       	push	r29
    b74c:	cd b7       	in	r28, 0x3d	; 61
    b74e:	de b7       	in	r29, 0x3e	; 62
    b750:	ff d0       	rcall	.+510    	; 0xb950 <prvSetupTimerInterrupt>
    b752:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <pxCurrentTCB>
    b756:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    b75a:	cd 91       	ld	r28, X+
    b75c:	cd bf       	out	0x3d, r28	; 61
    b75e:	dd 91       	ld	r29, X+
    b760:	de bf       	out	0x3e, r29	; 62
    b762:	ff 91       	pop	r31
    b764:	ef 91       	pop	r30
    b766:	df 91       	pop	r29
    b768:	cf 91       	pop	r28
    b76a:	bf 91       	pop	r27
    b76c:	af 91       	pop	r26
    b76e:	9f 91       	pop	r25
    b770:	8f 91       	pop	r24
    b772:	7f 91       	pop	r23
    b774:	6f 91       	pop	r22
    b776:	5f 91       	pop	r21
    b778:	4f 91       	pop	r20
    b77a:	3f 91       	pop	r19
    b77c:	2f 91       	pop	r18
    b77e:	1f 91       	pop	r17
    b780:	0f 91       	pop	r16
    b782:	ff 90       	pop	r15
    b784:	ef 90       	pop	r14
    b786:	df 90       	pop	r13
    b788:	cf 90       	pop	r12
    b78a:	bf 90       	pop	r11
    b78c:	af 90       	pop	r10
    b78e:	9f 90       	pop	r9
    b790:	8f 90       	pop	r8
    b792:	7f 90       	pop	r7
    b794:	6f 90       	pop	r6
    b796:	5f 90       	pop	r5
    b798:	4f 90       	pop	r4
    b79a:	3f 90       	pop	r3
    b79c:	2f 90       	pop	r2
    b79e:	1f 90       	pop	r1
    b7a0:	0f 90       	pop	r0
    b7a2:	0c be       	out	0x3c, r0	; 60
    b7a4:	0f 90       	pop	r0
    b7a6:	0b be       	out	0x3b, r0	; 59
    b7a8:	0f 90       	pop	r0
    b7aa:	0f be       	out	0x3f, r0	; 63
    b7ac:	0f 90       	pop	r0
    b7ae:	08 95       	ret
    b7b0:	81 e0       	ldi	r24, 0x01	; 1
    b7b2:	df 91       	pop	r29
    b7b4:	cf 91       	pop	r28
    b7b6:	08 95       	ret

0000b7b8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    b7b8:	0f 92       	push	r0
    b7ba:	0f b6       	in	r0, 0x3f	; 63
    b7bc:	f8 94       	cli
    b7be:	0f 92       	push	r0
    b7c0:	0b b6       	in	r0, 0x3b	; 59
    b7c2:	0f 92       	push	r0
    b7c4:	0c b6       	in	r0, 0x3c	; 60
    b7c6:	0f 92       	push	r0
    b7c8:	1f 92       	push	r1
    b7ca:	11 24       	eor	r1, r1
    b7cc:	2f 92       	push	r2
    b7ce:	3f 92       	push	r3
    b7d0:	4f 92       	push	r4
    b7d2:	5f 92       	push	r5
    b7d4:	6f 92       	push	r6
    b7d6:	7f 92       	push	r7
    b7d8:	8f 92       	push	r8
    b7da:	9f 92       	push	r9
    b7dc:	af 92       	push	r10
    b7de:	bf 92       	push	r11
    b7e0:	cf 92       	push	r12
    b7e2:	df 92       	push	r13
    b7e4:	ef 92       	push	r14
    b7e6:	ff 92       	push	r15
    b7e8:	0f 93       	push	r16
    b7ea:	1f 93       	push	r17
    b7ec:	2f 93       	push	r18
    b7ee:	3f 93       	push	r19
    b7f0:	4f 93       	push	r20
    b7f2:	5f 93       	push	r21
    b7f4:	6f 93       	push	r22
    b7f6:	7f 93       	push	r23
    b7f8:	8f 93       	push	r24
    b7fa:	9f 93       	push	r25
    b7fc:	af 93       	push	r26
    b7fe:	bf 93       	push	r27
    b800:	cf 93       	push	r28
    b802:	df 93       	push	r29
    b804:	ef 93       	push	r30
    b806:	ff 93       	push	r31
    b808:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <pxCurrentTCB>
    b80c:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    b810:	0d b6       	in	r0, 0x3d	; 61
    b812:	0d 92       	st	X+, r0
    b814:	0e b6       	in	r0, 0x3e	; 62
    b816:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    b818:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    b81c:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <pxCurrentTCB>
    b820:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    b824:	cd 91       	ld	r28, X+
    b826:	cd bf       	out	0x3d, r28	; 61
    b828:	dd 91       	ld	r29, X+
    b82a:	de bf       	out	0x3e, r29	; 62
    b82c:	ff 91       	pop	r31
    b82e:	ef 91       	pop	r30
    b830:	df 91       	pop	r29
    b832:	cf 91       	pop	r28
    b834:	bf 91       	pop	r27
    b836:	af 91       	pop	r26
    b838:	9f 91       	pop	r25
    b83a:	8f 91       	pop	r24
    b83c:	7f 91       	pop	r23
    b83e:	6f 91       	pop	r22
    b840:	5f 91       	pop	r21
    b842:	4f 91       	pop	r20
    b844:	3f 91       	pop	r19
    b846:	2f 91       	pop	r18
    b848:	1f 91       	pop	r17
    b84a:	0f 91       	pop	r16
    b84c:	ff 90       	pop	r15
    b84e:	ef 90       	pop	r14
    b850:	df 90       	pop	r13
    b852:	cf 90       	pop	r12
    b854:	bf 90       	pop	r11
    b856:	af 90       	pop	r10
    b858:	9f 90       	pop	r9
    b85a:	8f 90       	pop	r8
    b85c:	7f 90       	pop	r7
    b85e:	6f 90       	pop	r6
    b860:	5f 90       	pop	r5
    b862:	4f 90       	pop	r4
    b864:	3f 90       	pop	r3
    b866:	2f 90       	pop	r2
    b868:	1f 90       	pop	r1
    b86a:	0f 90       	pop	r0
    b86c:	0c be       	out	0x3c, r0	; 60
    b86e:	0f 90       	pop	r0
    b870:	0b be       	out	0x3b, r0	; 59
    b872:	0f 90       	pop	r0
    b874:	0f be       	out	0x3f, r0	; 63
    b876:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    b878:	08 95       	ret
	...

0000b87c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    b87c:	0f 92       	push	r0
    b87e:	0f b6       	in	r0, 0x3f	; 63
    b880:	f8 94       	cli
    b882:	0f 92       	push	r0
    b884:	0b b6       	in	r0, 0x3b	; 59
    b886:	0f 92       	push	r0
    b888:	0c b6       	in	r0, 0x3c	; 60
    b88a:	0f 92       	push	r0
    b88c:	1f 92       	push	r1
    b88e:	11 24       	eor	r1, r1
    b890:	2f 92       	push	r2
    b892:	3f 92       	push	r3
    b894:	4f 92       	push	r4
    b896:	5f 92       	push	r5
    b898:	6f 92       	push	r6
    b89a:	7f 92       	push	r7
    b89c:	8f 92       	push	r8
    b89e:	9f 92       	push	r9
    b8a0:	af 92       	push	r10
    b8a2:	bf 92       	push	r11
    b8a4:	cf 92       	push	r12
    b8a6:	df 92       	push	r13
    b8a8:	ef 92       	push	r14
    b8aa:	ff 92       	push	r15
    b8ac:	0f 93       	push	r16
    b8ae:	1f 93       	push	r17
    b8b0:	2f 93       	push	r18
    b8b2:	3f 93       	push	r19
    b8b4:	4f 93       	push	r20
    b8b6:	5f 93       	push	r21
    b8b8:	6f 93       	push	r22
    b8ba:	7f 93       	push	r23
    b8bc:	8f 93       	push	r24
    b8be:	9f 93       	push	r25
    b8c0:	af 93       	push	r26
    b8c2:	bf 93       	push	r27
    b8c4:	cf 93       	push	r28
    b8c6:	df 93       	push	r29
    b8c8:	ef 93       	push	r30
    b8ca:	ff 93       	push	r31
    b8cc:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <pxCurrentTCB>
    b8d0:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    b8d4:	0d b6       	in	r0, 0x3d	; 61
    b8d6:	0d 92       	st	X+, r0
    b8d8:	0e b6       	in	r0, 0x3e	; 62
    b8da:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    b8dc:	83 e5       	ldi	r24, 0x53	; 83
    b8de:	90 e0       	ldi	r25, 0x00	; 0
    b8e0:	fc 01       	movw	r30, r24
    b8e2:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
    b8e4:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <xTaskIncrementTick>
    b8e8:	88 23       	and	r24, r24
    b8ea:	11 f0       	breq	.+4      	; 0xb8f0 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    b8ec:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    b8f0:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <pxCurrentTCB>
    b8f4:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <pxCurrentTCB+0x1>
    b8f8:	cd 91       	ld	r28, X+
    b8fa:	cd bf       	out	0x3d, r28	; 61
    b8fc:	dd 91       	ld	r29, X+
    b8fe:	de bf       	out	0x3e, r29	; 62
    b900:	ff 91       	pop	r31
    b902:	ef 91       	pop	r30
    b904:	df 91       	pop	r29
    b906:	cf 91       	pop	r28
    b908:	bf 91       	pop	r27
    b90a:	af 91       	pop	r26
    b90c:	9f 91       	pop	r25
    b90e:	8f 91       	pop	r24
    b910:	7f 91       	pop	r23
    b912:	6f 91       	pop	r22
    b914:	5f 91       	pop	r21
    b916:	4f 91       	pop	r20
    b918:	3f 91       	pop	r19
    b91a:	2f 91       	pop	r18
    b91c:	1f 91       	pop	r17
    b91e:	0f 91       	pop	r16
    b920:	ff 90       	pop	r15
    b922:	ef 90       	pop	r14
    b924:	df 90       	pop	r13
    b926:	cf 90       	pop	r12
    b928:	bf 90       	pop	r11
    b92a:	af 90       	pop	r10
    b92c:	9f 90       	pop	r9
    b92e:	8f 90       	pop	r8
    b930:	7f 90       	pop	r7
    b932:	6f 90       	pop	r6
    b934:	5f 90       	pop	r5
    b936:	4f 90       	pop	r4
    b938:	3f 90       	pop	r3
    b93a:	2f 90       	pop	r2
    b93c:	1f 90       	pop	r1
    b93e:	0f 90       	pop	r0
    b940:	0c be       	out	0x3c, r0	; 60
    b942:	0f 90       	pop	r0
    b944:	0b be       	out	0x3b, r0	; 59
    b946:	0f 90       	pop	r0
    b948:	0f be       	out	0x3f, r0	; 63
    b94a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    b94c:	08 95       	ret
	...

0000b950 <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
    b950:	cf 93       	push	r28
    b952:	df 93       	push	r29
    b954:	cd b7       	in	r28, 0x3d	; 61
    b956:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
    b958:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    b95a:	80 e0       	ldi	r24, 0x00	; 0
    b95c:	90 e0       	ldi	r25, 0x00	; 0
    b95e:	88 70       	andi	r24, 0x08	; 8
    b960:	99 27       	eor	r25, r25
    b962:	89 2b       	or	r24, r25
    b964:	11 f0       	breq	.+4      	; 0xb96a <prvSetupTimerInterrupt+0x1a>
    b966:	80 ee       	ldi	r24, 0xE0	; 224
    b968:	01 c0       	rjmp	.+2      	; 0xb96c <prvSetupTimerInterrupt+0x1c>
    b96a:	80 ec       	ldi	r24, 0xC0	; 192
    b96c:	90 e0       	ldi	r25, 0x00	; 0
    b96e:	97 70       	andi	r25, 0x07	; 7
    b970:	89 2b       	or	r24, r25
    b972:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    b974:	88 e1       	ldi	r24, 0x18	; 24
    b976:	0f b6       	in	r0, 0x3f	; 63
    b978:	f8 94       	cli
    b97a:	a8 95       	wdr
    b97c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    b980:	0f be       	out	0x3f, r0	; 63
    b982:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
    b986:	00 00       	nop
    b988:	df 91       	pop	r29
    b98a:	cf 91       	pop	r28
    b98c:	08 95       	ret

0000b98e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    b98e:	76 df       	rcall	.-276    	; 0xb87c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    b990:	18 95       	reti
	...

0000b994 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    b994:	cf 93       	push	r28
    b996:	df 93       	push	r29
    b998:	00 d0       	rcall	.+0      	; 0xb99a <xQueueGenericReset+0x6>
    b99a:	1f 92       	push	r1
    b99c:	1f 92       	push	r1
    b99e:	cd b7       	in	r28, 0x3d	; 61
    b9a0:	de b7       	in	r29, 0x3e	; 62
    b9a2:	9c 83       	std	Y+4, r25	; 0x04
    b9a4:	8b 83       	std	Y+3, r24	; 0x03
    b9a6:	6d 83       	std	Y+5, r22	; 0x05
    b9a8:	8b 81       	ldd	r24, Y+3	; 0x03
    b9aa:	9c 81       	ldd	r25, Y+4	; 0x04
    b9ac:	9a 83       	std	Y+2, r25	; 0x02
    b9ae:	89 83       	std	Y+1, r24	; 0x01
    b9b0:	0f b6       	in	r0, 0x3f	; 63
    b9b2:	f8 94       	cli
    b9b4:	0f 92       	push	r0
    b9b6:	89 81       	ldd	r24, Y+1	; 0x01
    b9b8:	9a 81       	ldd	r25, Y+2	; 0x02
    b9ba:	fc 01       	movw	r30, r24
    b9bc:	80 81       	ld	r24, Z
    b9be:	91 81       	ldd	r25, Z+1	; 0x01
    b9c0:	29 81       	ldd	r18, Y+1	; 0x01
    b9c2:	3a 81       	ldd	r19, Y+2	; 0x02
    b9c4:	f9 01       	movw	r30, r18
    b9c6:	23 8d       	ldd	r18, Z+27	; 0x1b
    b9c8:	42 2f       	mov	r20, r18
    b9ca:	50 e0       	ldi	r21, 0x00	; 0
    b9cc:	29 81       	ldd	r18, Y+1	; 0x01
    b9ce:	3a 81       	ldd	r19, Y+2	; 0x02
    b9d0:	f9 01       	movw	r30, r18
    b9d2:	24 8d       	ldd	r18, Z+28	; 0x1c
    b9d4:	22 2f       	mov	r18, r18
    b9d6:	30 e0       	ldi	r19, 0x00	; 0
    b9d8:	42 9f       	mul	r20, r18
    b9da:	b0 01       	movw	r22, r0
    b9dc:	43 9f       	mul	r20, r19
    b9de:	70 0d       	add	r23, r0
    b9e0:	52 9f       	mul	r21, r18
    b9e2:	70 0d       	add	r23, r0
    b9e4:	11 24       	eor	r1, r1
    b9e6:	9b 01       	movw	r18, r22
    b9e8:	28 0f       	add	r18, r24
    b9ea:	39 1f       	adc	r19, r25
    b9ec:	89 81       	ldd	r24, Y+1	; 0x01
    b9ee:	9a 81       	ldd	r25, Y+2	; 0x02
    b9f0:	fc 01       	movw	r30, r24
    b9f2:	35 83       	std	Z+5, r19	; 0x05
    b9f4:	24 83       	std	Z+4, r18	; 0x04
    b9f6:	89 81       	ldd	r24, Y+1	; 0x01
    b9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    b9fa:	fc 01       	movw	r30, r24
    b9fc:	12 8e       	std	Z+26, r1	; 0x1a
    b9fe:	89 81       	ldd	r24, Y+1	; 0x01
    ba00:	9a 81       	ldd	r25, Y+2	; 0x02
    ba02:	fc 01       	movw	r30, r24
    ba04:	20 81       	ld	r18, Z
    ba06:	31 81       	ldd	r19, Z+1	; 0x01
    ba08:	89 81       	ldd	r24, Y+1	; 0x01
    ba0a:	9a 81       	ldd	r25, Y+2	; 0x02
    ba0c:	fc 01       	movw	r30, r24
    ba0e:	33 83       	std	Z+3, r19	; 0x03
    ba10:	22 83       	std	Z+2, r18	; 0x02
    ba12:	89 81       	ldd	r24, Y+1	; 0x01
    ba14:	9a 81       	ldd	r25, Y+2	; 0x02
    ba16:	fc 01       	movw	r30, r24
    ba18:	20 81       	ld	r18, Z
    ba1a:	31 81       	ldd	r19, Z+1	; 0x01
    ba1c:	89 81       	ldd	r24, Y+1	; 0x01
    ba1e:	9a 81       	ldd	r25, Y+2	; 0x02
    ba20:	fc 01       	movw	r30, r24
    ba22:	83 8d       	ldd	r24, Z+27	; 0x1b
    ba24:	88 2f       	mov	r24, r24
    ba26:	90 e0       	ldi	r25, 0x00	; 0
    ba28:	bc 01       	movw	r22, r24
    ba2a:	61 50       	subi	r22, 0x01	; 1
    ba2c:	71 09       	sbc	r23, r1
    ba2e:	89 81       	ldd	r24, Y+1	; 0x01
    ba30:	9a 81       	ldd	r25, Y+2	; 0x02
    ba32:	fc 01       	movw	r30, r24
    ba34:	84 8d       	ldd	r24, Z+28	; 0x1c
    ba36:	48 2f       	mov	r20, r24
    ba38:	50 e0       	ldi	r21, 0x00	; 0
    ba3a:	64 9f       	mul	r22, r20
    ba3c:	c0 01       	movw	r24, r0
    ba3e:	65 9f       	mul	r22, r21
    ba40:	90 0d       	add	r25, r0
    ba42:	74 9f       	mul	r23, r20
    ba44:	90 0d       	add	r25, r0
    ba46:	11 24       	eor	r1, r1
    ba48:	28 0f       	add	r18, r24
    ba4a:	39 1f       	adc	r19, r25
    ba4c:	89 81       	ldd	r24, Y+1	; 0x01
    ba4e:	9a 81       	ldd	r25, Y+2	; 0x02
    ba50:	fc 01       	movw	r30, r24
    ba52:	37 83       	std	Z+7, r19	; 0x07
    ba54:	26 83       	std	Z+6, r18	; 0x06
    ba56:	89 81       	ldd	r24, Y+1	; 0x01
    ba58:	9a 81       	ldd	r25, Y+2	; 0x02
    ba5a:	2f ef       	ldi	r18, 0xFF	; 255
    ba5c:	fc 01       	movw	r30, r24
    ba5e:	25 8f       	std	Z+29, r18	; 0x1d
    ba60:	89 81       	ldd	r24, Y+1	; 0x01
    ba62:	9a 81       	ldd	r25, Y+2	; 0x02
    ba64:	2f ef       	ldi	r18, 0xFF	; 255
    ba66:	fc 01       	movw	r30, r24
    ba68:	26 8f       	std	Z+30, r18	; 0x1e
    ba6a:	8d 81       	ldd	r24, Y+5	; 0x05
    ba6c:	88 23       	and	r24, r24
    ba6e:	79 f4       	brne	.+30     	; 0xba8e <xQueueGenericReset+0xfa>
    ba70:	89 81       	ldd	r24, Y+1	; 0x01
    ba72:	9a 81       	ldd	r25, Y+2	; 0x02
    ba74:	fc 01       	movw	r30, r24
    ba76:	80 85       	ldd	r24, Z+8	; 0x08
    ba78:	88 23       	and	r24, r24
    ba7a:	89 f0       	breq	.+34     	; 0xba9e <xQueueGenericReset+0x10a>
    ba7c:	89 81       	ldd	r24, Y+1	; 0x01
    ba7e:	9a 81       	ldd	r25, Y+2	; 0x02
    ba80:	08 96       	adiw	r24, 0x08	; 8
    ba82:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <xTaskRemoveFromEventList>
    ba86:	88 23       	and	r24, r24
    ba88:	51 f0       	breq	.+20     	; 0xba9e <xQueueGenericReset+0x10a>
    ba8a:	96 de       	rcall	.-724    	; 0xb7b8 <vPortYield>
    ba8c:	08 c0       	rjmp	.+16     	; 0xba9e <xQueueGenericReset+0x10a>
    ba8e:	89 81       	ldd	r24, Y+1	; 0x01
    ba90:	9a 81       	ldd	r25, Y+2	; 0x02
    ba92:	08 96       	adiw	r24, 0x08	; 8
    ba94:	2e db       	rcall	.-2468   	; 0xb0f2 <vListInitialise>
    ba96:	89 81       	ldd	r24, Y+1	; 0x01
    ba98:	9a 81       	ldd	r25, Y+2	; 0x02
    ba9a:	41 96       	adiw	r24, 0x11	; 17
    ba9c:	2a db       	rcall	.-2476   	; 0xb0f2 <vListInitialise>
    ba9e:	0f 90       	pop	r0
    baa0:	0f be       	out	0x3f, r0	; 63
    baa2:	81 e0       	ldi	r24, 0x01	; 1
    baa4:	0f 90       	pop	r0
    baa6:	0f 90       	pop	r0
    baa8:	0f 90       	pop	r0
    baaa:	0f 90       	pop	r0
    baac:	0f 90       	pop	r0
    baae:	df 91       	pop	r29
    bab0:	cf 91       	pop	r28
    bab2:	08 95       	ret

0000bab4 <xQueueGenericCreate>:
    bab4:	0f 93       	push	r16
    bab6:	1f 93       	push	r17
    bab8:	cf 93       	push	r28
    baba:	df 93       	push	r29
    babc:	cd b7       	in	r28, 0x3d	; 61
    babe:	de b7       	in	r29, 0x3e	; 62
    bac0:	29 97       	sbiw	r28, 0x09	; 9
    bac2:	0f b6       	in	r0, 0x3f	; 63
    bac4:	f8 94       	cli
    bac6:	de bf       	out	0x3e, r29	; 62
    bac8:	0f be       	out	0x3f, r0	; 63
    baca:	cd bf       	out	0x3d, r28	; 61
    bacc:	8f 83       	std	Y+7, r24	; 0x07
    bace:	68 87       	std	Y+8, r22	; 0x08
    bad0:	49 87       	std	Y+9, r20	; 0x09
    bad2:	88 85       	ldd	r24, Y+8	; 0x08
    bad4:	88 23       	and	r24, r24
    bad6:	19 f4       	brne	.+6      	; 0xbade <xQueueGenericCreate+0x2a>
    bad8:	1a 82       	std	Y+2, r1	; 0x02
    bada:	19 82       	std	Y+1, r1	; 0x01
    badc:	0f c0       	rjmp	.+30     	; 0xbafc <xQueueGenericCreate+0x48>
    bade:	8f 81       	ldd	r24, Y+7	; 0x07
    bae0:	48 2f       	mov	r20, r24
    bae2:	50 e0       	ldi	r21, 0x00	; 0
    bae4:	88 85       	ldd	r24, Y+8	; 0x08
    bae6:	28 2f       	mov	r18, r24
    bae8:	30 e0       	ldi	r19, 0x00	; 0
    baea:	42 9f       	mul	r20, r18
    baec:	c0 01       	movw	r24, r0
    baee:	43 9f       	mul	r20, r19
    baf0:	90 0d       	add	r25, r0
    baf2:	52 9f       	mul	r21, r18
    baf4:	90 0d       	add	r25, r0
    baf6:	11 24       	eor	r1, r1
    baf8:	9a 83       	std	Y+2, r25	; 0x02
    bafa:	89 83       	std	Y+1, r24	; 0x01
    bafc:	89 81       	ldd	r24, Y+1	; 0x01
    bafe:	9a 81       	ldd	r25, Y+2	; 0x02
    bb00:	4f 96       	adiw	r24, 0x1f	; 31
    bb02:	bd da       	rcall	.-2694   	; 0xb07e <pvPortMalloc>
    bb04:	9c 83       	std	Y+4, r25	; 0x04
    bb06:	8b 83       	std	Y+3, r24	; 0x03
    bb08:	8b 81       	ldd	r24, Y+3	; 0x03
    bb0a:	9c 81       	ldd	r25, Y+4	; 0x04
    bb0c:	89 2b       	or	r24, r25
    bb0e:	99 f0       	breq	.+38     	; 0xbb36 <xQueueGenericCreate+0x82>
    bb10:	8b 81       	ldd	r24, Y+3	; 0x03
    bb12:	9c 81       	ldd	r25, Y+4	; 0x04
    bb14:	9e 83       	std	Y+6, r25	; 0x06
    bb16:	8d 83       	std	Y+5, r24	; 0x05
    bb18:	8d 81       	ldd	r24, Y+5	; 0x05
    bb1a:	9e 81       	ldd	r25, Y+6	; 0x06
    bb1c:	4f 96       	adiw	r24, 0x1f	; 31
    bb1e:	9e 83       	std	Y+6, r25	; 0x06
    bb20:	8d 83       	std	Y+5, r24	; 0x05
    bb22:	2b 81       	ldd	r18, Y+3	; 0x03
    bb24:	3c 81       	ldd	r19, Y+4	; 0x04
    bb26:	8d 81       	ldd	r24, Y+5	; 0x05
    bb28:	9e 81       	ldd	r25, Y+6	; 0x06
    bb2a:	89 01       	movw	r16, r18
    bb2c:	29 85       	ldd	r18, Y+9	; 0x09
    bb2e:	ac 01       	movw	r20, r24
    bb30:	68 85       	ldd	r22, Y+8	; 0x08
    bb32:	8f 81       	ldd	r24, Y+7	; 0x07
    bb34:	0d d0       	rcall	.+26     	; 0xbb50 <prvInitialiseNewQueue>
    bb36:	8b 81       	ldd	r24, Y+3	; 0x03
    bb38:	9c 81       	ldd	r25, Y+4	; 0x04
    bb3a:	29 96       	adiw	r28, 0x09	; 9
    bb3c:	0f b6       	in	r0, 0x3f	; 63
    bb3e:	f8 94       	cli
    bb40:	de bf       	out	0x3e, r29	; 62
    bb42:	0f be       	out	0x3f, r0	; 63
    bb44:	cd bf       	out	0x3d, r28	; 61
    bb46:	df 91       	pop	r29
    bb48:	cf 91       	pop	r28
    bb4a:	1f 91       	pop	r17
    bb4c:	0f 91       	pop	r16
    bb4e:	08 95       	ret

0000bb50 <prvInitialiseNewQueue>:
    bb50:	0f 93       	push	r16
    bb52:	1f 93       	push	r17
    bb54:	cf 93       	push	r28
    bb56:	df 93       	push	r29
    bb58:	cd b7       	in	r28, 0x3d	; 61
    bb5a:	de b7       	in	r29, 0x3e	; 62
    bb5c:	27 97       	sbiw	r28, 0x07	; 7
    bb5e:	0f b6       	in	r0, 0x3f	; 63
    bb60:	f8 94       	cli
    bb62:	de bf       	out	0x3e, r29	; 62
    bb64:	0f be       	out	0x3f, r0	; 63
    bb66:	cd bf       	out	0x3d, r28	; 61
    bb68:	89 83       	std	Y+1, r24	; 0x01
    bb6a:	6a 83       	std	Y+2, r22	; 0x02
    bb6c:	5c 83       	std	Y+4, r21	; 0x04
    bb6e:	4b 83       	std	Y+3, r20	; 0x03
    bb70:	2d 83       	std	Y+5, r18	; 0x05
    bb72:	1f 83       	std	Y+7, r17	; 0x07
    bb74:	0e 83       	std	Y+6, r16	; 0x06
    bb76:	8a 81       	ldd	r24, Y+2	; 0x02
    bb78:	88 23       	and	r24, r24
    bb7a:	41 f4       	brne	.+16     	; 0xbb8c <prvInitialiseNewQueue+0x3c>
    bb7c:	8e 81       	ldd	r24, Y+6	; 0x06
    bb7e:	9f 81       	ldd	r25, Y+7	; 0x07
    bb80:	2e 81       	ldd	r18, Y+6	; 0x06
    bb82:	3f 81       	ldd	r19, Y+7	; 0x07
    bb84:	fc 01       	movw	r30, r24
    bb86:	31 83       	std	Z+1, r19	; 0x01
    bb88:	20 83       	st	Z, r18
    bb8a:	07 c0       	rjmp	.+14     	; 0xbb9a <prvInitialiseNewQueue+0x4a>
    bb8c:	8e 81       	ldd	r24, Y+6	; 0x06
    bb8e:	9f 81       	ldd	r25, Y+7	; 0x07
    bb90:	2b 81       	ldd	r18, Y+3	; 0x03
    bb92:	3c 81       	ldd	r19, Y+4	; 0x04
    bb94:	fc 01       	movw	r30, r24
    bb96:	31 83       	std	Z+1, r19	; 0x01
    bb98:	20 83       	st	Z, r18
    bb9a:	8e 81       	ldd	r24, Y+6	; 0x06
    bb9c:	9f 81       	ldd	r25, Y+7	; 0x07
    bb9e:	29 81       	ldd	r18, Y+1	; 0x01
    bba0:	fc 01       	movw	r30, r24
    bba2:	23 8f       	std	Z+27, r18	; 0x1b
    bba4:	8e 81       	ldd	r24, Y+6	; 0x06
    bba6:	9f 81       	ldd	r25, Y+7	; 0x07
    bba8:	2a 81       	ldd	r18, Y+2	; 0x02
    bbaa:	fc 01       	movw	r30, r24
    bbac:	24 8f       	std	Z+28, r18	; 0x1c
    bbae:	8e 81       	ldd	r24, Y+6	; 0x06
    bbb0:	9f 81       	ldd	r25, Y+7	; 0x07
    bbb2:	61 e0       	ldi	r22, 0x01	; 1
    bbb4:	ef de       	rcall	.-546    	; 0xb994 <xQueueGenericReset>
    bbb6:	00 00       	nop
    bbb8:	27 96       	adiw	r28, 0x07	; 7
    bbba:	0f b6       	in	r0, 0x3f	; 63
    bbbc:	f8 94       	cli
    bbbe:	de bf       	out	0x3e, r29	; 62
    bbc0:	0f be       	out	0x3f, r0	; 63
    bbc2:	cd bf       	out	0x3d, r28	; 61
    bbc4:	df 91       	pop	r29
    bbc6:	cf 91       	pop	r28
    bbc8:	1f 91       	pop	r17
    bbca:	0f 91       	pop	r16
    bbcc:	08 95       	ret

0000bbce <xQueueGenericSend>:
    bbce:	cf 93       	push	r28
    bbd0:	df 93       	push	r29
    bbd2:	cd b7       	in	r28, 0x3d	; 61
    bbd4:	de b7       	in	r29, 0x3e	; 62
    bbd6:	2e 97       	sbiw	r28, 0x0e	; 14
    bbd8:	0f b6       	in	r0, 0x3f	; 63
    bbda:	f8 94       	cli
    bbdc:	de bf       	out	0x3e, r29	; 62
    bbde:	0f be       	out	0x3f, r0	; 63
    bbe0:	cd bf       	out	0x3d, r28	; 61
    bbe2:	99 87       	std	Y+9, r25	; 0x09
    bbe4:	88 87       	std	Y+8, r24	; 0x08
    bbe6:	7b 87       	std	Y+11, r23	; 0x0b
    bbe8:	6a 87       	std	Y+10, r22	; 0x0a
    bbea:	5d 87       	std	Y+13, r21	; 0x0d
    bbec:	4c 87       	std	Y+12, r20	; 0x0c
    bbee:	2e 87       	std	Y+14, r18	; 0x0e
    bbf0:	19 82       	std	Y+1, r1	; 0x01
    bbf2:	88 85       	ldd	r24, Y+8	; 0x08
    bbf4:	99 85       	ldd	r25, Y+9	; 0x09
    bbf6:	9b 83       	std	Y+3, r25	; 0x03
    bbf8:	8a 83       	std	Y+2, r24	; 0x02
    bbfa:	0f b6       	in	r0, 0x3f	; 63
    bbfc:	f8 94       	cli
    bbfe:	0f 92       	push	r0
    bc00:	8a 81       	ldd	r24, Y+2	; 0x02
    bc02:	9b 81       	ldd	r25, Y+3	; 0x03
    bc04:	fc 01       	movw	r30, r24
    bc06:	22 8d       	ldd	r18, Z+26	; 0x1a
    bc08:	8a 81       	ldd	r24, Y+2	; 0x02
    bc0a:	9b 81       	ldd	r25, Y+3	; 0x03
    bc0c:	fc 01       	movw	r30, r24
    bc0e:	83 8d       	ldd	r24, Z+27	; 0x1b
    bc10:	28 17       	cp	r18, r24
    bc12:	18 f0       	brcs	.+6      	; 0xbc1a <xQueueGenericSend+0x4c>
    bc14:	8e 85       	ldd	r24, Y+14	; 0x0e
    bc16:	82 30       	cpi	r24, 0x02	; 2
    bc18:	f9 f4       	brne	.+62     	; 0xbc58 <xQueueGenericSend+0x8a>
    bc1a:	2a 85       	ldd	r18, Y+10	; 0x0a
    bc1c:	3b 85       	ldd	r19, Y+11	; 0x0b
    bc1e:	8a 81       	ldd	r24, Y+2	; 0x02
    bc20:	9b 81       	ldd	r25, Y+3	; 0x03
    bc22:	4e 85       	ldd	r20, Y+14	; 0x0e
    bc24:	b9 01       	movw	r22, r18
    bc26:	83 d1       	rcall	.+774    	; 0xbf2e <prvCopyDataToQueue>
    bc28:	8c 83       	std	Y+4, r24	; 0x04
    bc2a:	8a 81       	ldd	r24, Y+2	; 0x02
    bc2c:	9b 81       	ldd	r25, Y+3	; 0x03
    bc2e:	fc 01       	movw	r30, r24
    bc30:	81 89       	ldd	r24, Z+17	; 0x11
    bc32:	88 23       	and	r24, r24
    bc34:	49 f0       	breq	.+18     	; 0xbc48 <xQueueGenericSend+0x7a>
    bc36:	8a 81       	ldd	r24, Y+2	; 0x02
    bc38:	9b 81       	ldd	r25, Y+3	; 0x03
    bc3a:	41 96       	adiw	r24, 0x11	; 17
    bc3c:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <xTaskRemoveFromEventList>
    bc40:	88 23       	and	r24, r24
    bc42:	31 f0       	breq	.+12     	; 0xbc50 <xQueueGenericSend+0x82>
    bc44:	b9 dd       	rcall	.-1166   	; 0xb7b8 <vPortYield>
    bc46:	04 c0       	rjmp	.+8      	; 0xbc50 <xQueueGenericSend+0x82>
    bc48:	8c 81       	ldd	r24, Y+4	; 0x04
    bc4a:	88 23       	and	r24, r24
    bc4c:	09 f0       	breq	.+2      	; 0xbc50 <xQueueGenericSend+0x82>
    bc4e:	b4 dd       	rcall	.-1176   	; 0xb7b8 <vPortYield>
    bc50:	0f 90       	pop	r0
    bc52:	0f be       	out	0x3f, r0	; 63
    bc54:	81 e0       	ldi	r24, 0x01	; 1
    bc56:	5b c0       	rjmp	.+182    	; 0xbd0e <xQueueGenericSend+0x140>
    bc58:	8c 85       	ldd	r24, Y+12	; 0x0c
    bc5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    bc5c:	89 2b       	or	r24, r25
    bc5e:	21 f4       	brne	.+8      	; 0xbc68 <xQueueGenericSend+0x9a>
    bc60:	0f 90       	pop	r0
    bc62:	0f be       	out	0x3f, r0	; 63
    bc64:	80 e0       	ldi	r24, 0x00	; 0
    bc66:	53 c0       	rjmp	.+166    	; 0xbd0e <xQueueGenericSend+0x140>
    bc68:	89 81       	ldd	r24, Y+1	; 0x01
    bc6a:	88 23       	and	r24, r24
    bc6c:	31 f4       	brne	.+12     	; 0xbc7a <xQueueGenericSend+0xac>
    bc6e:	ce 01       	movw	r24, r28
    bc70:	05 96       	adiw	r24, 0x05	; 5
    bc72:	0e 94 e5 4f 	call	0x9fca	; 0x9fca <vTaskInternalSetTimeOutState>
    bc76:	81 e0       	ldi	r24, 0x01	; 1
    bc78:	89 83       	std	Y+1, r24	; 0x01
    bc7a:	0f 90       	pop	r0
    bc7c:	0f be       	out	0x3f, r0	; 63
    bc7e:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <vTaskSuspendAll>
    bc82:	0f b6       	in	r0, 0x3f	; 63
    bc84:	f8 94       	cli
    bc86:	0f 92       	push	r0
    bc88:	8a 81       	ldd	r24, Y+2	; 0x02
    bc8a:	9b 81       	ldd	r25, Y+3	; 0x03
    bc8c:	fc 01       	movw	r30, r24
    bc8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    bc90:	8f 3f       	cpi	r24, 0xFF	; 255
    bc92:	21 f4       	brne	.+8      	; 0xbc9c <xQueueGenericSend+0xce>
    bc94:	8a 81       	ldd	r24, Y+2	; 0x02
    bc96:	9b 81       	ldd	r25, Y+3	; 0x03
    bc98:	fc 01       	movw	r30, r24
    bc9a:	15 8e       	std	Z+29, r1	; 0x1d
    bc9c:	8a 81       	ldd	r24, Y+2	; 0x02
    bc9e:	9b 81       	ldd	r25, Y+3	; 0x03
    bca0:	fc 01       	movw	r30, r24
    bca2:	86 8d       	ldd	r24, Z+30	; 0x1e
    bca4:	8f 3f       	cpi	r24, 0xFF	; 255
    bca6:	21 f4       	brne	.+8      	; 0xbcb0 <xQueueGenericSend+0xe2>
    bca8:	8a 81       	ldd	r24, Y+2	; 0x02
    bcaa:	9b 81       	ldd	r25, Y+3	; 0x03
    bcac:	fc 01       	movw	r30, r24
    bcae:	16 8e       	std	Z+30, r1	; 0x1e
    bcb0:	0f 90       	pop	r0
    bcb2:	0f be       	out	0x3f, r0	; 63
    bcb4:	9e 01       	movw	r18, r28
    bcb6:	24 5f       	subi	r18, 0xF4	; 244
    bcb8:	3f 4f       	sbci	r19, 0xFF	; 255
    bcba:	ce 01       	movw	r24, r28
    bcbc:	05 96       	adiw	r24, 0x05	; 5
    bcbe:	b9 01       	movw	r22, r18
    bcc0:	0e 94 02 50 	call	0xa004	; 0xa004 <xTaskCheckForTimeOut>
    bcc4:	88 23       	and	r24, r24
    bcc6:	e9 f4       	brne	.+58     	; 0xbd02 <xQueueGenericSend+0x134>
    bcc8:	8a 81       	ldd	r24, Y+2	; 0x02
    bcca:	9b 81       	ldd	r25, Y+3	; 0x03
    bccc:	c9 d2       	rcall	.+1426   	; 0xc260 <prvIsQueueFull>
    bcce:	88 23       	and	r24, r24
    bcd0:	91 f0       	breq	.+36     	; 0xbcf6 <xQueueGenericSend+0x128>
    bcd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    bcd4:	3d 85       	ldd	r19, Y+13	; 0x0d
    bcd6:	8a 81       	ldd	r24, Y+2	; 0x02
    bcd8:	9b 81       	ldd	r25, Y+3	; 0x03
    bcda:	08 96       	adiw	r24, 0x08	; 8
    bcdc:	b9 01       	movw	r22, r18
    bcde:	0e 94 2a 4f 	call	0x9e54	; 0x9e54 <vTaskPlaceOnEventList>
    bce2:	8a 81       	ldd	r24, Y+2	; 0x02
    bce4:	9b 81       	ldd	r25, Y+3	; 0x03
    bce6:	41 d2       	rcall	.+1154   	; 0xc16a <prvUnlockQueue>
    bce8:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    bcec:	88 23       	and	r24, r24
    bcee:	09 f0       	breq	.+2      	; 0xbcf2 <xQueueGenericSend+0x124>
    bcf0:	84 cf       	rjmp	.-248    	; 0xbbfa <xQueueGenericSend+0x2c>
    bcf2:	62 dd       	rcall	.-1340   	; 0xb7b8 <vPortYield>
    bcf4:	82 cf       	rjmp	.-252    	; 0xbbfa <xQueueGenericSend+0x2c>
    bcf6:	8a 81       	ldd	r24, Y+2	; 0x02
    bcf8:	9b 81       	ldd	r25, Y+3	; 0x03
    bcfa:	37 d2       	rcall	.+1134   	; 0xc16a <prvUnlockQueue>
    bcfc:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    bd00:	7c cf       	rjmp	.-264    	; 0xbbfa <xQueueGenericSend+0x2c>
    bd02:	8a 81       	ldd	r24, Y+2	; 0x02
    bd04:	9b 81       	ldd	r25, Y+3	; 0x03
    bd06:	31 d2       	rcall	.+1122   	; 0xc16a <prvUnlockQueue>
    bd08:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    bd0c:	80 e0       	ldi	r24, 0x00	; 0
    bd0e:	2e 96       	adiw	r28, 0x0e	; 14
    bd10:	0f b6       	in	r0, 0x3f	; 63
    bd12:	f8 94       	cli
    bd14:	de bf       	out	0x3e, r29	; 62
    bd16:	0f be       	out	0x3f, r0	; 63
    bd18:	cd bf       	out	0x3d, r28	; 61
    bd1a:	df 91       	pop	r29
    bd1c:	cf 91       	pop	r28
    bd1e:	08 95       	ret

0000bd20 <xQueueGenericSendFromISR>:
    bd20:	cf 93       	push	r28
    bd22:	df 93       	push	r29
    bd24:	cd b7       	in	r28, 0x3d	; 61
    bd26:	de b7       	in	r29, 0x3e	; 62
    bd28:	2c 97       	sbiw	r28, 0x0c	; 12
    bd2a:	0f b6       	in	r0, 0x3f	; 63
    bd2c:	f8 94       	cli
    bd2e:	de bf       	out	0x3e, r29	; 62
    bd30:	0f be       	out	0x3f, r0	; 63
    bd32:	cd bf       	out	0x3d, r28	; 61
    bd34:	9f 83       	std	Y+7, r25	; 0x07
    bd36:	8e 83       	std	Y+6, r24	; 0x06
    bd38:	79 87       	std	Y+9, r23	; 0x09
    bd3a:	68 87       	std	Y+8, r22	; 0x08
    bd3c:	5b 87       	std	Y+11, r21	; 0x0b
    bd3e:	4a 87       	std	Y+10, r20	; 0x0a
    bd40:	2c 87       	std	Y+12, r18	; 0x0c
    bd42:	8e 81       	ldd	r24, Y+6	; 0x06
    bd44:	9f 81       	ldd	r25, Y+7	; 0x07
    bd46:	9b 83       	std	Y+3, r25	; 0x03
    bd48:	8a 83       	std	Y+2, r24	; 0x02
    bd4a:	1c 82       	std	Y+4, r1	; 0x04
    bd4c:	8a 81       	ldd	r24, Y+2	; 0x02
    bd4e:	9b 81       	ldd	r25, Y+3	; 0x03
    bd50:	fc 01       	movw	r30, r24
    bd52:	22 8d       	ldd	r18, Z+26	; 0x1a
    bd54:	8a 81       	ldd	r24, Y+2	; 0x02
    bd56:	9b 81       	ldd	r25, Y+3	; 0x03
    bd58:	fc 01       	movw	r30, r24
    bd5a:	83 8d       	ldd	r24, Z+27	; 0x1b
    bd5c:	28 17       	cp	r18, r24
    bd5e:	18 f0       	brcs	.+6      	; 0xbd66 <xQueueGenericSendFromISR+0x46>
    bd60:	8c 85       	ldd	r24, Y+12	; 0x0c
    bd62:	82 30       	cpi	r24, 0x02	; 2
    bd64:	81 f5       	brne	.+96     	; 0xbdc6 <xQueueGenericSendFromISR+0xa6>
    bd66:	8a 81       	ldd	r24, Y+2	; 0x02
    bd68:	9b 81       	ldd	r25, Y+3	; 0x03
    bd6a:	fc 01       	movw	r30, r24
    bd6c:	86 8d       	ldd	r24, Z+30	; 0x1e
    bd6e:	8d 83       	std	Y+5, r24	; 0x05
    bd70:	28 85       	ldd	r18, Y+8	; 0x08
    bd72:	39 85       	ldd	r19, Y+9	; 0x09
    bd74:	8a 81       	ldd	r24, Y+2	; 0x02
    bd76:	9b 81       	ldd	r25, Y+3	; 0x03
    bd78:	4c 85       	ldd	r20, Y+12	; 0x0c
    bd7a:	b9 01       	movw	r22, r18
    bd7c:	d8 d0       	rcall	.+432    	; 0xbf2e <prvCopyDataToQueue>
    bd7e:	8d 81       	ldd	r24, Y+5	; 0x05
    bd80:	8f 3f       	cpi	r24, 0xFF	; 255
    bd82:	b9 f4       	brne	.+46     	; 0xbdb2 <xQueueGenericSendFromISR+0x92>
    bd84:	8a 81       	ldd	r24, Y+2	; 0x02
    bd86:	9b 81       	ldd	r25, Y+3	; 0x03
    bd88:	fc 01       	movw	r30, r24
    bd8a:	81 89       	ldd	r24, Z+17	; 0x11
    bd8c:	88 23       	and	r24, r24
    bd8e:	c1 f0       	breq	.+48     	; 0xbdc0 <xQueueGenericSendFromISR+0xa0>
    bd90:	8a 81       	ldd	r24, Y+2	; 0x02
    bd92:	9b 81       	ldd	r25, Y+3	; 0x03
    bd94:	41 96       	adiw	r24, 0x11	; 17
    bd96:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <xTaskRemoveFromEventList>
    bd9a:	88 23       	and	r24, r24
    bd9c:	89 f0       	breq	.+34     	; 0xbdc0 <xQueueGenericSendFromISR+0xa0>
    bd9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    bda0:	9b 85       	ldd	r25, Y+11	; 0x0b
    bda2:	89 2b       	or	r24, r25
    bda4:	69 f0       	breq	.+26     	; 0xbdc0 <xQueueGenericSendFromISR+0xa0>
    bda6:	8a 85       	ldd	r24, Y+10	; 0x0a
    bda8:	9b 85       	ldd	r25, Y+11	; 0x0b
    bdaa:	21 e0       	ldi	r18, 0x01	; 1
    bdac:	fc 01       	movw	r30, r24
    bdae:	20 83       	st	Z, r18
    bdb0:	07 c0       	rjmp	.+14     	; 0xbdc0 <xQueueGenericSendFromISR+0xa0>
    bdb2:	8d 81       	ldd	r24, Y+5	; 0x05
    bdb4:	8f 5f       	subi	r24, 0xFF	; 255
    bdb6:	28 2f       	mov	r18, r24
    bdb8:	8a 81       	ldd	r24, Y+2	; 0x02
    bdba:	9b 81       	ldd	r25, Y+3	; 0x03
    bdbc:	fc 01       	movw	r30, r24
    bdbe:	26 8f       	std	Z+30, r18	; 0x1e
    bdc0:	81 e0       	ldi	r24, 0x01	; 1
    bdc2:	89 83       	std	Y+1, r24	; 0x01
    bdc4:	01 c0       	rjmp	.+2      	; 0xbdc8 <xQueueGenericSendFromISR+0xa8>
    bdc6:	19 82       	std	Y+1, r1	; 0x01
    bdc8:	89 81       	ldd	r24, Y+1	; 0x01
    bdca:	2c 96       	adiw	r28, 0x0c	; 12
    bdcc:	0f b6       	in	r0, 0x3f	; 63
    bdce:	f8 94       	cli
    bdd0:	de bf       	out	0x3e, r29	; 62
    bdd2:	0f be       	out	0x3f, r0	; 63
    bdd4:	cd bf       	out	0x3d, r28	; 61
    bdd6:	df 91       	pop	r29
    bdd8:	cf 91       	pop	r28
    bdda:	08 95       	ret

0000bddc <xQueueReceive>:
    bddc:	cf 93       	push	r28
    bdde:	df 93       	push	r29
    bde0:	cd b7       	in	r28, 0x3d	; 61
    bde2:	de b7       	in	r29, 0x3e	; 62
    bde4:	2d 97       	sbiw	r28, 0x0d	; 13
    bde6:	0f b6       	in	r0, 0x3f	; 63
    bde8:	f8 94       	cli
    bdea:	de bf       	out	0x3e, r29	; 62
    bdec:	0f be       	out	0x3f, r0	; 63
    bdee:	cd bf       	out	0x3d, r28	; 61
    bdf0:	99 87       	std	Y+9, r25	; 0x09
    bdf2:	88 87       	std	Y+8, r24	; 0x08
    bdf4:	7b 87       	std	Y+11, r23	; 0x0b
    bdf6:	6a 87       	std	Y+10, r22	; 0x0a
    bdf8:	5d 87       	std	Y+13, r21	; 0x0d
    bdfa:	4c 87       	std	Y+12, r20	; 0x0c
    bdfc:	19 82       	std	Y+1, r1	; 0x01
    bdfe:	88 85       	ldd	r24, Y+8	; 0x08
    be00:	99 85       	ldd	r25, Y+9	; 0x09
    be02:	9b 83       	std	Y+3, r25	; 0x03
    be04:	8a 83       	std	Y+2, r24	; 0x02
    be06:	0f b6       	in	r0, 0x3f	; 63
    be08:	f8 94       	cli
    be0a:	0f 92       	push	r0
    be0c:	8a 81       	ldd	r24, Y+2	; 0x02
    be0e:	9b 81       	ldd	r25, Y+3	; 0x03
    be10:	fc 01       	movw	r30, r24
    be12:	82 8d       	ldd	r24, Z+26	; 0x1a
    be14:	8c 83       	std	Y+4, r24	; 0x04
    be16:	8c 81       	ldd	r24, Y+4	; 0x04
    be18:	88 23       	and	r24, r24
    be1a:	f9 f0       	breq	.+62     	; 0xbe5a <xQueueReceive+0x7e>
    be1c:	2a 85       	ldd	r18, Y+10	; 0x0a
    be1e:	3b 85       	ldd	r19, Y+11	; 0x0b
    be20:	8a 81       	ldd	r24, Y+2	; 0x02
    be22:	9b 81       	ldd	r25, Y+3	; 0x03
    be24:	b9 01       	movw	r22, r18
    be26:	51 d1       	rcall	.+674    	; 0xc0ca <prvCopyDataFromQueue>
    be28:	8c 81       	ldd	r24, Y+4	; 0x04
    be2a:	2f ef       	ldi	r18, 0xFF	; 255
    be2c:	28 0f       	add	r18, r24
    be2e:	8a 81       	ldd	r24, Y+2	; 0x02
    be30:	9b 81       	ldd	r25, Y+3	; 0x03
    be32:	fc 01       	movw	r30, r24
    be34:	22 8f       	std	Z+26, r18	; 0x1a
    be36:	8a 81       	ldd	r24, Y+2	; 0x02
    be38:	9b 81       	ldd	r25, Y+3	; 0x03
    be3a:	fc 01       	movw	r30, r24
    be3c:	80 85       	ldd	r24, Z+8	; 0x08
    be3e:	88 23       	and	r24, r24
    be40:	41 f0       	breq	.+16     	; 0xbe52 <xQueueReceive+0x76>
    be42:	8a 81       	ldd	r24, Y+2	; 0x02
    be44:	9b 81       	ldd	r25, Y+3	; 0x03
    be46:	08 96       	adiw	r24, 0x08	; 8
    be48:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <xTaskRemoveFromEventList>
    be4c:	88 23       	and	r24, r24
    be4e:	09 f0       	breq	.+2      	; 0xbe52 <xQueueReceive+0x76>
    be50:	b3 dc       	rcall	.-1690   	; 0xb7b8 <vPortYield>
    be52:	0f 90       	pop	r0
    be54:	0f be       	out	0x3f, r0	; 63
    be56:	81 e0       	ldi	r24, 0x01	; 1
    be58:	61 c0       	rjmp	.+194    	; 0xbf1c <xQueueReceive+0x140>
    be5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    be5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    be5e:	89 2b       	or	r24, r25
    be60:	21 f4       	brne	.+8      	; 0xbe6a <xQueueReceive+0x8e>
    be62:	0f 90       	pop	r0
    be64:	0f be       	out	0x3f, r0	; 63
    be66:	80 e0       	ldi	r24, 0x00	; 0
    be68:	59 c0       	rjmp	.+178    	; 0xbf1c <xQueueReceive+0x140>
    be6a:	89 81       	ldd	r24, Y+1	; 0x01
    be6c:	88 23       	and	r24, r24
    be6e:	31 f4       	brne	.+12     	; 0xbe7c <xQueueReceive+0xa0>
    be70:	ce 01       	movw	r24, r28
    be72:	05 96       	adiw	r24, 0x05	; 5
    be74:	0e 94 e5 4f 	call	0x9fca	; 0x9fca <vTaskInternalSetTimeOutState>
    be78:	81 e0       	ldi	r24, 0x01	; 1
    be7a:	89 83       	std	Y+1, r24	; 0x01
    be7c:	0f 90       	pop	r0
    be7e:	0f be       	out	0x3f, r0	; 63
    be80:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <vTaskSuspendAll>
    be84:	0f b6       	in	r0, 0x3f	; 63
    be86:	f8 94       	cli
    be88:	0f 92       	push	r0
    be8a:	8a 81       	ldd	r24, Y+2	; 0x02
    be8c:	9b 81       	ldd	r25, Y+3	; 0x03
    be8e:	fc 01       	movw	r30, r24
    be90:	85 8d       	ldd	r24, Z+29	; 0x1d
    be92:	8f 3f       	cpi	r24, 0xFF	; 255
    be94:	21 f4       	brne	.+8      	; 0xbe9e <xQueueReceive+0xc2>
    be96:	8a 81       	ldd	r24, Y+2	; 0x02
    be98:	9b 81       	ldd	r25, Y+3	; 0x03
    be9a:	fc 01       	movw	r30, r24
    be9c:	15 8e       	std	Z+29, r1	; 0x1d
    be9e:	8a 81       	ldd	r24, Y+2	; 0x02
    bea0:	9b 81       	ldd	r25, Y+3	; 0x03
    bea2:	fc 01       	movw	r30, r24
    bea4:	86 8d       	ldd	r24, Z+30	; 0x1e
    bea6:	8f 3f       	cpi	r24, 0xFF	; 255
    bea8:	21 f4       	brne	.+8      	; 0xbeb2 <xQueueReceive+0xd6>
    beaa:	8a 81       	ldd	r24, Y+2	; 0x02
    beac:	9b 81       	ldd	r25, Y+3	; 0x03
    beae:	fc 01       	movw	r30, r24
    beb0:	16 8e       	std	Z+30, r1	; 0x1e
    beb2:	0f 90       	pop	r0
    beb4:	0f be       	out	0x3f, r0	; 63
    beb6:	9e 01       	movw	r18, r28
    beb8:	24 5f       	subi	r18, 0xF4	; 244
    beba:	3f 4f       	sbci	r19, 0xFF	; 255
    bebc:	ce 01       	movw	r24, r28
    bebe:	05 96       	adiw	r24, 0x05	; 5
    bec0:	b9 01       	movw	r22, r18
    bec2:	0e 94 02 50 	call	0xa004	; 0xa004 <xTaskCheckForTimeOut>
    bec6:	88 23       	and	r24, r24
    bec8:	e9 f4       	brne	.+58     	; 0xbf04 <xQueueReceive+0x128>
    beca:	8a 81       	ldd	r24, Y+2	; 0x02
    becc:	9b 81       	ldd	r25, Y+3	; 0x03
    bece:	ab d1       	rcall	.+854    	; 0xc226 <prvIsQueueEmpty>
    bed0:	88 23       	and	r24, r24
    bed2:	91 f0       	breq	.+36     	; 0xbef8 <xQueueReceive+0x11c>
    bed4:	2c 85       	ldd	r18, Y+12	; 0x0c
    bed6:	3d 85       	ldd	r19, Y+13	; 0x0d
    bed8:	8a 81       	ldd	r24, Y+2	; 0x02
    beda:	9b 81       	ldd	r25, Y+3	; 0x03
    bedc:	41 96       	adiw	r24, 0x11	; 17
    bede:	b9 01       	movw	r22, r18
    bee0:	0e 94 2a 4f 	call	0x9e54	; 0x9e54 <vTaskPlaceOnEventList>
    bee4:	8a 81       	ldd	r24, Y+2	; 0x02
    bee6:	9b 81       	ldd	r25, Y+3	; 0x03
    bee8:	40 d1       	rcall	.+640    	; 0xc16a <prvUnlockQueue>
    beea:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    beee:	88 23       	and	r24, r24
    bef0:	09 f0       	breq	.+2      	; 0xbef4 <xQueueReceive+0x118>
    bef2:	89 cf       	rjmp	.-238    	; 0xbe06 <xQueueReceive+0x2a>
    bef4:	61 dc       	rcall	.-1854   	; 0xb7b8 <vPortYield>
    bef6:	87 cf       	rjmp	.-242    	; 0xbe06 <xQueueReceive+0x2a>
    bef8:	8a 81       	ldd	r24, Y+2	; 0x02
    befa:	9b 81       	ldd	r25, Y+3	; 0x03
    befc:	36 d1       	rcall	.+620    	; 0xc16a <prvUnlockQueue>
    befe:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    bf02:	81 cf       	rjmp	.-254    	; 0xbe06 <xQueueReceive+0x2a>
    bf04:	8a 81       	ldd	r24, Y+2	; 0x02
    bf06:	9b 81       	ldd	r25, Y+3	; 0x03
    bf08:	30 d1       	rcall	.+608    	; 0xc16a <prvUnlockQueue>
    bf0a:	0e 94 ff 4c 	call	0x99fe	; 0x99fe <xTaskResumeAll>
    bf0e:	8a 81       	ldd	r24, Y+2	; 0x02
    bf10:	9b 81       	ldd	r25, Y+3	; 0x03
    bf12:	89 d1       	rcall	.+786    	; 0xc226 <prvIsQueueEmpty>
    bf14:	88 23       	and	r24, r24
    bf16:	09 f4       	brne	.+2      	; 0xbf1a <xQueueReceive+0x13e>
    bf18:	76 cf       	rjmp	.-276    	; 0xbe06 <xQueueReceive+0x2a>
    bf1a:	80 e0       	ldi	r24, 0x00	; 0
    bf1c:	2d 96       	adiw	r28, 0x0d	; 13
    bf1e:	0f b6       	in	r0, 0x3f	; 63
    bf20:	f8 94       	cli
    bf22:	de bf       	out	0x3e, r29	; 62
    bf24:	0f be       	out	0x3f, r0	; 63
    bf26:	cd bf       	out	0x3d, r28	; 61
    bf28:	df 91       	pop	r29
    bf2a:	cf 91       	pop	r28
    bf2c:	08 95       	ret

0000bf2e <prvCopyDataToQueue>:
    bf2e:	cf 93       	push	r28
    bf30:	df 93       	push	r29
    bf32:	cd b7       	in	r28, 0x3d	; 61
    bf34:	de b7       	in	r29, 0x3e	; 62
    bf36:	27 97       	sbiw	r28, 0x07	; 7
    bf38:	0f b6       	in	r0, 0x3f	; 63
    bf3a:	f8 94       	cli
    bf3c:	de bf       	out	0x3e, r29	; 62
    bf3e:	0f be       	out	0x3f, r0	; 63
    bf40:	cd bf       	out	0x3d, r28	; 61
    bf42:	9c 83       	std	Y+4, r25	; 0x04
    bf44:	8b 83       	std	Y+3, r24	; 0x03
    bf46:	7e 83       	std	Y+6, r23	; 0x06
    bf48:	6d 83       	std	Y+5, r22	; 0x05
    bf4a:	4f 83       	std	Y+7, r20	; 0x07
    bf4c:	19 82       	std	Y+1, r1	; 0x01
    bf4e:	8b 81       	ldd	r24, Y+3	; 0x03
    bf50:	9c 81       	ldd	r25, Y+4	; 0x04
    bf52:	fc 01       	movw	r30, r24
    bf54:	82 8d       	ldd	r24, Z+26	; 0x1a
    bf56:	8a 83       	std	Y+2, r24	; 0x02
    bf58:	8b 81       	ldd	r24, Y+3	; 0x03
    bf5a:	9c 81       	ldd	r25, Y+4	; 0x04
    bf5c:	fc 01       	movw	r30, r24
    bf5e:	84 8d       	ldd	r24, Z+28	; 0x1c
    bf60:	88 23       	and	r24, r24
    bf62:	b1 f4       	brne	.+44     	; 0xbf90 <prvCopyDataToQueue+0x62>
    bf64:	8b 81       	ldd	r24, Y+3	; 0x03
    bf66:	9c 81       	ldd	r25, Y+4	; 0x04
    bf68:	fc 01       	movw	r30, r24
    bf6a:	80 81       	ld	r24, Z
    bf6c:	91 81       	ldd	r25, Z+1	; 0x01
    bf6e:	89 2b       	or	r24, r25
    bf70:	09 f0       	breq	.+2      	; 0xbf74 <prvCopyDataToQueue+0x46>
    bf72:	9a c0       	rjmp	.+308    	; 0xc0a8 <prvCopyDataToQueue+0x17a>
    bf74:	8b 81       	ldd	r24, Y+3	; 0x03
    bf76:	9c 81       	ldd	r25, Y+4	; 0x04
    bf78:	fc 01       	movw	r30, r24
    bf7a:	84 81       	ldd	r24, Z+4	; 0x04
    bf7c:	95 81       	ldd	r25, Z+5	; 0x05
    bf7e:	0e 94 aa 51 	call	0xa354	; 0xa354 <xTaskPriorityDisinherit>
    bf82:	89 83       	std	Y+1, r24	; 0x01
    bf84:	8b 81       	ldd	r24, Y+3	; 0x03
    bf86:	9c 81       	ldd	r25, Y+4	; 0x04
    bf88:	fc 01       	movw	r30, r24
    bf8a:	15 82       	std	Z+5, r1	; 0x05
    bf8c:	14 82       	std	Z+4, r1	; 0x04
    bf8e:	8c c0       	rjmp	.+280    	; 0xc0a8 <prvCopyDataToQueue+0x17a>
    bf90:	8f 81       	ldd	r24, Y+7	; 0x07
    bf92:	88 23       	and	r24, r24
    bf94:	d1 f5       	brne	.+116    	; 0xc00a <prvCopyDataToQueue+0xdc>
    bf96:	8b 81       	ldd	r24, Y+3	; 0x03
    bf98:	9c 81       	ldd	r25, Y+4	; 0x04
    bf9a:	fc 01       	movw	r30, r24
    bf9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    bf9e:	48 2f       	mov	r20, r24
    bfa0:	50 e0       	ldi	r21, 0x00	; 0
    bfa2:	8b 81       	ldd	r24, Y+3	; 0x03
    bfa4:	9c 81       	ldd	r25, Y+4	; 0x04
    bfa6:	fc 01       	movw	r30, r24
    bfa8:	82 81       	ldd	r24, Z+2	; 0x02
    bfaa:	93 81       	ldd	r25, Z+3	; 0x03
    bfac:	2d 81       	ldd	r18, Y+5	; 0x05
    bfae:	3e 81       	ldd	r19, Y+6	; 0x06
    bfb0:	b9 01       	movw	r22, r18
    bfb2:	0b d5       	rcall	.+2582   	; 0xc9ca <memcpy>
    bfb4:	8b 81       	ldd	r24, Y+3	; 0x03
    bfb6:	9c 81       	ldd	r25, Y+4	; 0x04
    bfb8:	fc 01       	movw	r30, r24
    bfba:	22 81       	ldd	r18, Z+2	; 0x02
    bfbc:	33 81       	ldd	r19, Z+3	; 0x03
    bfbe:	8b 81       	ldd	r24, Y+3	; 0x03
    bfc0:	9c 81       	ldd	r25, Y+4	; 0x04
    bfc2:	fc 01       	movw	r30, r24
    bfc4:	84 8d       	ldd	r24, Z+28	; 0x1c
    bfc6:	88 2f       	mov	r24, r24
    bfc8:	90 e0       	ldi	r25, 0x00	; 0
    bfca:	28 0f       	add	r18, r24
    bfcc:	39 1f       	adc	r19, r25
    bfce:	8b 81       	ldd	r24, Y+3	; 0x03
    bfd0:	9c 81       	ldd	r25, Y+4	; 0x04
    bfd2:	fc 01       	movw	r30, r24
    bfd4:	33 83       	std	Z+3, r19	; 0x03
    bfd6:	22 83       	std	Z+2, r18	; 0x02
    bfd8:	8b 81       	ldd	r24, Y+3	; 0x03
    bfda:	9c 81       	ldd	r25, Y+4	; 0x04
    bfdc:	fc 01       	movw	r30, r24
    bfde:	22 81       	ldd	r18, Z+2	; 0x02
    bfe0:	33 81       	ldd	r19, Z+3	; 0x03
    bfe2:	8b 81       	ldd	r24, Y+3	; 0x03
    bfe4:	9c 81       	ldd	r25, Y+4	; 0x04
    bfe6:	fc 01       	movw	r30, r24
    bfe8:	84 81       	ldd	r24, Z+4	; 0x04
    bfea:	95 81       	ldd	r25, Z+5	; 0x05
    bfec:	28 17       	cp	r18, r24
    bfee:	39 07       	cpc	r19, r25
    bff0:	08 f4       	brcc	.+2      	; 0xbff4 <prvCopyDataToQueue+0xc6>
    bff2:	5a c0       	rjmp	.+180    	; 0xc0a8 <prvCopyDataToQueue+0x17a>
    bff4:	8b 81       	ldd	r24, Y+3	; 0x03
    bff6:	9c 81       	ldd	r25, Y+4	; 0x04
    bff8:	fc 01       	movw	r30, r24
    bffa:	20 81       	ld	r18, Z
    bffc:	31 81       	ldd	r19, Z+1	; 0x01
    bffe:	8b 81       	ldd	r24, Y+3	; 0x03
    c000:	9c 81       	ldd	r25, Y+4	; 0x04
    c002:	fc 01       	movw	r30, r24
    c004:	33 83       	std	Z+3, r19	; 0x03
    c006:	22 83       	std	Z+2, r18	; 0x02
    c008:	4f c0       	rjmp	.+158    	; 0xc0a8 <prvCopyDataToQueue+0x17a>
    c00a:	8b 81       	ldd	r24, Y+3	; 0x03
    c00c:	9c 81       	ldd	r25, Y+4	; 0x04
    c00e:	fc 01       	movw	r30, r24
    c010:	84 8d       	ldd	r24, Z+28	; 0x1c
    c012:	48 2f       	mov	r20, r24
    c014:	50 e0       	ldi	r21, 0x00	; 0
    c016:	8b 81       	ldd	r24, Y+3	; 0x03
    c018:	9c 81       	ldd	r25, Y+4	; 0x04
    c01a:	fc 01       	movw	r30, r24
    c01c:	86 81       	ldd	r24, Z+6	; 0x06
    c01e:	97 81       	ldd	r25, Z+7	; 0x07
    c020:	2d 81       	ldd	r18, Y+5	; 0x05
    c022:	3e 81       	ldd	r19, Y+6	; 0x06
    c024:	b9 01       	movw	r22, r18
    c026:	d1 d4       	rcall	.+2466   	; 0xc9ca <memcpy>
    c028:	8b 81       	ldd	r24, Y+3	; 0x03
    c02a:	9c 81       	ldd	r25, Y+4	; 0x04
    c02c:	fc 01       	movw	r30, r24
    c02e:	26 81       	ldd	r18, Z+6	; 0x06
    c030:	37 81       	ldd	r19, Z+7	; 0x07
    c032:	8b 81       	ldd	r24, Y+3	; 0x03
    c034:	9c 81       	ldd	r25, Y+4	; 0x04
    c036:	fc 01       	movw	r30, r24
    c038:	84 8d       	ldd	r24, Z+28	; 0x1c
    c03a:	88 2f       	mov	r24, r24
    c03c:	90 e0       	ldi	r25, 0x00	; 0
    c03e:	91 95       	neg	r25
    c040:	81 95       	neg	r24
    c042:	91 09       	sbc	r25, r1
    c044:	28 0f       	add	r18, r24
    c046:	39 1f       	adc	r19, r25
    c048:	8b 81       	ldd	r24, Y+3	; 0x03
    c04a:	9c 81       	ldd	r25, Y+4	; 0x04
    c04c:	fc 01       	movw	r30, r24
    c04e:	37 83       	std	Z+7, r19	; 0x07
    c050:	26 83       	std	Z+6, r18	; 0x06
    c052:	8b 81       	ldd	r24, Y+3	; 0x03
    c054:	9c 81       	ldd	r25, Y+4	; 0x04
    c056:	fc 01       	movw	r30, r24
    c058:	26 81       	ldd	r18, Z+6	; 0x06
    c05a:	37 81       	ldd	r19, Z+7	; 0x07
    c05c:	8b 81       	ldd	r24, Y+3	; 0x03
    c05e:	9c 81       	ldd	r25, Y+4	; 0x04
    c060:	fc 01       	movw	r30, r24
    c062:	80 81       	ld	r24, Z
    c064:	91 81       	ldd	r25, Z+1	; 0x01
    c066:	28 17       	cp	r18, r24
    c068:	39 07       	cpc	r19, r25
    c06a:	a8 f4       	brcc	.+42     	; 0xc096 <prvCopyDataToQueue+0x168>
    c06c:	8b 81       	ldd	r24, Y+3	; 0x03
    c06e:	9c 81       	ldd	r25, Y+4	; 0x04
    c070:	fc 01       	movw	r30, r24
    c072:	24 81       	ldd	r18, Z+4	; 0x04
    c074:	35 81       	ldd	r19, Z+5	; 0x05
    c076:	8b 81       	ldd	r24, Y+3	; 0x03
    c078:	9c 81       	ldd	r25, Y+4	; 0x04
    c07a:	fc 01       	movw	r30, r24
    c07c:	84 8d       	ldd	r24, Z+28	; 0x1c
    c07e:	88 2f       	mov	r24, r24
    c080:	90 e0       	ldi	r25, 0x00	; 0
    c082:	91 95       	neg	r25
    c084:	81 95       	neg	r24
    c086:	91 09       	sbc	r25, r1
    c088:	28 0f       	add	r18, r24
    c08a:	39 1f       	adc	r19, r25
    c08c:	8b 81       	ldd	r24, Y+3	; 0x03
    c08e:	9c 81       	ldd	r25, Y+4	; 0x04
    c090:	fc 01       	movw	r30, r24
    c092:	37 83       	std	Z+7, r19	; 0x07
    c094:	26 83       	std	Z+6, r18	; 0x06
    c096:	8f 81       	ldd	r24, Y+7	; 0x07
    c098:	82 30       	cpi	r24, 0x02	; 2
    c09a:	31 f4       	brne	.+12     	; 0xc0a8 <prvCopyDataToQueue+0x17a>
    c09c:	8a 81       	ldd	r24, Y+2	; 0x02
    c09e:	88 23       	and	r24, r24
    c0a0:	19 f0       	breq	.+6      	; 0xc0a8 <prvCopyDataToQueue+0x17a>
    c0a2:	8a 81       	ldd	r24, Y+2	; 0x02
    c0a4:	81 50       	subi	r24, 0x01	; 1
    c0a6:	8a 83       	std	Y+2, r24	; 0x02
    c0a8:	8a 81       	ldd	r24, Y+2	; 0x02
    c0aa:	21 e0       	ldi	r18, 0x01	; 1
    c0ac:	28 0f       	add	r18, r24
    c0ae:	8b 81       	ldd	r24, Y+3	; 0x03
    c0b0:	9c 81       	ldd	r25, Y+4	; 0x04
    c0b2:	fc 01       	movw	r30, r24
    c0b4:	22 8f       	std	Z+26, r18	; 0x1a
    c0b6:	89 81       	ldd	r24, Y+1	; 0x01
    c0b8:	27 96       	adiw	r28, 0x07	; 7
    c0ba:	0f b6       	in	r0, 0x3f	; 63
    c0bc:	f8 94       	cli
    c0be:	de bf       	out	0x3e, r29	; 62
    c0c0:	0f be       	out	0x3f, r0	; 63
    c0c2:	cd bf       	out	0x3d, r28	; 61
    c0c4:	df 91       	pop	r29
    c0c6:	cf 91       	pop	r28
    c0c8:	08 95       	ret

0000c0ca <prvCopyDataFromQueue>:
    c0ca:	cf 93       	push	r28
    c0cc:	df 93       	push	r29
    c0ce:	00 d0       	rcall	.+0      	; 0xc0d0 <prvCopyDataFromQueue+0x6>
    c0d0:	1f 92       	push	r1
    c0d2:	cd b7       	in	r28, 0x3d	; 61
    c0d4:	de b7       	in	r29, 0x3e	; 62
    c0d6:	9a 83       	std	Y+2, r25	; 0x02
    c0d8:	89 83       	std	Y+1, r24	; 0x01
    c0da:	7c 83       	std	Y+4, r23	; 0x04
    c0dc:	6b 83       	std	Y+3, r22	; 0x03
    c0de:	89 81       	ldd	r24, Y+1	; 0x01
    c0e0:	9a 81       	ldd	r25, Y+2	; 0x02
    c0e2:	fc 01       	movw	r30, r24
    c0e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    c0e6:	88 23       	and	r24, r24
    c0e8:	c1 f1       	breq	.+112    	; 0xc15a <prvCopyDataFromQueue+0x90>
    c0ea:	89 81       	ldd	r24, Y+1	; 0x01
    c0ec:	9a 81       	ldd	r25, Y+2	; 0x02
    c0ee:	fc 01       	movw	r30, r24
    c0f0:	26 81       	ldd	r18, Z+6	; 0x06
    c0f2:	37 81       	ldd	r19, Z+7	; 0x07
    c0f4:	89 81       	ldd	r24, Y+1	; 0x01
    c0f6:	9a 81       	ldd	r25, Y+2	; 0x02
    c0f8:	fc 01       	movw	r30, r24
    c0fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    c0fc:	88 2f       	mov	r24, r24
    c0fe:	90 e0       	ldi	r25, 0x00	; 0
    c100:	28 0f       	add	r18, r24
    c102:	39 1f       	adc	r19, r25
    c104:	89 81       	ldd	r24, Y+1	; 0x01
    c106:	9a 81       	ldd	r25, Y+2	; 0x02
    c108:	fc 01       	movw	r30, r24
    c10a:	37 83       	std	Z+7, r19	; 0x07
    c10c:	26 83       	std	Z+6, r18	; 0x06
    c10e:	89 81       	ldd	r24, Y+1	; 0x01
    c110:	9a 81       	ldd	r25, Y+2	; 0x02
    c112:	fc 01       	movw	r30, r24
    c114:	26 81       	ldd	r18, Z+6	; 0x06
    c116:	37 81       	ldd	r19, Z+7	; 0x07
    c118:	89 81       	ldd	r24, Y+1	; 0x01
    c11a:	9a 81       	ldd	r25, Y+2	; 0x02
    c11c:	fc 01       	movw	r30, r24
    c11e:	84 81       	ldd	r24, Z+4	; 0x04
    c120:	95 81       	ldd	r25, Z+5	; 0x05
    c122:	28 17       	cp	r18, r24
    c124:	39 07       	cpc	r19, r25
    c126:	50 f0       	brcs	.+20     	; 0xc13c <prvCopyDataFromQueue+0x72>
    c128:	89 81       	ldd	r24, Y+1	; 0x01
    c12a:	9a 81       	ldd	r25, Y+2	; 0x02
    c12c:	fc 01       	movw	r30, r24
    c12e:	20 81       	ld	r18, Z
    c130:	31 81       	ldd	r19, Z+1	; 0x01
    c132:	89 81       	ldd	r24, Y+1	; 0x01
    c134:	9a 81       	ldd	r25, Y+2	; 0x02
    c136:	fc 01       	movw	r30, r24
    c138:	37 83       	std	Z+7, r19	; 0x07
    c13a:	26 83       	std	Z+6, r18	; 0x06
    c13c:	89 81       	ldd	r24, Y+1	; 0x01
    c13e:	9a 81       	ldd	r25, Y+2	; 0x02
    c140:	fc 01       	movw	r30, r24
    c142:	84 8d       	ldd	r24, Z+28	; 0x1c
    c144:	48 2f       	mov	r20, r24
    c146:	50 e0       	ldi	r21, 0x00	; 0
    c148:	89 81       	ldd	r24, Y+1	; 0x01
    c14a:	9a 81       	ldd	r25, Y+2	; 0x02
    c14c:	fc 01       	movw	r30, r24
    c14e:	26 81       	ldd	r18, Z+6	; 0x06
    c150:	37 81       	ldd	r19, Z+7	; 0x07
    c152:	8b 81       	ldd	r24, Y+3	; 0x03
    c154:	9c 81       	ldd	r25, Y+4	; 0x04
    c156:	b9 01       	movw	r22, r18
    c158:	38 d4       	rcall	.+2160   	; 0xc9ca <memcpy>
    c15a:	00 00       	nop
    c15c:	0f 90       	pop	r0
    c15e:	0f 90       	pop	r0
    c160:	0f 90       	pop	r0
    c162:	0f 90       	pop	r0
    c164:	df 91       	pop	r29
    c166:	cf 91       	pop	r28
    c168:	08 95       	ret

0000c16a <prvUnlockQueue>:
    c16a:	cf 93       	push	r28
    c16c:	df 93       	push	r29
    c16e:	00 d0       	rcall	.+0      	; 0xc170 <prvUnlockQueue+0x6>
    c170:	1f 92       	push	r1
    c172:	cd b7       	in	r28, 0x3d	; 61
    c174:	de b7       	in	r29, 0x3e	; 62
    c176:	9c 83       	std	Y+4, r25	; 0x04
    c178:	8b 83       	std	Y+3, r24	; 0x03
    c17a:	0f b6       	in	r0, 0x3f	; 63
    c17c:	f8 94       	cli
    c17e:	0f 92       	push	r0
    c180:	8b 81       	ldd	r24, Y+3	; 0x03
    c182:	9c 81       	ldd	r25, Y+4	; 0x04
    c184:	fc 01       	movw	r30, r24
    c186:	86 8d       	ldd	r24, Z+30	; 0x1e
    c188:	89 83       	std	Y+1, r24	; 0x01
    c18a:	12 c0       	rjmp	.+36     	; 0xc1b0 <prvUnlockQueue+0x46>
    c18c:	8b 81       	ldd	r24, Y+3	; 0x03
    c18e:	9c 81       	ldd	r25, Y+4	; 0x04
    c190:	fc 01       	movw	r30, r24
    c192:	81 89       	ldd	r24, Z+17	; 0x11
    c194:	88 23       	and	r24, r24
    c196:	81 f0       	breq	.+32     	; 0xc1b8 <prvUnlockQueue+0x4e>
    c198:	8b 81       	ldd	r24, Y+3	; 0x03
    c19a:	9c 81       	ldd	r25, Y+4	; 0x04
    c19c:	41 96       	adiw	r24, 0x11	; 17
    c19e:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <xTaskRemoveFromEventList>
    c1a2:	88 23       	and	r24, r24
    c1a4:	11 f0       	breq	.+4      	; 0xc1aa <prvUnlockQueue+0x40>
    c1a6:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <vTaskMissedYield>
    c1aa:	89 81       	ldd	r24, Y+1	; 0x01
    c1ac:	81 50       	subi	r24, 0x01	; 1
    c1ae:	89 83       	std	Y+1, r24	; 0x01
    c1b0:	89 81       	ldd	r24, Y+1	; 0x01
    c1b2:	18 16       	cp	r1, r24
    c1b4:	5c f3       	brlt	.-42     	; 0xc18c <prvUnlockQueue+0x22>
    c1b6:	01 c0       	rjmp	.+2      	; 0xc1ba <prvUnlockQueue+0x50>
    c1b8:	00 00       	nop
    c1ba:	8b 81       	ldd	r24, Y+3	; 0x03
    c1bc:	9c 81       	ldd	r25, Y+4	; 0x04
    c1be:	2f ef       	ldi	r18, 0xFF	; 255
    c1c0:	fc 01       	movw	r30, r24
    c1c2:	26 8f       	std	Z+30, r18	; 0x1e
    c1c4:	0f 90       	pop	r0
    c1c6:	0f be       	out	0x3f, r0	; 63
    c1c8:	0f b6       	in	r0, 0x3f	; 63
    c1ca:	f8 94       	cli
    c1cc:	0f 92       	push	r0
    c1ce:	8b 81       	ldd	r24, Y+3	; 0x03
    c1d0:	9c 81       	ldd	r25, Y+4	; 0x04
    c1d2:	fc 01       	movw	r30, r24
    c1d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    c1d6:	8a 83       	std	Y+2, r24	; 0x02
    c1d8:	12 c0       	rjmp	.+36     	; 0xc1fe <prvUnlockQueue+0x94>
    c1da:	8b 81       	ldd	r24, Y+3	; 0x03
    c1dc:	9c 81       	ldd	r25, Y+4	; 0x04
    c1de:	fc 01       	movw	r30, r24
    c1e0:	80 85       	ldd	r24, Z+8	; 0x08
    c1e2:	88 23       	and	r24, r24
    c1e4:	81 f0       	breq	.+32     	; 0xc206 <prvUnlockQueue+0x9c>
    c1e6:	8b 81       	ldd	r24, Y+3	; 0x03
    c1e8:	9c 81       	ldd	r25, Y+4	; 0x04
    c1ea:	08 96       	adiw	r24, 0x08	; 8
    c1ec:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <xTaskRemoveFromEventList>
    c1f0:	88 23       	and	r24, r24
    c1f2:	11 f0       	breq	.+4      	; 0xc1f8 <prvUnlockQueue+0x8e>
    c1f4:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <vTaskMissedYield>
    c1f8:	8a 81       	ldd	r24, Y+2	; 0x02
    c1fa:	81 50       	subi	r24, 0x01	; 1
    c1fc:	8a 83       	std	Y+2, r24	; 0x02
    c1fe:	8a 81       	ldd	r24, Y+2	; 0x02
    c200:	18 16       	cp	r1, r24
    c202:	5c f3       	brlt	.-42     	; 0xc1da <prvUnlockQueue+0x70>
    c204:	01 c0       	rjmp	.+2      	; 0xc208 <prvUnlockQueue+0x9e>
    c206:	00 00       	nop
    c208:	8b 81       	ldd	r24, Y+3	; 0x03
    c20a:	9c 81       	ldd	r25, Y+4	; 0x04
    c20c:	2f ef       	ldi	r18, 0xFF	; 255
    c20e:	fc 01       	movw	r30, r24
    c210:	25 8f       	std	Z+29, r18	; 0x1d
    c212:	0f 90       	pop	r0
    c214:	0f be       	out	0x3f, r0	; 63
    c216:	00 00       	nop
    c218:	0f 90       	pop	r0
    c21a:	0f 90       	pop	r0
    c21c:	0f 90       	pop	r0
    c21e:	0f 90       	pop	r0
    c220:	df 91       	pop	r29
    c222:	cf 91       	pop	r28
    c224:	08 95       	ret

0000c226 <prvIsQueueEmpty>:
    c226:	cf 93       	push	r28
    c228:	df 93       	push	r29
    c22a:	00 d0       	rcall	.+0      	; 0xc22c <prvIsQueueEmpty+0x6>
    c22c:	cd b7       	in	r28, 0x3d	; 61
    c22e:	de b7       	in	r29, 0x3e	; 62
    c230:	9b 83       	std	Y+3, r25	; 0x03
    c232:	8a 83       	std	Y+2, r24	; 0x02
    c234:	0f b6       	in	r0, 0x3f	; 63
    c236:	f8 94       	cli
    c238:	0f 92       	push	r0
    c23a:	8a 81       	ldd	r24, Y+2	; 0x02
    c23c:	9b 81       	ldd	r25, Y+3	; 0x03
    c23e:	fc 01       	movw	r30, r24
    c240:	82 8d       	ldd	r24, Z+26	; 0x1a
    c242:	88 23       	and	r24, r24
    c244:	19 f4       	brne	.+6      	; 0xc24c <prvIsQueueEmpty+0x26>
    c246:	81 e0       	ldi	r24, 0x01	; 1
    c248:	89 83       	std	Y+1, r24	; 0x01
    c24a:	01 c0       	rjmp	.+2      	; 0xc24e <prvIsQueueEmpty+0x28>
    c24c:	19 82       	std	Y+1, r1	; 0x01
    c24e:	0f 90       	pop	r0
    c250:	0f be       	out	0x3f, r0	; 63
    c252:	89 81       	ldd	r24, Y+1	; 0x01
    c254:	0f 90       	pop	r0
    c256:	0f 90       	pop	r0
    c258:	0f 90       	pop	r0
    c25a:	df 91       	pop	r29
    c25c:	cf 91       	pop	r28
    c25e:	08 95       	ret

0000c260 <prvIsQueueFull>:
    c260:	cf 93       	push	r28
    c262:	df 93       	push	r29
    c264:	00 d0       	rcall	.+0      	; 0xc266 <prvIsQueueFull+0x6>
    c266:	cd b7       	in	r28, 0x3d	; 61
    c268:	de b7       	in	r29, 0x3e	; 62
    c26a:	9b 83       	std	Y+3, r25	; 0x03
    c26c:	8a 83       	std	Y+2, r24	; 0x02
    c26e:	0f b6       	in	r0, 0x3f	; 63
    c270:	f8 94       	cli
    c272:	0f 92       	push	r0
    c274:	8a 81       	ldd	r24, Y+2	; 0x02
    c276:	9b 81       	ldd	r25, Y+3	; 0x03
    c278:	fc 01       	movw	r30, r24
    c27a:	22 8d       	ldd	r18, Z+26	; 0x1a
    c27c:	8a 81       	ldd	r24, Y+2	; 0x02
    c27e:	9b 81       	ldd	r25, Y+3	; 0x03
    c280:	fc 01       	movw	r30, r24
    c282:	83 8d       	ldd	r24, Z+27	; 0x1b
    c284:	28 17       	cp	r18, r24
    c286:	19 f4       	brne	.+6      	; 0xc28e <prvIsQueueFull+0x2e>
    c288:	81 e0       	ldi	r24, 0x01	; 1
    c28a:	89 83       	std	Y+1, r24	; 0x01
    c28c:	01 c0       	rjmp	.+2      	; 0xc290 <prvIsQueueFull+0x30>
    c28e:	19 82       	std	Y+1, r1	; 0x01
    c290:	0f 90       	pop	r0
    c292:	0f be       	out	0x3f, r0	; 63
    c294:	89 81       	ldd	r24, Y+1	; 0x01
    c296:	0f 90       	pop	r0
    c298:	0f 90       	pop	r0
    c29a:	0f 90       	pop	r0
    c29c:	df 91       	pop	r29
    c29e:	cf 91       	pop	r28
    c2a0:	08 95       	ret

0000c2a2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    c2a2:	cf 93       	push	r28
    c2a4:	df 93       	push	r29
    c2a6:	cd b7       	in	r28, 0x3d	; 61
    c2a8:	de b7       	in	r29, 0x3e	; 62
    c2aa:	27 97       	sbiw	r28, 0x07	; 7
    c2ac:	0f b6       	in	r0, 0x3f	; 63
    c2ae:	f8 94       	cli
    c2b0:	de bf       	out	0x3e, r29	; 62
    c2b2:	0f be       	out	0x3f, r0	; 63
    c2b4:	cd bf       	out	0x3d, r28	; 61
    c2b6:	9c 83       	std	Y+4, r25	; 0x04
    c2b8:	8b 83       	std	Y+3, r24	; 0x03
    c2ba:	7e 83       	std	Y+6, r23	; 0x06
    c2bc:	6d 83       	std	Y+5, r22	; 0x05
    c2be:	4f 83       	std	Y+7, r20	; 0x07
    Queue_t * const pxQueue = xQueue;
    c2c0:	8b 81       	ldd	r24, Y+3	; 0x03
    c2c2:	9c 81       	ldd	r25, Y+4	; 0x04
    c2c4:	9a 83       	std	Y+2, r25	; 0x02
    c2c6:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    c2c8:	0f b6       	in	r0, 0x3f	; 63
    c2ca:	f8 94       	cli
    c2cc:	0f 92       	push	r0
    c2ce:	89 81       	ldd	r24, Y+1	; 0x01
    c2d0:	9a 81       	ldd	r25, Y+2	; 0x02
    c2d2:	fc 01       	movw	r30, r24
    c2d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    c2d6:	8f 3f       	cpi	r24, 0xFF	; 255
    c2d8:	21 f4       	brne	.+8      	; 0xc2e2 <vQueueWaitForMessageRestricted+0x40>
    c2da:	89 81       	ldd	r24, Y+1	; 0x01
    c2dc:	9a 81       	ldd	r25, Y+2	; 0x02
    c2de:	fc 01       	movw	r30, r24
    c2e0:	15 8e       	std	Z+29, r1	; 0x1d
    c2e2:	89 81       	ldd	r24, Y+1	; 0x01
    c2e4:	9a 81       	ldd	r25, Y+2	; 0x02
    c2e6:	fc 01       	movw	r30, r24
    c2e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    c2ea:	8f 3f       	cpi	r24, 0xFF	; 255
    c2ec:	21 f4       	brne	.+8      	; 0xc2f6 <vQueueWaitForMessageRestricted+0x54>
    c2ee:	89 81       	ldd	r24, Y+1	; 0x01
    c2f0:	9a 81       	ldd	r25, Y+2	; 0x02
    c2f2:	fc 01       	movw	r30, r24
    c2f4:	16 8e       	std	Z+30, r1	; 0x1e
    c2f6:	0f 90       	pop	r0
    c2f8:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    c2fa:	89 81       	ldd	r24, Y+1	; 0x01
    c2fc:	9a 81       	ldd	r25, Y+2	; 0x02
    c2fe:	fc 01       	movw	r30, r24
    c300:	82 8d       	ldd	r24, Z+26	; 0x1a
    c302:	88 23       	and	r24, r24
    c304:	49 f4       	brne	.+18     	; 0xc318 <vQueueWaitForMessageRestricted+0x76>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    c306:	89 81       	ldd	r24, Y+1	; 0x01
    c308:	9a 81       	ldd	r25, Y+2	; 0x02
    c30a:	41 96       	adiw	r24, 0x11	; 17
    c30c:	2d 81       	ldd	r18, Y+5	; 0x05
    c30e:	3e 81       	ldd	r19, Y+6	; 0x06
    c310:	4f 81       	ldd	r20, Y+7	; 0x07
    c312:	b9 01       	movw	r22, r18
    c314:	0e 94 4c 4f 	call	0x9e98	; 0x9e98 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    c318:	89 81       	ldd	r24, Y+1	; 0x01
    c31a:	9a 81       	ldd	r25, Y+2	; 0x02
    c31c:	26 df       	rcall	.-436    	; 0xc16a <prvUnlockQueue>
    }
    c31e:	00 00       	nop
    c320:	27 96       	adiw	r28, 0x07	; 7
    c322:	0f b6       	in	r0, 0x3f	; 63
    c324:	f8 94       	cli
    c326:	de bf       	out	0x3e, r29	; 62
    c328:	0f be       	out	0x3f, r0	; 63
    c32a:	cd bf       	out	0x3d, r28	; 61
    c32c:	df 91       	pop	r29
    c32e:	cf 91       	pop	r28
    c330:	08 95       	ret

0000c332 <__cmpsf2>:
    c332:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <__fp_cmp>
    c336:	08 f4       	brcc	.+2      	; 0xc33a <__cmpsf2+0x8>
    c338:	81 e0       	ldi	r24, 0x01	; 1
    c33a:	08 95       	ret

0000c33c <__divmodhi4>:
    c33c:	97 fb       	bst	r25, 7
    c33e:	07 2e       	mov	r0, r23
    c340:	16 f4       	brtc	.+4      	; 0xc346 <__divmodhi4+0xa>
    c342:	00 94       	com	r0
    c344:	06 d0       	rcall	.+12     	; 0xc352 <__divmodhi4_neg1>
    c346:	77 fd       	sbrc	r23, 7
    c348:	08 d0       	rcall	.+16     	; 0xc35a <__divmodhi4_neg2>
    c34a:	5b d0       	rcall	.+182    	; 0xc402 <__udivmodhi4>
    c34c:	07 fc       	sbrc	r0, 7
    c34e:	05 d0       	rcall	.+10     	; 0xc35a <__divmodhi4_neg2>
    c350:	3e f4       	brtc	.+14     	; 0xc360 <__divmodhi4_exit>

0000c352 <__divmodhi4_neg1>:
    c352:	90 95       	com	r25
    c354:	81 95       	neg	r24
    c356:	9f 4f       	sbci	r25, 0xFF	; 255
    c358:	08 95       	ret

0000c35a <__divmodhi4_neg2>:
    c35a:	70 95       	com	r23
    c35c:	61 95       	neg	r22
    c35e:	7f 4f       	sbci	r23, 0xFF	; 255

0000c360 <__divmodhi4_exit>:
    c360:	08 95       	ret

0000c362 <__udivmodsi4>:
    c362:	a1 e2       	ldi	r26, 0x21	; 33
    c364:	1a 2e       	mov	r1, r26
    c366:	aa 1b       	sub	r26, r26
    c368:	bb 1b       	sub	r27, r27
    c36a:	fd 01       	movw	r30, r26
    c36c:	0d c0       	rjmp	.+26     	; 0xc388 <__udivmodsi4_ep>

0000c36e <__udivmodsi4_loop>:
    c36e:	aa 1f       	adc	r26, r26
    c370:	bb 1f       	adc	r27, r27
    c372:	ee 1f       	adc	r30, r30
    c374:	ff 1f       	adc	r31, r31
    c376:	a2 17       	cp	r26, r18
    c378:	b3 07       	cpc	r27, r19
    c37a:	e4 07       	cpc	r30, r20
    c37c:	f5 07       	cpc	r31, r21
    c37e:	20 f0       	brcs	.+8      	; 0xc388 <__udivmodsi4_ep>
    c380:	a2 1b       	sub	r26, r18
    c382:	b3 0b       	sbc	r27, r19
    c384:	e4 0b       	sbc	r30, r20
    c386:	f5 0b       	sbc	r31, r21

0000c388 <__udivmodsi4_ep>:
    c388:	66 1f       	adc	r22, r22
    c38a:	77 1f       	adc	r23, r23
    c38c:	88 1f       	adc	r24, r24
    c38e:	99 1f       	adc	r25, r25
    c390:	1a 94       	dec	r1
    c392:	69 f7       	brne	.-38     	; 0xc36e <__udivmodsi4_loop>
    c394:	60 95       	com	r22
    c396:	70 95       	com	r23
    c398:	80 95       	com	r24
    c39a:	90 95       	com	r25
    c39c:	9b 01       	movw	r18, r22
    c39e:	ac 01       	movw	r20, r24
    c3a0:	bd 01       	movw	r22, r26
    c3a2:	cf 01       	movw	r24, r30
    c3a4:	08 95       	ret

0000c3a6 <__divmodsi4>:
    c3a6:	05 2e       	mov	r0, r21
    c3a8:	97 fb       	bst	r25, 7
    c3aa:	16 f4       	brtc	.+4      	; 0xc3b0 <__divmodsi4+0xa>
    c3ac:	00 94       	com	r0
    c3ae:	0f d0       	rcall	.+30     	; 0xc3ce <__negsi2>
    c3b0:	57 fd       	sbrc	r21, 7
    c3b2:	05 d0       	rcall	.+10     	; 0xc3be <__divmodsi4_neg2>
    c3b4:	d6 df       	rcall	.-84     	; 0xc362 <__udivmodsi4>
    c3b6:	07 fc       	sbrc	r0, 7
    c3b8:	02 d0       	rcall	.+4      	; 0xc3be <__divmodsi4_neg2>
    c3ba:	46 f4       	brtc	.+16     	; 0xc3cc <__divmodsi4_exit>
    c3bc:	08 c0       	rjmp	.+16     	; 0xc3ce <__negsi2>

0000c3be <__divmodsi4_neg2>:
    c3be:	50 95       	com	r21
    c3c0:	40 95       	com	r20
    c3c2:	30 95       	com	r19
    c3c4:	21 95       	neg	r18
    c3c6:	3f 4f       	sbci	r19, 0xFF	; 255
    c3c8:	4f 4f       	sbci	r20, 0xFF	; 255
    c3ca:	5f 4f       	sbci	r21, 0xFF	; 255

0000c3cc <__divmodsi4_exit>:
    c3cc:	08 95       	ret

0000c3ce <__negsi2>:
    c3ce:	90 95       	com	r25
    c3d0:	80 95       	com	r24
    c3d2:	70 95       	com	r23
    c3d4:	61 95       	neg	r22
    c3d6:	7f 4f       	sbci	r23, 0xFF	; 255
    c3d8:	8f 4f       	sbci	r24, 0xFF	; 255
    c3da:	9f 4f       	sbci	r25, 0xFF	; 255
    c3dc:	08 95       	ret

0000c3de <__tablejump2__>:
    c3de:	ee 0f       	add	r30, r30
    c3e0:	ff 1f       	adc	r31, r31
    c3e2:	88 1f       	adc	r24, r24
    c3e4:	8b bf       	out	0x3b, r24	; 59
    c3e6:	07 90       	elpm	r0, Z+
    c3e8:	f6 91       	elpm	r31, Z
    c3ea:	e0 2d       	mov	r30, r0
    c3ec:	19 94       	eijmp

0000c3ee <__muluhisi3>:
    c3ee:	1d d0       	rcall	.+58     	; 0xc42a <__umulhisi3>
    c3f0:	a5 9f       	mul	r26, r21
    c3f2:	90 0d       	add	r25, r0
    c3f4:	b4 9f       	mul	r27, r20
    c3f6:	90 0d       	add	r25, r0
    c3f8:	a4 9f       	mul	r26, r20
    c3fa:	80 0d       	add	r24, r0
    c3fc:	91 1d       	adc	r25, r1
    c3fe:	11 24       	eor	r1, r1
    c400:	08 95       	ret

0000c402 <__udivmodhi4>:
    c402:	aa 1b       	sub	r26, r26
    c404:	bb 1b       	sub	r27, r27
    c406:	51 e1       	ldi	r21, 0x11	; 17
    c408:	07 c0       	rjmp	.+14     	; 0xc418 <__udivmodhi4_ep>

0000c40a <__udivmodhi4_loop>:
    c40a:	aa 1f       	adc	r26, r26
    c40c:	bb 1f       	adc	r27, r27
    c40e:	a6 17       	cp	r26, r22
    c410:	b7 07       	cpc	r27, r23
    c412:	10 f0       	brcs	.+4      	; 0xc418 <__udivmodhi4_ep>
    c414:	a6 1b       	sub	r26, r22
    c416:	b7 0b       	sbc	r27, r23

0000c418 <__udivmodhi4_ep>:
    c418:	88 1f       	adc	r24, r24
    c41a:	99 1f       	adc	r25, r25
    c41c:	5a 95       	dec	r21
    c41e:	a9 f7       	brne	.-22     	; 0xc40a <__udivmodhi4_loop>
    c420:	80 95       	com	r24
    c422:	90 95       	com	r25
    c424:	bc 01       	movw	r22, r24
    c426:	cd 01       	movw	r24, r26
    c428:	08 95       	ret

0000c42a <__umulhisi3>:
    c42a:	a2 9f       	mul	r26, r18
    c42c:	b0 01       	movw	r22, r0
    c42e:	b3 9f       	mul	r27, r19
    c430:	c0 01       	movw	r24, r0
    c432:	a3 9f       	mul	r26, r19
    c434:	70 0d       	add	r23, r0
    c436:	81 1d       	adc	r24, r1
    c438:	11 24       	eor	r1, r1
    c43a:	91 1d       	adc	r25, r1
    c43c:	b2 9f       	mul	r27, r18
    c43e:	70 0d       	add	r23, r0
    c440:	81 1d       	adc	r24, r1
    c442:	11 24       	eor	r1, r1
    c444:	91 1d       	adc	r25, r1
    c446:	08 95       	ret

0000c448 <malloc>:
    c448:	0f 93       	push	r16
    c44a:	1f 93       	push	r17
    c44c:	cf 93       	push	r28
    c44e:	df 93       	push	r29
    c450:	82 30       	cpi	r24, 0x02	; 2
    c452:	91 05       	cpc	r25, r1
    c454:	10 f4       	brcc	.+4      	; 0xc45a <malloc+0x12>
    c456:	82 e0       	ldi	r24, 0x02	; 2
    c458:	90 e0       	ldi	r25, 0x00	; 0
    c45a:	e0 91 94 05 	lds	r30, 0x0594	; 0x800594 <__flp>
    c45e:	f0 91 95 05 	lds	r31, 0x0595	; 0x800595 <__flp+0x1>
    c462:	20 e0       	ldi	r18, 0x00	; 0
    c464:	30 e0       	ldi	r19, 0x00	; 0
    c466:	a0 e0       	ldi	r26, 0x00	; 0
    c468:	b0 e0       	ldi	r27, 0x00	; 0
    c46a:	30 97       	sbiw	r30, 0x00	; 0
    c46c:	19 f1       	breq	.+70     	; 0xc4b4 <malloc+0x6c>
    c46e:	40 81       	ld	r20, Z
    c470:	51 81       	ldd	r21, Z+1	; 0x01
    c472:	02 81       	ldd	r16, Z+2	; 0x02
    c474:	13 81       	ldd	r17, Z+3	; 0x03
    c476:	48 17       	cp	r20, r24
    c478:	59 07       	cpc	r21, r25
    c47a:	c8 f0       	brcs	.+50     	; 0xc4ae <malloc+0x66>
    c47c:	84 17       	cp	r24, r20
    c47e:	95 07       	cpc	r25, r21
    c480:	69 f4       	brne	.+26     	; 0xc49c <malloc+0x54>
    c482:	10 97       	sbiw	r26, 0x00	; 0
    c484:	31 f0       	breq	.+12     	; 0xc492 <malloc+0x4a>
    c486:	12 96       	adiw	r26, 0x02	; 2
    c488:	0c 93       	st	X, r16
    c48a:	12 97       	sbiw	r26, 0x02	; 2
    c48c:	13 96       	adiw	r26, 0x03	; 3
    c48e:	1c 93       	st	X, r17
    c490:	27 c0       	rjmp	.+78     	; 0xc4e0 <malloc+0x98>
    c492:	00 93 94 05 	sts	0x0594, r16	; 0x800594 <__flp>
    c496:	10 93 95 05 	sts	0x0595, r17	; 0x800595 <__flp+0x1>
    c49a:	22 c0       	rjmp	.+68     	; 0xc4e0 <malloc+0x98>
    c49c:	21 15       	cp	r18, r1
    c49e:	31 05       	cpc	r19, r1
    c4a0:	19 f0       	breq	.+6      	; 0xc4a8 <malloc+0x60>
    c4a2:	42 17       	cp	r20, r18
    c4a4:	53 07       	cpc	r21, r19
    c4a6:	18 f4       	brcc	.+6      	; 0xc4ae <malloc+0x66>
    c4a8:	9a 01       	movw	r18, r20
    c4aa:	bd 01       	movw	r22, r26
    c4ac:	ef 01       	movw	r28, r30
    c4ae:	df 01       	movw	r26, r30
    c4b0:	f8 01       	movw	r30, r16
    c4b2:	db cf       	rjmp	.-74     	; 0xc46a <malloc+0x22>
    c4b4:	21 15       	cp	r18, r1
    c4b6:	31 05       	cpc	r19, r1
    c4b8:	f9 f0       	breq	.+62     	; 0xc4f8 <malloc+0xb0>
    c4ba:	28 1b       	sub	r18, r24
    c4bc:	39 0b       	sbc	r19, r25
    c4be:	24 30       	cpi	r18, 0x04	; 4
    c4c0:	31 05       	cpc	r19, r1
    c4c2:	80 f4       	brcc	.+32     	; 0xc4e4 <malloc+0x9c>
    c4c4:	8a 81       	ldd	r24, Y+2	; 0x02
    c4c6:	9b 81       	ldd	r25, Y+3	; 0x03
    c4c8:	61 15       	cp	r22, r1
    c4ca:	71 05       	cpc	r23, r1
    c4cc:	21 f0       	breq	.+8      	; 0xc4d6 <malloc+0x8e>
    c4ce:	fb 01       	movw	r30, r22
    c4d0:	93 83       	std	Z+3, r25	; 0x03
    c4d2:	82 83       	std	Z+2, r24	; 0x02
    c4d4:	04 c0       	rjmp	.+8      	; 0xc4de <malloc+0x96>
    c4d6:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <__flp+0x1>
    c4da:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <__flp>
    c4de:	fe 01       	movw	r30, r28
    c4e0:	32 96       	adiw	r30, 0x02	; 2
    c4e2:	44 c0       	rjmp	.+136    	; 0xc56c <malloc+0x124>
    c4e4:	fe 01       	movw	r30, r28
    c4e6:	e2 0f       	add	r30, r18
    c4e8:	f3 1f       	adc	r31, r19
    c4ea:	81 93       	st	Z+, r24
    c4ec:	91 93       	st	Z+, r25
    c4ee:	22 50       	subi	r18, 0x02	; 2
    c4f0:	31 09       	sbc	r19, r1
    c4f2:	39 83       	std	Y+1, r19	; 0x01
    c4f4:	28 83       	st	Y, r18
    c4f6:	3a c0       	rjmp	.+116    	; 0xc56c <malloc+0x124>
    c4f8:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__brkval>
    c4fc:	30 91 93 05 	lds	r19, 0x0593	; 0x800593 <__brkval+0x1>
    c500:	23 2b       	or	r18, r19
    c502:	41 f4       	brne	.+16     	; 0xc514 <malloc+0xcc>
    c504:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    c508:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    c50c:	30 93 93 05 	sts	0x0593, r19	; 0x800593 <__brkval+0x1>
    c510:	20 93 92 05 	sts	0x0592, r18	; 0x800592 <__brkval>
    c514:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    c518:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    c51c:	21 15       	cp	r18, r1
    c51e:	31 05       	cpc	r19, r1
    c520:	41 f4       	brne	.+16     	; 0xc532 <malloc+0xea>
    c522:	2d b7       	in	r18, 0x3d	; 61
    c524:	3e b7       	in	r19, 0x3e	; 62
    c526:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c52a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c52e:	24 1b       	sub	r18, r20
    c530:	35 0b       	sbc	r19, r21
    c532:	e0 91 92 05 	lds	r30, 0x0592	; 0x800592 <__brkval>
    c536:	f0 91 93 05 	lds	r31, 0x0593	; 0x800593 <__brkval+0x1>
    c53a:	e2 17       	cp	r30, r18
    c53c:	f3 07       	cpc	r31, r19
    c53e:	a0 f4       	brcc	.+40     	; 0xc568 <malloc+0x120>
    c540:	2e 1b       	sub	r18, r30
    c542:	3f 0b       	sbc	r19, r31
    c544:	28 17       	cp	r18, r24
    c546:	39 07       	cpc	r19, r25
    c548:	78 f0       	brcs	.+30     	; 0xc568 <malloc+0x120>
    c54a:	ac 01       	movw	r20, r24
    c54c:	4e 5f       	subi	r20, 0xFE	; 254
    c54e:	5f 4f       	sbci	r21, 0xFF	; 255
    c550:	24 17       	cp	r18, r20
    c552:	35 07       	cpc	r19, r21
    c554:	48 f0       	brcs	.+18     	; 0xc568 <malloc+0x120>
    c556:	4e 0f       	add	r20, r30
    c558:	5f 1f       	adc	r21, r31
    c55a:	50 93 93 05 	sts	0x0593, r21	; 0x800593 <__brkval+0x1>
    c55e:	40 93 92 05 	sts	0x0592, r20	; 0x800592 <__brkval>
    c562:	81 93       	st	Z+, r24
    c564:	91 93       	st	Z+, r25
    c566:	02 c0       	rjmp	.+4      	; 0xc56c <malloc+0x124>
    c568:	e0 e0       	ldi	r30, 0x00	; 0
    c56a:	f0 e0       	ldi	r31, 0x00	; 0
    c56c:	cf 01       	movw	r24, r30
    c56e:	df 91       	pop	r29
    c570:	cf 91       	pop	r28
    c572:	1f 91       	pop	r17
    c574:	0f 91       	pop	r16
    c576:	08 95       	ret

0000c578 <free>:
    c578:	cf 93       	push	r28
    c57a:	df 93       	push	r29
    c57c:	00 97       	sbiw	r24, 0x00	; 0
    c57e:	09 f4       	brne	.+2      	; 0xc582 <free+0xa>
    c580:	81 c0       	rjmp	.+258    	; 0xc684 <free+0x10c>
    c582:	fc 01       	movw	r30, r24
    c584:	32 97       	sbiw	r30, 0x02	; 2
    c586:	13 82       	std	Z+3, r1	; 0x03
    c588:	12 82       	std	Z+2, r1	; 0x02
    c58a:	a0 91 94 05 	lds	r26, 0x0594	; 0x800594 <__flp>
    c58e:	b0 91 95 05 	lds	r27, 0x0595	; 0x800595 <__flp+0x1>
    c592:	10 97       	sbiw	r26, 0x00	; 0
    c594:	81 f4       	brne	.+32     	; 0xc5b6 <free+0x3e>
    c596:	20 81       	ld	r18, Z
    c598:	31 81       	ldd	r19, Z+1	; 0x01
    c59a:	82 0f       	add	r24, r18
    c59c:	93 1f       	adc	r25, r19
    c59e:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__brkval>
    c5a2:	30 91 93 05 	lds	r19, 0x0593	; 0x800593 <__brkval+0x1>
    c5a6:	28 17       	cp	r18, r24
    c5a8:	39 07       	cpc	r19, r25
    c5aa:	51 f5       	brne	.+84     	; 0xc600 <free+0x88>
    c5ac:	f0 93 93 05 	sts	0x0593, r31	; 0x800593 <__brkval+0x1>
    c5b0:	e0 93 92 05 	sts	0x0592, r30	; 0x800592 <__brkval>
    c5b4:	67 c0       	rjmp	.+206    	; 0xc684 <free+0x10c>
    c5b6:	ed 01       	movw	r28, r26
    c5b8:	20 e0       	ldi	r18, 0x00	; 0
    c5ba:	30 e0       	ldi	r19, 0x00	; 0
    c5bc:	ce 17       	cp	r28, r30
    c5be:	df 07       	cpc	r29, r31
    c5c0:	40 f4       	brcc	.+16     	; 0xc5d2 <free+0x5a>
    c5c2:	4a 81       	ldd	r20, Y+2	; 0x02
    c5c4:	5b 81       	ldd	r21, Y+3	; 0x03
    c5c6:	9e 01       	movw	r18, r28
    c5c8:	41 15       	cp	r20, r1
    c5ca:	51 05       	cpc	r21, r1
    c5cc:	f1 f0       	breq	.+60     	; 0xc60a <free+0x92>
    c5ce:	ea 01       	movw	r28, r20
    c5d0:	f5 cf       	rjmp	.-22     	; 0xc5bc <free+0x44>
    c5d2:	d3 83       	std	Z+3, r29	; 0x03
    c5d4:	c2 83       	std	Z+2, r28	; 0x02
    c5d6:	40 81       	ld	r20, Z
    c5d8:	51 81       	ldd	r21, Z+1	; 0x01
    c5da:	84 0f       	add	r24, r20
    c5dc:	95 1f       	adc	r25, r21
    c5de:	c8 17       	cp	r28, r24
    c5e0:	d9 07       	cpc	r29, r25
    c5e2:	59 f4       	brne	.+22     	; 0xc5fa <free+0x82>
    c5e4:	88 81       	ld	r24, Y
    c5e6:	99 81       	ldd	r25, Y+1	; 0x01
    c5e8:	84 0f       	add	r24, r20
    c5ea:	95 1f       	adc	r25, r21
    c5ec:	02 96       	adiw	r24, 0x02	; 2
    c5ee:	91 83       	std	Z+1, r25	; 0x01
    c5f0:	80 83       	st	Z, r24
    c5f2:	8a 81       	ldd	r24, Y+2	; 0x02
    c5f4:	9b 81       	ldd	r25, Y+3	; 0x03
    c5f6:	93 83       	std	Z+3, r25	; 0x03
    c5f8:	82 83       	std	Z+2, r24	; 0x02
    c5fa:	21 15       	cp	r18, r1
    c5fc:	31 05       	cpc	r19, r1
    c5fe:	29 f4       	brne	.+10     	; 0xc60a <free+0x92>
    c600:	f0 93 95 05 	sts	0x0595, r31	; 0x800595 <__flp+0x1>
    c604:	e0 93 94 05 	sts	0x0594, r30	; 0x800594 <__flp>
    c608:	3d c0       	rjmp	.+122    	; 0xc684 <free+0x10c>
    c60a:	e9 01       	movw	r28, r18
    c60c:	fb 83       	std	Y+3, r31	; 0x03
    c60e:	ea 83       	std	Y+2, r30	; 0x02
    c610:	49 91       	ld	r20, Y+
    c612:	59 91       	ld	r21, Y+
    c614:	c4 0f       	add	r28, r20
    c616:	d5 1f       	adc	r29, r21
    c618:	ec 17       	cp	r30, r28
    c61a:	fd 07       	cpc	r31, r29
    c61c:	61 f4       	brne	.+24     	; 0xc636 <free+0xbe>
    c61e:	80 81       	ld	r24, Z
    c620:	91 81       	ldd	r25, Z+1	; 0x01
    c622:	84 0f       	add	r24, r20
    c624:	95 1f       	adc	r25, r21
    c626:	02 96       	adiw	r24, 0x02	; 2
    c628:	e9 01       	movw	r28, r18
    c62a:	99 83       	std	Y+1, r25	; 0x01
    c62c:	88 83       	st	Y, r24
    c62e:	82 81       	ldd	r24, Z+2	; 0x02
    c630:	93 81       	ldd	r25, Z+3	; 0x03
    c632:	9b 83       	std	Y+3, r25	; 0x03
    c634:	8a 83       	std	Y+2, r24	; 0x02
    c636:	e0 e0       	ldi	r30, 0x00	; 0
    c638:	f0 e0       	ldi	r31, 0x00	; 0
    c63a:	12 96       	adiw	r26, 0x02	; 2
    c63c:	8d 91       	ld	r24, X+
    c63e:	9c 91       	ld	r25, X
    c640:	13 97       	sbiw	r26, 0x03	; 3
    c642:	00 97       	sbiw	r24, 0x00	; 0
    c644:	19 f0       	breq	.+6      	; 0xc64c <free+0xd4>
    c646:	fd 01       	movw	r30, r26
    c648:	dc 01       	movw	r26, r24
    c64a:	f7 cf       	rjmp	.-18     	; 0xc63a <free+0xc2>
    c64c:	8d 91       	ld	r24, X+
    c64e:	9c 91       	ld	r25, X
    c650:	11 97       	sbiw	r26, 0x01	; 1
    c652:	9d 01       	movw	r18, r26
    c654:	2e 5f       	subi	r18, 0xFE	; 254
    c656:	3f 4f       	sbci	r19, 0xFF	; 255
    c658:	82 0f       	add	r24, r18
    c65a:	93 1f       	adc	r25, r19
    c65c:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__brkval>
    c660:	30 91 93 05 	lds	r19, 0x0593	; 0x800593 <__brkval+0x1>
    c664:	28 17       	cp	r18, r24
    c666:	39 07       	cpc	r19, r25
    c668:	69 f4       	brne	.+26     	; 0xc684 <free+0x10c>
    c66a:	30 97       	sbiw	r30, 0x00	; 0
    c66c:	29 f4       	brne	.+10     	; 0xc678 <free+0x100>
    c66e:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <__flp+0x1>
    c672:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <__flp>
    c676:	02 c0       	rjmp	.+4      	; 0xc67c <free+0x104>
    c678:	13 82       	std	Z+3, r1	; 0x03
    c67a:	12 82       	std	Z+2, r1	; 0x02
    c67c:	b0 93 93 05 	sts	0x0593, r27	; 0x800593 <__brkval+0x1>
    c680:	a0 93 92 05 	sts	0x0592, r26	; 0x800592 <__brkval>
    c684:	df 91       	pop	r29
    c686:	cf 91       	pop	r28
    c688:	08 95       	ret

0000c68a <random_r>:
    c68a:	8f 92       	push	r8
    c68c:	9f 92       	push	r9
    c68e:	af 92       	push	r10
    c690:	bf 92       	push	r11
    c692:	cf 92       	push	r12
    c694:	df 92       	push	r13
    c696:	ef 92       	push	r14
    c698:	ff 92       	push	r15
    c69a:	cf 93       	push	r28
    c69c:	df 93       	push	r29
    c69e:	ec 01       	movw	r28, r24
    c6a0:	68 81       	ld	r22, Y
    c6a2:	79 81       	ldd	r23, Y+1	; 0x01
    c6a4:	8a 81       	ldd	r24, Y+2	; 0x02
    c6a6:	9b 81       	ldd	r25, Y+3	; 0x03
    c6a8:	61 15       	cp	r22, r1
    c6aa:	71 05       	cpc	r23, r1
    c6ac:	81 05       	cpc	r24, r1
    c6ae:	91 05       	cpc	r25, r1
    c6b0:	21 f4       	brne	.+8      	; 0xc6ba <random_r+0x30>
    c6b2:	64 e2       	ldi	r22, 0x24	; 36
    c6b4:	79 ed       	ldi	r23, 0xD9	; 217
    c6b6:	8b e5       	ldi	r24, 0x5B	; 91
    c6b8:	97 e0       	ldi	r25, 0x07	; 7
    c6ba:	2d e1       	ldi	r18, 0x1D	; 29
    c6bc:	33 ef       	ldi	r19, 0xF3	; 243
    c6be:	41 e0       	ldi	r20, 0x01	; 1
    c6c0:	50 e0       	ldi	r21, 0x00	; 0
    c6c2:	71 de       	rcall	.-798    	; 0xc3a6 <__divmodsi4>
    c6c4:	49 01       	movw	r8, r18
    c6c6:	5a 01       	movw	r10, r20
    c6c8:	9b 01       	movw	r18, r22
    c6ca:	ac 01       	movw	r20, r24
    c6cc:	a7 ea       	ldi	r26, 0xA7	; 167
    c6ce:	b1 e4       	ldi	r27, 0x41	; 65
    c6d0:	8e de       	rcall	.-740    	; 0xc3ee <__muluhisi3>
    c6d2:	6b 01       	movw	r12, r22
    c6d4:	7c 01       	movw	r14, r24
    c6d6:	ac ee       	ldi	r26, 0xEC	; 236
    c6d8:	b4 ef       	ldi	r27, 0xF4	; 244
    c6da:	a5 01       	movw	r20, r10
    c6dc:	94 01       	movw	r18, r8
    c6de:	2e d5       	rcall	.+2652   	; 0xd13c <__mulohisi3>
    c6e0:	dc 01       	movw	r26, r24
    c6e2:	cb 01       	movw	r24, r22
    c6e4:	8c 0d       	add	r24, r12
    c6e6:	9d 1d       	adc	r25, r13
    c6e8:	ae 1d       	adc	r26, r14
    c6ea:	bf 1d       	adc	r27, r15
    c6ec:	b7 ff       	sbrs	r27, 7
    c6ee:	03 c0       	rjmp	.+6      	; 0xc6f6 <random_r+0x6c>
    c6f0:	01 97       	sbiw	r24, 0x01	; 1
    c6f2:	a1 09       	sbc	r26, r1
    c6f4:	b0 48       	sbci	r27, 0x80	; 128
    c6f6:	88 83       	st	Y, r24
    c6f8:	99 83       	std	Y+1, r25	; 0x01
    c6fa:	aa 83       	std	Y+2, r26	; 0x02
    c6fc:	bb 83       	std	Y+3, r27	; 0x03
    c6fe:	bc 01       	movw	r22, r24
    c700:	cd 01       	movw	r24, r26
    c702:	9f 77       	andi	r25, 0x7F	; 127
    c704:	df 91       	pop	r29
    c706:	cf 91       	pop	r28
    c708:	ff 90       	pop	r15
    c70a:	ef 90       	pop	r14
    c70c:	df 90       	pop	r13
    c70e:	cf 90       	pop	r12
    c710:	bf 90       	pop	r11
    c712:	af 90       	pop	r10
    c714:	9f 90       	pop	r9
    c716:	8f 90       	pop	r8
    c718:	08 95       	ret

0000c71a <random>:
    c71a:	8f 92       	push	r8
    c71c:	9f 92       	push	r9
    c71e:	af 92       	push	r10
    c720:	bf 92       	push	r11
    c722:	cf 92       	push	r12
    c724:	df 92       	push	r13
    c726:	ef 92       	push	r14
    c728:	ff 92       	push	r15
    c72a:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <next>
    c72e:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <next+0x1>
    c732:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <next+0x2>
    c736:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <next+0x3>
    c73a:	61 15       	cp	r22, r1
    c73c:	71 05       	cpc	r23, r1
    c73e:	81 05       	cpc	r24, r1
    c740:	91 05       	cpc	r25, r1
    c742:	21 f4       	brne	.+8      	; 0xc74c <random+0x32>
    c744:	64 e2       	ldi	r22, 0x24	; 36
    c746:	79 ed       	ldi	r23, 0xD9	; 217
    c748:	8b e5       	ldi	r24, 0x5B	; 91
    c74a:	97 e0       	ldi	r25, 0x07	; 7
    c74c:	2d e1       	ldi	r18, 0x1D	; 29
    c74e:	33 ef       	ldi	r19, 0xF3	; 243
    c750:	41 e0       	ldi	r20, 0x01	; 1
    c752:	50 e0       	ldi	r21, 0x00	; 0
    c754:	28 de       	rcall	.-944    	; 0xc3a6 <__divmodsi4>
    c756:	49 01       	movw	r8, r18
    c758:	5a 01       	movw	r10, r20
    c75a:	9b 01       	movw	r18, r22
    c75c:	ac 01       	movw	r20, r24
    c75e:	a7 ea       	ldi	r26, 0xA7	; 167
    c760:	b1 e4       	ldi	r27, 0x41	; 65
    c762:	45 de       	rcall	.-886    	; 0xc3ee <__muluhisi3>
    c764:	6b 01       	movw	r12, r22
    c766:	7c 01       	movw	r14, r24
    c768:	ac ee       	ldi	r26, 0xEC	; 236
    c76a:	b4 ef       	ldi	r27, 0xF4	; 244
    c76c:	a5 01       	movw	r20, r10
    c76e:	94 01       	movw	r18, r8
    c770:	e5 d4       	rcall	.+2506   	; 0xd13c <__mulohisi3>
    c772:	dc 01       	movw	r26, r24
    c774:	cb 01       	movw	r24, r22
    c776:	8c 0d       	add	r24, r12
    c778:	9d 1d       	adc	r25, r13
    c77a:	ae 1d       	adc	r26, r14
    c77c:	bf 1d       	adc	r27, r15
    c77e:	b7 ff       	sbrs	r27, 7
    c780:	03 c0       	rjmp	.+6      	; 0xc788 <random+0x6e>
    c782:	01 97       	sbiw	r24, 0x01	; 1
    c784:	a1 09       	sbc	r26, r1
    c786:	b0 48       	sbci	r27, 0x80	; 128
    c788:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    c78c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    c790:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    c794:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    c798:	bc 01       	movw	r22, r24
    c79a:	cd 01       	movw	r24, r26
    c79c:	9f 77       	andi	r25, 0x7F	; 127
    c79e:	ff 90       	pop	r15
    c7a0:	ef 90       	pop	r14
    c7a2:	df 90       	pop	r13
    c7a4:	cf 90       	pop	r12
    c7a6:	bf 90       	pop	r11
    c7a8:	af 90       	pop	r10
    c7aa:	9f 90       	pop	r9
    c7ac:	8f 90       	pop	r8
    c7ae:	08 95       	ret

0000c7b0 <srandom>:
    c7b0:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <next>
    c7b4:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <next+0x1>
    c7b8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <next+0x2>
    c7bc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <next+0x3>
    c7c0:	08 95       	ret

0000c7c2 <realloc>:
    c7c2:	6f 92       	push	r6
    c7c4:	7f 92       	push	r7
    c7c6:	8f 92       	push	r8
    c7c8:	9f 92       	push	r9
    c7ca:	af 92       	push	r10
    c7cc:	bf 92       	push	r11
    c7ce:	cf 92       	push	r12
    c7d0:	df 92       	push	r13
    c7d2:	ef 92       	push	r14
    c7d4:	ff 92       	push	r15
    c7d6:	0f 93       	push	r16
    c7d8:	1f 93       	push	r17
    c7da:	cf 93       	push	r28
    c7dc:	df 93       	push	r29
    c7de:	00 97       	sbiw	r24, 0x00	; 0
    c7e0:	81 f4       	brne	.+32     	; 0xc802 <realloc+0x40>
    c7e2:	cb 01       	movw	r24, r22
    c7e4:	df 91       	pop	r29
    c7e6:	cf 91       	pop	r28
    c7e8:	1f 91       	pop	r17
    c7ea:	0f 91       	pop	r16
    c7ec:	ff 90       	pop	r15
    c7ee:	ef 90       	pop	r14
    c7f0:	df 90       	pop	r13
    c7f2:	cf 90       	pop	r12
    c7f4:	bf 90       	pop	r11
    c7f6:	af 90       	pop	r10
    c7f8:	9f 90       	pop	r9
    c7fa:	8f 90       	pop	r8
    c7fc:	7f 90       	pop	r7
    c7fe:	6f 90       	pop	r6
    c800:	23 ce       	rjmp	.-954    	; 0xc448 <malloc>
    c802:	fc 01       	movw	r30, r24
    c804:	e6 0f       	add	r30, r22
    c806:	f7 1f       	adc	r31, r23
    c808:	9c 01       	movw	r18, r24
    c80a:	22 50       	subi	r18, 0x02	; 2
    c80c:	31 09       	sbc	r19, r1
    c80e:	e2 17       	cp	r30, r18
    c810:	f3 07       	cpc	r31, r19
    c812:	08 f4       	brcc	.+2      	; 0xc816 <realloc+0x54>
    c814:	a5 c0       	rjmp	.+330    	; 0xc960 <realloc+0x19e>
    c816:	ec 01       	movw	r28, r24
    c818:	d9 01       	movw	r26, r18
    c81a:	0d 91       	ld	r16, X+
    c81c:	1c 91       	ld	r17, X
    c81e:	11 97       	sbiw	r26, 0x01	; 1
    c820:	06 17       	cp	r16, r22
    c822:	17 07       	cpc	r17, r23
    c824:	a8 f0       	brcs	.+42     	; 0xc850 <realloc+0x8e>
    c826:	05 30       	cpi	r16, 0x05	; 5
    c828:	11 05       	cpc	r17, r1
    c82a:	08 f4       	brcc	.+2      	; 0xc82e <realloc+0x6c>
    c82c:	97 c0       	rjmp	.+302    	; 0xc95c <realloc+0x19a>
    c82e:	c8 01       	movw	r24, r16
    c830:	04 97       	sbiw	r24, 0x04	; 4
    c832:	86 17       	cp	r24, r22
    c834:	97 07       	cpc	r25, r23
    c836:	08 f4       	brcc	.+2      	; 0xc83a <realloc+0x78>
    c838:	91 c0       	rjmp	.+290    	; 0xc95c <realloc+0x19a>
    c83a:	02 50       	subi	r16, 0x02	; 2
    c83c:	11 09       	sbc	r17, r1
    c83e:	06 1b       	sub	r16, r22
    c840:	17 0b       	sbc	r17, r23
    c842:	01 93       	st	Z+, r16
    c844:	11 93       	st	Z+, r17
    c846:	6d 93       	st	X+, r22
    c848:	7c 93       	st	X, r23
    c84a:	cf 01       	movw	r24, r30
    c84c:	95 de       	rcall	.-726    	; 0xc578 <free>
    c84e:	86 c0       	rjmp	.+268    	; 0xc95c <realloc+0x19a>
    c850:	5b 01       	movw	r10, r22
    c852:	a0 1a       	sub	r10, r16
    c854:	b1 0a       	sbc	r11, r17
    c856:	4c 01       	movw	r8, r24
    c858:	80 0e       	add	r8, r16
    c85a:	91 1e       	adc	r9, r17
    c85c:	a0 91 94 05 	lds	r26, 0x0594	; 0x800594 <__flp>
    c860:	b0 91 95 05 	lds	r27, 0x0595	; 0x800595 <__flp+0x1>
    c864:	61 2c       	mov	r6, r1
    c866:	71 2c       	mov	r7, r1
    c868:	e1 2c       	mov	r14, r1
    c86a:	f1 2c       	mov	r15, r1
    c86c:	10 97       	sbiw	r26, 0x00	; 0
    c86e:	09 f4       	brne	.+2      	; 0xc872 <realloc+0xb0>
    c870:	46 c0       	rjmp	.+140    	; 0xc8fe <realloc+0x13c>
    c872:	8d 91       	ld	r24, X+
    c874:	9c 91       	ld	r25, X
    c876:	11 97       	sbiw	r26, 0x01	; 1
    c878:	a8 15       	cp	r26, r8
    c87a:	b9 05       	cpc	r27, r9
    c87c:	b1 f5       	brne	.+108    	; 0xc8ea <realloc+0x128>
    c87e:	6c 01       	movw	r12, r24
    c880:	42 e0       	ldi	r20, 0x02	; 2
    c882:	c4 0e       	add	r12, r20
    c884:	d1 1c       	adc	r13, r1
    c886:	ca 14       	cp	r12, r10
    c888:	db 04       	cpc	r13, r11
    c88a:	78 f1       	brcs	.+94     	; 0xc8ea <realloc+0x128>
    c88c:	4c 01       	movw	r8, r24
    c88e:	8a 18       	sub	r8, r10
    c890:	9b 08       	sbc	r9, r11
    c892:	64 01       	movw	r12, r8
    c894:	42 e0       	ldi	r20, 0x02	; 2
    c896:	c4 0e       	add	r12, r20
    c898:	d1 1c       	adc	r13, r1
    c89a:	12 96       	adiw	r26, 0x02	; 2
    c89c:	bc 90       	ld	r11, X
    c89e:	12 97       	sbiw	r26, 0x02	; 2
    c8a0:	13 96       	adiw	r26, 0x03	; 3
    c8a2:	ac 91       	ld	r26, X
    c8a4:	b5 e0       	ldi	r27, 0x05	; 5
    c8a6:	cb 16       	cp	r12, r27
    c8a8:	d1 04       	cpc	r13, r1
    c8aa:	40 f0       	brcs	.+16     	; 0xc8bc <realloc+0xfa>
    c8ac:	b2 82       	std	Z+2, r11	; 0x02
    c8ae:	a3 83       	std	Z+3, r26	; 0x03
    c8b0:	91 82       	std	Z+1, r9	; 0x01
    c8b2:	80 82       	st	Z, r8
    c8b4:	d9 01       	movw	r26, r18
    c8b6:	6d 93       	st	X+, r22
    c8b8:	7c 93       	st	X, r23
    c8ba:	09 c0       	rjmp	.+18     	; 0xc8ce <realloc+0x10c>
    c8bc:	0e 5f       	subi	r16, 0xFE	; 254
    c8be:	1f 4f       	sbci	r17, 0xFF	; 255
    c8c0:	80 0f       	add	r24, r16
    c8c2:	91 1f       	adc	r25, r17
    c8c4:	f9 01       	movw	r30, r18
    c8c6:	91 83       	std	Z+1, r25	; 0x01
    c8c8:	80 83       	st	Z, r24
    c8ca:	eb 2d       	mov	r30, r11
    c8cc:	fa 2f       	mov	r31, r26
    c8ce:	e1 14       	cp	r14, r1
    c8d0:	f1 04       	cpc	r15, r1
    c8d2:	31 f0       	breq	.+12     	; 0xc8e0 <realloc+0x11e>
    c8d4:	d7 01       	movw	r26, r14
    c8d6:	13 96       	adiw	r26, 0x03	; 3
    c8d8:	fc 93       	st	X, r31
    c8da:	ee 93       	st	-X, r30
    c8dc:	12 97       	sbiw	r26, 0x02	; 2
    c8de:	3e c0       	rjmp	.+124    	; 0xc95c <realloc+0x19a>
    c8e0:	f0 93 95 05 	sts	0x0595, r31	; 0x800595 <__flp+0x1>
    c8e4:	e0 93 94 05 	sts	0x0594, r30	; 0x800594 <__flp>
    c8e8:	39 c0       	rjmp	.+114    	; 0xc95c <realloc+0x19a>
    c8ea:	68 16       	cp	r6, r24
    c8ec:	79 06       	cpc	r7, r25
    c8ee:	08 f4       	brcc	.+2      	; 0xc8f2 <realloc+0x130>
    c8f0:	3c 01       	movw	r6, r24
    c8f2:	7d 01       	movw	r14, r26
    c8f4:	12 96       	adiw	r26, 0x02	; 2
    c8f6:	0d 90       	ld	r0, X+
    c8f8:	bc 91       	ld	r27, X
    c8fa:	a0 2d       	mov	r26, r0
    c8fc:	b7 cf       	rjmp	.-146    	; 0xc86c <realloc+0xaa>
    c8fe:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <__brkval>
    c902:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <__brkval+0x1>
    c906:	88 16       	cp	r8, r24
    c908:	99 06       	cpc	r9, r25
    c90a:	e1 f4       	brne	.+56     	; 0xc944 <realloc+0x182>
    c90c:	66 16       	cp	r6, r22
    c90e:	77 06       	cpc	r7, r23
    c910:	c8 f4       	brcc	.+50     	; 0xc944 <realloc+0x182>
    c912:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    c916:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    c91a:	00 97       	sbiw	r24, 0x00	; 0
    c91c:	41 f4       	brne	.+16     	; 0xc92e <realloc+0x16c>
    c91e:	8d b7       	in	r24, 0x3d	; 61
    c920:	9e b7       	in	r25, 0x3e	; 62
    c922:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c926:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c92a:	84 1b       	sub	r24, r20
    c92c:	95 0b       	sbc	r25, r21
    c92e:	e8 17       	cp	r30, r24
    c930:	f9 07       	cpc	r31, r25
    c932:	b0 f4       	brcc	.+44     	; 0xc960 <realloc+0x19e>
    c934:	f0 93 93 05 	sts	0x0593, r31	; 0x800593 <__brkval+0x1>
    c938:	e0 93 92 05 	sts	0x0592, r30	; 0x800592 <__brkval>
    c93c:	f9 01       	movw	r30, r18
    c93e:	71 83       	std	Z+1, r23	; 0x01
    c940:	60 83       	st	Z, r22
    c942:	0c c0       	rjmp	.+24     	; 0xc95c <realloc+0x19a>
    c944:	cb 01       	movw	r24, r22
    c946:	80 dd       	rcall	.-1280   	; 0xc448 <malloc>
    c948:	7c 01       	movw	r14, r24
    c94a:	00 97       	sbiw	r24, 0x00	; 0
    c94c:	49 f0       	breq	.+18     	; 0xc960 <realloc+0x19e>
    c94e:	a8 01       	movw	r20, r16
    c950:	be 01       	movw	r22, r28
    c952:	3b d0       	rcall	.+118    	; 0xc9ca <memcpy>
    c954:	ce 01       	movw	r24, r28
    c956:	10 de       	rcall	.-992    	; 0xc578 <free>
    c958:	c7 01       	movw	r24, r14
    c95a:	04 c0       	rjmp	.+8      	; 0xc964 <realloc+0x1a2>
    c95c:	ce 01       	movw	r24, r28
    c95e:	02 c0       	rjmp	.+4      	; 0xc964 <realloc+0x1a2>
    c960:	80 e0       	ldi	r24, 0x00	; 0
    c962:	90 e0       	ldi	r25, 0x00	; 0
    c964:	df 91       	pop	r29
    c966:	cf 91       	pop	r28
    c968:	1f 91       	pop	r17
    c96a:	0f 91       	pop	r16
    c96c:	ff 90       	pop	r15
    c96e:	ef 90       	pop	r14
    c970:	df 90       	pop	r13
    c972:	cf 90       	pop	r12
    c974:	bf 90       	pop	r11
    c976:	af 90       	pop	r10
    c978:	9f 90       	pop	r9
    c97a:	8f 90       	pop	r8
    c97c:	7f 90       	pop	r7
    c97e:	6f 90       	pop	r6
    c980:	08 95       	ret

0000c982 <abort>:
    c982:	81 e0       	ldi	r24, 0x01	; 1
    c984:	90 e0       	ldi	r25, 0x00	; 0
    c986:	f8 94       	cli
    c988:	dd c3       	rjmp	.+1978   	; 0xd144 <__do_global_dtors>

0000c98a <atoi>:
    c98a:	fc 01       	movw	r30, r24
    c98c:	88 27       	eor	r24, r24
    c98e:	99 27       	eor	r25, r25
    c990:	e8 94       	clt
    c992:	21 91       	ld	r18, Z+
    c994:	20 32       	cpi	r18, 0x20	; 32
    c996:	e9 f3       	breq	.-6      	; 0xc992 <atoi+0x8>
    c998:	29 30       	cpi	r18, 0x09	; 9
    c99a:	10 f0       	brcs	.+4      	; 0xc9a0 <atoi+0x16>
    c99c:	2e 30       	cpi	r18, 0x0E	; 14
    c99e:	c8 f3       	brcs	.-14     	; 0xc992 <atoi+0x8>
    c9a0:	2b 32       	cpi	r18, 0x2B	; 43
    c9a2:	39 f0       	breq	.+14     	; 0xc9b2 <atoi+0x28>
    c9a4:	2d 32       	cpi	r18, 0x2D	; 45
    c9a6:	31 f4       	brne	.+12     	; 0xc9b4 <atoi+0x2a>
    c9a8:	68 94       	set
    c9aa:	03 c0       	rjmp	.+6      	; 0xc9b2 <atoi+0x28>
    c9ac:	98 d0       	rcall	.+304    	; 0xcade <__mulhi_const_10>
    c9ae:	82 0f       	add	r24, r18
    c9b0:	91 1d       	adc	r25, r1
    c9b2:	21 91       	ld	r18, Z+
    c9b4:	20 53       	subi	r18, 0x30	; 48
    c9b6:	2a 30       	cpi	r18, 0x0A	; 10
    c9b8:	c8 f3       	brcs	.-14     	; 0xc9ac <atoi+0x22>
    c9ba:	1e f4       	brtc	.+6      	; 0xc9c2 <atoi+0x38>
    c9bc:	90 95       	com	r25
    c9be:	81 95       	neg	r24
    c9c0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9c2:	08 95       	ret

0000c9c4 <strtok>:
    c9c4:	40 e1       	ldi	r20, 0x10	; 16
    c9c6:	53 e0       	ldi	r21, 0x03	; 3
    c9c8:	37 c0       	rjmp	.+110    	; 0xca38 <strtok_r>

0000c9ca <memcpy>:
    c9ca:	fb 01       	movw	r30, r22
    c9cc:	dc 01       	movw	r26, r24
    c9ce:	02 c0       	rjmp	.+4      	; 0xc9d4 <memcpy+0xa>
    c9d0:	01 90       	ld	r0, Z+
    c9d2:	0d 92       	st	X+, r0
    c9d4:	41 50       	subi	r20, 0x01	; 1
    c9d6:	50 40       	sbci	r21, 0x00	; 0
    c9d8:	d8 f7       	brcc	.-10     	; 0xc9d0 <memcpy+0x6>
    c9da:	08 95       	ret

0000c9dc <memset>:
    c9dc:	dc 01       	movw	r26, r24
    c9de:	01 c0       	rjmp	.+2      	; 0xc9e2 <memset+0x6>
    c9e0:	6d 93       	st	X+, r22
    c9e2:	41 50       	subi	r20, 0x01	; 1
    c9e4:	50 40       	sbci	r21, 0x00	; 0
    c9e6:	e0 f7       	brcc	.-8      	; 0xc9e0 <memset+0x4>
    c9e8:	08 95       	ret

0000c9ea <strcmp>:
    c9ea:	fb 01       	movw	r30, r22
    c9ec:	dc 01       	movw	r26, r24
    c9ee:	8d 91       	ld	r24, X+
    c9f0:	01 90       	ld	r0, Z+
    c9f2:	80 19       	sub	r24, r0
    c9f4:	01 10       	cpse	r0, r1
    c9f6:	d9 f3       	breq	.-10     	; 0xc9ee <strcmp+0x4>
    c9f8:	99 0b       	sbc	r25, r25
    c9fa:	08 95       	ret

0000c9fc <strcpy>:
    c9fc:	fb 01       	movw	r30, r22
    c9fe:	dc 01       	movw	r26, r24
    ca00:	01 90       	ld	r0, Z+
    ca02:	0d 92       	st	X+, r0
    ca04:	00 20       	and	r0, r0
    ca06:	e1 f7       	brne	.-8      	; 0xca00 <strcpy+0x4>
    ca08:	08 95       	ret

0000ca0a <strlen>:
    ca0a:	fc 01       	movw	r30, r24
    ca0c:	01 90       	ld	r0, Z+
    ca0e:	00 20       	and	r0, r0
    ca10:	e9 f7       	brne	.-6      	; 0xca0c <strlen+0x2>
    ca12:	80 95       	com	r24
    ca14:	90 95       	com	r25
    ca16:	8e 0f       	add	r24, r30
    ca18:	9f 1f       	adc	r25, r31
    ca1a:	08 95       	ret

0000ca1c <strncmp>:
    ca1c:	fb 01       	movw	r30, r22
    ca1e:	dc 01       	movw	r26, r24
    ca20:	41 50       	subi	r20, 0x01	; 1
    ca22:	50 40       	sbci	r21, 0x00	; 0
    ca24:	30 f0       	brcs	.+12     	; 0xca32 <strncmp+0x16>
    ca26:	8d 91       	ld	r24, X+
    ca28:	01 90       	ld	r0, Z+
    ca2a:	80 19       	sub	r24, r0
    ca2c:	19 f4       	brne	.+6      	; 0xca34 <strncmp+0x18>
    ca2e:	00 20       	and	r0, r0
    ca30:	b9 f7       	brne	.-18     	; 0xca20 <strncmp+0x4>
    ca32:	88 1b       	sub	r24, r24
    ca34:	99 0b       	sbc	r25, r25
    ca36:	08 95       	ret

0000ca38 <strtok_r>:
    ca38:	fa 01       	movw	r30, r20
    ca3a:	a1 91       	ld	r26, Z+
    ca3c:	b0 81       	ld	r27, Z
    ca3e:	00 97       	sbiw	r24, 0x00	; 0
    ca40:	19 f4       	brne	.+6      	; 0xca48 <strtok_r+0x10>
    ca42:	10 97       	sbiw	r26, 0x00	; 0
    ca44:	e1 f0       	breq	.+56     	; 0xca7e <strtok_r+0x46>
    ca46:	cd 01       	movw	r24, r26
    ca48:	dc 01       	movw	r26, r24
    ca4a:	cd 01       	movw	r24, r26
    ca4c:	0d 90       	ld	r0, X+
    ca4e:	00 20       	and	r0, r0
    ca50:	11 f4       	brne	.+4      	; 0xca56 <strtok_r+0x1e>
    ca52:	c0 01       	movw	r24, r0
    ca54:	13 c0       	rjmp	.+38     	; 0xca7c <strtok_r+0x44>
    ca56:	fb 01       	movw	r30, r22
    ca58:	21 91       	ld	r18, Z+
    ca5a:	22 23       	and	r18, r18
    ca5c:	19 f0       	breq	.+6      	; 0xca64 <strtok_r+0x2c>
    ca5e:	20 15       	cp	r18, r0
    ca60:	d9 f7       	brne	.-10     	; 0xca58 <strtok_r+0x20>
    ca62:	f3 cf       	rjmp	.-26     	; 0xca4a <strtok_r+0x12>
    ca64:	fb 01       	movw	r30, r22
    ca66:	21 91       	ld	r18, Z+
    ca68:	20 15       	cp	r18, r0
    ca6a:	19 f4       	brne	.+6      	; 0xca72 <strtok_r+0x3a>
    ca6c:	1e 92       	st	-X, r1
    ca6e:	11 96       	adiw	r26, 0x01	; 1
    ca70:	06 c0       	rjmp	.+12     	; 0xca7e <strtok_r+0x46>
    ca72:	22 23       	and	r18, r18
    ca74:	c1 f7       	brne	.-16     	; 0xca66 <strtok_r+0x2e>
    ca76:	0d 90       	ld	r0, X+
    ca78:	00 20       	and	r0, r0
    ca7a:	a1 f7       	brne	.-24     	; 0xca64 <strtok_r+0x2c>
    ca7c:	d0 01       	movw	r26, r0
    ca7e:	fa 01       	movw	r30, r20
    ca80:	a1 93       	st	Z+, r26
    ca82:	b0 83       	st	Z, r27
    ca84:	08 95       	ret

0000ca86 <itoa>:
    ca86:	45 32       	cpi	r20, 0x25	; 37
    ca88:	51 05       	cpc	r21, r1
    ca8a:	18 f4       	brcc	.+6      	; 0xca92 <itoa+0xc>
    ca8c:	42 30       	cpi	r20, 0x02	; 2
    ca8e:	08 f0       	brcs	.+2      	; 0xca92 <itoa+0xc>
    ca90:	04 c0       	rjmp	.+8      	; 0xca9a <__itoa_ncheck>
    ca92:	fb 01       	movw	r30, r22
    ca94:	10 82       	st	Z, r1
    ca96:	cb 01       	movw	r24, r22
    ca98:	08 95       	ret

0000ca9a <__itoa_ncheck>:
    ca9a:	bb 27       	eor	r27, r27
    ca9c:	4a 30       	cpi	r20, 0x0A	; 10
    ca9e:	31 f4       	brne	.+12     	; 0xcaac <__itoa_ncheck+0x12>
    caa0:	99 23       	and	r25, r25
    caa2:	22 f4       	brpl	.+8      	; 0xcaac <__itoa_ncheck+0x12>
    caa4:	bd e2       	ldi	r27, 0x2D	; 45
    caa6:	90 95       	com	r25
    caa8:	81 95       	neg	r24
    caaa:	9f 4f       	sbci	r25, 0xFF	; 255
    caac:	42 c0       	rjmp	.+132    	; 0xcb32 <__utoa_common>

0000caae <ltoa>:
    caae:	25 32       	cpi	r18, 0x25	; 37
    cab0:	31 05       	cpc	r19, r1
    cab2:	18 f4       	brcc	.+6      	; 0xcaba <ltoa+0xc>
    cab4:	22 30       	cpi	r18, 0x02	; 2
    cab6:	08 f0       	brcs	.+2      	; 0xcaba <ltoa+0xc>
    cab8:	04 c0       	rjmp	.+8      	; 0xcac2 <__ltoa_ncheck>
    caba:	fa 01       	movw	r30, r20
    cabc:	10 82       	st	Z, r1
    cabe:	ca 01       	movw	r24, r20
    cac0:	08 95       	ret

0000cac2 <__ltoa_ncheck>:
    cac2:	bb 27       	eor	r27, r27
    cac4:	2a 30       	cpi	r18, 0x0A	; 10
    cac6:	51 f4       	brne	.+20     	; 0xcadc <__ltoa_ncheck+0x1a>
    cac8:	99 23       	and	r25, r25
    caca:	42 f4       	brpl	.+16     	; 0xcadc <__ltoa_ncheck+0x1a>
    cacc:	bd e2       	ldi	r27, 0x2D	; 45
    cace:	90 95       	com	r25
    cad0:	80 95       	com	r24
    cad2:	70 95       	com	r23
    cad4:	61 95       	neg	r22
    cad6:	7f 4f       	sbci	r23, 0xFF	; 255
    cad8:	8f 4f       	sbci	r24, 0xFF	; 255
    cada:	9f 4f       	sbci	r25, 0xFF	; 255
    cadc:	09 c0       	rjmp	.+18     	; 0xcaf0 <__ultoa_common>

0000cade <__mulhi_const_10>:
    cade:	7a e0       	ldi	r23, 0x0A	; 10
    cae0:	97 9f       	mul	r25, r23
    cae2:	90 2d       	mov	r25, r0
    cae4:	87 9f       	mul	r24, r23
    cae6:	80 2d       	mov	r24, r0
    cae8:	91 0d       	add	r25, r1
    caea:	11 24       	eor	r1, r1
    caec:	08 95       	ret

0000caee <__ultoa_ncheck>:
    caee:	bb 27       	eor	r27, r27

0000caf0 <__ultoa_common>:
    caf0:	fa 01       	movw	r30, r20
    caf2:	a6 2f       	mov	r26, r22
    caf4:	62 17       	cp	r22, r18
    caf6:	71 05       	cpc	r23, r1
    caf8:	81 05       	cpc	r24, r1
    cafa:	91 05       	cpc	r25, r1
    cafc:	33 0b       	sbc	r19, r19
    cafe:	30 fb       	bst	r19, 0
    cb00:	66 f0       	brts	.+24     	; 0xcb1a <__ultoa_common+0x2a>
    cb02:	aa 27       	eor	r26, r26
    cb04:	66 0f       	add	r22, r22
    cb06:	77 1f       	adc	r23, r23
    cb08:	88 1f       	adc	r24, r24
    cb0a:	99 1f       	adc	r25, r25
    cb0c:	aa 1f       	adc	r26, r26
    cb0e:	a2 17       	cp	r26, r18
    cb10:	10 f0       	brcs	.+4      	; 0xcb16 <__ultoa_common+0x26>
    cb12:	a2 1b       	sub	r26, r18
    cb14:	63 95       	inc	r22
    cb16:	38 50       	subi	r19, 0x08	; 8
    cb18:	a9 f7       	brne	.-22     	; 0xcb04 <__ultoa_common+0x14>
    cb1a:	a0 5d       	subi	r26, 0xD0	; 208
    cb1c:	aa 33       	cpi	r26, 0x3A	; 58
    cb1e:	08 f0       	brcs	.+2      	; 0xcb22 <__ultoa_common+0x32>
    cb20:	a9 5d       	subi	r26, 0xD9	; 217
    cb22:	a1 93       	st	Z+, r26
    cb24:	36 f7       	brtc	.-52     	; 0xcaf2 <__ultoa_common+0x2>
    cb26:	b1 11       	cpse	r27, r1
    cb28:	b1 93       	st	Z+, r27
    cb2a:	10 82       	st	Z, r1
    cb2c:	ca 01       	movw	r24, r20
    cb2e:	5a c2       	rjmp	.+1204   	; 0xcfe4 <strrev>

0000cb30 <__utoa_ncheck>:
    cb30:	bb 27       	eor	r27, r27

0000cb32 <__utoa_common>:
    cb32:	fb 01       	movw	r30, r22
    cb34:	55 27       	eor	r21, r21
    cb36:	aa 27       	eor	r26, r26
    cb38:	88 0f       	add	r24, r24
    cb3a:	99 1f       	adc	r25, r25
    cb3c:	aa 1f       	adc	r26, r26
    cb3e:	a4 17       	cp	r26, r20
    cb40:	10 f0       	brcs	.+4      	; 0xcb46 <__utoa_common+0x14>
    cb42:	a4 1b       	sub	r26, r20
    cb44:	83 95       	inc	r24
    cb46:	50 51       	subi	r21, 0x10	; 16
    cb48:	b9 f7       	brne	.-18     	; 0xcb38 <__utoa_common+0x6>
    cb4a:	a0 5d       	subi	r26, 0xD0	; 208
    cb4c:	aa 33       	cpi	r26, 0x3A	; 58
    cb4e:	08 f0       	brcs	.+2      	; 0xcb52 <__utoa_common+0x20>
    cb50:	a9 5d       	subi	r26, 0xD9	; 217
    cb52:	a1 93       	st	Z+, r26
    cb54:	00 97       	sbiw	r24, 0x00	; 0
    cb56:	79 f7       	brne	.-34     	; 0xcb36 <__utoa_common+0x4>
    cb58:	b1 11       	cpse	r27, r1
    cb5a:	b1 93       	st	Z+, r27
    cb5c:	11 92       	st	Z+, r1
    cb5e:	cb 01       	movw	r24, r22
    cb60:	41 c2       	rjmp	.+1154   	; 0xcfe4 <strrev>

0000cb62 <sprintf>:
    cb62:	0f 93       	push	r16
    cb64:	1f 93       	push	r17
    cb66:	cf 93       	push	r28
    cb68:	df 93       	push	r29
    cb6a:	cd b7       	in	r28, 0x3d	; 61
    cb6c:	de b7       	in	r29, 0x3e	; 62
    cb6e:	2e 97       	sbiw	r28, 0x0e	; 14
    cb70:	0f b6       	in	r0, 0x3f	; 63
    cb72:	f8 94       	cli
    cb74:	de bf       	out	0x3e, r29	; 62
    cb76:	0f be       	out	0x3f, r0	; 63
    cb78:	cd bf       	out	0x3d, r28	; 61
    cb7a:	0e 89       	ldd	r16, Y+22	; 0x16
    cb7c:	1f 89       	ldd	r17, Y+23	; 0x17
    cb7e:	86 e0       	ldi	r24, 0x06	; 6
    cb80:	8c 83       	std	Y+4, r24	; 0x04
    cb82:	1a 83       	std	Y+2, r17	; 0x02
    cb84:	09 83       	std	Y+1, r16	; 0x01
    cb86:	8f ef       	ldi	r24, 0xFF	; 255
    cb88:	9f e7       	ldi	r25, 0x7F	; 127
    cb8a:	9e 83       	std	Y+6, r25	; 0x06
    cb8c:	8d 83       	std	Y+5, r24	; 0x05
    cb8e:	ae 01       	movw	r20, r28
    cb90:	46 5e       	subi	r20, 0xE6	; 230
    cb92:	5f 4f       	sbci	r21, 0xFF	; 255
    cb94:	68 8d       	ldd	r22, Y+24	; 0x18
    cb96:	79 8d       	ldd	r23, Y+25	; 0x19
    cb98:	ce 01       	movw	r24, r28
    cb9a:	01 96       	adiw	r24, 0x01	; 1
    cb9c:	10 d0       	rcall	.+32     	; 0xcbbe <vfprintf>
    cb9e:	ef 81       	ldd	r30, Y+7	; 0x07
    cba0:	f8 85       	ldd	r31, Y+8	; 0x08
    cba2:	e0 0f       	add	r30, r16
    cba4:	f1 1f       	adc	r31, r17
    cba6:	10 82       	st	Z, r1
    cba8:	2e 96       	adiw	r28, 0x0e	; 14
    cbaa:	0f b6       	in	r0, 0x3f	; 63
    cbac:	f8 94       	cli
    cbae:	de bf       	out	0x3e, r29	; 62
    cbb0:	0f be       	out	0x3f, r0	; 63
    cbb2:	cd bf       	out	0x3d, r28	; 61
    cbb4:	df 91       	pop	r29
    cbb6:	cf 91       	pop	r28
    cbb8:	1f 91       	pop	r17
    cbba:	0f 91       	pop	r16
    cbbc:	08 95       	ret

0000cbbe <vfprintf>:
    cbbe:	2f 92       	push	r2
    cbc0:	3f 92       	push	r3
    cbc2:	4f 92       	push	r4
    cbc4:	5f 92       	push	r5
    cbc6:	6f 92       	push	r6
    cbc8:	7f 92       	push	r7
    cbca:	8f 92       	push	r8
    cbcc:	9f 92       	push	r9
    cbce:	af 92       	push	r10
    cbd0:	bf 92       	push	r11
    cbd2:	cf 92       	push	r12
    cbd4:	df 92       	push	r13
    cbd6:	ef 92       	push	r14
    cbd8:	ff 92       	push	r15
    cbda:	0f 93       	push	r16
    cbdc:	1f 93       	push	r17
    cbde:	cf 93       	push	r28
    cbe0:	df 93       	push	r29
    cbe2:	cd b7       	in	r28, 0x3d	; 61
    cbe4:	de b7       	in	r29, 0x3e	; 62
    cbe6:	2b 97       	sbiw	r28, 0x0b	; 11
    cbe8:	0f b6       	in	r0, 0x3f	; 63
    cbea:	f8 94       	cli
    cbec:	de bf       	out	0x3e, r29	; 62
    cbee:	0f be       	out	0x3f, r0	; 63
    cbf0:	cd bf       	out	0x3d, r28	; 61
    cbf2:	6c 01       	movw	r12, r24
    cbf4:	7b 01       	movw	r14, r22
    cbf6:	8a 01       	movw	r16, r20
    cbf8:	fc 01       	movw	r30, r24
    cbfa:	17 82       	std	Z+7, r1	; 0x07
    cbfc:	16 82       	std	Z+6, r1	; 0x06
    cbfe:	83 81       	ldd	r24, Z+3	; 0x03
    cc00:	81 ff       	sbrs	r24, 1
    cc02:	bf c1       	rjmp	.+894    	; 0xcf82 <vfprintf+0x3c4>
    cc04:	ce 01       	movw	r24, r28
    cc06:	01 96       	adiw	r24, 0x01	; 1
    cc08:	3c 01       	movw	r6, r24
    cc0a:	f6 01       	movw	r30, r12
    cc0c:	93 81       	ldd	r25, Z+3	; 0x03
    cc0e:	f7 01       	movw	r30, r14
    cc10:	93 fd       	sbrc	r25, 3
    cc12:	85 91       	lpm	r24, Z+
    cc14:	93 ff       	sbrs	r25, 3
    cc16:	81 91       	ld	r24, Z+
    cc18:	7f 01       	movw	r14, r30
    cc1a:	88 23       	and	r24, r24
    cc1c:	09 f4       	brne	.+2      	; 0xcc20 <vfprintf+0x62>
    cc1e:	ad c1       	rjmp	.+858    	; 0xcf7a <vfprintf+0x3bc>
    cc20:	85 32       	cpi	r24, 0x25	; 37
    cc22:	39 f4       	brne	.+14     	; 0xcc32 <vfprintf+0x74>
    cc24:	93 fd       	sbrc	r25, 3
    cc26:	85 91       	lpm	r24, Z+
    cc28:	93 ff       	sbrs	r25, 3
    cc2a:	81 91       	ld	r24, Z+
    cc2c:	7f 01       	movw	r14, r30
    cc2e:	85 32       	cpi	r24, 0x25	; 37
    cc30:	21 f4       	brne	.+8      	; 0xcc3a <vfprintf+0x7c>
    cc32:	b6 01       	movw	r22, r12
    cc34:	90 e0       	ldi	r25, 0x00	; 0
    cc36:	e6 d1       	rcall	.+972    	; 0xd004 <fputc>
    cc38:	e8 cf       	rjmp	.-48     	; 0xcc0a <vfprintf+0x4c>
    cc3a:	91 2c       	mov	r9, r1
    cc3c:	21 2c       	mov	r2, r1
    cc3e:	31 2c       	mov	r3, r1
    cc40:	ff e1       	ldi	r31, 0x1F	; 31
    cc42:	f3 15       	cp	r31, r3
    cc44:	d8 f0       	brcs	.+54     	; 0xcc7c <vfprintf+0xbe>
    cc46:	8b 32       	cpi	r24, 0x2B	; 43
    cc48:	79 f0       	breq	.+30     	; 0xcc68 <vfprintf+0xaa>
    cc4a:	38 f4       	brcc	.+14     	; 0xcc5a <vfprintf+0x9c>
    cc4c:	80 32       	cpi	r24, 0x20	; 32
    cc4e:	79 f0       	breq	.+30     	; 0xcc6e <vfprintf+0xb0>
    cc50:	83 32       	cpi	r24, 0x23	; 35
    cc52:	a1 f4       	brne	.+40     	; 0xcc7c <vfprintf+0xbe>
    cc54:	23 2d       	mov	r18, r3
    cc56:	20 61       	ori	r18, 0x10	; 16
    cc58:	1d c0       	rjmp	.+58     	; 0xcc94 <vfprintf+0xd6>
    cc5a:	8d 32       	cpi	r24, 0x2D	; 45
    cc5c:	61 f0       	breq	.+24     	; 0xcc76 <vfprintf+0xb8>
    cc5e:	80 33       	cpi	r24, 0x30	; 48
    cc60:	69 f4       	brne	.+26     	; 0xcc7c <vfprintf+0xbe>
    cc62:	23 2d       	mov	r18, r3
    cc64:	21 60       	ori	r18, 0x01	; 1
    cc66:	16 c0       	rjmp	.+44     	; 0xcc94 <vfprintf+0xd6>
    cc68:	83 2d       	mov	r24, r3
    cc6a:	82 60       	ori	r24, 0x02	; 2
    cc6c:	38 2e       	mov	r3, r24
    cc6e:	e3 2d       	mov	r30, r3
    cc70:	e4 60       	ori	r30, 0x04	; 4
    cc72:	3e 2e       	mov	r3, r30
    cc74:	2a c0       	rjmp	.+84     	; 0xccca <vfprintf+0x10c>
    cc76:	f3 2d       	mov	r31, r3
    cc78:	f8 60       	ori	r31, 0x08	; 8
    cc7a:	1d c0       	rjmp	.+58     	; 0xccb6 <vfprintf+0xf8>
    cc7c:	37 fc       	sbrc	r3, 7
    cc7e:	2d c0       	rjmp	.+90     	; 0xccda <vfprintf+0x11c>
    cc80:	20 ed       	ldi	r18, 0xD0	; 208
    cc82:	28 0f       	add	r18, r24
    cc84:	2a 30       	cpi	r18, 0x0A	; 10
    cc86:	40 f0       	brcs	.+16     	; 0xcc98 <vfprintf+0xda>
    cc88:	8e 32       	cpi	r24, 0x2E	; 46
    cc8a:	b9 f4       	brne	.+46     	; 0xccba <vfprintf+0xfc>
    cc8c:	36 fc       	sbrc	r3, 6
    cc8e:	75 c1       	rjmp	.+746    	; 0xcf7a <vfprintf+0x3bc>
    cc90:	23 2d       	mov	r18, r3
    cc92:	20 64       	ori	r18, 0x40	; 64
    cc94:	32 2e       	mov	r3, r18
    cc96:	19 c0       	rjmp	.+50     	; 0xccca <vfprintf+0x10c>
    cc98:	36 fe       	sbrs	r3, 6
    cc9a:	06 c0       	rjmp	.+12     	; 0xcca8 <vfprintf+0xea>
    cc9c:	8a e0       	ldi	r24, 0x0A	; 10
    cc9e:	98 9e       	mul	r9, r24
    cca0:	20 0d       	add	r18, r0
    cca2:	11 24       	eor	r1, r1
    cca4:	92 2e       	mov	r9, r18
    cca6:	11 c0       	rjmp	.+34     	; 0xccca <vfprintf+0x10c>
    cca8:	ea e0       	ldi	r30, 0x0A	; 10
    ccaa:	2e 9e       	mul	r2, r30
    ccac:	20 0d       	add	r18, r0
    ccae:	11 24       	eor	r1, r1
    ccb0:	22 2e       	mov	r2, r18
    ccb2:	f3 2d       	mov	r31, r3
    ccb4:	f0 62       	ori	r31, 0x20	; 32
    ccb6:	3f 2e       	mov	r3, r31
    ccb8:	08 c0       	rjmp	.+16     	; 0xccca <vfprintf+0x10c>
    ccba:	8c 36       	cpi	r24, 0x6C	; 108
    ccbc:	21 f4       	brne	.+8      	; 0xccc6 <vfprintf+0x108>
    ccbe:	83 2d       	mov	r24, r3
    ccc0:	80 68       	ori	r24, 0x80	; 128
    ccc2:	38 2e       	mov	r3, r24
    ccc4:	02 c0       	rjmp	.+4      	; 0xccca <vfprintf+0x10c>
    ccc6:	88 36       	cpi	r24, 0x68	; 104
    ccc8:	41 f4       	brne	.+16     	; 0xccda <vfprintf+0x11c>
    ccca:	f7 01       	movw	r30, r14
    cccc:	93 fd       	sbrc	r25, 3
    ccce:	85 91       	lpm	r24, Z+
    ccd0:	93 ff       	sbrs	r25, 3
    ccd2:	81 91       	ld	r24, Z+
    ccd4:	7f 01       	movw	r14, r30
    ccd6:	81 11       	cpse	r24, r1
    ccd8:	b3 cf       	rjmp	.-154    	; 0xcc40 <vfprintf+0x82>
    ccda:	98 2f       	mov	r25, r24
    ccdc:	9f 7d       	andi	r25, 0xDF	; 223
    ccde:	95 54       	subi	r25, 0x45	; 69
    cce0:	93 30       	cpi	r25, 0x03	; 3
    cce2:	28 f4       	brcc	.+10     	; 0xccee <vfprintf+0x130>
    cce4:	0c 5f       	subi	r16, 0xFC	; 252
    cce6:	1f 4f       	sbci	r17, 0xFF	; 255
    cce8:	9f e3       	ldi	r25, 0x3F	; 63
    ccea:	99 83       	std	Y+1, r25	; 0x01
    ccec:	0d c0       	rjmp	.+26     	; 0xcd08 <vfprintf+0x14a>
    ccee:	83 36       	cpi	r24, 0x63	; 99
    ccf0:	31 f0       	breq	.+12     	; 0xccfe <vfprintf+0x140>
    ccf2:	83 37       	cpi	r24, 0x73	; 115
    ccf4:	71 f0       	breq	.+28     	; 0xcd12 <vfprintf+0x154>
    ccf6:	83 35       	cpi	r24, 0x53	; 83
    ccf8:	09 f0       	breq	.+2      	; 0xccfc <vfprintf+0x13e>
    ccfa:	55 c0       	rjmp	.+170    	; 0xcda6 <vfprintf+0x1e8>
    ccfc:	20 c0       	rjmp	.+64     	; 0xcd3e <vfprintf+0x180>
    ccfe:	f8 01       	movw	r30, r16
    cd00:	80 81       	ld	r24, Z
    cd02:	89 83       	std	Y+1, r24	; 0x01
    cd04:	0e 5f       	subi	r16, 0xFE	; 254
    cd06:	1f 4f       	sbci	r17, 0xFF	; 255
    cd08:	88 24       	eor	r8, r8
    cd0a:	83 94       	inc	r8
    cd0c:	91 2c       	mov	r9, r1
    cd0e:	53 01       	movw	r10, r6
    cd10:	12 c0       	rjmp	.+36     	; 0xcd36 <vfprintf+0x178>
    cd12:	28 01       	movw	r4, r16
    cd14:	f2 e0       	ldi	r31, 0x02	; 2
    cd16:	4f 0e       	add	r4, r31
    cd18:	51 1c       	adc	r5, r1
    cd1a:	f8 01       	movw	r30, r16
    cd1c:	a0 80       	ld	r10, Z
    cd1e:	b1 80       	ldd	r11, Z+1	; 0x01
    cd20:	36 fe       	sbrs	r3, 6
    cd22:	03 c0       	rjmp	.+6      	; 0xcd2a <vfprintf+0x16c>
    cd24:	69 2d       	mov	r22, r9
    cd26:	70 e0       	ldi	r23, 0x00	; 0
    cd28:	02 c0       	rjmp	.+4      	; 0xcd2e <vfprintf+0x170>
    cd2a:	6f ef       	ldi	r22, 0xFF	; 255
    cd2c:	7f ef       	ldi	r23, 0xFF	; 255
    cd2e:	c5 01       	movw	r24, r10
    cd30:	4e d1       	rcall	.+668    	; 0xcfce <strnlen>
    cd32:	4c 01       	movw	r8, r24
    cd34:	82 01       	movw	r16, r4
    cd36:	f3 2d       	mov	r31, r3
    cd38:	ff 77       	andi	r31, 0x7F	; 127
    cd3a:	3f 2e       	mov	r3, r31
    cd3c:	15 c0       	rjmp	.+42     	; 0xcd68 <vfprintf+0x1aa>
    cd3e:	28 01       	movw	r4, r16
    cd40:	22 e0       	ldi	r18, 0x02	; 2
    cd42:	42 0e       	add	r4, r18
    cd44:	51 1c       	adc	r5, r1
    cd46:	f8 01       	movw	r30, r16
    cd48:	a0 80       	ld	r10, Z
    cd4a:	b1 80       	ldd	r11, Z+1	; 0x01
    cd4c:	36 fe       	sbrs	r3, 6
    cd4e:	03 c0       	rjmp	.+6      	; 0xcd56 <vfprintf+0x198>
    cd50:	69 2d       	mov	r22, r9
    cd52:	70 e0       	ldi	r23, 0x00	; 0
    cd54:	02 c0       	rjmp	.+4      	; 0xcd5a <vfprintf+0x19c>
    cd56:	6f ef       	ldi	r22, 0xFF	; 255
    cd58:	7f ef       	ldi	r23, 0xFF	; 255
    cd5a:	c5 01       	movw	r24, r10
    cd5c:	2d d1       	rcall	.+602    	; 0xcfb8 <strnlen_P>
    cd5e:	4c 01       	movw	r8, r24
    cd60:	f3 2d       	mov	r31, r3
    cd62:	f0 68       	ori	r31, 0x80	; 128
    cd64:	3f 2e       	mov	r3, r31
    cd66:	82 01       	movw	r16, r4
    cd68:	33 fc       	sbrc	r3, 3
    cd6a:	19 c0       	rjmp	.+50     	; 0xcd9e <vfprintf+0x1e0>
    cd6c:	82 2d       	mov	r24, r2
    cd6e:	90 e0       	ldi	r25, 0x00	; 0
    cd70:	88 16       	cp	r8, r24
    cd72:	99 06       	cpc	r9, r25
    cd74:	a0 f4       	brcc	.+40     	; 0xcd9e <vfprintf+0x1e0>
    cd76:	b6 01       	movw	r22, r12
    cd78:	80 e2       	ldi	r24, 0x20	; 32
    cd7a:	90 e0       	ldi	r25, 0x00	; 0
    cd7c:	43 d1       	rcall	.+646    	; 0xd004 <fputc>
    cd7e:	2a 94       	dec	r2
    cd80:	f5 cf       	rjmp	.-22     	; 0xcd6c <vfprintf+0x1ae>
    cd82:	f5 01       	movw	r30, r10
    cd84:	37 fc       	sbrc	r3, 7
    cd86:	85 91       	lpm	r24, Z+
    cd88:	37 fe       	sbrs	r3, 7
    cd8a:	81 91       	ld	r24, Z+
    cd8c:	5f 01       	movw	r10, r30
    cd8e:	b6 01       	movw	r22, r12
    cd90:	90 e0       	ldi	r25, 0x00	; 0
    cd92:	38 d1       	rcall	.+624    	; 0xd004 <fputc>
    cd94:	21 10       	cpse	r2, r1
    cd96:	2a 94       	dec	r2
    cd98:	21 e0       	ldi	r18, 0x01	; 1
    cd9a:	82 1a       	sub	r8, r18
    cd9c:	91 08       	sbc	r9, r1
    cd9e:	81 14       	cp	r8, r1
    cda0:	91 04       	cpc	r9, r1
    cda2:	79 f7       	brne	.-34     	; 0xcd82 <vfprintf+0x1c4>
    cda4:	e1 c0       	rjmp	.+450    	; 0xcf68 <vfprintf+0x3aa>
    cda6:	84 36       	cpi	r24, 0x64	; 100
    cda8:	11 f0       	breq	.+4      	; 0xcdae <vfprintf+0x1f0>
    cdaa:	89 36       	cpi	r24, 0x69	; 105
    cdac:	39 f5       	brne	.+78     	; 0xcdfc <vfprintf+0x23e>
    cdae:	f8 01       	movw	r30, r16
    cdb0:	37 fe       	sbrs	r3, 7
    cdb2:	07 c0       	rjmp	.+14     	; 0xcdc2 <vfprintf+0x204>
    cdb4:	60 81       	ld	r22, Z
    cdb6:	71 81       	ldd	r23, Z+1	; 0x01
    cdb8:	82 81       	ldd	r24, Z+2	; 0x02
    cdba:	93 81       	ldd	r25, Z+3	; 0x03
    cdbc:	0c 5f       	subi	r16, 0xFC	; 252
    cdbe:	1f 4f       	sbci	r17, 0xFF	; 255
    cdc0:	08 c0       	rjmp	.+16     	; 0xcdd2 <vfprintf+0x214>
    cdc2:	60 81       	ld	r22, Z
    cdc4:	71 81       	ldd	r23, Z+1	; 0x01
    cdc6:	07 2e       	mov	r0, r23
    cdc8:	00 0c       	add	r0, r0
    cdca:	88 0b       	sbc	r24, r24
    cdcc:	99 0b       	sbc	r25, r25
    cdce:	0e 5f       	subi	r16, 0xFE	; 254
    cdd0:	1f 4f       	sbci	r17, 0xFF	; 255
    cdd2:	f3 2d       	mov	r31, r3
    cdd4:	ff 76       	andi	r31, 0x6F	; 111
    cdd6:	3f 2e       	mov	r3, r31
    cdd8:	97 ff       	sbrs	r25, 7
    cdda:	09 c0       	rjmp	.+18     	; 0xcdee <vfprintf+0x230>
    cddc:	90 95       	com	r25
    cdde:	80 95       	com	r24
    cde0:	70 95       	com	r23
    cde2:	61 95       	neg	r22
    cde4:	7f 4f       	sbci	r23, 0xFF	; 255
    cde6:	8f 4f       	sbci	r24, 0xFF	; 255
    cde8:	9f 4f       	sbci	r25, 0xFF	; 255
    cdea:	f0 68       	ori	r31, 0x80	; 128
    cdec:	3f 2e       	mov	r3, r31
    cdee:	2a e0       	ldi	r18, 0x0A	; 10
    cdf0:	30 e0       	ldi	r19, 0x00	; 0
    cdf2:	a3 01       	movw	r20, r6
    cdf4:	43 d1       	rcall	.+646    	; 0xd07c <__ultoa_invert>
    cdf6:	88 2e       	mov	r8, r24
    cdf8:	86 18       	sub	r8, r6
    cdfa:	44 c0       	rjmp	.+136    	; 0xce84 <vfprintf+0x2c6>
    cdfc:	85 37       	cpi	r24, 0x75	; 117
    cdfe:	31 f4       	brne	.+12     	; 0xce0c <vfprintf+0x24e>
    ce00:	23 2d       	mov	r18, r3
    ce02:	2f 7e       	andi	r18, 0xEF	; 239
    ce04:	b2 2e       	mov	r11, r18
    ce06:	2a e0       	ldi	r18, 0x0A	; 10
    ce08:	30 e0       	ldi	r19, 0x00	; 0
    ce0a:	25 c0       	rjmp	.+74     	; 0xce56 <vfprintf+0x298>
    ce0c:	93 2d       	mov	r25, r3
    ce0e:	99 7f       	andi	r25, 0xF9	; 249
    ce10:	b9 2e       	mov	r11, r25
    ce12:	8f 36       	cpi	r24, 0x6F	; 111
    ce14:	c1 f0       	breq	.+48     	; 0xce46 <vfprintf+0x288>
    ce16:	18 f4       	brcc	.+6      	; 0xce1e <vfprintf+0x260>
    ce18:	88 35       	cpi	r24, 0x58	; 88
    ce1a:	79 f0       	breq	.+30     	; 0xce3a <vfprintf+0x27c>
    ce1c:	ae c0       	rjmp	.+348    	; 0xcf7a <vfprintf+0x3bc>
    ce1e:	80 37       	cpi	r24, 0x70	; 112
    ce20:	19 f0       	breq	.+6      	; 0xce28 <vfprintf+0x26a>
    ce22:	88 37       	cpi	r24, 0x78	; 120
    ce24:	21 f0       	breq	.+8      	; 0xce2e <vfprintf+0x270>
    ce26:	a9 c0       	rjmp	.+338    	; 0xcf7a <vfprintf+0x3bc>
    ce28:	e9 2f       	mov	r30, r25
    ce2a:	e0 61       	ori	r30, 0x10	; 16
    ce2c:	be 2e       	mov	r11, r30
    ce2e:	b4 fe       	sbrs	r11, 4
    ce30:	0d c0       	rjmp	.+26     	; 0xce4c <vfprintf+0x28e>
    ce32:	fb 2d       	mov	r31, r11
    ce34:	f4 60       	ori	r31, 0x04	; 4
    ce36:	bf 2e       	mov	r11, r31
    ce38:	09 c0       	rjmp	.+18     	; 0xce4c <vfprintf+0x28e>
    ce3a:	34 fe       	sbrs	r3, 4
    ce3c:	0a c0       	rjmp	.+20     	; 0xce52 <vfprintf+0x294>
    ce3e:	29 2f       	mov	r18, r25
    ce40:	26 60       	ori	r18, 0x06	; 6
    ce42:	b2 2e       	mov	r11, r18
    ce44:	06 c0       	rjmp	.+12     	; 0xce52 <vfprintf+0x294>
    ce46:	28 e0       	ldi	r18, 0x08	; 8
    ce48:	30 e0       	ldi	r19, 0x00	; 0
    ce4a:	05 c0       	rjmp	.+10     	; 0xce56 <vfprintf+0x298>
    ce4c:	20 e1       	ldi	r18, 0x10	; 16
    ce4e:	30 e0       	ldi	r19, 0x00	; 0
    ce50:	02 c0       	rjmp	.+4      	; 0xce56 <vfprintf+0x298>
    ce52:	20 e1       	ldi	r18, 0x10	; 16
    ce54:	32 e0       	ldi	r19, 0x02	; 2
    ce56:	f8 01       	movw	r30, r16
    ce58:	b7 fe       	sbrs	r11, 7
    ce5a:	07 c0       	rjmp	.+14     	; 0xce6a <vfprintf+0x2ac>
    ce5c:	60 81       	ld	r22, Z
    ce5e:	71 81       	ldd	r23, Z+1	; 0x01
    ce60:	82 81       	ldd	r24, Z+2	; 0x02
    ce62:	93 81       	ldd	r25, Z+3	; 0x03
    ce64:	0c 5f       	subi	r16, 0xFC	; 252
    ce66:	1f 4f       	sbci	r17, 0xFF	; 255
    ce68:	06 c0       	rjmp	.+12     	; 0xce76 <vfprintf+0x2b8>
    ce6a:	60 81       	ld	r22, Z
    ce6c:	71 81       	ldd	r23, Z+1	; 0x01
    ce6e:	80 e0       	ldi	r24, 0x00	; 0
    ce70:	90 e0       	ldi	r25, 0x00	; 0
    ce72:	0e 5f       	subi	r16, 0xFE	; 254
    ce74:	1f 4f       	sbci	r17, 0xFF	; 255
    ce76:	a3 01       	movw	r20, r6
    ce78:	01 d1       	rcall	.+514    	; 0xd07c <__ultoa_invert>
    ce7a:	88 2e       	mov	r8, r24
    ce7c:	86 18       	sub	r8, r6
    ce7e:	fb 2d       	mov	r31, r11
    ce80:	ff 77       	andi	r31, 0x7F	; 127
    ce82:	3f 2e       	mov	r3, r31
    ce84:	36 fe       	sbrs	r3, 6
    ce86:	0d c0       	rjmp	.+26     	; 0xcea2 <vfprintf+0x2e4>
    ce88:	23 2d       	mov	r18, r3
    ce8a:	2e 7f       	andi	r18, 0xFE	; 254
    ce8c:	a2 2e       	mov	r10, r18
    ce8e:	89 14       	cp	r8, r9
    ce90:	58 f4       	brcc	.+22     	; 0xcea8 <vfprintf+0x2ea>
    ce92:	34 fe       	sbrs	r3, 4
    ce94:	0b c0       	rjmp	.+22     	; 0xceac <vfprintf+0x2ee>
    ce96:	32 fc       	sbrc	r3, 2
    ce98:	09 c0       	rjmp	.+18     	; 0xceac <vfprintf+0x2ee>
    ce9a:	83 2d       	mov	r24, r3
    ce9c:	8e 7e       	andi	r24, 0xEE	; 238
    ce9e:	a8 2e       	mov	r10, r24
    cea0:	05 c0       	rjmp	.+10     	; 0xceac <vfprintf+0x2ee>
    cea2:	b8 2c       	mov	r11, r8
    cea4:	a3 2c       	mov	r10, r3
    cea6:	03 c0       	rjmp	.+6      	; 0xceae <vfprintf+0x2f0>
    cea8:	b8 2c       	mov	r11, r8
    ceaa:	01 c0       	rjmp	.+2      	; 0xceae <vfprintf+0x2f0>
    ceac:	b9 2c       	mov	r11, r9
    ceae:	a4 fe       	sbrs	r10, 4
    ceb0:	0f c0       	rjmp	.+30     	; 0xced0 <vfprintf+0x312>
    ceb2:	fe 01       	movw	r30, r28
    ceb4:	e8 0d       	add	r30, r8
    ceb6:	f1 1d       	adc	r31, r1
    ceb8:	80 81       	ld	r24, Z
    ceba:	80 33       	cpi	r24, 0x30	; 48
    cebc:	21 f4       	brne	.+8      	; 0xcec6 <vfprintf+0x308>
    cebe:	9a 2d       	mov	r25, r10
    cec0:	99 7e       	andi	r25, 0xE9	; 233
    cec2:	a9 2e       	mov	r10, r25
    cec4:	09 c0       	rjmp	.+18     	; 0xced8 <vfprintf+0x31a>
    cec6:	a2 fe       	sbrs	r10, 2
    cec8:	06 c0       	rjmp	.+12     	; 0xced6 <vfprintf+0x318>
    ceca:	b3 94       	inc	r11
    cecc:	b3 94       	inc	r11
    cece:	04 c0       	rjmp	.+8      	; 0xced8 <vfprintf+0x31a>
    ced0:	8a 2d       	mov	r24, r10
    ced2:	86 78       	andi	r24, 0x86	; 134
    ced4:	09 f0       	breq	.+2      	; 0xced8 <vfprintf+0x31a>
    ced6:	b3 94       	inc	r11
    ced8:	a3 fc       	sbrc	r10, 3
    ceda:	10 c0       	rjmp	.+32     	; 0xcefc <vfprintf+0x33e>
    cedc:	a0 fe       	sbrs	r10, 0
    cede:	06 c0       	rjmp	.+12     	; 0xceec <vfprintf+0x32e>
    cee0:	b2 14       	cp	r11, r2
    cee2:	80 f4       	brcc	.+32     	; 0xcf04 <vfprintf+0x346>
    cee4:	28 0c       	add	r2, r8
    cee6:	92 2c       	mov	r9, r2
    cee8:	9b 18       	sub	r9, r11
    ceea:	0d c0       	rjmp	.+26     	; 0xcf06 <vfprintf+0x348>
    ceec:	b2 14       	cp	r11, r2
    ceee:	58 f4       	brcc	.+22     	; 0xcf06 <vfprintf+0x348>
    cef0:	b6 01       	movw	r22, r12
    cef2:	80 e2       	ldi	r24, 0x20	; 32
    cef4:	90 e0       	ldi	r25, 0x00	; 0
    cef6:	86 d0       	rcall	.+268    	; 0xd004 <fputc>
    cef8:	b3 94       	inc	r11
    cefa:	f8 cf       	rjmp	.-16     	; 0xceec <vfprintf+0x32e>
    cefc:	b2 14       	cp	r11, r2
    cefe:	18 f4       	brcc	.+6      	; 0xcf06 <vfprintf+0x348>
    cf00:	2b 18       	sub	r2, r11
    cf02:	02 c0       	rjmp	.+4      	; 0xcf08 <vfprintf+0x34a>
    cf04:	98 2c       	mov	r9, r8
    cf06:	21 2c       	mov	r2, r1
    cf08:	a4 fe       	sbrs	r10, 4
    cf0a:	0f c0       	rjmp	.+30     	; 0xcf2a <vfprintf+0x36c>
    cf0c:	b6 01       	movw	r22, r12
    cf0e:	80 e3       	ldi	r24, 0x30	; 48
    cf10:	90 e0       	ldi	r25, 0x00	; 0
    cf12:	78 d0       	rcall	.+240    	; 0xd004 <fputc>
    cf14:	a2 fe       	sbrs	r10, 2
    cf16:	16 c0       	rjmp	.+44     	; 0xcf44 <vfprintf+0x386>
    cf18:	a1 fc       	sbrc	r10, 1
    cf1a:	03 c0       	rjmp	.+6      	; 0xcf22 <vfprintf+0x364>
    cf1c:	88 e7       	ldi	r24, 0x78	; 120
    cf1e:	90 e0       	ldi	r25, 0x00	; 0
    cf20:	02 c0       	rjmp	.+4      	; 0xcf26 <vfprintf+0x368>
    cf22:	88 e5       	ldi	r24, 0x58	; 88
    cf24:	90 e0       	ldi	r25, 0x00	; 0
    cf26:	b6 01       	movw	r22, r12
    cf28:	0c c0       	rjmp	.+24     	; 0xcf42 <vfprintf+0x384>
    cf2a:	8a 2d       	mov	r24, r10
    cf2c:	86 78       	andi	r24, 0x86	; 134
    cf2e:	51 f0       	breq	.+20     	; 0xcf44 <vfprintf+0x386>
    cf30:	a1 fe       	sbrs	r10, 1
    cf32:	02 c0       	rjmp	.+4      	; 0xcf38 <vfprintf+0x37a>
    cf34:	8b e2       	ldi	r24, 0x2B	; 43
    cf36:	01 c0       	rjmp	.+2      	; 0xcf3a <vfprintf+0x37c>
    cf38:	80 e2       	ldi	r24, 0x20	; 32
    cf3a:	a7 fc       	sbrc	r10, 7
    cf3c:	8d e2       	ldi	r24, 0x2D	; 45
    cf3e:	b6 01       	movw	r22, r12
    cf40:	90 e0       	ldi	r25, 0x00	; 0
    cf42:	60 d0       	rcall	.+192    	; 0xd004 <fputc>
    cf44:	89 14       	cp	r8, r9
    cf46:	30 f4       	brcc	.+12     	; 0xcf54 <vfprintf+0x396>
    cf48:	b6 01       	movw	r22, r12
    cf4a:	80 e3       	ldi	r24, 0x30	; 48
    cf4c:	90 e0       	ldi	r25, 0x00	; 0
    cf4e:	5a d0       	rcall	.+180    	; 0xd004 <fputc>
    cf50:	9a 94       	dec	r9
    cf52:	f8 cf       	rjmp	.-16     	; 0xcf44 <vfprintf+0x386>
    cf54:	8a 94       	dec	r8
    cf56:	f3 01       	movw	r30, r6
    cf58:	e8 0d       	add	r30, r8
    cf5a:	f1 1d       	adc	r31, r1
    cf5c:	80 81       	ld	r24, Z
    cf5e:	b6 01       	movw	r22, r12
    cf60:	90 e0       	ldi	r25, 0x00	; 0
    cf62:	50 d0       	rcall	.+160    	; 0xd004 <fputc>
    cf64:	81 10       	cpse	r8, r1
    cf66:	f6 cf       	rjmp	.-20     	; 0xcf54 <vfprintf+0x396>
    cf68:	22 20       	and	r2, r2
    cf6a:	09 f4       	brne	.+2      	; 0xcf6e <vfprintf+0x3b0>
    cf6c:	4e ce       	rjmp	.-868    	; 0xcc0a <vfprintf+0x4c>
    cf6e:	b6 01       	movw	r22, r12
    cf70:	80 e2       	ldi	r24, 0x20	; 32
    cf72:	90 e0       	ldi	r25, 0x00	; 0
    cf74:	47 d0       	rcall	.+142    	; 0xd004 <fputc>
    cf76:	2a 94       	dec	r2
    cf78:	f7 cf       	rjmp	.-18     	; 0xcf68 <vfprintf+0x3aa>
    cf7a:	f6 01       	movw	r30, r12
    cf7c:	86 81       	ldd	r24, Z+6	; 0x06
    cf7e:	97 81       	ldd	r25, Z+7	; 0x07
    cf80:	02 c0       	rjmp	.+4      	; 0xcf86 <vfprintf+0x3c8>
    cf82:	8f ef       	ldi	r24, 0xFF	; 255
    cf84:	9f ef       	ldi	r25, 0xFF	; 255
    cf86:	2b 96       	adiw	r28, 0x0b	; 11
    cf88:	0f b6       	in	r0, 0x3f	; 63
    cf8a:	f8 94       	cli
    cf8c:	de bf       	out	0x3e, r29	; 62
    cf8e:	0f be       	out	0x3f, r0	; 63
    cf90:	cd bf       	out	0x3d, r28	; 61
    cf92:	df 91       	pop	r29
    cf94:	cf 91       	pop	r28
    cf96:	1f 91       	pop	r17
    cf98:	0f 91       	pop	r16
    cf9a:	ff 90       	pop	r15
    cf9c:	ef 90       	pop	r14
    cf9e:	df 90       	pop	r13
    cfa0:	cf 90       	pop	r12
    cfa2:	bf 90       	pop	r11
    cfa4:	af 90       	pop	r10
    cfa6:	9f 90       	pop	r9
    cfa8:	8f 90       	pop	r8
    cfaa:	7f 90       	pop	r7
    cfac:	6f 90       	pop	r6
    cfae:	5f 90       	pop	r5
    cfb0:	4f 90       	pop	r4
    cfb2:	3f 90       	pop	r3
    cfb4:	2f 90       	pop	r2
    cfb6:	08 95       	ret

0000cfb8 <strnlen_P>:
    cfb8:	fc 01       	movw	r30, r24
    cfba:	05 90       	lpm	r0, Z+
    cfbc:	61 50       	subi	r22, 0x01	; 1
    cfbe:	70 40       	sbci	r23, 0x00	; 0
    cfc0:	01 10       	cpse	r0, r1
    cfc2:	d8 f7       	brcc	.-10     	; 0xcfba <strnlen_P+0x2>
    cfc4:	80 95       	com	r24
    cfc6:	90 95       	com	r25
    cfc8:	8e 0f       	add	r24, r30
    cfca:	9f 1f       	adc	r25, r31
    cfcc:	08 95       	ret

0000cfce <strnlen>:
    cfce:	fc 01       	movw	r30, r24
    cfd0:	61 50       	subi	r22, 0x01	; 1
    cfd2:	70 40       	sbci	r23, 0x00	; 0
    cfd4:	01 90       	ld	r0, Z+
    cfd6:	01 10       	cpse	r0, r1
    cfd8:	d8 f7       	brcc	.-10     	; 0xcfd0 <strnlen+0x2>
    cfda:	80 95       	com	r24
    cfdc:	90 95       	com	r25
    cfde:	8e 0f       	add	r24, r30
    cfe0:	9f 1f       	adc	r25, r31
    cfe2:	08 95       	ret

0000cfe4 <strrev>:
    cfe4:	dc 01       	movw	r26, r24
    cfe6:	fc 01       	movw	r30, r24
    cfe8:	67 2f       	mov	r22, r23
    cfea:	71 91       	ld	r23, Z+
    cfec:	77 23       	and	r23, r23
    cfee:	e1 f7       	brne	.-8      	; 0xcfe8 <strrev+0x4>
    cff0:	32 97       	sbiw	r30, 0x02	; 2
    cff2:	04 c0       	rjmp	.+8      	; 0xcffc <strrev+0x18>
    cff4:	7c 91       	ld	r23, X
    cff6:	6d 93       	st	X+, r22
    cff8:	70 83       	st	Z, r23
    cffa:	62 91       	ld	r22, -Z
    cffc:	ae 17       	cp	r26, r30
    cffe:	bf 07       	cpc	r27, r31
    d000:	c8 f3       	brcs	.-14     	; 0xcff4 <strrev+0x10>
    d002:	08 95       	ret

0000d004 <fputc>:
    d004:	0f 93       	push	r16
    d006:	1f 93       	push	r17
    d008:	cf 93       	push	r28
    d00a:	df 93       	push	r29
    d00c:	fb 01       	movw	r30, r22
    d00e:	23 81       	ldd	r18, Z+3	; 0x03
    d010:	21 fd       	sbrc	r18, 1
    d012:	03 c0       	rjmp	.+6      	; 0xd01a <fputc+0x16>
    d014:	8f ef       	ldi	r24, 0xFF	; 255
    d016:	9f ef       	ldi	r25, 0xFF	; 255
    d018:	2c c0       	rjmp	.+88     	; 0xd072 <fputc+0x6e>
    d01a:	22 ff       	sbrs	r18, 2
    d01c:	16 c0       	rjmp	.+44     	; 0xd04a <fputc+0x46>
    d01e:	46 81       	ldd	r20, Z+6	; 0x06
    d020:	57 81       	ldd	r21, Z+7	; 0x07
    d022:	24 81       	ldd	r18, Z+4	; 0x04
    d024:	35 81       	ldd	r19, Z+5	; 0x05
    d026:	42 17       	cp	r20, r18
    d028:	53 07       	cpc	r21, r19
    d02a:	44 f4       	brge	.+16     	; 0xd03c <fputc+0x38>
    d02c:	a0 81       	ld	r26, Z
    d02e:	b1 81       	ldd	r27, Z+1	; 0x01
    d030:	9d 01       	movw	r18, r26
    d032:	2f 5f       	subi	r18, 0xFF	; 255
    d034:	3f 4f       	sbci	r19, 0xFF	; 255
    d036:	31 83       	std	Z+1, r19	; 0x01
    d038:	20 83       	st	Z, r18
    d03a:	8c 93       	st	X, r24
    d03c:	26 81       	ldd	r18, Z+6	; 0x06
    d03e:	37 81       	ldd	r19, Z+7	; 0x07
    d040:	2f 5f       	subi	r18, 0xFF	; 255
    d042:	3f 4f       	sbci	r19, 0xFF	; 255
    d044:	37 83       	std	Z+7, r19	; 0x07
    d046:	26 83       	std	Z+6, r18	; 0x06
    d048:	14 c0       	rjmp	.+40     	; 0xd072 <fputc+0x6e>
    d04a:	8b 01       	movw	r16, r22
    d04c:	ec 01       	movw	r28, r24
    d04e:	fb 01       	movw	r30, r22
    d050:	00 84       	ldd	r0, Z+8	; 0x08
    d052:	f1 85       	ldd	r31, Z+9	; 0x09
    d054:	e0 2d       	mov	r30, r0
    d056:	19 95       	eicall
    d058:	89 2b       	or	r24, r25
    d05a:	e1 f6       	brne	.-72     	; 0xd014 <fputc+0x10>
    d05c:	d8 01       	movw	r26, r16
    d05e:	16 96       	adiw	r26, 0x06	; 6
    d060:	8d 91       	ld	r24, X+
    d062:	9c 91       	ld	r25, X
    d064:	17 97       	sbiw	r26, 0x07	; 7
    d066:	01 96       	adiw	r24, 0x01	; 1
    d068:	17 96       	adiw	r26, 0x07	; 7
    d06a:	9c 93       	st	X, r25
    d06c:	8e 93       	st	-X, r24
    d06e:	16 97       	sbiw	r26, 0x06	; 6
    d070:	ce 01       	movw	r24, r28
    d072:	df 91       	pop	r29
    d074:	cf 91       	pop	r28
    d076:	1f 91       	pop	r17
    d078:	0f 91       	pop	r16
    d07a:	08 95       	ret

0000d07c <__ultoa_invert>:
    d07c:	fa 01       	movw	r30, r20
    d07e:	aa 27       	eor	r26, r26
    d080:	28 30       	cpi	r18, 0x08	; 8
    d082:	51 f1       	breq	.+84     	; 0xd0d8 <__ultoa_invert+0x5c>
    d084:	20 31       	cpi	r18, 0x10	; 16
    d086:	81 f1       	breq	.+96     	; 0xd0e8 <__ultoa_invert+0x6c>
    d088:	e8 94       	clt
    d08a:	6f 93       	push	r22
    d08c:	6e 7f       	andi	r22, 0xFE	; 254
    d08e:	6e 5f       	subi	r22, 0xFE	; 254
    d090:	7f 4f       	sbci	r23, 0xFF	; 255
    d092:	8f 4f       	sbci	r24, 0xFF	; 255
    d094:	9f 4f       	sbci	r25, 0xFF	; 255
    d096:	af 4f       	sbci	r26, 0xFF	; 255
    d098:	b1 e0       	ldi	r27, 0x01	; 1
    d09a:	3e d0       	rcall	.+124    	; 0xd118 <__ultoa_invert+0x9c>
    d09c:	b4 e0       	ldi	r27, 0x04	; 4
    d09e:	3c d0       	rcall	.+120    	; 0xd118 <__ultoa_invert+0x9c>
    d0a0:	67 0f       	add	r22, r23
    d0a2:	78 1f       	adc	r23, r24
    d0a4:	89 1f       	adc	r24, r25
    d0a6:	9a 1f       	adc	r25, r26
    d0a8:	a1 1d       	adc	r26, r1
    d0aa:	68 0f       	add	r22, r24
    d0ac:	79 1f       	adc	r23, r25
    d0ae:	8a 1f       	adc	r24, r26
    d0b0:	91 1d       	adc	r25, r1
    d0b2:	a1 1d       	adc	r26, r1
    d0b4:	6a 0f       	add	r22, r26
    d0b6:	71 1d       	adc	r23, r1
    d0b8:	81 1d       	adc	r24, r1
    d0ba:	91 1d       	adc	r25, r1
    d0bc:	a1 1d       	adc	r26, r1
    d0be:	20 d0       	rcall	.+64     	; 0xd100 <__ultoa_invert+0x84>
    d0c0:	09 f4       	brne	.+2      	; 0xd0c4 <__ultoa_invert+0x48>
    d0c2:	68 94       	set
    d0c4:	3f 91       	pop	r19
    d0c6:	2a e0       	ldi	r18, 0x0A	; 10
    d0c8:	26 9f       	mul	r18, r22
    d0ca:	11 24       	eor	r1, r1
    d0cc:	30 19       	sub	r19, r0
    d0ce:	30 5d       	subi	r19, 0xD0	; 208
    d0d0:	31 93       	st	Z+, r19
    d0d2:	de f6       	brtc	.-74     	; 0xd08a <__ultoa_invert+0xe>
    d0d4:	cf 01       	movw	r24, r30
    d0d6:	08 95       	ret
    d0d8:	46 2f       	mov	r20, r22
    d0da:	47 70       	andi	r20, 0x07	; 7
    d0dc:	40 5d       	subi	r20, 0xD0	; 208
    d0de:	41 93       	st	Z+, r20
    d0e0:	b3 e0       	ldi	r27, 0x03	; 3
    d0e2:	0f d0       	rcall	.+30     	; 0xd102 <__ultoa_invert+0x86>
    d0e4:	c9 f7       	brne	.-14     	; 0xd0d8 <__ultoa_invert+0x5c>
    d0e6:	f6 cf       	rjmp	.-20     	; 0xd0d4 <__ultoa_invert+0x58>
    d0e8:	46 2f       	mov	r20, r22
    d0ea:	4f 70       	andi	r20, 0x0F	; 15
    d0ec:	40 5d       	subi	r20, 0xD0	; 208
    d0ee:	4a 33       	cpi	r20, 0x3A	; 58
    d0f0:	18 f0       	brcs	.+6      	; 0xd0f8 <__ultoa_invert+0x7c>
    d0f2:	49 5d       	subi	r20, 0xD9	; 217
    d0f4:	31 fd       	sbrc	r19, 1
    d0f6:	40 52       	subi	r20, 0x20	; 32
    d0f8:	41 93       	st	Z+, r20
    d0fa:	02 d0       	rcall	.+4      	; 0xd100 <__ultoa_invert+0x84>
    d0fc:	a9 f7       	brne	.-22     	; 0xd0e8 <__ultoa_invert+0x6c>
    d0fe:	ea cf       	rjmp	.-44     	; 0xd0d4 <__ultoa_invert+0x58>
    d100:	b4 e0       	ldi	r27, 0x04	; 4
    d102:	a6 95       	lsr	r26
    d104:	97 95       	ror	r25
    d106:	87 95       	ror	r24
    d108:	77 95       	ror	r23
    d10a:	67 95       	ror	r22
    d10c:	ba 95       	dec	r27
    d10e:	c9 f7       	brne	.-14     	; 0xd102 <__ultoa_invert+0x86>
    d110:	00 97       	sbiw	r24, 0x00	; 0
    d112:	61 05       	cpc	r22, r1
    d114:	71 05       	cpc	r23, r1
    d116:	08 95       	ret
    d118:	9b 01       	movw	r18, r22
    d11a:	ac 01       	movw	r20, r24
    d11c:	0a 2e       	mov	r0, r26
    d11e:	06 94       	lsr	r0
    d120:	57 95       	ror	r21
    d122:	47 95       	ror	r20
    d124:	37 95       	ror	r19
    d126:	27 95       	ror	r18
    d128:	ba 95       	dec	r27
    d12a:	c9 f7       	brne	.-14     	; 0xd11e <__ultoa_invert+0xa2>
    d12c:	62 0f       	add	r22, r18
    d12e:	73 1f       	adc	r23, r19
    d130:	84 1f       	adc	r24, r20
    d132:	95 1f       	adc	r25, r21
    d134:	a0 1d       	adc	r26, r0
    d136:	08 95       	ret

0000d138 <__mulshisi3>:
    d138:	b7 ff       	sbrs	r27, 7
    d13a:	59 c9       	rjmp	.-3406   	; 0xc3ee <__muluhisi3>

0000d13c <__mulohisi3>:
    d13c:	58 d9       	rcall	.-3408   	; 0xc3ee <__muluhisi3>
    d13e:	82 1b       	sub	r24, r18
    d140:	93 0b       	sbc	r25, r19
    d142:	08 95       	ret

0000d144 <__do_global_dtors>:
    d144:	17 e1       	ldi	r17, 0x17	; 23
    d146:	c1 ef       	ldi	r28, 0xF1	; 241
    d148:	d7 e1       	ldi	r29, 0x17	; 23
    d14a:	00 e0       	ldi	r16, 0x00	; 0
    d14c:	05 c0       	rjmp	.+10     	; 0xd158 <__do_global_dtors+0x14>
    d14e:	80 2f       	mov	r24, r16
    d150:	fe 01       	movw	r30, r28
    d152:	45 d9       	rcall	.-3446   	; 0xc3de <__tablejump2__>
    d154:	21 96       	adiw	r28, 0x01	; 1
    d156:	01 1d       	adc	r16, r1
    d158:	c3 3f       	cpi	r28, 0xF3	; 243
    d15a:	d1 07       	cpc	r29, r17
    d15c:	80 e0       	ldi	r24, 0x00	; 0
    d15e:	08 07       	cpc	r16, r24
    d160:	b1 f7       	brne	.-20     	; 0xd14e <__do_global_dtors+0xa>
    d162:	f8 94       	cli

0000d164 <__stop_program>:
    d164:	ff cf       	rjmp	.-2      	; 0xd164 <__stop_program>
